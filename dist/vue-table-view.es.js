var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value6) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value: value6 }) : obj[key] = value6;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __publicField = (obj, key, value6) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value6);
  return value6;
};
function getAugmentedNamespace(n) {
  if (n.__esModule)
    return n;
  var a = Object.defineProperty({}, "__esModule", { value: true });
  Object.keys(n).forEach(function(k) {
    var d = Object.getOwnPropertyDescriptor(n, k);
    Object.defineProperty(a, k, d.get ? d : {
      enumerable: true,
      get: function() {
        return n[k];
      }
    });
  });
  return a;
}
var index_common = {};
var all = {};
var setupDefaults$a = {
  cookies: {
    path: "/"
  },
  treeOptions: {
    parentKey: "parentId",
    key: "id",
    children: "children"
  },
  parseDateFormat: "yyyy-MM-dd HH:mm:ss",
  firstDayOfWeek: 1,
  dateDiffRules: [
    ["yyyy", 31536e6],
    ["MM", 2592e6],
    ["dd", 864e5],
    ["HH", 36e5],
    ["mm", 6e4],
    ["ss", 1e3],
    ["S", 0]
  ]
};
var setupDefaults_1 = setupDefaults$a;
function arrayEach$f(list2, iterate, context) {
  if (list2) {
    if (list2.forEach) {
      list2.forEach(iterate, context);
    } else {
      for (var index2 = 0, len = list2.length; index2 < len; index2++) {
        iterate.call(context, list2[index2], index2, list2);
      }
    }
  }
}
var arrayEach_1 = arrayEach$f;
var objectToString$3 = Object.prototype.toString;
var staticObjectToString = objectToString$3;
var objectToString$2 = staticObjectToString;
function helperCreateInInObjectString$5(type3) {
  return function(obj) {
    return "[object " + type3 + "]" === objectToString$2.call(obj);
  };
}
var helperCreateInInObjectString_1 = helperCreateInInObjectString$5;
var helperCreateInInObjectString$4 = helperCreateInInObjectString_1;
var isArray$u = Array.isArray || helperCreateInInObjectString$4("Array");
var isArray_1 = isArray$u;
function hasOwnProp$a(obj, key) {
  return obj && obj.hasOwnProperty ? obj.hasOwnProperty(key) : false;
}
var hasOwnProp_1 = hasOwnProp$a;
var hasOwnProp$9 = hasOwnProp_1;
function objectEach$5(obj, iterate, context) {
  if (obj) {
    for (var key in obj) {
      if (hasOwnProp$9(obj, key)) {
        iterate.call(context, obj[key], key, obj);
      }
    }
  }
}
var objectEach_1 = objectEach$5;
var isArray$t = isArray_1;
var arrayEach$e = arrayEach_1;
var objectEach$4 = objectEach_1;
function each$j(obj, iterate, context) {
  if (obj) {
    return (isArray$t(obj) ? arrayEach$e : objectEach$4)(obj, iterate, context);
  }
  return obj;
}
var each_1 = each$j;
function helperCreateInTypeof$6(type3) {
  return function(obj) {
    return typeof obj === type3;
  };
}
var helperCreateInTypeof_1 = helperCreateInTypeof$6;
var helperCreateInTypeof$5 = helperCreateInTypeof_1;
var isFunction$e = helperCreateInTypeof$5("function");
var isFunction_1 = isFunction$e;
var each$i = each_1;
function helperCreateGetObjects$3(name, getIndex) {
  var proMethod = Object[name];
  return function(obj) {
    var result = [];
    if (obj) {
      if (proMethod) {
        return proMethod(obj);
      }
      each$i(obj, getIndex > 1 ? function(key) {
        result.push(["" + key, obj[key]]);
      } : function() {
        result.push(arguments[getIndex]);
      });
    }
    return result;
  };
}
var helperCreateGetObjects_1 = helperCreateGetObjects$3;
var helperCreateGetObjects$2 = helperCreateGetObjects_1;
var keys$b = helperCreateGetObjects$2("keys", 1);
var keys_1 = keys$b;
var objectToString$1 = staticObjectToString;
var objectEach$3 = objectEach_1;
var arrayEach$d = arrayEach_1;
function getCativeCtor(val, args) {
  var Ctor = val.__proto__.constructor;
  return args ? new Ctor(args) : new Ctor();
}
function handleValueClone(item, isDeep) {
  return isDeep ? copyValue(item, isDeep) : item;
}
function copyValue(val, isDeep) {
  if (val) {
    switch (objectToString$1.call(val)) {
      case "[object Object]": {
        var restObj = Object.create(val.__proto__);
        objectEach$3(val, function(item, key) {
          restObj[key] = handleValueClone(item, isDeep);
        });
        return restObj;
      }
      case "[object Date]":
      case "[object RegExp]": {
        return getCativeCtor(val, val.valueOf());
      }
      case "[object Array]":
      case "[object Arguments]": {
        var restArr = [];
        arrayEach$d(val, function(item) {
          restArr.push(handleValueClone(item, isDeep));
        });
        return restArr;
      }
      case "[object Set]": {
        var restSet = getCativeCtor(val);
        restSet.forEach(function(item) {
          restSet.add(handleValueClone(item, isDeep));
        });
        return restSet;
      }
      case "[object Map]": {
        var restMap = getCativeCtor(val);
        restMap.forEach(function(item, key) {
          restMap.set(handleValueClone(item, isDeep));
        });
        return restMap;
      }
    }
  }
  return val;
}
function clone$3(obj, deep) {
  if (obj) {
    return copyValue(obj, deep);
  }
  return obj;
}
var clone_1 = clone$3;
var arrayEach$c = arrayEach_1;
var keys$a = keys_1;
var isArray$s = isArray_1;
var clone$2 = clone_1;
var objectAssignFns = Object.assign;
function handleAssign(destination, args, isClone) {
  var len = args.length;
  for (var source, index2 = 1; index2 < len; index2++) {
    source = args[index2];
    arrayEach$c(keys$a(args[index2]), isClone ? function(key) {
      destination[key] = clone$2(source[key], isClone);
    } : function(key) {
      destination[key] = source[key];
    });
  }
  return destination;
}
var assign$d = function(target2) {
  if (target2) {
    var args = arguments;
    if (target2 === true) {
      if (args.length > 1) {
        target2 = isArray$s(target2[1]) ? [] : {};
        return handleAssign(target2, args, true);
      }
    } else {
      return objectAssignFns ? objectAssignFns.apply(Object, args) : handleAssign(target2, args);
    }
  }
  return target2;
};
var assign_1 = assign$d;
var setupDefaults$9 = setupDefaults_1;
var arrayEach$b = arrayEach_1;
var each$h = each_1;
var isFunction$d = isFunction_1;
var assign$c = assign_1;
var XEUtils$1 = function() {
};
function mixin$6() {
  arrayEach$b(arguments, function(methods2) {
    each$h(methods2, function(fn, name) {
      XEUtils$1[name] = isFunction$d(fn) ? function() {
        var result = fn.apply(XEUtils$1.$context, arguments);
        XEUtils$1.$context = null;
        return result;
      } : fn;
    });
  });
}
function setup$2(options2) {
  return assign$c(setupDefaults$9, options2);
}
XEUtils$1.VERSION = "3.5.3";
XEUtils$1.mixin = mixin$6;
XEUtils$1.setup = setup$2;
var ctor = XEUtils$1;
function lastArrayEach$3(obj, iterate, context) {
  for (var len = obj.length - 1; len >= 0; len--) {
    iterate.call(context, obj[len], len, obj);
  }
}
var lastArrayEach_1 = lastArrayEach$3;
var lastArrayEach$2 = lastArrayEach_1;
var keys$9 = keys_1;
function lastObjectEach$2(obj, iterate, context) {
  lastArrayEach$2(keys$9(obj), function(key) {
    iterate.call(context, obj[key], key, obj);
  });
}
var lastObjectEach_1 = lastObjectEach$2;
function isNull$9(obj) {
  return obj === null;
}
var isNull_1 = isNull$9;
var isNull$8 = isNull_1;
function property$5(name, defs) {
  return function(obj) {
    return isNull$8(obj) ? defs : obj[name];
  };
}
var property_1 = property$5;
var each$g = each_1;
var isFunction$c = isFunction_1;
var property$4 = property_1;
function objectMap$1(obj, iterate, context) {
  var result = {};
  if (obj) {
    if (iterate) {
      if (!isFunction$c(iterate)) {
        iterate = property$4(iterate);
      }
      each$g(obj, function(val, index2) {
        result[index2] = iterate.call(context, val, index2, obj);
      });
    } else {
      return obj;
    }
  }
  return result;
}
var objectMap_1 = objectMap$1;
function isPlainObject$8(obj) {
  return obj ? obj.constructor === Object : false;
}
var isPlainObject_1 = isPlainObject$8;
var isArray$r = isArray_1;
var isPlainObject$7 = isPlainObject_1;
var each$f = each_1;
function handleMerge(target2, source) {
  if (isPlainObject$7(target2) && isPlainObject$7(source) || isArray$r(target2) && isArray$r(source)) {
    each$f(source, function(obj, key) {
      target2[key] = handleMerge(target2[key], obj);
    });
    return target2;
  }
  return source;
}
var merge$4 = function(target2) {
  if (!target2) {
    target2 = {};
  }
  var args = arguments;
  var len = args.length;
  for (var source, index2 = 1; index2 < len; index2++) {
    source = args[index2];
    if (source) {
      handleMerge(target2, source);
    }
  }
  return target2;
};
var merge_1 = merge$4;
var each$e = each_1;
function map$7(obj, iterate, context) {
  var result = [];
  if (obj && arguments.length > 1) {
    if (obj.map) {
      return obj.map(iterate, context);
    } else {
      each$e(obj, function() {
        result.push(iterate.apply(context, arguments));
      });
    }
  }
  return result;
}
var map_1 = map$7;
var hasOwnProp$8 = hasOwnProp_1;
var isArray$q = isArray_1;
function helperCreateIterateHandle$4(prop, useArray, restIndex, matchValue, defaultValue) {
  return function(obj, iterate, context) {
    if (obj && iterate) {
      if (prop && obj[prop]) {
        return obj[prop](iterate, context);
      } else {
        if (useArray && isArray$q(obj)) {
          for (var index2 = 0, len = obj.length; index2 < len; index2++) {
            if (!!iterate.call(context, obj[index2], index2, obj) === matchValue) {
              return [true, false, index2, obj[index2]][restIndex];
            }
          }
        } else {
          for (var key in obj) {
            if (hasOwnProp$8(obj, key)) {
              if (!!iterate.call(context, obj[key], key, obj) === matchValue) {
                return [true, false, key, obj[key]][restIndex];
              }
            }
          }
        }
      }
    }
    return defaultValue;
  };
}
var helperCreateIterateHandle_1 = helperCreateIterateHandle$4;
var helperCreateIterateHandle$3 = helperCreateIterateHandle_1;
var some$2 = helperCreateIterateHandle$3("some", 1, 0, true, false);
var some_1 = some$2;
var helperCreateIterateHandle$2 = helperCreateIterateHandle_1;
var every$2 = helperCreateIterateHandle$2("every", 1, 1, false, true);
var every_1 = every$2;
var hasOwnProp$7 = hasOwnProp_1;
function includes$6(obj, val) {
  if (obj) {
    if (obj.includes) {
      return obj.includes(val);
    }
    for (var key in obj) {
      if (hasOwnProp$7(obj, key)) {
        if (val === obj[key]) {
          return true;
        }
      }
    }
  }
  return false;
}
var includes_1 = includes$6;
var isArray$p = isArray_1;
var includes$5 = includes_1;
function includeArrays$2(array1, array22) {
  var len;
  var index2 = 0;
  if (isArray$p(array1) && isArray$p(array22)) {
    for (len = array22.length; index2 < len; index2++) {
      if (!includes$5(array1, array22[index2])) {
        return false;
      }
    }
    return true;
  }
  return includes$5(array1, array22);
}
var includeArrays_1 = includeArrays$2;
var each$d = each_1;
var includes$4 = includes_1;
function uniq$2(array3) {
  var result = [];
  each$d(array3, function(value6) {
    if (!includes$4(result, value6)) {
      result.push(value6);
    }
  });
  return result;
}
var uniq_1 = uniq$2;
var map$6 = map_1;
function toArray$4(list2) {
  return map$6(list2, function(item) {
    return item;
  });
}
var toArray_1 = toArray$4;
var uniq$1 = uniq_1;
var toArray$3 = toArray_1;
function union$1() {
  var args = arguments;
  var result = [];
  var index2 = 0;
  var len = args.length;
  for (; index2 < len; index2++) {
    result = result.concat(toArray$3(args[index2]));
  }
  return uniq$1(result);
}
var union_1 = union$1;
var staticStrUndefined$b = "undefined";
var staticStrUndefined_1 = staticStrUndefined$b;
var staticStrUndefined$a = staticStrUndefined_1;
var helperCreateInTypeof$4 = helperCreateInTypeof_1;
var isUndefined$a = helperCreateInTypeof$4(staticStrUndefined$a);
var isUndefined_1 = isUndefined$a;
var isNull$7 = isNull_1;
var isUndefined$9 = isUndefined_1;
function eqNull$7(obj) {
  return isNull$7(obj) || isUndefined$9(obj);
}
var eqNull_1 = eqNull$7;
var staticHGKeyRE$2 = /(.+)?\[(\d+)\]$/;
var staticHGKeyRE_1 = staticHGKeyRE$2;
function helperGetHGSKeys$3(property2) {
  return property2 ? property2.splice && property2.join ? property2 : ("" + property2).replace(/(\[\d+\])\.?/g, "$1.").replace(/\.$/, "").split(".") : [];
}
var helperGetHGSKeys_1 = helperGetHGSKeys$3;
var staticHGKeyRE$1 = staticHGKeyRE_1;
var helperGetHGSKeys$2 = helperGetHGSKeys_1;
var hasOwnProp$6 = hasOwnProp_1;
var isUndefined$8 = isUndefined_1;
var eqNull$6 = eqNull_1;
function get$5(obj, property2, defaultValue) {
  if (eqNull$6(obj)) {
    return defaultValue;
  }
  var result = getValueByPath(obj, property2);
  return isUndefined$8(result) ? defaultValue : result;
}
function getDeepProps(obj, key) {
  var matchs = key ? key.match(staticHGKeyRE$1) : "";
  return matchs ? matchs[1] ? obj[matchs[1]] ? obj[matchs[1]][matchs[2]] : void 0 : obj[matchs[2]] : obj[key];
}
function getValueByPath(obj, property2) {
  if (obj) {
    var rest, props2, len;
    var index2 = 0;
    if (obj[property2] || hasOwnProp$6(obj, property2)) {
      return obj[property2];
    } else {
      props2 = helperGetHGSKeys$2(property2);
      len = props2.length;
      if (len) {
        for (rest = obj; index2 < len; index2++) {
          rest = getDeepProps(rest, props2[index2]);
          if (eqNull$6(rest)) {
            if (index2 === len - 1) {
              return rest;
            }
            return;
          }
        }
      }
      return rest;
    }
  }
}
var get_1 = get$5;
var arrayEach$a = arrayEach_1;
var toArray$2 = toArray_1;
var map$5 = map_1;
var isArray$o = isArray_1;
var isFunction$b = isFunction_1;
var isPlainObject$6 = isPlainObject_1;
var isUndefined$7 = isUndefined_1;
var isNull$6 = isNull_1;
var eqNull$5 = eqNull_1;
var get$4 = get_1;
var property$3 = property_1;
var ORDER_PROP_ASC = "asc";
var ORDER_PROP_DESC = "desc";
function handleSort(v1, v2) {
  if (isUndefined$7(v1)) {
    return 1;
  }
  if (isNull$6(v1)) {
    return isUndefined$7(v2) ? -1 : 1;
  }
  return v1 && v1.localeCompare ? v1.localeCompare(v2) : v1 > v2 ? 1 : -1;
}
function buildMultiOrders(name, confs, compares) {
  return function(item1, item2) {
    var v1 = item1[name];
    var v2 = item2[name];
    if (v1 === v2) {
      return compares ? compares(item1, item2) : 0;
    }
    return confs.order === ORDER_PROP_DESC ? handleSort(v2, v1) : handleSort(v1, v2);
  };
}
function getSortConfs(arr, list2, fieldConfs, context) {
  var sortConfs = [];
  fieldConfs = isArray$o(fieldConfs) ? fieldConfs : [fieldConfs];
  arrayEach$a(fieldConfs, function(handle, index2) {
    if (handle) {
      var field = handle;
      var order;
      if (isArray$o(handle)) {
        field = handle[0];
        order = handle[1];
      } else if (isPlainObject$6(handle)) {
        field = handle.field;
        order = handle.order;
      }
      sortConfs.push({
        field,
        order: order || ORDER_PROP_ASC
      });
      arrayEach$a(list2, isFunction$b(field) ? function(item, key) {
        item[index2] = field.call(context, item.data, key, arr);
      } : function(item) {
        item[index2] = field ? get$4(item.data, field) : item.data;
      });
    }
  });
  return sortConfs;
}
function orderBy$3(arr, fieldConfs, context) {
  if (arr) {
    if (eqNull$5(fieldConfs)) {
      return toArray$2(arr).sort(handleSort);
    }
    var compares;
    var list2 = map$5(arr, function(item) {
      return { data: item };
    });
    var sortConfs = getSortConfs(arr, list2, fieldConfs, context);
    var len = sortConfs.length - 1;
    while (len >= 0) {
      compares = buildMultiOrders(len, sortConfs[len], compares);
      len--;
    }
    if (compares) {
      list2 = list2.sort(compares);
    }
    return map$5(list2, property$3("data"));
  }
  return [];
}
var orderBy_1 = orderBy$3;
var orderBy$2 = orderBy_1;
var sortBy$1 = orderBy$2;
var sortBy_1 = sortBy$1;
function random$2(minVal, maxVal) {
  return minVal >= maxVal ? minVal : (minVal = minVal >> 0) + Math.round(Math.random() * ((maxVal || 9) - minVal));
}
var random_1 = random$2;
var helperCreateGetObjects$1 = helperCreateGetObjects_1;
var values$6 = helperCreateGetObjects$1("values", 0);
var values_1 = values$6;
var random$1 = random_1;
var values$5 = values_1;
function shuffle$2(array3) {
  var index2;
  var result = [];
  var list2 = values$5(array3);
  var len = list2.length - 1;
  for (; len >= 0; len--) {
    index2 = len > 0 ? random$1(0, len) : 0;
    result.push(list2[index2]);
    list2.splice(index2, 1);
  }
  return result;
}
var shuffle_1 = shuffle$2;
var shuffle$1 = shuffle_1;
function sample$1(array3, number3) {
  var result = shuffle$1(array3);
  if (arguments.length <= 1) {
    return result[0];
  }
  if (number3 < result.length) {
    result.length = number3 || 0;
  }
  return result;
}
var sample_1 = sample$1;
function helperCreateToNumber$2(handle) {
  return function(str) {
    if (str) {
      var num = handle(str);
      if (!isNaN(num)) {
        return num;
      }
    }
    return 0;
  };
}
var helperCreateToNumber_1 = helperCreateToNumber$2;
var helperCreateToNumber$1 = helperCreateToNumber_1;
var toNumber$9 = helperCreateToNumber$1(parseFloat);
var toNumber_1 = toNumber$9;
var toNumber$8 = toNumber_1;
function slice$7(array3, startIndex, endIndex) {
  var result = [];
  var argsSize = arguments.length;
  if (array3) {
    startIndex = argsSize >= 2 ? toNumber$8(startIndex) : 0;
    endIndex = argsSize >= 3 ? toNumber$8(endIndex) : array3.length;
    if (array3.slice) {
      return array3.slice(startIndex, endIndex);
    }
    for (; startIndex < endIndex; startIndex++) {
      result.push(array3[startIndex]);
    }
  }
  return result;
}
var slice_1 = slice$7;
var each$c = each_1;
function filter$2(obj, iterate, context) {
  var result = [];
  if (obj && iterate) {
    if (obj.filter) {
      return obj.filter(iterate, context);
    }
    each$c(obj, function(val, key) {
      if (iterate.call(context, val, key, obj)) {
        result.push(val);
      }
    });
  }
  return result;
}
var filter_1 = filter$2;
var helperCreateIterateHandle$1 = helperCreateIterateHandle_1;
var findKey$1 = helperCreateIterateHandle$1("", 0, 2, true);
var findKey_1 = findKey$1;
var helperCreateIterateHandle = helperCreateIterateHandle_1;
var find$1 = helperCreateIterateHandle("find", 1, 3, true);
var find_1 = find$1;
var isArray$n = isArray_1;
var values$4 = values_1;
function findLast$1(obj, iterate, context) {
  if (obj) {
    if (!isArray$n(obj)) {
      obj = values$4(obj);
    }
    for (var len = obj.length - 1; len >= 0; len--) {
      if (iterate.call(context, obj[len], len, obj)) {
        return obj[len];
      }
    }
  }
}
var findLast_1 = findLast$1;
var keys$8 = keys_1;
function reduce$1(array3, callback, initialValue) {
  if (array3) {
    var len, reduceMethod;
    var index2 = 0;
    var context = null;
    var previous = initialValue;
    var isInitialVal = arguments.length > 2;
    var keyList = keys$8(array3);
    if (array3.length && array3.reduce) {
      reduceMethod = function() {
        return callback.apply(context, arguments);
      };
      if (isInitialVal) {
        return array3.reduce(reduceMethod, previous);
      }
      return array3.reduce(reduceMethod);
    }
    if (isInitialVal) {
      index2 = 1;
      previous = array3[keyList[0]];
    }
    for (len = keyList.length; index2 < len; index2++) {
      previous = callback.call(context, previous, array3[keyList[index2]], index2, array3);
    }
    return previous;
  }
}
var reduce_1 = reduce$1;
var isArray$m = isArray_1;
function copyWithin$1(array3, target2, start, end) {
  if (isArray$m(array3) && array3.copyWithin) {
    return array3.copyWithin(target2, start, end);
  }
  var replaceIndex, replaceArray;
  var targetIndex = target2 >> 0;
  var startIndex = start >> 0;
  var len = array3.length;
  var endIndex = arguments.length > 3 ? end >> 0 : len;
  if (targetIndex < len) {
    targetIndex = targetIndex >= 0 ? targetIndex : len + targetIndex;
    if (targetIndex >= 0) {
      startIndex = startIndex >= 0 ? startIndex : len + startIndex;
      endIndex = endIndex >= 0 ? endIndex : len + endIndex;
      if (startIndex < endIndex) {
        for (replaceIndex = 0, replaceArray = array3.slice(startIndex, endIndex); targetIndex < len; targetIndex++) {
          if (replaceArray.length <= replaceIndex) {
            break;
          }
          array3[targetIndex] = replaceArray[replaceIndex++];
        }
      }
    }
  }
  return array3;
}
var copyWithin_1 = copyWithin$1;
var isArray$l = isArray_1;
function chunk$1(array3, size2) {
  var index2;
  var result = [];
  var arrLen = size2 >> 0 || 1;
  if (isArray$l(array3)) {
    if (arrLen >= 0 && array3.length > arrLen) {
      index2 = 0;
      while (index2 < array3.length) {
        result.push(array3.slice(index2, index2 + arrLen));
        index2 += arrLen;
      }
    } else {
      result = array3.length ? [array3] : array3;
    }
  }
  return result;
}
var chunk_1 = chunk$1;
var map$4 = map_1;
var property$2 = property_1;
function pluck$2(obj, key) {
  return map$4(obj, property$2(key));
}
var pluck_1 = pluck$2;
var isFunction$a = isFunction_1;
var eqNull$4 = eqNull_1;
var get$3 = get_1;
var arrayEach$9 = arrayEach_1;
function helperCreateMinMax$2(handle) {
  return function(arr, iterate) {
    if (arr && arr.length) {
      var rest, itemIndex;
      arrayEach$9(arr, function(itemVal, index2) {
        if (iterate) {
          itemVal = isFunction$a(iterate) ? iterate(itemVal, index2, arr) : get$3(itemVal, iterate);
        }
        if (!eqNull$4(itemVal) && (eqNull$4(rest) || handle(rest, itemVal))) {
          itemIndex = index2;
          rest = itemVal;
        }
      });
      return arr[itemIndex];
    }
    return rest;
  };
}
var helperCreateMinMax_1 = helperCreateMinMax$2;
var helperCreateMinMax$1 = helperCreateMinMax_1;
var max$3 = helperCreateMinMax$1(function(rest, itemVal) {
  return rest < itemVal;
});
var max_1 = max$3;
var pluck$1 = pluck_1;
var max$2 = max_1;
function unzip$2(arrays) {
  var index2, maxItem, len;
  var result = [];
  if (arrays && arrays.length) {
    index2 = 0;
    maxItem = max$2(arrays, function(item) {
      return item ? item.length : 0;
    });
    for (len = maxItem ? maxItem.length : 0; index2 < len; index2++) {
      result.push(pluck$1(arrays, index2));
    }
  }
  return result;
}
var unzip_1 = unzip$2;
var unzip$1 = unzip_1;
function zip$1() {
  return unzip$1(arguments);
}
var zip_1 = zip$1;
var values$3 = values_1;
var each$b = each_1;
function zipObject$1(props2, arr) {
  var result = {};
  arr = arr || [];
  each$b(values$3(props2), function(val, key) {
    result[val] = arr[key];
  });
  return result;
}
var zipObject_1 = zipObject$1;
var isArray$k = isArray_1;
var arrayEach$8 = arrayEach_1;
function flattenDeep(array3, deep) {
  var result = [];
  arrayEach$8(array3, function(vals) {
    result = result.concat(isArray$k(vals) ? deep ? flattenDeep(vals, deep) : vals : [vals]);
  });
  return result;
}
function flatten$1(array3, deep) {
  if (isArray$k(array3)) {
    return flattenDeep(array3, deep);
  }
  return [];
}
var flatten_1 = flatten$1;
var map$3 = map_1;
var isArray$j = isArray_1;
function deepGetObj(obj, path) {
  var index2 = 0;
  var len = path.length;
  while (obj && index2 < len) {
    obj = obj[path[index2++]];
  }
  return len && obj ? obj : 0;
}
function invoke$1(list2, path) {
  var func;
  var args = arguments;
  var params = [];
  var paths = [];
  var index2 = 2;
  var len = args.length;
  for (; index2 < len; index2++) {
    params.push(args[index2]);
  }
  if (isArray$j(path)) {
    len = path.length - 1;
    for (index2 = 0; index2 < len; index2++) {
      paths.push(path[index2]);
    }
    path = path[len];
  }
  return map$3(list2, function(context) {
    if (paths.length) {
      context = deepGetObj(context, paths);
    }
    func = context[path] || path;
    if (func && func.apply) {
      return func.apply(context, params);
    }
  });
}
var invoke_1 = invoke$1;
function helperDeleteProperty$2(obj, property2) {
  try {
    delete obj[property2];
  } catch (e) {
    obj[property2] = void 0;
  }
}
var helperDeleteProperty_1 = helperDeleteProperty$2;
var isArray$i = isArray_1;
var lastArrayEach$1 = lastArrayEach_1;
var lastObjectEach$1 = lastObjectEach_1;
function lastEach$2(obj, iterate, context) {
  if (obj) {
    return (isArray$i(obj) ? lastArrayEach$1 : lastObjectEach$1)(obj, iterate, context);
  }
  return obj;
}
var lastEach_1 = lastEach$2;
var helperCreateInTypeof$3 = helperCreateInTypeof_1;
var isObject$c = helperCreateInTypeof$3("object");
var isObject_1 = isObject$c;
var helperDeleteProperty$1 = helperDeleteProperty_1;
var isPlainObject$5 = isPlainObject_1;
var isObject$b = isObject_1;
var isArray$h = isArray_1;
var isNull$5 = isNull_1;
var assign$b = assign_1;
var objectEach$2 = objectEach_1;
function clear$2(obj, defs, assigns) {
  if (obj) {
    var len;
    var isDefs = arguments.length > 1 && (isNull$5(defs) || !isObject$b(defs));
    var extds = isDefs ? assigns : defs;
    if (isPlainObject$5(obj)) {
      objectEach$2(obj, isDefs ? function(val, key) {
        obj[key] = defs;
      } : function(val, key) {
        helperDeleteProperty$1(obj, key);
      });
      if (extds) {
        assign$b(obj, extds);
      }
    } else if (isArray$h(obj)) {
      if (isDefs) {
        len = obj.length;
        while (len > 0) {
          len--;
          obj[len] = defs;
        }
      } else {
        obj.length = 0;
      }
      if (extds) {
        obj.push.apply(obj, extds);
      }
    }
  }
  return obj;
}
var clear_1 = clear$2;
var helperDeleteProperty = helperDeleteProperty_1;
var isFunction$9 = isFunction_1;
var isArray$g = isArray_1;
var each$a = each_1;
var arrayEach$7 = arrayEach_1;
var lastEach$1 = lastEach_1;
var clear$1 = clear_1;
var eqNull$3 = eqNull_1;
function pluckProperty(name) {
  return function(obj, key) {
    return key === name;
  };
}
function remove$5(obj, iterate, context) {
  if (obj) {
    if (!eqNull$3(iterate)) {
      var removeKeys = [];
      var rest = [];
      if (!isFunction$9(iterate)) {
        iterate = pluckProperty(iterate);
      }
      each$a(obj, function(item, index2, rest2) {
        if (iterate.call(context, item, index2, rest2)) {
          removeKeys.push(index2);
        }
      });
      if (isArray$g(obj)) {
        lastEach$1(removeKeys, function(item, key) {
          rest.push(obj[item]);
          obj.splice(item, 1);
        });
      } else {
        rest = {};
        arrayEach$7(removeKeys, function(key) {
          rest[key] = obj[key];
          helperDeleteProperty(obj, key);
        });
      }
      return rest;
    }
    return clear$1(obj);
  }
  return obj;
}
var remove_1 = remove$5;
var setupDefaults$8 = setupDefaults_1;
var map$2 = map_1;
var orderBy$1 = orderBy_1;
var clone$1 = clone_1;
var includes$3 = includes_1;
var each$9 = each_1;
var remove$4 = remove_1;
var assign$a = assign_1;
function strictTree(array3, optChildren) {
  each$9(array3, function(item) {
    if (item.children && !item.children.length) {
      remove$4(item, optChildren);
    }
  });
}
function toArrayTree$1(array3, options2) {
  var opts = assign$a({}, setupDefaults$8.treeOptions, options2);
  var optStrict = opts.strict;
  var optKey = opts.key;
  var optParentKey = opts.parentKey;
  var optChildren = opts.children;
  var optMapChildren = opts.mapChildren;
  var optSortKey = opts.sortKey;
  var optReverse = opts.reverse;
  var optData = opts.data;
  var result = [];
  var treeMap = {};
  var idList, id2, treeData, parentId;
  if (optSortKey) {
    array3 = orderBy$1(clone$1(array3), optSortKey);
    if (optReverse) {
      array3 = array3.reverse();
    }
  }
  idList = map$2(array3, function(item) {
    return item[optKey];
  });
  each$9(array3, function(item) {
    id2 = item[optKey];
    if (optData) {
      treeData = {};
      treeData[optData] = item;
    } else {
      treeData = item;
    }
    parentId = item[optParentKey];
    treeMap[id2] = treeMap[id2] || [];
    treeMap[parentId] = treeMap[parentId] || [];
    treeMap[parentId].push(treeData);
    treeData[optKey] = id2;
    treeData[optParentKey] = parentId;
    treeData[optChildren] = treeMap[id2];
    if (optMapChildren) {
      treeData[optMapChildren] = treeMap[id2];
    }
    if (!optStrict || optStrict && !parentId) {
      if (!includes$3(idList, parentId)) {
        result.push(treeData);
      }
    }
  });
  if (optStrict) {
    strictTree(array3, optChildren);
  }
  return result;
}
var toArrayTree_1 = toArrayTree$1;
var setupDefaults$7 = setupDefaults_1;
var each$8 = each_1;
var assign$9 = assign_1;
function unTreeList(result, array3, opts) {
  var optChildren = opts.children;
  var optData = opts.data;
  var optClear = opts.clear;
  each$8(array3, function(item) {
    var children = item[optChildren];
    if (optData) {
      item = item[optData];
    }
    result.push(item);
    if (children && children.length) {
      unTreeList(result, children, opts);
    }
    if (optClear) {
      delete item[optChildren];
    }
  });
  return result;
}
function toTreeArray$1(array3, options2) {
  return unTreeList([], array3, assign$9({}, setupDefaults$7.treeOptions, options2));
}
var toTreeArray_1 = toTreeArray$1;
function helperCreateTreeFunc$4(handle) {
  return function(obj, iterate, options2, context) {
    var opts = options2 || {};
    var optChildren = opts.children || "children";
    return handle(null, obj, iterate, context, [], [], optChildren, opts);
  };
}
var helperCreateTreeFunc_1 = helperCreateTreeFunc$4;
var helperCreateTreeFunc$3 = helperCreateTreeFunc_1;
function findTreeItem(parent2, obj, iterate, context, path, node, parseChildren, opts) {
  if (obj) {
    var item, index2, len, paths, nodes, match;
    for (index2 = 0, len = obj.length; index2 < len; index2++) {
      item = obj[index2];
      paths = path.concat(["" + index2]);
      nodes = node.concat([item]);
      if (iterate.call(context, item, index2, obj, paths, parent2, nodes)) {
        return { index: index2, item, path: paths, items: obj, parent: parent2, nodes };
      }
      if (parseChildren && item) {
        match = findTreeItem(item, item[parseChildren], iterate, context, paths.concat([parseChildren]), nodes, parseChildren);
        if (match) {
          return match;
        }
      }
    }
  }
}
var findTree$1 = helperCreateTreeFunc$3(findTreeItem);
var findTree_1 = findTree$1;
var helperCreateTreeFunc$2 = helperCreateTreeFunc_1;
var each$7 = each_1;
function eachTreeItem(parent2, obj, iterate, context, path, node, parseChildren, opts) {
  var paths, nodes;
  each$7(obj, function(item, index2) {
    paths = path.concat(["" + index2]);
    nodes = node.concat([item]);
    iterate.call(context, item, index2, obj, paths, parent2, nodes);
    if (item && parseChildren) {
      paths.push(parseChildren);
      eachTreeItem(item, item[parseChildren], iterate, context, paths, nodes, parseChildren);
    }
  });
}
var eachTree$2 = helperCreateTreeFunc$2(eachTreeItem);
var eachTree_1 = eachTree$2;
var helperCreateTreeFunc$1 = helperCreateTreeFunc_1;
var map$1 = map_1;
function mapTreeItem(parent2, obj, iterate, context, path, node, parseChildren, opts) {
  var paths, nodes, rest;
  var mapChildren = opts.mapChildren || parseChildren;
  return map$1(obj, function(item, index2) {
    paths = path.concat(["" + index2]);
    nodes = node.concat([item]);
    rest = iterate.call(context, item, index2, obj, paths, parent2, nodes);
    if (rest && item && parseChildren && item[parseChildren]) {
      rest[mapChildren] = mapTreeItem(item, item[parseChildren], iterate, context, paths, nodes, parseChildren, opts);
    }
    return rest;
  });
}
var mapTree$1 = helperCreateTreeFunc$1(mapTreeItem);
var mapTree_1 = mapTree$1;
var eachTree$1 = eachTree_1;
function filterTree$1(obj, iterate, options2, context) {
  var result = [];
  if (obj && iterate) {
    eachTree$1(obj, function(item, index2, items2, path, parent2, nodes) {
      if (iterate.call(context, item, index2, items2, path, parent2, nodes)) {
        result.push(item);
      }
    }, options2);
  }
  return result;
}
var filterTree_1 = filterTree$1;
var helperCreateTreeFunc = helperCreateTreeFunc_1;
var arrayEach$6 = arrayEach_1;
var assign$8 = assign_1;
function searchTreeItem(parentAllow, parent2, obj, iterate, context, path, node, parseChildren, opts) {
  var paths, nodes, rest, isAllow, hasChild;
  var rests = [];
  var hasOriginal = opts.original;
  var sourceData = opts.data;
  var mapChildren = opts.mapChildren || parseChildren;
  arrayEach$6(obj, function(item, index2) {
    paths = path.concat(["" + index2]);
    nodes = node.concat([item]);
    isAllow = parentAllow || iterate.call(context, item, index2, obj, paths, parent2, nodes);
    hasChild = parseChildren && item[parseChildren];
    if (isAllow || hasChild) {
      if (hasOriginal) {
        rest = item;
      } else {
        rest = assign$8({}, item);
        if (sourceData) {
          rest[sourceData] = item;
        }
      }
      rest[mapChildren] = searchTreeItem(isAllow, item, item[parseChildren], iterate, context, paths, nodes, parseChildren, opts);
      if (isAllow || rest[mapChildren].length) {
        rests.push(rest);
      }
    } else if (isAllow) {
      rests.push(rest);
    }
  });
  return rests;
}
var searchTree$1 = helperCreateTreeFunc(function(parent2, obj, iterate, context, path, nodes, parseChildren, opts) {
  return searchTreeItem(0, parent2, obj, iterate, context, path, nodes, parseChildren, opts);
});
var searchTree_1 = searchTree$1;
function arrayIndexOf$3(list2, val) {
  if (list2.indexOf) {
    return list2.indexOf(val);
  }
  for (var index2 = 0, len = list2.length; index2 < len; index2++) {
    if (val === list2[index2]) {
      return index2;
    }
  }
}
var arrayIndexOf_1 = arrayIndexOf$3;
function arrayLastIndexOf$2(list2, val) {
  if (list2.lastIndexOf) {
    return list2.lastIndexOf(val);
  }
  for (var len = list2.length - 1; len >= 0; len--) {
    if (val === list2[len]) {
      return len;
    }
  }
  return -1;
}
var arrayLastIndexOf_1 = arrayLastIndexOf$2;
var helperCreateInTypeof$2 = helperCreateInTypeof_1;
var isNumber$a = helperCreateInTypeof$2("number");
var isNumber_1 = isNumber$a;
var isNumber$9 = isNumber_1;
function isNumberNaN$1(obj) {
  return isNumber$9(obj) && isNaN(obj);
}
var _isNaN = isNumberNaN$1;
var helperCreateInTypeof$1 = helperCreateInTypeof_1;
var isString$a = helperCreateInTypeof$1("string");
var isString_1 = isString$a;
var helperCreateInInObjectString$3 = helperCreateInInObjectString_1;
var isDate$9 = helperCreateInInObjectString$3("Date");
var isDate_1 = isDate$9;
var staticParseInt$5 = parseInt;
var staticParseInt_1 = staticParseInt$5;
function helperGetUTCDateTime$1(resMaps) {
  return Date.UTC(resMaps.y, resMaps.M || 0, resMaps.d || 1, resMaps.H || 0, resMaps.m || 0, resMaps.s || 0, resMaps.S || 0);
}
var helperGetUTCDateTime_1 = helperGetUTCDateTime$1;
function helperGetDateTime$c(date3) {
  return date3.getTime();
}
var helperGetDateTime_1 = helperGetDateTime$c;
var staticParseInt$4 = staticParseInt_1;
var helperGetUTCDateTime = helperGetUTCDateTime_1;
var helperGetDateTime$b = helperGetDateTime_1;
var isString$9 = isString_1;
var isDate$8 = isDate_1;
function getParseRule(txt) {
  return "(\\d{" + txt + "})";
}
function toParseMs(num) {
  if (num < 10) {
    return num * 100;
  } else if (num < 100) {
    return num * 10;
  }
  return num;
}
function toParseNum(num) {
  return isNaN(num) ? num : staticParseInt$4(num);
}
var d2 = getParseRule(2);
var d1or2 = getParseRule("1,2");
var d1or7 = getParseRule("1,7");
var d3or4 = getParseRule("3,4");
var place = ".{1}";
var d1Or2RE = place + d1or2;
var dzZ = "(([zZ])|([-+]\\d{2}:?\\d{2}))";
var defaulParseStrs = [d3or4, d1Or2RE, d1Or2RE, d1Or2RE, d1Or2RE, d1Or2RE, place + d1or7, dzZ];
var defaulParseREs = [];
for (var len = defaulParseStrs.length - 1; len >= 0; len--) {
  var rule = "";
  for (var i$1 = 0; i$1 < len + 1; i$1++) {
    rule += defaulParseStrs[i$1];
  }
  defaulParseREs.push(new RegExp("^" + rule + "$"));
}
function parseDefaultRules(str) {
  var matchRest, resMaps = {};
  for (var i = 0, dfrLen = defaulParseREs.length; i < dfrLen; i++) {
    matchRest = str.match(defaulParseREs[i]);
    if (matchRest) {
      resMaps.y = matchRest[1];
      resMaps.M = matchRest[2];
      resMaps.d = matchRest[3];
      resMaps.H = matchRest[4];
      resMaps.m = matchRest[5];
      resMaps.s = matchRest[6];
      resMaps.S = matchRest[7];
      resMaps.Z = matchRest[8];
      break;
    }
  }
  return resMaps;
}
var customParseStrs = [
  ["yyyy", d3or4],
  ["yy", d2],
  ["MM", d2],
  ["M", d1or2],
  ["dd", d2],
  ["d", d1or2],
  ["HH", d2],
  ["H", d1or2],
  ["mm", d2],
  ["m", d1or2],
  ["ss", d2],
  ["s", d1or2],
  ["SSS", getParseRule(3)],
  ["S", d1or7],
  ["Z", dzZ]
];
var parseRuleMaps = {};
var parseRuleKeys = ["\\[([^\\]]+)\\]"];
for (var i$1 = 0; i$1 < customParseStrs.length; i$1++) {
  var itemRule = customParseStrs[i$1];
  parseRuleMaps[itemRule[0]] = itemRule[1] + "?";
  parseRuleKeys.push(itemRule[0]);
}
var customParseRes = new RegExp(parseRuleKeys.join("|"), "g");
var cacheFormatMaps = {};
function parseCustomRules(str, format2) {
  var cacheItem = cacheFormatMaps[format2];
  if (!cacheItem) {
    var posIndexs = [];
    var re = format2.replace(/([$(){}*+.?\\^|])/g, "\\$1").replace(customParseRes, function(text, val) {
      var firstChar = text.charAt(0);
      if (firstChar === "[") {
        return val;
      }
      posIndexs.push(firstChar);
      return parseRuleMaps[text];
    });
    cacheItem = cacheFormatMaps[format2] = {
      _i: posIndexs,
      _r: new RegExp(re)
    };
  }
  var resMaps = {};
  var matchRest = str.match(cacheItem._r);
  if (matchRest) {
    var _i = cacheItem._i;
    for (var i = 1, len = matchRest.length; i < len; i++) {
      resMaps[_i[i - 1]] = matchRest[i];
    }
    return resMaps;
  }
  return resMaps;
}
function parseTimeZone(resMaps) {
  if (/^[zZ]/.test(resMaps.Z)) {
    return new Date(helperGetUTCDateTime(resMaps));
  } else {
    var matchRest = resMaps.Z.match(/([-+])(\d{2}):?(\d{2})/);
    if (matchRest) {
      return new Date(helperGetUTCDateTime(resMaps) - (matchRest[1] === "-" ? -1 : 1) * staticParseInt$4(matchRest[2]) * 36e5 + staticParseInt$4(matchRest[3]) * 6e4);
    }
  }
  return new Date("");
}
function toStringDate$d(str, format2) {
  if (str) {
    var isDType = isDate$8(str);
    if (isDType || !format2 && /^[0-9]{11,15}$/.test(str)) {
      return new Date(isDType ? helperGetDateTime$b(str) : staticParseInt$4(str));
    }
    if (isString$9(str)) {
      var resMaps = format2 ? parseCustomRules(str, format2) : parseDefaultRules(str);
      if (resMaps.y) {
        if (resMaps.M) {
          resMaps.M = toParseNum(resMaps.M) - 1;
        }
        if (resMaps.S) {
          resMaps.S = toParseMs(toParseNum(resMaps.S.substring(0, 3)));
        }
        if (resMaps.Z) {
          return parseTimeZone(resMaps);
        } else {
          return new Date(resMaps.y, resMaps.M || 0, resMaps.d || 1, resMaps.H || 0, resMaps.m || 0, resMaps.s || 0, resMaps.S || 0);
        }
      }
    }
  }
  return new Date("");
}
var toStringDate_1 = toStringDate$d;
function helperNewDate$4() {
  return new Date();
}
var helperNewDate_1 = helperNewDate$4;
var isDate$7 = isDate_1;
var toStringDate$c = toStringDate_1;
var helperNewDate$3 = helperNewDate_1;
function isLeapYear$2(date3) {
  var year;
  var currentDate = date3 ? toStringDate$c(date3) : helperNewDate$3();
  if (isDate$7(currentDate)) {
    year = currentDate.getFullYear();
    return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
  }
  return false;
}
var isLeapYear_1 = isLeapYear$2;
var isArray$f = isArray_1;
var hasOwnProp$5 = hasOwnProp_1;
function forOf$1(obj, iterate, context) {
  if (obj) {
    if (isArray$f(obj)) {
      for (var index2 = 0, len = obj.length; index2 < len; index2++) {
        if (iterate.call(context, obj[index2], index2, obj) === false) {
          break;
        }
      }
    } else {
      for (var key in obj) {
        if (hasOwnProp$5(obj, key)) {
          if (iterate.call(context, obj[key], key, obj) === false) {
            break;
          }
        }
      }
    }
  }
}
var forOf_1 = forOf$1;
var isArray$e = isArray_1;
var keys$7 = hasOwnProp_1;
function lastForOf$1(obj, iterate, context) {
  if (obj) {
    var len, list2;
    if (isArray$e(obj)) {
      for (len = obj.length - 1; len >= 0; len--) {
        if (iterate.call(context, obj[len], len, obj) === false) {
          break;
        }
      }
    } else {
      list2 = keys$7(obj);
      for (len = list2.length - 1; len >= 0; len--) {
        if (iterate.call(context, obj[list2[len]], list2[len], obj) === false) {
          break;
        }
      }
    }
  }
}
var lastForOf_1 = lastForOf$1;
var isArray$d = isArray_1;
var isString$8 = isString_1;
var hasOwnProp$4 = hasOwnProp_1;
function helperCreateIndexOf$2(name, callback) {
  return function(obj, val) {
    if (obj) {
      if (obj[name]) {
        return obj[name](val);
      }
      if (isString$8(obj) || isArray$d(obj)) {
        return callback(obj, val);
      }
      for (var key in obj) {
        if (hasOwnProp$4(obj, key)) {
          if (val === obj[key]) {
            return key;
          }
        }
      }
    }
    return -1;
  };
}
var helperCreateIndexOf_1 = helperCreateIndexOf$2;
var helperCreateIndexOf$1 = helperCreateIndexOf_1;
var arrayIndexOf$2 = arrayIndexOf_1;
var indexOf$1 = helperCreateIndexOf$1("indexOf", arrayIndexOf$2);
var indexOf_1 = indexOf$1;
var helperCreateIndexOf = helperCreateIndexOf_1;
var arrayLastIndexOf$1 = arrayLastIndexOf_1;
var lastIndexOf$2 = helperCreateIndexOf("lastIndexOf", arrayLastIndexOf$1);
var lastIndexOf_1 = lastIndexOf$2;
var isArray$c = isArray_1;
var isString$7 = isString_1;
var each$6 = each_1;
function getSize$2(obj) {
  var len = 0;
  if (isString$7(obj) || isArray$c(obj)) {
    return obj.length;
  }
  each$6(obj, function() {
    len++;
  });
  return len;
}
var getSize_1 = getSize$2;
var isNumber$8 = isNumber_1;
function isNumberFinite$1(obj) {
  return isNumber$8(obj) && isFinite(obj);
}
var _isFinite = isNumberFinite$1;
var isArray$b = isArray_1;
var isNull$4 = isNull_1;
var isInteger$2 = function(obj) {
  return !isNull$4(obj) && !isNaN(obj) && !isArray$b(obj) && obj % 1 === 0;
};
var isInteger_1 = isInteger$2;
var isArray$a = isArray_1;
var isInteger$1 = isInteger_1;
var isNull$3 = isNull_1;
function isFloat$1(obj) {
  return !isNull$3(obj) && !isNaN(obj) && !isArray$a(obj) && !isInteger$1(obj);
}
var isFloat_1 = isFloat$1;
var helperCreateInTypeof = helperCreateInTypeof_1;
var isBoolean$2 = helperCreateInTypeof("boolean");
var isBoolean_1 = isBoolean$2;
var helperCreateInInObjectString$2 = helperCreateInInObjectString_1;
var isRegExp$4 = helperCreateInInObjectString$2("RegExp");
var isRegExp_1 = isRegExp$4;
var helperCreateInInObjectString$1 = helperCreateInInObjectString_1;
var isError$2 = helperCreateInInObjectString$1("Error");
var isError_1 = isError$2;
function isTypeError$1(obj) {
  return obj ? obj.constructor === TypeError : false;
}
var isTypeError_1 = isTypeError$1;
function isEmpty$3(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
}
var isEmpty_1 = isEmpty$3;
var staticStrUndefined$9 = staticStrUndefined_1;
var supportSymbol = typeof Symbol !== staticStrUndefined$9;
function isSymbol$4(obj) {
  return supportSymbol && Symbol.isSymbol ? Symbol.isSymbol(obj) : typeof obj === "symbol";
}
var isSymbol_1 = isSymbol$4;
var helperCreateInInObjectString = helperCreateInInObjectString_1;
var isArguments$3 = helperCreateInInObjectString("Arguments");
var isArguments_1 = isArguments$3;
var isString$6 = isString_1;
var isNumber$7 = isNumber_1;
function isElement$1(obj) {
  return !!(obj && isString$6(obj.nodeName) && isNumber$7(obj.nodeType));
}
var isElement_1 = isElement$1;
var staticStrUndefined$8 = staticStrUndefined_1;
var staticDocument$3 = typeof document === staticStrUndefined$8 ? 0 : document;
var staticDocument_1 = staticDocument$3;
var staticDocument$2 = staticDocument_1;
function isDocument$1(obj) {
  return !!(obj && staticDocument$2 && obj.nodeType === 9);
}
var isDocument_1 = isDocument$1;
var staticStrUndefined$7 = staticStrUndefined_1;
var staticWindow$2 = typeof window === staticStrUndefined$7 ? 0 : window;
var staticWindow_1 = staticWindow$2;
var staticWindow$1 = staticWindow_1;
function isWindow$1(obj) {
  return staticWindow$1 && !!(obj && obj === obj.window);
}
var isWindow_1 = isWindow$1;
var staticStrUndefined$6 = staticStrUndefined_1;
var supportFormData = typeof FormData !== staticStrUndefined$6;
function isFormData$1(obj) {
  return supportFormData && obj instanceof FormData;
}
var isFormData_1 = isFormData$1;
var staticStrUndefined$5 = staticStrUndefined_1;
var supportMap = typeof Map !== staticStrUndefined$5;
function isMap$3(obj) {
  return supportMap && obj instanceof Map;
}
var isMap_1 = isMap$3;
var staticStrUndefined$4 = staticStrUndefined_1;
var supportWeakMap = typeof WeakMap !== staticStrUndefined$4;
function isWeakMap$1(obj) {
  return supportWeakMap && obj instanceof WeakMap;
}
var isWeakMap_1 = isWeakMap$1;
var staticStrUndefined$3 = staticStrUndefined_1;
var supportSet = typeof Set !== staticStrUndefined$3;
function isSet$3(obj) {
  return supportSet && obj instanceof Set;
}
var isSet_1 = isSet$3;
var staticStrUndefined$2 = staticStrUndefined_1;
var supportWeakSet = typeof WeakSet !== staticStrUndefined$2;
function isWeakSet$1(obj) {
  return supportWeakSet && obj instanceof WeakSet;
}
var isWeakSet_1 = isWeakSet$1;
var isFunction$8 = isFunction_1;
var isString$5 = isString_1;
var isArray$9 = isArray_1;
var hasOwnProp$3 = hasOwnProp_1;
function helperCreateiterateIndexOf$2(callback) {
  return function(obj, iterate, context) {
    if (obj && isFunction$8(iterate)) {
      if (isArray$9(obj) || isString$5(obj)) {
        return callback(obj, iterate, context);
      }
      for (var key in obj) {
        if (hasOwnProp$3(obj, key)) {
          if (iterate.call(context, obj[key], key, obj)) {
            return key;
          }
        }
      }
    }
    return -1;
  };
}
var helperCreateiterateIndexOf_1 = helperCreateiterateIndexOf$2;
var helperCreateiterateIndexOf$1 = helperCreateiterateIndexOf_1;
var findIndexOf$3 = helperCreateiterateIndexOf$1(function(obj, iterate, context) {
  for (var index2 = 0, len = obj.length; index2 < len; index2++) {
    if (iterate.call(context, obj[index2], index2, obj)) {
      return index2;
    }
  }
  return -1;
});
var findIndexOf_1 = findIndexOf$3;
var isNumber$6 = isNumber_1;
var isArray$8 = isArray_1;
var isString$4 = isString_1;
var isRegExp$3 = isRegExp_1;
var isDate$6 = isDate_1;
var isBoolean$1 = isBoolean_1;
var isUndefined$6 = isUndefined_1;
var keys$6 = keys_1;
var every$1 = every_1;
function helperEqualCompare$2(val1, val2, compare, func, key, obj1, obj2) {
  if (val1 === val2) {
    return true;
  }
  if (val1 && val2 && !isNumber$6(val1) && !isNumber$6(val2) && !isString$4(val1) && !isString$4(val2)) {
    if (isRegExp$3(val1)) {
      return compare("" + val1, "" + val2, key, obj1, obj2);
    }
    if (isDate$6(val1) || isBoolean$1(val1)) {
      return compare(+val1, +val2, key, obj1, obj2);
    } else {
      var result, val1Keys, val2Keys;
      var isObj1Arr = isArray$8(val1);
      var isObj2Arr = isArray$8(val2);
      if (isObj1Arr || isObj2Arr ? isObj1Arr && isObj2Arr : val1.constructor === val2.constructor) {
        val1Keys = keys$6(val1);
        val2Keys = keys$6(val2);
        if (func) {
          result = func(val1, val2, key);
        }
        if (val1Keys.length === val2Keys.length) {
          return isUndefined$6(result) ? every$1(val1Keys, function(key2, index2) {
            return key2 === val2Keys[index2] && helperEqualCompare$2(val1[key2], val2[val2Keys[index2]], compare, func, isObj1Arr || isObj2Arr ? index2 : key2, val1, val2);
          }) : !!result;
        }
        return false;
      }
    }
  }
  return compare(val1, val2, key, obj1, obj2);
}
var helperEqualCompare_1 = helperEqualCompare$2;
function helperDefaultCompare$2(v1, v2) {
  return v1 === v2;
}
var helperDefaultCompare_1 = helperDefaultCompare$2;
var helperEqualCompare$1 = helperEqualCompare_1;
var helperDefaultCompare$1 = helperDefaultCompare_1;
function isEqual$2(obj1, obj2) {
  return helperEqualCompare$1(obj1, obj2, helperDefaultCompare$1);
}
var isEqual_1 = isEqual$2;
var keys$5 = keys_1;
var findIndexOf$2 = findIndexOf_1;
var isEqual$1 = isEqual_1;
var some$1 = some_1;
var includeArrays$1 = includeArrays_1;
function isMatch$1(obj, source) {
  var objKeys = keys$5(obj);
  var sourceKeys = keys$5(source);
  if (sourceKeys.length) {
    if (includeArrays$1(objKeys, sourceKeys)) {
      return some$1(sourceKeys, function(key2) {
        return findIndexOf$2(objKeys, function(key1) {
          return key1 === key2 && isEqual$1(obj[key1], source[key2]);
        }) > -1;
      });
    }
  } else {
    return true;
  }
  return isEqual$1(obj, source);
}
var isMatch_1 = isMatch$1;
var helperEqualCompare = helperEqualCompare_1;
var helperDefaultCompare = helperDefaultCompare_1;
var isFunction$7 = isFunction_1;
var isUndefined$5 = isUndefined_1;
function isEqualWith$1(obj1, obj2, func) {
  if (isFunction$7(func)) {
    return helperEqualCompare(obj1, obj2, function(v1, v2, key, obj12, obj22) {
      var result = func(v1, v2, key, obj12, obj22);
      return isUndefined$5(result) ? helperDefaultCompare(v1, v2) : !!result;
    }, func);
  }
  return helperEqualCompare(obj1, obj2, helperDefaultCompare);
}
var isEqualWith_1 = isEqualWith$1;
var isSymbol$3 = isSymbol_1;
var isDate$5 = isDate_1;
var isArray$7 = isArray_1;
var isRegExp$2 = isRegExp_1;
var isError$1 = isError_1;
var isNull$2 = isNull_1;
function getType$2(obj) {
  if (isNull$2(obj)) {
    return "null";
  }
  if (isSymbol$3(obj)) {
    return "symbol";
  }
  if (isDate$5(obj)) {
    return "date";
  }
  if (isArray$7(obj)) {
    return "array";
  }
  if (isRegExp$2(obj)) {
    return "regexp";
  }
  if (isError$1(obj)) {
    return "error";
  }
  return typeof obj;
}
var getType_1 = getType$2;
var __uniqueId = 0;
function uniqueId$1(prefix) {
  return [prefix, ++__uniqueId].join("");
}
var uniqueId_1 = uniqueId$1;
var helperCreateiterateIndexOf = helperCreateiterateIndexOf_1;
var findLastIndexOf$1 = helperCreateiterateIndexOf(function(obj, iterate, context) {
  for (var len = obj.length - 1; len >= 0; len--) {
    if (iterate.call(context, obj[len], len, obj)) {
      return len;
    }
  }
  return -1;
});
var findLastIndexOf_1 = findLastIndexOf$1;
var isPlainObject$4 = isPlainObject_1;
var isString$3 = isString_1;
function toStringJSON$1(str) {
  if (isPlainObject$4(str)) {
    return str;
  } else if (isString$3(str)) {
    try {
      return JSON.parse(str);
    } catch (e) {
    }
  }
  return {};
}
var toStringJSON_1 = toStringJSON$1;
var eqNull$2 = eqNull_1;
function toJSONString$1(obj) {
  return eqNull$2(obj) ? "" : JSON.stringify(obj);
}
var toJSONString_1 = toJSONString$1;
var helperCreateGetObjects = helperCreateGetObjects_1;
var entries$1 = helperCreateGetObjects("entries", 2);
var entries_1 = entries$1;
var isFunction$6 = isFunction_1;
var isArray$6 = isArray_1;
var each$5 = each_1;
var findIndexOf$1 = findIndexOf_1;
function helperCreatePickOmit$2(case1, case2) {
  return function(obj, callback) {
    var item, index2;
    var rest = {};
    var result = [];
    var context = this;
    var args = arguments;
    var len = args.length;
    if (!isFunction$6(callback)) {
      for (index2 = 1; index2 < len; index2++) {
        item = args[index2];
        result.push.apply(result, isArray$6(item) ? item : [item]);
      }
      callback = 0;
    }
    each$5(obj, function(val, key) {
      if ((callback ? callback.call(context, val, key, obj) : findIndexOf$1(result, function(name) {
        return name === key;
      }) > -1) ? case1 : case2) {
        rest[key] = val;
      }
    });
    return rest;
  };
}
var helperCreatePickOmit_1 = helperCreatePickOmit$2;
var helperCreatePickOmit$1 = helperCreatePickOmit_1;
var pick$1 = helperCreatePickOmit$1(1, 0);
var pick_1 = pick$1;
var helperCreatePickOmit = helperCreatePickOmit_1;
var omit$1 = helperCreatePickOmit(0, 1);
var omit_1 = omit$1;
var values$2 = values_1;
function first$1(obj) {
  return values$2(obj)[0];
}
var first_1 = first$1;
var values$1 = values_1;
function last$1(obj) {
  var list2 = values$1(obj);
  return list2[list2.length - 1];
}
var last_1 = last$1;
var staticHGKeyRE = staticHGKeyRE_1;
var helperGetHGSKeys$1 = helperGetHGSKeys_1;
var hasOwnProp$2 = hasOwnProp_1;
function has$9(obj, property2) {
  if (obj) {
    if (hasOwnProp$2(obj, property2)) {
      return true;
    } else {
      var prop, arrIndex, objProp, matchs, rest, isHas;
      var props2 = helperGetHGSKeys$1(property2);
      var index2 = 0;
      var len = props2.length;
      for (rest = obj; index2 < len; index2++) {
        isHas = false;
        prop = props2[index2];
        matchs = prop ? prop.match(staticHGKeyRE) : "";
        if (matchs) {
          arrIndex = matchs[1];
          objProp = matchs[2];
          if (arrIndex) {
            if (rest[arrIndex]) {
              if (hasOwnProp$2(rest[arrIndex], objProp)) {
                isHas = true;
                rest = rest[arrIndex][objProp];
              }
            }
          } else {
            if (hasOwnProp$2(rest, objProp)) {
              isHas = true;
              rest = rest[objProp];
            }
          }
        } else {
          if (hasOwnProp$2(rest, prop)) {
            isHas = true;
            rest = rest[prop];
          }
        }
        if (isHas) {
          if (index2 === len - 1) {
            return true;
          }
        } else {
          break;
        }
      }
    }
  }
  return false;
}
var has_1 = has$9;
var staticParseInt$3 = staticParseInt_1;
var helperGetHGSKeys = helperGetHGSKeys_1;
var hasOwnProp$1 = hasOwnProp_1;
var sKeyRE = /(.+)?\[(\d+)\]$/;
function setDeepProps(obj, key, isEnd, nextKey, value6) {
  if (obj[key]) {
    if (isEnd) {
      obj[key] = value6;
    }
  } else {
    var index2;
    var rest;
    var currMatchs = key ? key.match(sKeyRE) : null;
    if (isEnd) {
      rest = value6;
    } else {
      var nextMatchs = nextKey ? nextKey.match(sKeyRE) : null;
      if (nextMatchs && !nextMatchs[1]) {
        rest = new Array(staticParseInt$3(nextMatchs[2]) + 1);
      } else {
        rest = {};
      }
    }
    if (currMatchs) {
      if (currMatchs[1]) {
        index2 = staticParseInt$3(currMatchs[2]);
        if (obj[currMatchs[1]]) {
          if (isEnd) {
            obj[currMatchs[1]][index2] = rest;
          } else {
            if (obj[currMatchs[1]][index2]) {
              rest = obj[currMatchs[1]][index2];
            } else {
              obj[currMatchs[1]][index2] = rest;
            }
          }
        } else {
          obj[currMatchs[1]] = new Array(index2 + 1);
          obj[currMatchs[1]][index2] = rest;
        }
      } else {
        obj[currMatchs[2]] = rest;
      }
    } else {
      obj[key] = rest;
    }
    return rest;
  }
  return obj[key];
}
function set$2(obj, property2, value6) {
  if (obj) {
    if ((obj[property2] || hasOwnProp$1(obj, property2)) && !isPrototypePolluted(property2)) {
      obj[property2] = value6;
    } else {
      var rest = obj;
      var props2 = helperGetHGSKeys(property2);
      var len = props2.length;
      for (var index2 = 0; index2 < len; index2++) {
        if (isPrototypePolluted(props2[index2])) {
          continue;
        }
        var isEnd = index2 === len - 1;
        rest = setDeepProps(rest, props2[index2], isEnd, isEnd ? null : props2[index2 + 1], value6);
      }
    }
  }
  return obj;
}
function isPrototypePolluted(key) {
  return key === "__proto__" || key === "constructor" || key === "prototype";
}
var set_1 = set$2;
var isEmpty$2 = isEmpty_1;
var isObject$a = isObject_1;
var isFunction$5 = isFunction_1;
var property$1 = property_1;
var each$4 = each_1;
function createiterateEmpty(iterate) {
  return function() {
    return isEmpty$2(iterate);
  };
}
function groupBy$2(obj, iterate, context) {
  var groupKey;
  var result = {};
  if (obj) {
    if (iterate && isObject$a(iterate)) {
      iterate = createiterateEmpty(iterate);
    } else if (!isFunction$5(iterate)) {
      iterate = property$1(iterate);
    }
    each$4(obj, function(val, key) {
      groupKey = iterate ? iterate.call(context, val, key, obj) : val;
      if (result[groupKey]) {
        result[groupKey].push(val);
      } else {
        result[groupKey] = [val];
      }
    });
  }
  return result;
}
var groupBy_1 = groupBy$2;
var groupBy$1 = groupBy_1;
var objectEach$1 = objectEach_1;
function countBy$1(obj, iterate, context) {
  var result = groupBy$1(obj, iterate, context || this);
  objectEach$1(result, function(item, key) {
    result[key] = item.length;
  });
  return result;
}
var countBy_1 = countBy$1;
function range$3(start, stop3, step2) {
  var index2, len;
  var result = [];
  var args = arguments;
  if (args.length < 2) {
    stop3 = args[0];
    start = 0;
  }
  index2 = start >> 0;
  len = stop3 >> 0;
  if (index2 < stop3) {
    step2 = step2 >> 0 || 1;
    for (; index2 < len; index2 += step2) {
      result.push(index2);
    }
  }
  return result;
}
var range_1 = range$3;
var keys$4 = keys_1;
var slice$6 = slice_1;
var includes$2 = includes_1;
var arrayEach$5 = arrayEach_1;
var assign$7 = assign_1;
function destructuring$1(destination, sources) {
  if (destination && sources) {
    var rest = assign$7.apply(this, [{}].concat(slice$6(arguments, 1)));
    var restKeys = keys$4(rest);
    arrayEach$5(keys$4(destination), function(key) {
      if (includes$2(restKeys, key)) {
        destination[key] = rest[key];
      }
    });
  }
  return destination;
}
var destructuring_1 = destructuring$1;
var helperCreateMinMax = helperCreateMinMax_1;
var min$3 = helperCreateMinMax(function(rest, itemVal) {
  return rest > itemVal;
});
var min_1 = min$3;
function helperNumberDecimal$4(numStr) {
  return (numStr.split(".")[1] || "").length;
}
var helperNumberDecimal_1 = helperNumberDecimal$4;
var staticParseInt$2 = staticParseInt_1;
function helperStringRepeat$5(str, count) {
  if (str.repeat) {
    return str.repeat(count);
  }
  var list2 = isNaN(count) ? [] : new Array(staticParseInt$2(count));
  return list2.join(str) + (list2.length > 0 ? str : "");
}
var helperStringRepeat_1 = helperStringRepeat$5;
function helperNumberOffsetPoint$2(str, offsetIndex) {
  return str.substring(0, offsetIndex) + "." + str.substring(offsetIndex, str.length);
}
var helperNumberOffsetPoint_1 = helperNumberOffsetPoint$2;
var helperStringRepeat$4 = helperStringRepeat_1;
var helperNumberOffsetPoint$1 = helperNumberOffsetPoint_1;
function toNumberString$8(num) {
  var rest = "" + num;
  var scienceMatchs = rest.match(/^([-+]?)((\d+)|((\d+)?[.](\d+)?))e([-+]{1})([0-9]+)$/);
  if (scienceMatchs) {
    var isNegative = num < 0;
    var absFlag = isNegative ? "-" : "";
    var intNumStr = scienceMatchs[3] || "";
    var dIntNumStr = scienceMatchs[5] || "";
    var dFloatNumStr = scienceMatchs[6] || "";
    var sciencFlag = scienceMatchs[7];
    var scienceNumStr = scienceMatchs[8];
    var floatOffsetIndex = scienceNumStr - dFloatNumStr.length;
    var intOffsetIndex = scienceNumStr - intNumStr.length;
    var dIntOffsetIndex = scienceNumStr - dIntNumStr.length;
    if (sciencFlag === "+") {
      if (intNumStr) {
        return absFlag + intNumStr + helperStringRepeat$4("0", scienceNumStr);
      }
      if (floatOffsetIndex > 0) {
        return absFlag + dIntNumStr + dFloatNumStr + helperStringRepeat$4("0", floatOffsetIndex);
      }
      return absFlag + dIntNumStr + helperNumberOffsetPoint$1(dFloatNumStr, scienceNumStr);
    }
    if (intNumStr) {
      if (intOffsetIndex > 0) {
        return absFlag + "0." + helperStringRepeat$4("0", Math.abs(intOffsetIndex)) + intNumStr;
      }
      return absFlag + helperNumberOffsetPoint$1(intNumStr, intOffsetIndex);
    }
    if (dIntOffsetIndex > 0) {
      return absFlag + "0." + helperStringRepeat$4("0", Math.abs(dIntOffsetIndex)) + dIntNumStr + dFloatNumStr;
    }
    return absFlag + helperNumberOffsetPoint$1(dIntNumStr, dIntOffsetIndex) + dFloatNumStr;
  }
  return rest;
}
var toNumberString_1 = toNumberString$8;
var helperNumberDecimal$3 = helperNumberDecimal_1;
var toNumberString$7 = toNumberString_1;
function helperMultiply$2(multiplier, multiplicand) {
  var str1 = toNumberString$7(multiplier);
  var str2 = toNumberString$7(multiplicand);
  return parseInt(str1.replace(".", "")) * parseInt(str2.replace(".", "")) / Math.pow(10, helperNumberDecimal$3(str1) + helperNumberDecimal$3(str2));
}
var helperMultiply_1 = helperMultiply$2;
var helperMultiply$1 = helperMultiply_1;
var toNumber$7 = toNumber_1;
var toNumberString$6 = toNumberString_1;
function helperCreateMathNumber$3(name) {
  return function(num, digits) {
    var numRest = toNumber$7(num);
    var rest = numRest;
    if (numRest) {
      digits = digits >> 0;
      var numStr = toNumberString$6(numRest);
      var nums = numStr.split(".");
      var intStr = nums[0];
      var floatStr = nums[1] || "";
      var fStr = floatStr.substring(0, digits + 1);
      var subRest = intStr + (fStr ? "." + fStr : "");
      if (digits >= floatStr.length) {
        return toNumber$7(subRest);
      }
      subRest = numRest;
      if (digits > 0) {
        var ratio = Math.pow(10, digits);
        rest = Math[name](helperMultiply$1(subRest, ratio)) / ratio;
      } else {
        rest = Math[name](subRest);
      }
    }
    return rest;
  };
}
var helperCreateMathNumber_1 = helperCreateMathNumber$3;
var helperCreateMathNumber$2 = helperCreateMathNumber_1;
var round$3 = helperCreateMathNumber$2("round");
var round_1 = round$3;
var helperCreateMathNumber$1 = helperCreateMathNumber_1;
var ceil$3 = helperCreateMathNumber$1("ceil");
var ceil_1 = ceil$3;
var helperCreateMathNumber = helperCreateMathNumber_1;
var floor$3 = helperCreateMathNumber("floor");
var floor_1 = floor$3;
var eqNull$1 = eqNull_1;
var isNumber$5 = isNumber_1;
var toNumberString$5 = toNumberString_1;
function toValueString$e(obj) {
  if (isNumber$5(obj)) {
    return toNumberString$5(obj);
  }
  return "" + (eqNull$1(obj) ? "" : obj);
}
var toValueString_1 = toValueString$e;
var round$2 = round_1;
var toValueString$d = toValueString_1;
var helperStringRepeat$3 = helperStringRepeat_1;
var helperNumberOffsetPoint = helperNumberOffsetPoint_1;
function toFixed$3(num, digits) {
  digits = digits >> 0;
  var str = toValueString$d(round$2(num, digits));
  var nums = str.split(".");
  var intStr = nums[0];
  var floatStr = nums[1] || "";
  var digitOffsetIndex = digits - floatStr.length;
  if (digits) {
    if (digitOffsetIndex > 0) {
      return intStr + "." + floatStr + helperStringRepeat$3("0", digitOffsetIndex);
    }
    return intStr + helperNumberOffsetPoint(floatStr, Math.abs(digitOffsetIndex));
  }
  return intStr;
}
var toFixed_1 = toFixed$3;
var setupDefaults$6 = setupDefaults_1;
var round$1 = round_1;
var ceil$2 = ceil_1;
var floor$2 = floor_1;
var isNumber$4 = isNumber_1;
var toValueString$c = toValueString_1;
var toFixed$2 = toFixed_1;
var toNumberString$4 = toNumberString_1;
var assign$6 = assign_1;
function commafy$1(num, options2) {
  var opts = assign$6({}, setupDefaults$6.commafyOptions, options2);
  var optDigits = opts.digits;
  var isNum = isNumber$4(num);
  var rest, result, isNegative, intStr, floatStr;
  if (isNum) {
    rest = (opts.ceil ? ceil$2 : opts.floor ? floor$2 : round$1)(num, optDigits);
    result = toNumberString$4(optDigits ? toFixed$2(rest, optDigits) : rest).split(".");
    intStr = result[0];
    floatStr = result[1];
    isNegative = intStr && rest < 0;
    if (isNegative) {
      intStr = intStr.substring(1, intStr.length);
    }
  } else {
    rest = toValueString$c(num).replace(/,/g, "");
    result = rest ? [rest] : [];
    intStr = result[0];
  }
  if (result.length) {
    return (isNegative ? "-" : "") + intStr.replace(new RegExp("(?=(?!(\\b))(.{" + (opts.spaceNumber || 3) + "})+$)", "g"), opts.separator || ",") + (floatStr ? "." + floatStr : "");
  }
  return rest;
}
var commafy_1 = commafy$1;
var staticParseInt$1 = staticParseInt_1;
var helperCreateToNumber = helperCreateToNumber_1;
var toInteger$4 = helperCreateToNumber(staticParseInt$1);
var toInteger_1 = toInteger$4;
var helperMultiply = helperMultiply_1;
var toNumber$6 = toNumber_1;
function multiply$3(num1, num2) {
  var multiplier = toNumber$6(num1);
  var multiplicand = toNumber$6(num2);
  return helperMultiply(multiplier, multiplicand);
}
var multiply_1 = multiply$3;
var helperNumberDecimal$2 = helperNumberDecimal_1;
var toNumberString$3 = toNumberString_1;
var multiply$2 = multiply_1;
function helperNumberAdd$2(addend, augend) {
  var str1 = toNumberString$3(addend);
  var str2 = toNumberString$3(augend);
  var ratio = Math.pow(10, Math.max(helperNumberDecimal$2(str1), helperNumberDecimal$2(str2)));
  return (multiply$2(addend, ratio) + multiply$2(augend, ratio)) / ratio;
}
var helperNumberAdd_1 = helperNumberAdd$2;
var helperNumberAdd$1 = helperNumberAdd_1;
var toNumber$5 = toNumber_1;
function add$3(num1, num2) {
  return helperNumberAdd$1(toNumber$5(num1), toNumber$5(num2));
}
var add_1 = add$3;
var helperNumberDecimal$1 = helperNumberDecimal_1;
var toNumberString$2 = toNumberString_1;
var toNumber$4 = toNumber_1;
var toFixed$1 = toFixed_1;
function subtract$1(num1, num2) {
  var subtrahend = toNumber$4(num1);
  var minuend = toNumber$4(num2);
  var str1 = toNumberString$2(subtrahend);
  var str2 = toNumberString$2(minuend);
  var digit1 = helperNumberDecimal$1(str1);
  var digit2 = helperNumberDecimal$1(str2);
  var ratio = Math.pow(10, Math.max(digit1, digit2));
  var precision = digit1 >= digit2 ? digit1 : digit2;
  return parseFloat(toFixed$1((subtrahend * ratio - minuend * ratio) / ratio, precision));
}
var subtract_1 = subtract$1;
var helperNumberDecimal = helperNumberDecimal_1;
var toNumberString$1 = toNumberString_1;
var multiply$1 = multiply_1;
function helperNumberDivide$2(divisor, dividend) {
  var str1 = toNumberString$1(divisor);
  var str2 = toNumberString$1(dividend);
  var divisorDecimal = helperNumberDecimal(str1);
  var dividendDecimal = helperNumberDecimal(str2);
  var powY = dividendDecimal - divisorDecimal;
  var isMinus = powY < 0;
  var multiplicand = Math.pow(10, isMinus ? Math.abs(powY) : powY);
  return multiply$1(str1.replace(".", "") / str2.replace(".", ""), isMinus ? 1 / multiplicand : multiplicand);
}
var helperNumberDivide_1 = helperNumberDivide$2;
var helperNumberDivide$1 = helperNumberDivide_1;
var toNumber$3 = toNumber_1;
function divide$1(num1, num2) {
  return helperNumberDivide$1(toNumber$3(num1), toNumber$3(num2));
}
var divide_1 = divide$1;
var helperNumberAdd = helperNumberAdd_1;
var isFunction$4 = isFunction_1;
var each$3 = each_1;
var get$2 = get_1;
function sum$2(array3, iterate, context) {
  var result = 0;
  each$3(array3, iterate ? isFunction$4(iterate) ? function() {
    result = helperNumberAdd(result, iterate.apply(context, arguments));
  } : function(val) {
    result = helperNumberAdd(result, get$2(val, iterate));
  } : function(val) {
    result = helperNumberAdd(result, val);
  });
  return result;
}
var sum_1 = sum$2;
var helperNumberDivide = helperNumberDivide_1;
var getSize$1 = getSize_1;
var sum$1 = sum_1;
function mean$1(array3, iterate, context) {
  return helperNumberDivide(sum$1(array3, iterate, context), getSize$1(array3));
}
var mean_1 = mean$1;
var staticStrFirst$5 = "first";
var staticStrFirst_1 = staticStrFirst$5;
var staticStrLast$4 = "last";
var staticStrLast_1 = staticStrLast$4;
function helperGetDateFullYear$5(date3) {
  return date3.getFullYear();
}
var helperGetDateFullYear_1 = helperGetDateFullYear$5;
var staticDayTime$5 = 864e5;
var staticDayTime_1 = staticDayTime$5;
function helperGetDateMonth$4(date3) {
  return date3.getMonth();
}
var helperGetDateMonth_1 = helperGetDateMonth$4;
var isDate$4 = isDate_1;
var helperGetDateTime$a = helperGetDateTime_1;
function isValidDate$c(val) {
  return isDate$4(val) && !isNaN(helperGetDateTime$a(val));
}
var isValidDate_1 = isValidDate$c;
var staticStrFirst$4 = staticStrFirst_1;
var staticStrLast$3 = staticStrLast_1;
var staticDayTime$4 = staticDayTime_1;
var helperGetDateFullYear$4 = helperGetDateFullYear_1;
var helperGetDateTime$9 = helperGetDateTime_1;
var helperGetDateMonth$3 = helperGetDateMonth_1;
var toStringDate$b = toStringDate_1;
var isValidDate$b = isValidDate_1;
var isNumber$3 = isNumber_1;
function getWhatMonth$5(date3, offsetMonth, offsetDay) {
  var monthNum = offsetMonth && !isNaN(offsetMonth) ? offsetMonth : 0;
  date3 = toStringDate$b(date3);
  if (isValidDate$b(date3)) {
    if (offsetDay === staticStrFirst$4) {
      return new Date(helperGetDateFullYear$4(date3), helperGetDateMonth$3(date3) + monthNum, 1);
    } else if (offsetDay === staticStrLast$3) {
      return new Date(helperGetDateTime$9(getWhatMonth$5(date3, monthNum + 1, staticStrFirst$4)) - 1);
    } else if (isNumber$3(offsetDay)) {
      date3.setDate(offsetDay);
    }
    if (monthNum) {
      var currDate = date3.getDate();
      date3.setMonth(helperGetDateMonth$3(date3) + monthNum);
      if (currDate !== date3.getDate()) {
        date3.setDate(1);
        return new Date(helperGetDateTime$9(date3) - staticDayTime$4);
      }
    }
  }
  return date3;
}
var getWhatMonth_1 = getWhatMonth$5;
var staticStrFirst$3 = staticStrFirst_1;
var staticStrLast$2 = staticStrLast_1;
var helperGetDateFullYear$3 = helperGetDateFullYear_1;
var getWhatMonth$4 = getWhatMonth_1;
var toStringDate$a = toStringDate_1;
var isValidDate$a = isValidDate_1;
function getWhatYear$4(date3, offset, month) {
  var number3;
  date3 = toStringDate$a(date3);
  if (isValidDate$a(date3)) {
    if (offset) {
      number3 = offset && !isNaN(offset) ? offset : 0;
      date3.setFullYear(helperGetDateFullYear$3(date3) + number3);
    }
    if (month || !isNaN(month)) {
      if (month === staticStrFirst$3) {
        return new Date(helperGetDateFullYear$3(date3), 0, 1);
      } else if (month === staticStrLast$2) {
        date3.setMonth(11);
        return getWhatMonth$4(date3, 0, staticStrLast$2);
      } else {
        date3.setMonth(month);
      }
    }
  }
  return date3;
}
var getWhatYear_1 = getWhatYear$4;
var getWhatMonth$3 = getWhatMonth_1;
var toStringDate$9 = toStringDate_1;
var isValidDate$9 = isValidDate_1;
function getQuarterNumber(date3) {
  var month = date3.getMonth();
  if (month < 3) {
    return 1;
  } else if (month < 6) {
    return 2;
  } else if (month < 9) {
    return 3;
  }
  return 4;
}
function getWhatQuarter$1(date3, offset, day) {
  var currMonth, monthOffset = offset && !isNaN(offset) ? offset * 3 : 0;
  date3 = toStringDate$9(date3);
  if (isValidDate$9(date3)) {
    currMonth = (getQuarterNumber(date3) - 1) * 3;
    date3.setMonth(currMonth);
    return getWhatMonth$3(date3, monthOffset, day);
  }
  return date3;
}
var getWhatQuarter_1 = getWhatQuarter$1;
var staticStrFirst$2 = staticStrFirst_1;
var staticStrLast$1 = staticStrLast_1;
var staticParseInt = staticParseInt_1;
var helperGetDateFullYear$2 = helperGetDateFullYear_1;
var helperGetDateMonth$2 = helperGetDateMonth_1;
var helperGetDateTime$8 = helperGetDateTime_1;
var toStringDate$8 = toStringDate_1;
var isValidDate$8 = isValidDate_1;
function getWhatDay$2(date3, offset, mode) {
  date3 = toStringDate$8(date3);
  if (isValidDate$8(date3) && !isNaN(offset)) {
    date3.setDate(date3.getDate() + staticParseInt(offset));
    if (mode === staticStrFirst$2) {
      return new Date(helperGetDateFullYear$2(date3), helperGetDateMonth$2(date3), date3.getDate());
    } else if (mode === staticStrLast$1) {
      return new Date(helperGetDateTime$8(getWhatDay$2(date3, 1, staticStrFirst$2)) - 1);
    }
  }
  return date3;
}
var getWhatDay_1 = getWhatDay$2;
function helperStringUpperCase$2(str) {
  return str.toUpperCase();
}
var helperStringUpperCase_1 = helperStringUpperCase$2;
var staticDayTime$3 = staticDayTime_1;
var staticWeekTime$2 = staticDayTime$3 * 7;
var staticWeekTime_1 = staticWeekTime$2;
var setupDefaults$5 = setupDefaults_1;
var staticDayTime$2 = staticDayTime_1;
var staticWeekTime$1 = staticWeekTime_1;
var helperGetDateTime$7 = helperGetDateTime_1;
var toStringDate$7 = toStringDate_1;
var isValidDate$7 = isValidDate_1;
var isNumber$2 = isNumber_1;
function getWhatWeek$2(date3, offsetWeek, offsetDay, firstDay) {
  date3 = toStringDate$7(date3);
  if (isValidDate$7(date3)) {
    var hasCustomDay = isNumber$2(offsetDay);
    var hasStartDay = isNumber$2(firstDay);
    var whatDayTime = helperGetDateTime$7(date3);
    if (hasCustomDay || hasStartDay) {
      var viewStartDay = hasStartDay ? firstDay : setupDefaults$5.firstDayOfWeek;
      var currentDay = date3.getDay();
      var customDay = hasCustomDay ? offsetDay : currentDay;
      if (currentDay !== customDay) {
        var offsetNum = 0;
        if (viewStartDay > currentDay) {
          offsetNum = -(7 - viewStartDay + currentDay);
        } else if (viewStartDay < currentDay) {
          offsetNum = viewStartDay - currentDay;
        }
        if (customDay > viewStartDay) {
          whatDayTime += ((customDay === 0 ? 7 : customDay) - viewStartDay + offsetNum) * staticDayTime$2;
        } else if (customDay < viewStartDay) {
          whatDayTime += (7 - viewStartDay + customDay + offsetNum) * staticDayTime$2;
        } else {
          whatDayTime += offsetNum * staticDayTime$2;
        }
      }
    }
    if (offsetWeek && !isNaN(offsetWeek)) {
      whatDayTime += offsetWeek * staticWeekTime$1;
    }
    return new Date(whatDayTime);
  }
  return date3;
}
var getWhatWeek_1 = getWhatWeek$2;
var setupDefaults$4 = setupDefaults_1;
var staticWeekTime = staticWeekTime_1;
var isNumber$1 = isNumber_1;
var isValidDate$6 = isValidDate_1;
var getWhatWeek$1 = getWhatWeek_1;
var helperGetDateTime$6 = helperGetDateTime_1;
function helperCreateGetDateWeek$2(getStartDate) {
  return function(date3, firstDay) {
    var viewStartDay = isNumber$1(firstDay) ? firstDay : setupDefaults$4.firstDayOfWeek;
    var targetDate = getWhatWeek$1(date3, 0, viewStartDay, viewStartDay);
    if (isValidDate$6(targetDate)) {
      var targetOffsetDate = new Date(targetDate.getFullYear(), targetDate.getMonth(), targetDate.getDate());
      var targerStartDate = getStartDate(targetDate);
      var targetFirstDay = targerStartDate.getDay();
      if (targetFirstDay > viewStartDay) {
        targerStartDate.setDate(7 - targetFirstDay + viewStartDay + 1);
      }
      if (targetFirstDay < viewStartDay) {
        targerStartDate.setDate(viewStartDay - targetFirstDay + 1);
      }
      return Math.floor((helperGetDateTime$6(targetOffsetDate) - helperGetDateTime$6(targerStartDate)) / staticWeekTime + 1);
    }
    return NaN;
  };
}
var helperCreateGetDateWeek_1 = helperCreateGetDateWeek$2;
var helperCreateGetDateWeek$1 = helperCreateGetDateWeek_1;
var getYearWeek$2 = helperCreateGetDateWeek$1(function(targetDate) {
  return new Date(targetDate.getFullYear(), 0, 1);
});
var getYearWeek_1 = getYearWeek$2;
var helperGetDateFullYear$1 = helperGetDateFullYear_1;
var helperGetDateMonth$1 = helperGetDateMonth_1;
function helperGetYMD$1(date3) {
  return new Date(helperGetDateFullYear$1(date3), helperGetDateMonth$1(date3), date3.getDate());
}
var helperGetYMD_1 = helperGetYMD$1;
var helperGetDateTime$5 = helperGetDateTime_1;
var helperGetYMD = helperGetYMD_1;
function helperGetYMDTime$1(date3) {
  return helperGetDateTime$5(helperGetYMD(date3));
}
var helperGetYMDTime_1 = helperGetYMDTime$1;
var staticDayTime$1 = staticDayTime_1;
var staticStrFirst$1 = staticStrFirst_1;
var helperGetYMDTime = helperGetYMDTime_1;
var getWhatYear$3 = getWhatYear_1;
var toStringDate$6 = toStringDate_1;
var isValidDate$5 = isValidDate_1;
function getYearDay$2(date3) {
  date3 = toStringDate$6(date3);
  if (isValidDate$5(date3)) {
    return Math.floor((helperGetYMDTime(date3) - helperGetYMDTime(getWhatYear$3(date3, 0, staticStrFirst$1))) / staticDayTime$1) + 1;
  }
  return NaN;
}
var getYearDay_1 = getYearDay$2;
var toValueString$b = toValueString_1;
var isUndefined$4 = isUndefined_1;
var helperStringRepeat$2 = helperStringRepeat_1;
function padStart$2(str, targetLength, padString) {
  var rest = toValueString$b(str);
  targetLength = targetLength >> 0;
  padString = isUndefined$4(padString) ? " " : "" + padString;
  if (rest.padStart) {
    return rest.padStart(targetLength, padString);
  }
  if (targetLength > rest.length) {
    targetLength -= rest.length;
    if (targetLength > padString.length) {
      padString += helperStringRepeat$2(padString, targetLength / padString.length);
    }
    return padString.slice(0, targetLength) + rest;
  }
  return rest;
}
var padStart_1 = padStart$2;
var setupDefaults$3 = setupDefaults_1;
var helperStringUpperCase$1 = helperStringUpperCase_1;
var helperGetDateFullYear = helperGetDateFullYear_1;
var helperGetDateMonth = helperGetDateMonth_1;
var toStringDate$5 = toStringDate_1;
var getYearWeek$1 = getYearWeek_1;
var getYearDay$1 = getYearDay_1;
var assign$5 = assign_1;
var isValidDate$4 = isValidDate_1;
var isFunction$3 = isFunction_1;
var padStart$1 = padStart_1;
function handleCustomTemplate(date3, formats2, match, value6) {
  var format2 = formats2[match];
  if (format2) {
    if (isFunction$3(format2)) {
      return format2(value6, match, date3);
    } else {
      return format2[value6];
    }
  }
  return value6;
}
var dateFormatRE = /\[([^\]]+)]|y{2,4}|M{1,2}|d{1,2}|H{1,2}|h{1,2}|m{1,2}|s{1,2}|S{1,3}|Z{1,2}|W{1,2}|D{1,3}|[aAeEq]/g;
function toDateString$2(date3, format2, options2) {
  if (date3) {
    date3 = toStringDate$5(date3);
    if (isValidDate$4(date3)) {
      var result = format2 || setupDefaults$3.parseDateFormat || setupDefaults$3.formatString;
      var hours = date3.getHours();
      var apm = hours < 12 ? "am" : "pm";
      var formats2 = assign$5({}, setupDefaults$3.parseDateRules || setupDefaults$3.formatStringMatchs, options2 ? options2.formats : null);
      var fy = function(match, length) {
        return ("" + helperGetDateFullYear(date3)).substr(4 - length);
      };
      var fM = function(match, length) {
        return padStart$1(helperGetDateMonth(date3) + 1, length, "0");
      };
      var fd = function(match, length) {
        return padStart$1(date3.getDate(), length, "0");
      };
      var fH = function(match, length) {
        return padStart$1(hours, length, "0");
      };
      var fh = function(match, length) {
        return padStart$1(hours <= 12 ? hours : hours - 12, length, "0");
      };
      var fm = function(match, length) {
        return padStart$1(date3.getMinutes(), length, "0");
      };
      var fs = function(match, length) {
        return padStart$1(date3.getSeconds(), length, "0");
      };
      var fS = function(match, length) {
        return padStart$1(date3.getMilliseconds(), length, "0");
      };
      var fZ = function(match, length) {
        var zoneHours = date3.getTimezoneOffset() / 60 * -1;
        return handleCustomTemplate(date3, formats2, match, (zoneHours >= 0 ? "+" : "-") + padStart$1(zoneHours, 2, "0") + (length === 1 ? ":" : "") + "00");
      };
      var fW = function(match, length) {
        return padStart$1(handleCustomTemplate(date3, formats2, match, getYearWeek$1(date3, (options2 ? options2.firstDay : null) || setupDefaults$3.firstDayOfWeek)), length, "0");
      };
      var fD = function(match, length) {
        return padStart$1(handleCustomTemplate(date3, formats2, match, getYearDay$1(date3)), length, "0");
      };
      var parseDates = {
        yyyy: fy,
        yy: fy,
        MM: fM,
        M: fM,
        dd: fd,
        d: fd,
        HH: fH,
        H: fH,
        hh: fh,
        h: fh,
        mm: fm,
        m: fm,
        ss: fs,
        s: fs,
        SSS: fS,
        S: fS,
        ZZ: fZ,
        Z: fZ,
        WW: fW,
        W: fW,
        DDD: fD,
        D: fD,
        a: function(match) {
          return handleCustomTemplate(date3, formats2, match, apm);
        },
        A: function(match) {
          return handleCustomTemplate(date3, formats2, match, helperStringUpperCase$1(apm));
        },
        e: function(match) {
          return handleCustomTemplate(date3, formats2, match, date3.getDay());
        },
        E: function(match) {
          return handleCustomTemplate(date3, formats2, match, date3.getDay());
        },
        q: function(match) {
          return handleCustomTemplate(date3, formats2, match, Math.floor((helperGetDateMonth(date3) + 3) / 3));
        }
      };
      return result.replace(dateFormatRE, function(match, skip) {
        return skip || (parseDates[match] ? parseDates[match](match, match.length) : match);
      });
    }
    return "Invalid Date";
  }
  return "";
}
var toDateString_1 = toDateString$2;
var helperGetDateTime$4 = helperGetDateTime_1;
var helperNewDate$2 = helperNewDate_1;
var now$4 = Date.now || function() {
  return helperGetDateTime$4(helperNewDate$2());
};
var now_1 = now$4;
var helperGetDateTime$3 = helperGetDateTime_1;
var now$3 = now_1;
var toStringDate$4 = toStringDate_1;
var isDate$3 = isDate_1;
var timestamp$1 = function(str, format2) {
  if (str) {
    var date3 = toStringDate$4(str, format2);
    return isDate$3(date3) ? helperGetDateTime$3(date3) : date3;
  }
  return now$3();
};
var timestamp_1 = timestamp$1;
var toDateString$1 = toDateString_1;
function isDateSame$1(date1, date22, format2) {
  if (date1 && date22) {
    date1 = toDateString$1(date1, format2);
    return date1 !== "Invalid Date" && date1 === toDateString$1(date22, format2);
  }
  return false;
}
var isDateSame_1 = isDateSame$1;
var helperCreateGetDateWeek = helperCreateGetDateWeek_1;
var getMonthWeek$1 = helperCreateGetDateWeek(function(targetDate) {
  return new Date(targetDate.getFullYear(), targetDate.getMonth(), 1);
});
var getMonthWeek_1 = getMonthWeek$1;
var getWhatYear$2 = getWhatYear_1;
var toStringDate$3 = toStringDate_1;
var isValidDate$3 = isValidDate_1;
var isLeapYear$1 = isLeapYear_1;
function getDayOfYear$1(date3, year) {
  date3 = toStringDate$3(date3);
  if (isValidDate$3(date3)) {
    return isLeapYear$1(getWhatYear$2(date3, year)) ? 366 : 365;
  }
  return NaN;
}
var getDayOfYear_1 = getDayOfYear$1;
var staticDayTime = staticDayTime_1;
var staticStrFirst = staticStrFirst_1;
var staticStrLast = staticStrLast_1;
var helperGetDateTime$2 = helperGetDateTime_1;
var getWhatMonth$2 = getWhatMonth_1;
var toStringDate$2 = toStringDate_1;
var isValidDate$2 = isValidDate_1;
function getDayOfMonth$1(date3, month) {
  date3 = toStringDate$2(date3);
  if (isValidDate$2(date3)) {
    return Math.floor((helperGetDateTime$2(getWhatMonth$2(date3, month, staticStrLast)) - helperGetDateTime$2(getWhatMonth$2(date3, month, staticStrFirst))) / staticDayTime) + 1;
  }
  return NaN;
}
var getDayOfMonth_1 = getDayOfMonth$1;
var setupDefaults$2 = setupDefaults_1;
var helperGetDateTime$1 = helperGetDateTime_1;
var helperNewDate$1 = helperNewDate_1;
var toStringDate$1 = toStringDate_1;
var isValidDate$1 = isValidDate_1;
function getDateDiff$1(startDate, endDate, rules2) {
  var startTime, endTime, item, diffTime, rule, len, index2;
  var result = { done: false, time: 0 };
  startDate = toStringDate$1(startDate);
  endDate = endDate ? toStringDate$1(endDate) : helperNewDate$1();
  if (isValidDate$1(startDate) && isValidDate$1(endDate)) {
    startTime = helperGetDateTime$1(startDate);
    endTime = helperGetDateTime$1(endDate);
    if (startTime < endTime) {
      diffTime = result.time = endTime - startTime;
      rule = rules2 && rules2.length > 0 ? rules2 : setupDefaults$2.dateDiffRules;
      result.done = true;
      for (index2 = 0, len = rule.length; index2 < len; index2++) {
        item = rule[index2];
        if (diffTime >= item[1]) {
          if (index2 === len - 1) {
            result[item[0]] = diffTime || 0;
          } else {
            result[item[0]] = Math.floor(diffTime / item[1]);
            diffTime -= result[item[0]] * item[1];
          }
        } else {
          result[item[0]] = 0;
        }
      }
    }
  }
  return result;
}
var getDateDiff_1 = getDateDiff$1;
var toValueString$a = toValueString_1;
var isUndefined$3 = isUndefined_1;
var helperStringRepeat$1 = helperStringRepeat_1;
function padEnd$1(str, targetLength, padString) {
  var rest = toValueString$a(str);
  targetLength = targetLength >> 0;
  padString = isUndefined$3(padString) ? " " : "" + padString;
  if (rest.padEnd) {
    return rest.padEnd(targetLength, padString);
  }
  if (targetLength > rest.length) {
    targetLength -= rest.length;
    if (targetLength > padString.length) {
      padString += helperStringRepeat$1(padString, targetLength / padString.length);
    }
    return rest + padString.slice(0, targetLength);
  }
  return rest;
}
var padEnd_1 = padEnd$1;
var toValueString$9 = toValueString_1;
var helperStringRepeat = helperStringRepeat_1;
function repeat$1(str, count) {
  return helperStringRepeat(toValueString$9(str), count);
}
var repeat_1 = repeat$1;
var toValueString$8 = toValueString_1;
function trimRight$2(str) {
  return str && str.trimRight ? str.trimRight() : toValueString$8(str).replace(/[\s\uFEFF\xA0]+$/g, "");
}
var trimRight_1 = trimRight$2;
var toValueString$7 = toValueString_1;
function trimLeft$2(str) {
  return str && str.trimLeft ? str.trimLeft() : toValueString$7(str).replace(/^[\s\uFEFF\xA0]+/g, "");
}
var trimLeft_1 = trimLeft$2;
var trimRight$1 = trimRight_1;
var trimLeft$1 = trimLeft_1;
function trim$3(str) {
  return str && str.trim ? str.trim() : trimRight$1(trimLeft$1(str));
}
var trim_1 = trim$3;
var staticEscapeMap$2 = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#x27;",
  "`": "&#x60;"
};
var staticEscapeMap_1 = staticEscapeMap$2;
var toValueString$6 = toValueString_1;
var keys$3 = keys_1;
function helperFormatEscaper$2(dataMap) {
  var replaceRegexp = new RegExp("(?:" + keys$3(dataMap).join("|") + ")", "g");
  return function(str) {
    return toValueString$6(str).replace(replaceRegexp, function(match) {
      return dataMap[match];
    });
  };
}
var helperFormatEscaper_1 = helperFormatEscaper$2;
var staticEscapeMap$1 = staticEscapeMap_1;
var helperFormatEscaper$1 = helperFormatEscaper_1;
var escape$1 = helperFormatEscaper$1(staticEscapeMap$1);
var _escape = escape$1;
var staticEscapeMap = staticEscapeMap_1;
var helperFormatEscaper = helperFormatEscaper_1;
var each$2 = each_1;
var unescapeMap = {};
each$2(staticEscapeMap, function(item, key) {
  unescapeMap[staticEscapeMap[key]] = key;
});
var unescape$1 = helperFormatEscaper(unescapeMap);
var _unescape = unescape$1;
function helperStringSubstring$2(str, start, end) {
  return str.substring(start, end);
}
var helperStringSubstring_1 = helperStringSubstring$2;
function helperStringLowerCase$2(str) {
  return str.toLowerCase();
}
var helperStringLowerCase_1 = helperStringLowerCase$2;
var toValueString$5 = toValueString_1;
var helperStringSubstring$1 = helperStringSubstring_1;
var helperStringUpperCase = helperStringUpperCase_1;
var helperStringLowerCase$1 = helperStringLowerCase_1;
var camelCacheMaps = {};
function camelCase$2(str) {
  str = toValueString$5(str);
  if (camelCacheMaps[str]) {
    return camelCacheMaps[str];
  }
  var strLen = str.length;
  var rest = str.replace(/([-]+)/g, function(text, flag, index2) {
    return index2 && index2 + flag.length < strLen ? "-" : "";
  });
  strLen = rest.length;
  rest = rest.replace(/([A-Z]+)/g, function(text, upper, index2) {
    var upperLen = upper.length;
    upper = helperStringLowerCase$1(upper);
    if (index2) {
      if (upperLen > 2 && index2 + upperLen < strLen) {
        return helperStringUpperCase(helperStringSubstring$1(upper, 0, 1)) + helperStringSubstring$1(upper, 1, upperLen - 1) + helperStringUpperCase(helperStringSubstring$1(upper, upperLen - 1, upperLen));
      }
      return helperStringUpperCase(helperStringSubstring$1(upper, 0, 1)) + helperStringSubstring$1(upper, 1, upperLen);
    } else {
      if (upperLen > 1 && index2 + upperLen < strLen) {
        return helperStringSubstring$1(upper, 0, upperLen - 1) + helperStringUpperCase(helperStringSubstring$1(upper, upperLen - 1, upperLen));
      }
    }
    return upper;
  }).replace(/(-[a-zA-Z])/g, function(text, upper) {
    return helperStringUpperCase(helperStringSubstring$1(upper, 1, upper.length));
  });
  camelCacheMaps[str] = rest;
  return rest;
}
var camelCase_1 = camelCase$2;
var toValueString$4 = toValueString_1;
var helperStringSubstring = helperStringSubstring_1;
var helperStringLowerCase = helperStringLowerCase_1;
var kebabCacheMaps = {};
function kebabCase$1(str) {
  str = toValueString$4(str);
  if (kebabCacheMaps[str]) {
    return kebabCacheMaps[str];
  }
  if (/^[A-Z]+$/.test(str)) {
    return helperStringLowerCase(str);
  }
  var rest = str.replace(/^([a-z])([A-Z]+)([a-z]+)$/, function(text, prevLower, upper, nextLower) {
    var upperLen = upper.length;
    if (upperLen > 1) {
      return prevLower + "-" + helperStringLowerCase(helperStringSubstring(upper, 0, upperLen - 1)) + "-" + helperStringLowerCase(helperStringSubstring(upper, upperLen - 1, upperLen)) + nextLower;
    }
    return helperStringLowerCase(prevLower + "-" + upper + nextLower);
  }).replace(/^([A-Z]+)([a-z]+)?$/, function(text, upper, nextLower) {
    var upperLen = upper.length;
    return helperStringLowerCase(helperStringSubstring(upper, 0, upperLen - 1) + "-" + helperStringSubstring(upper, upperLen - 1, upperLen) + (nextLower || ""));
  }).replace(/([a-z]?)([A-Z]+)([a-z]?)/g, function(text, prevLower, upper, nextLower, index2) {
    var upperLen = upper.length;
    if (upperLen > 1) {
      if (prevLower) {
        prevLower += "-";
      }
      if (nextLower) {
        return (prevLower || "") + helperStringLowerCase(helperStringSubstring(upper, 0, upperLen - 1)) + "-" + helperStringLowerCase(helperStringSubstring(upper, upperLen - 1, upperLen)) + nextLower;
      }
    }
    return (prevLower || "") + (index2 ? "-" : "") + helperStringLowerCase(upper) + (nextLower || "");
  });
  rest = rest.replace(/([-]+)/g, function(text, flag, index2) {
    return index2 && index2 + flag.length < rest.length ? "-" : "";
  });
  kebabCacheMaps[str] = rest;
  return rest;
}
var kebabCase_1 = kebabCase$1;
var toValueString$3 = toValueString_1;
function startsWith$1(str, val, startIndex) {
  var rest = toValueString$3(str);
  return (arguments.length === 1 ? rest : rest.substring(startIndex)).indexOf(val) === 0;
}
var startsWith_1 = startsWith$1;
var toValueString$2 = toValueString_1;
function endsWith$1(str, val, startIndex) {
  var rest = toValueString$2(str);
  var argsLen = arguments.length;
  return argsLen > 1 && (argsLen > 2 ? rest.substring(0, startIndex).indexOf(val) === startIndex - 1 : rest.indexOf(val) === rest.length - 1);
}
var endsWith_1 = endsWith$1;
var setupDefaults$1 = setupDefaults_1;
var toValueString$1 = toValueString_1;
var trim$2 = trim_1;
var get$1 = get_1;
function template$2(str, args, options2) {
  return toValueString$1(str).replace((options2 || setupDefaults$1).tmplRE || /\{{2}([.\w[\]\s]+)\}{2}/g, function(match, key) {
    return get$1(args, trim$2(key));
  });
}
var template_1 = template$2;
var template$1 = template_1;
function toFormatString$1(str, obj) {
  return template$1(str, obj, { tmplRE: /\{([.\w[\]\s]+)\}/g });
}
var toFormatString_1 = toFormatString$1;
function noop$3() {
}
var noop_1 = noop$3;
var slice$5 = slice_1;
function bind$2(callback, context) {
  var args = slice$5(arguments, 2);
  return function() {
    return callback.apply(context, slice$5(arguments).concat(args));
  };
}
var bind_1 = bind$2;
var slice$4 = slice_1;
function once$2(callback, context) {
  var done = false;
  var rest = null;
  var args = slice$4(arguments, 2);
  return function() {
    if (done) {
      return rest;
    }
    rest = callback.apply(context, slice$4(arguments).concat(args));
    done = true;
    return rest;
  };
}
var once_1 = once$2;
var slice$3 = slice_1;
function after$1(count, callback, context) {
  var runCount = 0;
  var rests = [];
  return function() {
    var args = arguments;
    runCount++;
    if (runCount <= count) {
      rests.push(args[0]);
    }
    if (runCount >= count) {
      callback.apply(context, [rests].concat(slice$3(args)));
    }
  };
}
var after_1 = after$1;
var slice$2 = slice_1;
function before$1(count, callback, context) {
  var runCount = 0;
  var rests = [];
  context = context || this;
  return function() {
    var args = arguments;
    runCount++;
    if (runCount < count) {
      rests.push(args[0]);
      callback.apply(context, [rests].concat(slice$2(args)));
    }
  };
}
var before_1 = before$1;
function throttle$5(callback, wait, options2) {
  var args, context;
  var opts = options2 || {};
  var runFlag = false;
  var timeout = 0;
  var optLeading = "leading" in opts ? opts.leading : true;
  var optTrailing = "trailing" in opts ? opts.trailing : false;
  var runFn = function() {
    runFlag = true;
    callback.apply(context, args);
    timeout = setTimeout(endFn, wait);
  };
  var endFn = function() {
    timeout = 0;
    if (!runFlag && optTrailing === true) {
      runFn();
    }
  };
  var cancelFn = function() {
    var rest = timeout !== 0;
    clearTimeout(timeout);
    runFlag = false;
    timeout = 0;
    return rest;
  };
  var throttled = function() {
    args = arguments;
    context = this;
    runFlag = false;
    if (timeout === 0) {
      if (optLeading === true) {
        runFn();
      } else if (optTrailing === true) {
        timeout = setTimeout(endFn, wait);
      }
    }
  };
  throttled.cancel = cancelFn;
  return throttled;
}
var throttle_1 = throttle$5;
function debounce$4(callback, wait, options2) {
  var args, context;
  var opts = options2 || {};
  var runFlag = false;
  var timeout = 0;
  var isLeading = typeof options2 === "boolean";
  var optLeading = "leading" in opts ? opts.leading : isLeading;
  var optTrailing = "trailing" in opts ? opts.trailing : !isLeading;
  var runFn = function() {
    runFlag = true;
    timeout = 0;
    callback.apply(context, args);
  };
  var endFn = function() {
    if (optLeading === true) {
      timeout = 0;
    }
    if (!runFlag && optTrailing === true) {
      runFn();
    }
  };
  var cancelFn = function() {
    var rest = timeout !== 0;
    clearTimeout(timeout);
    timeout = 0;
    return rest;
  };
  var debounced = function() {
    runFlag = false;
    args = arguments;
    context = this;
    if (timeout === 0) {
      if (optLeading === true) {
        runFn();
      }
    } else {
      clearTimeout(timeout);
    }
    timeout = setTimeout(endFn, wait);
  };
  debounced.cancel = cancelFn;
  return debounced;
}
var debounce_1 = debounce$4;
var slice$1 = slice_1;
function delay$1(callback, wait) {
  var args = slice$1(arguments, 2);
  var context = this;
  return setTimeout(function() {
    callback.apply(context, args);
  }, wait);
}
var delay_1 = delay$1;
var staticDecodeURIComponent$2 = decodeURIComponent;
var staticDecodeURIComponent_1 = staticDecodeURIComponent$2;
var staticDecodeURIComponent$1 = staticDecodeURIComponent_1;
var arrayEach$4 = arrayEach_1;
var isString$2 = isString_1;
function unserialize$2(str) {
  var items2;
  var result = {};
  if (str && isString$2(str)) {
    arrayEach$4(str.split("&"), function(param) {
      items2 = param.split("=");
      result[staticDecodeURIComponent$1(items2[0])] = staticDecodeURIComponent$1(items2[1] || "");
    });
  }
  return result;
}
var unserialize_1 = unserialize$2;
var staticEncodeURIComponent$2 = encodeURIComponent;
var staticEncodeURIComponent_1 = staticEncodeURIComponent$2;
var staticEncodeURIComponent$1 = staticEncodeURIComponent_1;
var each$1 = each_1;
var isArray$5 = isArray_1;
var isNull$1 = isNull_1;
var isUndefined$2 = isUndefined_1;
var isPlainObject$3 = isPlainObject_1;
function stringifyParams(resultVal, resultKey, isArr) {
  var _arr;
  var result = [];
  each$1(resultVal, function(item, key) {
    _arr = isArray$5(item);
    if (isPlainObject$3(item) || _arr) {
      result = result.concat(stringifyParams(item, resultKey + "[" + key + "]", _arr));
    } else {
      result.push(staticEncodeURIComponent$1(resultKey + "[" + (isArr ? "" : key) + "]") + "=" + staticEncodeURIComponent$1(isNull$1(item) ? "" : item));
    }
  });
  return result;
}
function serialize$1(query2) {
  var _arr;
  var params = [];
  each$1(query2, function(item, key) {
    if (!isUndefined$2(item)) {
      _arr = isArray$5(item);
      if (isPlainObject$3(item) || _arr) {
        params = params.concat(stringifyParams(item, key, _arr));
      } else {
        params.push(staticEncodeURIComponent$1(key) + "=" + staticEncodeURIComponent$1(isNull$1(item) ? "" : item));
      }
    }
  });
  return params.join("&").replace(/%20/g, "+");
}
var serialize_1 = serialize$1;
var staticStrUndefined$1 = staticStrUndefined_1;
var staticLocation$4 = typeof location === staticStrUndefined$1 ? 0 : location;
var staticLocation_1 = staticLocation$4;
var staticLocation$3 = staticLocation_1;
function helperGetLocatOrigin$2() {
  return staticLocation$3 ? staticLocation$3.origin || staticLocation$3.protocol + "//" + staticLocation$3.host : "";
}
var helperGetLocatOrigin_1 = helperGetLocatOrigin$2;
var staticLocation$2 = staticLocation_1;
var unserialize$1 = unserialize_1;
var helperGetLocatOrigin$1 = helperGetLocatOrigin_1;
function parseURLQuery(uri) {
  return unserialize$1(uri.split("?")[1] || "");
}
function parseUrl$2(url2) {
  var hashs, portText, searchs, parsed;
  var href = "" + url2;
  if (href.indexOf("//") === 0) {
    href = (staticLocation$2 ? staticLocation$2.protocol : "") + href;
  } else if (href.indexOf("/") === 0) {
    href = helperGetLocatOrigin$1() + href;
  }
  searchs = href.replace(/#.*/, "").match(/(\?.*)/);
  parsed = {
    href,
    hash: "",
    host: "",
    hostname: "",
    protocol: "",
    port: "",
    search: searchs && searchs[1] && searchs[1].length > 1 ? searchs[1] : ""
  };
  parsed.path = href.replace(/^([a-z0-9.+-]*:)\/\//, function(text, protocol) {
    parsed.protocol = protocol;
    return "";
  }).replace(/^([a-z0-9.+-]*)(:\d+)?\/?/, function(text, hostname, port) {
    portText = port || "";
    parsed.port = portText.replace(":", "");
    parsed.hostname = hostname;
    parsed.host = hostname + portText;
    return "/";
  }).replace(/(#.*)/, function(text, hash) {
    parsed.hash = hash.length > 1 ? hash : "";
    return "";
  });
  hashs = parsed.hash.match(/#((.*)\?|(.*))/);
  parsed.pathname = parsed.path.replace(/(\?|#.*).*/, "");
  parsed.origin = parsed.protocol + "//" + parsed.host;
  parsed.hashKey = hashs ? hashs[2] || hashs[1] || "" : "";
  parsed.hashQuery = parseURLQuery(parsed.hash);
  parsed.searchQuery = parseURLQuery(parsed.search);
  return parsed;
}
var parseUrl_1 = parseUrl$2;
var staticLocation$1 = staticLocation_1;
var helperGetLocatOrigin = helperGetLocatOrigin_1;
var lastIndexOf$1 = lastIndexOf_1;
function getBaseURL$1() {
  if (staticLocation$1) {
    var pathname = staticLocation$1.pathname;
    var lastIndex = lastIndexOf$1(pathname, "/") + 1;
    return helperGetLocatOrigin() + (lastIndex === pathname.length ? pathname : pathname.substring(0, lastIndex));
  }
  return "";
}
var getBaseURL_1 = getBaseURL$1;
var staticLocation = staticLocation_1;
var parseUrl$1 = parseUrl_1;
function locat$1() {
  return staticLocation ? parseUrl$1(staticLocation.href) : {};
}
var locat_1 = locat$1;
var setupDefaults = setupDefaults_1;
var staticDocument$1 = staticDocument_1;
var staticDecodeURIComponent = staticDecodeURIComponent_1;
var staticEncodeURIComponent = staticEncodeURIComponent_1;
var isArray$4 = isArray_1;
var isObject$9 = isObject_1;
var isDate$2 = isDate_1;
var isUndefined$1 = isUndefined_1;
var includes$1 = includes_1;
var keys$2 = keys_1;
var assign$4 = assign_1;
var arrayEach$3 = arrayEach_1;
var helperNewDate = helperNewDate_1;
var helperGetDateTime = helperGetDateTime_1;
var getWhatYear$1 = getWhatYear_1;
var getWhatMonth$1 = getWhatMonth_1;
var getWhatDay$1 = getWhatDay_1;
function toCookieUnitTime(unit, expires) {
  var num = parseFloat(expires);
  var nowdate = helperNewDate();
  var time = helperGetDateTime(nowdate);
  switch (unit) {
    case "y":
      return helperGetDateTime(getWhatYear$1(nowdate, num));
    case "M":
      return helperGetDateTime(getWhatMonth$1(nowdate, num));
    case "d":
      return helperGetDateTime(getWhatDay$1(nowdate, num));
    case "h":
    case "H":
      return time + num * 60 * 60 * 1e3;
    case "m":
      return time + num * 60 * 1e3;
    case "s":
      return time + num * 1e3;
  }
  return time;
}
function toCookieUTCString(date3) {
  return (isDate$2(date3) ? date3 : new Date(date3)).toUTCString();
}
function cookie$1(name, value6, options2) {
  if (staticDocument$1) {
    var opts, expires, values2, result, cookies, keyIndex;
    var inserts = [];
    var args = arguments;
    if (isArray$4(name)) {
      inserts = name;
    } else if (args.length > 1) {
      inserts = [assign$4({ name, value: value6 }, options2)];
    } else if (isObject$9(name)) {
      inserts = [name];
    }
    if (inserts.length > 0) {
      arrayEach$3(inserts, function(obj) {
        opts = assign$4({}, setupDefaults.cookies, obj);
        values2 = [];
        if (opts.name) {
          expires = opts.expires;
          values2.push(staticEncodeURIComponent(opts.name) + "=" + staticEncodeURIComponent(isObject$9(opts.value) ? JSON.stringify(opts.value) : opts.value));
          if (expires) {
            if (isNaN(expires)) {
              expires = expires.replace(/^([0-9]+)(y|M|d|H|h|m|s)$/, function(text, num, unit) {
                return toCookieUTCString(toCookieUnitTime(unit, num));
              });
            } else if (/^[0-9]{11,13}$/.test(expires) || isDate$2(expires)) {
              expires = toCookieUTCString(expires);
            } else {
              expires = toCookieUTCString(toCookieUnitTime("d", expires));
            }
            opts.expires = expires;
          }
          arrayEach$3(["expires", "path", "domain", "secure"], function(key) {
            if (!isUndefined$1(opts[key])) {
              values2.push(opts[key] && key === "secure" ? key : key + "=" + opts[key]);
            }
          });
        }
        staticDocument$1.cookie = values2.join("; ");
      });
      return true;
    } else {
      result = {};
      cookies = staticDocument$1.cookie;
      if (cookies) {
        arrayEach$3(cookies.split("; "), function(val) {
          keyIndex = val.indexOf("=");
          result[staticDecodeURIComponent(val.substring(0, keyIndex))] = staticDecodeURIComponent(val.substring(keyIndex + 1) || "");
        });
      }
      return args.length === 1 ? result[name] : result;
    }
  }
  return false;
}
function hasCookieItem(value6) {
  return includes$1(cookieKeys(), value6);
}
function getCookieItem(name) {
  return cookie$1(name);
}
function setCookieItem(name, value6, options2) {
  cookie$1(name, value6, options2);
  return cookie$1;
}
function removeCookieItem(name, options2) {
  cookie$1(name, "", assign$4({ expires: -1 }, setupDefaults.cookies, options2));
}
function cookieKeys() {
  return keys$2(cookie$1());
}
function cookieJson() {
  return cookie$1();
}
assign$4(cookie$1, {
  has: hasCookieItem,
  set: setCookieItem,
  setItem: setCookieItem,
  get: getCookieItem,
  getItem: getCookieItem,
  remove: removeCookieItem,
  removeItem: removeCookieItem,
  keys: cookieKeys,
  getJSON: cookieJson
});
var cookie_1 = cookie$1;
var staticStrUndefined = staticStrUndefined_1;
var staticDocument = staticDocument_1;
var staticWindow = staticWindow_1;
var assign$3 = assign_1;
var arrayEach$2 = arrayEach_1;
function isBrowseStorage(storage) {
  try {
    var testKey = "__xe_t";
    storage.setItem(testKey, 1);
    storage.removeItem(testKey);
    return true;
  } catch (e) {
    return false;
  }
}
function isBrowseType(type3) {
  return navigator.userAgent.indexOf(type3) > -1;
}
function browse$2() {
  var $body, isChrome, isEdge3;
  var isMobile = false;
  var result = {
    isNode: false,
    isMobile,
    isPC: false,
    isDoc: !!staticDocument
  };
  if (!staticWindow && typeof process !== staticStrUndefined) {
    result.isNode = true;
  } else {
    isEdge3 = isBrowseType("Edge");
    isChrome = isBrowseType("Chrome");
    isMobile = /(Android|webOS|iPhone|iPad|iPod|SymbianOS|BlackBerry|Windows Phone)/.test(navigator.userAgent);
    if (result.isDoc) {
      $body = staticDocument.body || staticDocument.documentElement;
      arrayEach$2(["webkit", "khtml", "moz", "ms", "o"], function(core2) {
        result["-" + core2] = !!$body[core2 + "MatchesSelector"];
      });
    }
    assign$3(result, {
      edge: isEdge3,
      firefox: isBrowseType("Firefox"),
      msie: !isEdge3 && result["-ms"],
      safari: !isChrome && !isEdge3 && isBrowseType("Safari"),
      isMobile,
      isPC: !isMobile,
      isLocalStorage: isBrowseStorage(staticWindow.localStorage),
      isSessionStorage: isBrowseStorage(staticWindow.sessionStorage)
    });
  }
  return result;
}
var browse_1 = browse$2;
var XEUtils = ctor;
var assign$2 = assign_1;
var objectEach = objectEach_1;
var lastObjectEach = lastObjectEach_1;
var objectMap = objectMap_1;
var merge$3 = merge_1;
var map = map_1;
var some = some_1;
var every = every_1;
var includeArrays = includeArrays_1;
var arrayEach$1 = arrayEach_1;
var lastArrayEach = lastArrayEach_1;
var uniq = uniq_1;
var union = union_1;
var toArray$1 = toArray_1;
var sortBy = sortBy_1;
var orderBy = orderBy_1;
var shuffle = shuffle_1;
var sample = sample_1;
var slice = slice_1;
var filter$1 = filter_1;
var findKey = findKey_1;
var includes = includes_1;
var find = find_1;
var findLast = findLast_1;
var reduce = reduce_1;
var copyWithin = copyWithin_1;
var chunk = chunk_1;
var zip = zip_1;
var unzip = unzip_1;
var zipObject = zipObject_1;
var flatten = flatten_1;
var pluck = pluck_1;
var invoke = invoke_1;
var toArrayTree = toArrayTree_1;
var toTreeArray = toTreeArray_1;
var findTree = findTree_1;
var eachTree = eachTree_1;
var mapTree = mapTree_1;
var filterTree = filterTree_1;
var searchTree = searchTree_1;
var arrayIndexOf$1 = arrayIndexOf_1;
var arrayLastIndexOf = arrayLastIndexOf_1;
var hasOwnProp = hasOwnProp_1;
var isArray$3 = isArray_1;
var isNull = isNull_1;
var isNumberNaN = _isNaN;
var isUndefined = isUndefined_1;
var isFunction$2 = isFunction_1;
var isObject$8 = isObject_1;
var isString$1 = isString_1;
var isPlainObject$2 = isPlainObject_1;
var isLeapYear = isLeapYear_1;
var isDate$1 = isDate_1;
var eqNull = eqNull_1;
var each = each_1;
var forOf = forOf_1;
var lastForOf = lastForOf_1;
var indexOf = indexOf_1;
var lastIndexOf = lastIndexOf_1;
var keys$1 = keys_1;
var values = values_1;
var clone = clone_1;
var getSize = getSize_1;
var lastEach = lastEach_1;
var remove$3 = remove_1;
var clear = clear_1;
var isNumberFinite = _isFinite;
var isFloat = isFloat_1;
var isInteger = isInteger_1;
var isBoolean = isBoolean_1;
var isNumber = isNumber_1;
var isRegExp$1 = isRegExp_1;
var isError = isError_1;
var isTypeError = isTypeError_1;
var isEmpty$1 = isEmpty_1;
var isSymbol$2 = isSymbol_1;
var isArguments$2 = isArguments_1;
var isElement = isElement_1;
var isDocument = isDocument_1;
var isWindow = isWindow_1;
var isFormData = isFormData_1;
var isMap$2 = isMap_1;
var isWeakMap = isWeakMap_1;
var isSet$2 = isSet_1;
var isWeakSet = isWeakSet_1;
var isMatch = isMatch_1;
var isEqual = isEqual_1;
var isEqualWith = isEqualWith_1;
var getType$1 = getType_1;
var uniqueId = uniqueId_1;
var findIndexOf = findIndexOf_1;
var findLastIndexOf = findLastIndexOf_1;
var toStringJSON = toStringJSON_1;
var toJSONString = toJSONString_1;
var entries = entries_1;
var pick = pick_1;
var omit = omit_1;
var first = first_1;
var last = last_1;
var has$8 = has_1;
var get = get_1;
var set$1 = set_1;
var groupBy = groupBy_1;
var countBy = countBy_1;
var range$2 = range_1;
var destructuring = destructuring_1;
var random = random_1;
var max$1 = max_1;
var min$2 = min_1;
var commafy = commafy_1;
var round = round_1;
var ceil$1 = ceil_1;
var floor$1 = floor_1;
var toFixed = toFixed_1;
var toInteger$3 = toInteger_1;
var toNumber$2 = toNumber_1;
var toNumberString = toNumberString_1;
var add$2 = add_1;
var subtract = subtract_1;
var multiply = multiply_1;
var divide = divide_1;
var sum = sum_1;
var mean = mean_1;
var getWhatYear = getWhatYear_1;
var getWhatQuarter = getWhatQuarter_1;
var getWhatMonth = getWhatMonth_1;
var getWhatDay = getWhatDay_1;
var toStringDate = toStringDate_1;
var toDateString = toDateString_1;
var now$2 = now_1;
var timestamp = timestamp_1;
var isValidDate = isValidDate_1;
var isDateSame = isDateSame_1;
var getWhatWeek = getWhatWeek_1;
var getYearDay = getYearDay_1;
var getYearWeek = getYearWeek_1;
var getMonthWeek = getMonthWeek_1;
var getDayOfYear = getDayOfYear_1;
var getDayOfMonth = getDayOfMonth_1;
var getDateDiff = getDateDiff_1;
var padEnd = padEnd_1;
var padStart = padStart_1;
var repeat = repeat_1;
var trim$1 = trim_1;
var trimRight = trimRight_1;
var trimLeft = trimLeft_1;
var escape = _escape;
var unescape = _unescape;
var camelCase$1 = camelCase_1;
var kebabCase = kebabCase_1;
var startsWith = startsWith_1;
var endsWith = endsWith_1;
var template = template_1;
var toFormatString = toFormatString_1;
var toValueString = toValueString_1;
var noop$2 = noop_1;
var property = property_1;
var bind$1 = bind_1;
var once$1 = once_1;
var after = after_1;
var before = before_1;
var throttle$4 = throttle_1;
var debounce$3 = debounce_1;
var delay = delay_1;
var unserialize = unserialize_1;
var serialize = serialize_1;
var parseUrl = parseUrl_1;
var getBaseURL = getBaseURL_1;
var locat = locat_1;
var cookie = cookie_1;
var browse$1 = browse_1;
assign$2(XEUtils, {
  assign: assign$2,
  objectEach,
  lastObjectEach,
  objectMap,
  merge: merge$3,
  uniq,
  union,
  sortBy,
  orderBy,
  shuffle,
  sample,
  some,
  every,
  slice,
  filter: filter$1,
  find,
  findLast,
  findKey,
  includes,
  arrayIndexOf: arrayIndexOf$1,
  arrayLastIndexOf,
  map,
  reduce,
  copyWithin,
  chunk,
  zip,
  unzip,
  zipObject,
  flatten,
  toArray: toArray$1,
  includeArrays,
  pluck,
  invoke,
  arrayEach: arrayEach$1,
  lastArrayEach,
  toArrayTree,
  toTreeArray,
  findTree,
  eachTree,
  mapTree,
  filterTree,
  searchTree,
  hasOwnProp,
  eqNull,
  isNaN: isNumberNaN,
  isFinite: isNumberFinite,
  isUndefined,
  isArray: isArray$3,
  isFloat,
  isInteger,
  isFunction: isFunction$2,
  isBoolean,
  isString: isString$1,
  isNumber,
  isRegExp: isRegExp$1,
  isObject: isObject$8,
  isPlainObject: isPlainObject$2,
  isDate: isDate$1,
  isError,
  isTypeError,
  isEmpty: isEmpty$1,
  isNull,
  isSymbol: isSymbol$2,
  isArguments: isArguments$2,
  isElement,
  isDocument,
  isWindow,
  isFormData,
  isMap: isMap$2,
  isWeakMap,
  isSet: isSet$2,
  isWeakSet,
  isLeapYear,
  isMatch,
  isEqual,
  isEqualWith,
  getType: getType$1,
  uniqueId,
  getSize,
  indexOf,
  lastIndexOf,
  findIndexOf,
  findLastIndexOf,
  toStringJSON,
  toJSONString,
  keys: keys$1,
  values,
  entries,
  pick,
  omit,
  first,
  last,
  each,
  forOf,
  lastForOf,
  lastEach,
  has: has$8,
  get,
  set: set$1,
  groupBy,
  countBy,
  clone,
  clear,
  remove: remove$3,
  range: range$2,
  destructuring,
  random,
  min: min$2,
  max: max$1,
  commafy,
  round,
  ceil: ceil$1,
  floor: floor$1,
  toFixed,
  toNumber: toNumber$2,
  toNumberString,
  toInteger: toInteger$3,
  add: add$2,
  subtract,
  multiply,
  divide,
  sum,
  mean,
  now: now$2,
  timestamp,
  isValidDate,
  isDateSame,
  toStringDate,
  toDateString,
  getWhatYear,
  getWhatQuarter,
  getWhatMonth,
  getWhatWeek,
  getWhatDay,
  getYearDay,
  getYearWeek,
  getMonthWeek,
  getDayOfYear,
  getDayOfMonth,
  getDateDiff,
  trim: trim$1,
  trimLeft,
  trimRight,
  escape,
  unescape,
  camelCase: camelCase$1,
  kebabCase,
  repeat,
  padStart,
  padEnd,
  startsWith,
  endsWith,
  template,
  toFormatString,
  toString: toValueString,
  toValueString,
  noop: noop$2,
  property,
  bind: bind$1,
  once: once$1,
  after,
  before,
  throttle: throttle$4,
  debounce: debounce$3,
  delay,
  unserialize,
  serialize,
  parseUrl,
  getBaseURL,
  locat,
  browse: browse$1,
  cookie
});
var xeUtils = XEUtils;
var vXETable = {};
var conf = {};
Object.defineProperty(conf, "__esModule", {
  value: true
});
conf.default = void 0;
var iconPrefix = "vxe-icon--";
var _default$10 = {
  size: null,
  zIndex: 999,
  version: 0,
  emptyCell: "\u3000",
  table: {
    fit: true,
    showHeader: true,
    animat: true,
    delayHover: 250,
    autoResize: true,
    radioConfig: {
      strict: true
    },
    checkboxConfig: {
      strict: true
    },
    validConfig: {
      showMessage: true,
      message: "default"
    },
    sortConfig: {
      showIcon: true
    },
    filterConfig: {
      showIcon: true
    },
    treeConfig: {
      rowField: "id",
      parentField: "parentId",
      children: "children",
      hasChild: "hasChild",
      mapChildren: "_X_CHILD",
      indent: 20,
      showIcon: true
    },
    expandConfig: {
      showIcon: true
    },
    editConfig: {
      showIcon: true,
      showAsterisk: true
    },
    importConfig: {
      modes: ["insert", "covering"]
    },
    exportConfig: {
      modes: ["current", "selected"]
    },
    printConfig: {
      modes: ["current", "selected"]
    },
    mouseConfig: {
      extension: true
    },
    keyboardConfig: {
      isEsc: true
    },
    areaConfig: {
      selectCellByHeader: true
    },
    clipConfig: {
      isCopy: true,
      isCut: true,
      isPaste: true
    },
    fnrConfig: {
      isFind: true,
      isReplace: true
    },
    scrollX: {
      enabled: true,
      gt: 60
    },
    scrollY: {
      enabled: true,
      gt: 100
    }
  },
  export: {
    types: {}
  },
  icon: {
    TABLE_SORT_ASC: iconPrefix + "caret-top",
    TABLE_SORT_DESC: iconPrefix + "caret-bottom",
    TABLE_FILTER_NONE: iconPrefix + "funnel",
    TABLE_FILTER_MATCH: iconPrefix + "funnel",
    TABLE_EDIT: iconPrefix + "edit-outline",
    TABLE_HELP: iconPrefix + "question",
    TABLE_TREE_LOADED: iconPrefix + "refresh roll",
    TABLE_TREE_OPEN: iconPrefix + "caret-right rotate90",
    TABLE_TREE_CLOSE: iconPrefix + "caret-right",
    TABLE_EXPAND_LOADED: iconPrefix + "refresh roll",
    TABLE_EXPAND_OPEN: iconPrefix + "arrow-right rotate90",
    TABLE_EXPAND_CLOSE: iconPrefix + "arrow-right",
    BUTTON_DROPDOWN: iconPrefix + "arrow-bottom",
    BUTTON_LOADING: iconPrefix + "refresh roll",
    SELECT_LOADED: iconPrefix + "refresh roll",
    SELECT_OPEN: iconPrefix + "caret-bottom rotate180",
    SELECT_CLOSE: iconPrefix + "caret-bottom",
    PAGER_JUMP_PREV: iconPrefix + "d-arrow-left",
    PAGER_JUMP_NEXT: iconPrefix + "d-arrow-right",
    PAGER_PREV_PAGE: iconPrefix + "arrow-left",
    PAGER_NEXT_PAGE: iconPrefix + "arrow-right",
    PAGER_JUMP_MORE: iconPrefix + "more",
    INPUT_CLEAR: iconPrefix + "close",
    INPUT_PWD: iconPrefix + "eye-slash",
    INPUT_SHOW_PWD: iconPrefix + "eye",
    INPUT_PREV_NUM: iconPrefix + "caret-top",
    INPUT_NEXT_NUM: iconPrefix + "caret-bottom",
    INPUT_DATE: iconPrefix + "calendar",
    INPUT_SEARCH: iconPrefix + "search",
    MODAL_ZOOM_IN: iconPrefix + "square",
    MODAL_ZOOM_OUT: iconPrefix + "zoomout",
    MODAL_CLOSE: iconPrefix + "close",
    MODAL_INFO: iconPrefix + "info",
    MODAL_SUCCESS: iconPrefix + "success",
    MODAL_WARNING: iconPrefix + "warning",
    MODAL_ERROR: iconPrefix + "error",
    MODAL_QUESTION: iconPrefix + "question",
    MODAL_LOADING: iconPrefix + "refresh roll",
    TOOLBAR_TOOLS_REFRESH: iconPrefix + "refresh",
    TOOLBAR_TOOLS_REFRESH_LOADING: iconPrefix + "refresh roll",
    TOOLBAR_TOOLS_IMPORT: iconPrefix + "upload",
    TOOLBAR_TOOLS_EXPORT: iconPrefix + "download",
    TOOLBAR_TOOLS_PRINT: iconPrefix + "print",
    TOOLBAR_TOOLS_ZOOM_IN: iconPrefix + "zoomin",
    TOOLBAR_TOOLS_ZOOM_OUT: iconPrefix + "zoomout",
    TOOLBAR_TOOLS_CUSTOM: iconPrefix + "menu",
    FORM_PREFIX: iconPrefix + "question",
    FORM_SUFFIX: iconPrefix + "question",
    FORM_FOLDING: iconPrefix + "arrow-top rotate180",
    FORM_UNFOLDING: iconPrefix + "arrow-top"
  },
  grid: {
    formConfig: {
      enabled: true
    },
    pagerConfig: {
      enabled: true
    },
    toolbarConfig: {
      enabled: true
    },
    proxyConfig: {
      enabled: true,
      autoLoad: true,
      message: true,
      props: {
        list: null,
        result: "result",
        total: "page.total",
        message: "message"
      }
    }
  },
  tooltip: {
    trigger: "hover",
    theme: "dark",
    enterDelay: 500,
    leaveDelay: 300
  },
  pager: {},
  form: {
    validConfig: {
      showMessage: true,
      autoPos: true
    },
    titleAsterisk: true
  },
  input: {
    minDate: new Date(1900, 0, 1),
    maxDate: new Date(2100, 0, 1),
    startDay: 1,
    selectDay: 1,
    digits: 2,
    controls: true
  },
  textarea: {},
  select: {
    multiCharOverflow: 8
  },
  toolbar: {},
  button: {},
  radio: {
    strict: true
  },
  radioButton: {
    strict: true
  },
  radioGroup: {
    strict: true
  },
  checkbox: {},
  switch: {},
  modal: {
    top: 15,
    showHeader: true,
    minWidth: 340,
    minHeight: 140,
    lockView: true,
    mask: true,
    duration: 3e3,
    marginSize: 0,
    dblclickZoom: true,
    showTitleOverflow: true,
    animat: true,
    showClose: true,
    draggable: true,
    storageKey: "VXE_MODAL_POSITION"
  },
  list: {
    scrollY: {
      enabled: true,
      gt: 100
    }
  },
  i18n: function i18n(key) {
    return key;
  }
};
conf.default = _default$10;
var interceptor$1 = {};
var tools = {};
var utils = {};
var formats$1 = {};
var store$2 = {};
Object.defineProperty(store$2, "__esModule", {
  value: true
});
store$2.default = void 0;
_interopRequireDefault$1A(xeUtils);
function _interopRequireDefault$1A(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
function _classCallCheck$7(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$6(target2, props2) {
  for (var i = 0; i < props2.length; i++) {
    var descriptor2 = props2[i];
    descriptor2.enumerable = descriptor2.enumerable || false;
    descriptor2.configurable = true;
    if ("value" in descriptor2)
      descriptor2.writable = true;
    Object.defineProperty(target2, descriptor2.key, descriptor2);
  }
}
function _createClass$6(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$6(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$6(Constructor, staticProps);
  return Constructor;
}
var Store = /* @__PURE__ */ function() {
  function Store2() {
    _classCallCheck$7(this, Store2);
    this.store = {};
  }
  _createClass$6(Store2, [{
    key: "mixin",
    value: function mixin4(map2) {
      Object.assign(this.store, map2);
      return Store2;
    }
  }, {
    key: "get",
    value: function get7(name) {
      return this.store[name];
    }
  }, {
    key: "add",
    value: function add4(name, render37) {
      this.store[name] = render37;
      return Store2;
    }
  }, {
    key: "delete",
    value: function _delete3(name) {
      delete this.store[name];
      return Store2;
    }
  }]);
  return Store2;
}();
var _default$$ = Store;
store$2.default = _default$$;
Object.defineProperty(formats$1, "__esModule", {
  value: true
});
formats$1.formats = void 0;
var _store$2 = _interopRequireDefault$1z(store$2);
function _interopRequireDefault$1z(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var formats = new _store$2.default();
formats$1.formats = formats;
Object.defineProperty(utils, "__esModule", {
  value: true
});
utils.default = utils.UtilTools = void 0;
utils.eqEmptyValue = eqEmptyValue;
utils.isEnableConf = isEnableConf;
var _xeUtils$F = _interopRequireDefault$1y(xeUtils);
var _conf$w = _interopRequireDefault$1y(conf);
function _interopRequireDefault$1y(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
function _toConsumableArray$7(arr) {
  return _arrayWithoutHoles$7(arr) || _iterableToArray$7(arr) || _unsupportedIterableToArray$7(arr) || _nonIterableSpread$7();
}
function _nonIterableSpread$7() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$7(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$7(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$7(o, minLen);
}
function _iterableToArray$7(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _arrayWithoutHoles$7(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray$7(arr);
}
function _arrayLikeToArray$7(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _classCallCheck$6(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$5(target2, props2) {
  for (var i = 0; i < props2.length; i++) {
    var descriptor2 = props2[i];
    descriptor2.enumerable = descriptor2.enumerable || false;
    descriptor2.configurable = true;
    if ("value" in descriptor2)
      descriptor2.writable = true;
    Object.defineProperty(target2, descriptor2.key, descriptor2);
  }
}
function _createClass$5(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$5(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$5(Constructor, staticProps);
  return Constructor;
}
var zindexIndex = 0;
var lastZindex = 1;
var ColumnInfo = /* @__PURE__ */ function() {
  function ColumnInfo2($xetable, _vm) {
    var _ref = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, renderHeader = _ref.renderHeader, renderCell4 = _ref.renderCell, renderFooter2 = _ref.renderFooter, renderData = _ref.renderData;
    _classCallCheck$6(this, ColumnInfo2);
    var $xegrid = $xetable.$xegrid;
    var proxyOpts2 = $xegrid ? $xegrid.proxyOpts : null;
    var formatter = _vm.formatter;
    var visible2 = _xeUtils$F.default.isBoolean(_vm.visible) ? _vm.visible : true;
    Object.assign(this, {
      type: _vm.type,
      property: _vm.field,
      field: _vm.field,
      title: _vm.title,
      width: _vm.width,
      minWidth: _vm.minWidth,
      resizable: _vm.resizable,
      fixed: _vm.fixed,
      align: _vm.align,
      headerAlign: _vm.headerAlign,
      footerAlign: _vm.footerAlign,
      showOverflow: _vm.showOverflow,
      showHeaderOverflow: _vm.showHeaderOverflow,
      showFooterOverflow: _vm.showFooterOverflow,
      className: _vm.className,
      headerClassName: _vm.headerClassName,
      footerClassName: _vm.footerClassName,
      formatter,
      sortable: _vm.sortable,
      sortBy: _vm.sortBy,
      sortType: _vm.sortType,
      sortMethod: _vm.sortMethod,
      remoteSort: _vm.remoteSort,
      filters: UtilTools.getFilters(_vm.filters),
      filterMultiple: _xeUtils$F.default.isBoolean(_vm.filterMultiple) ? _vm.filterMultiple : true,
      filterMethod: _vm.filterMethod,
      filterResetMethod: _vm.filterResetMethod,
      filterRecoverMethod: _vm.filterRecoverMethod,
      filterRender: _vm.filterRender,
      treeNode: _vm.treeNode,
      cellType: _vm.cellType,
      cellRender: _vm.cellRender,
      editRender: _vm.editRender,
      contentRender: _vm.contentRender,
      exportMethod: _vm.exportMethod,
      footerExportMethod: _vm.footerExportMethod,
      titleHelp: _vm.titleHelp,
      params: _vm.params,
      id: _vm.colId || _xeUtils$F.default.uniqueId("col_"),
      parentId: null,
      visible: visible2,
      halfVisible: false,
      defaultVisible: visible2,
      checked: false,
      halfChecked: false,
      disabled: false,
      level: 1,
      rowSpan: 1,
      colSpan: 1,
      order: null,
      sortTime: 0,
      renderWidth: 0,
      renderHeight: 0,
      resizeWidth: 0,
      renderLeft: 0,
      renderArgs: [],
      model: {},
      renderHeader: renderHeader || _vm.renderHeader,
      renderCell: renderCell4 || _vm.renderCell,
      renderFooter: renderFooter2 || _vm.renderFooter,
      renderData,
      slots: _vm.slots
    });
    if (proxyOpts2 && proxyOpts2.beforeColumn) {
      proxyOpts2.beforeColumn({
        $grid: $xegrid,
        column: this
      });
    }
  }
  _createClass$5(ColumnInfo2, [{
    key: "getTitle",
    value: function getTitle() {
      return UtilTools.getFuncText(this.title || (this.type === "seq" ? _conf$w.default.i18n("vxe.table.seqTitle") : ""));
    }
  }, {
    key: "getKey",
    value: function getKey() {
      return this.property || (this.type ? "type=".concat(this.type) : null);
    }
  }, {
    key: "update",
    value: function update5(name, value6) {
      if (name !== "filters") {
        if (name === "field") {
          this.property = value6;
        } else {
          this[name] = value6;
        }
      }
    }
  }]);
  return ColumnInfo2;
}();
function isEnableConf(conf2) {
  return conf2 && conf2.enabled !== false;
}
function outLog(type3) {
  return function(message, params) {
    var msg = UtilTools.getLog(message, params);
    console[type3](msg);
    return msg;
  };
}
function eqEmptyValue(cellValue) {
  return cellValue === "" || _xeUtils$F.default.eqNull(cellValue);
}
var UtilTools = {
  warn: outLog("warn"),
  error: outLog("error"),
  getLog: function getLog(message, args) {
    return "[vxe-table] ".concat(_conf$w.default.i18n(message, args));
  },
  getFuncText: function getFuncText(content2) {
    return _xeUtils$F.default.isFunction(content2) ? content2() : _conf$w.default.translate ? _conf$w.default.translate(content2) : content2;
  },
  nextZIndex: function nextZIndex() {
    lastZindex = _conf$w.default.zIndex + zindexIndex++;
    return lastZindex;
  },
  getLastZIndex: function getLastZIndex() {
    return lastZindex;
  },
  getRowkey: function getRowkey($xetable) {
    return $xetable.rowId || "_X_ID";
  },
  getRowid: function getRowid($xetable, row) {
    var rowId = _xeUtils$F.default.get(row, UtilTools.getRowkey($xetable));
    return _xeUtils$F.default.eqNull(rowId) ? "" : encodeURIComponent(rowId);
  },
  getColumnList: function getColumnList(columns2) {
    var result = [];
    columns2.forEach(function(column2) {
      result.push.apply(result, _toConsumableArray$7(column2.children && column2.children.length ? UtilTools.getColumnList(column2.children) : [column2]));
    });
    return result;
  },
  getClass: function getClass(property2, params) {
    return property2 ? _xeUtils$F.default.isFunction(property2) ? property2(params) : property2 : "";
  },
  getFilters: function getFilters(filters) {
    if (filters && _xeUtils$F.default.isArray(filters)) {
      return filters.map(function(_ref2) {
        var label = _ref2.label, value6 = _ref2.value, data25 = _ref2.data, resetValue = _ref2.resetValue, checked = _ref2.checked;
        return {
          label,
          value: value6,
          data: data25,
          resetValue,
          checked: !!checked,
          _checked: !!checked
        };
      });
    }
    return filters;
  },
  formatText: function formatText(value6, placeholder2) {
    return "" + (value6 === "" || value6 === null || value6 === void 0 ? placeholder2 ? _conf$w.default.emptyCell : "" : value6);
  },
  getCellValue: function getCellValue(row, column2) {
    return _xeUtils$F.default.get(row, column2.property);
  },
  setCellValue: function setCellValue(row, column2, value6) {
    return _xeUtils$F.default.set(row, column2.property, value6);
  },
  isColumn: function isColumn(column2) {
    return column2 instanceof ColumnInfo;
  },
  getColumnConfig: function getColumnConfig($xetable, _vm, options2) {
    return UtilTools.isColumn(_vm) ? _vm : new ColumnInfo($xetable, _vm, options2);
  },
  assemColumn: function assemColumn(_vm) {
    var $el = _vm.$el, $xetable = _vm.$xetable, $xecolumn = _vm.$xecolumn, columnConfig = _vm.columnConfig;
    var groupConfig = $xecolumn ? $xecolumn.columnConfig : null;
    columnConfig.slots = _vm.$scopedSlots;
    if (groupConfig) {
      if (!groupConfig.children) {
        groupConfig.children = [];
      }
      groupConfig.children.splice([].indexOf.call($xecolumn.$el.children, $el), 0, columnConfig);
    } else {
      $xetable.staticColumns.splice([].indexOf.call($xetable.$refs.hideColumn.children, $el), 0, columnConfig);
    }
  },
  destroyColumn: function destroyColumn(_vm) {
    var $xetable = _vm.$xetable, columnConfig = _vm.columnConfig;
    var matchObj = _xeUtils$F.default.findTree($xetable.staticColumns, function(column2) {
      return column2 === columnConfig;
    });
    if (matchObj) {
      matchObj.items.splice(matchObj.index, 1);
    }
  },
  hasChildrenList: function hasChildrenList(item) {
    return item && item.children && item.children.length > 0;
  },
  parseFile: function parseFile(file) {
    var name = file.name;
    var tIndex = _xeUtils$F.default.lastIndexOf(name, ".");
    var type3 = name.substring(tIndex + 1, name.length);
    var filename = name.substring(0, tIndex);
    return {
      filename,
      type: type3
    };
  },
  isNumVal: function isNumVal(num) {
    return !isNaN(parseFloat("" + num));
  }
};
utils.UtilTools = UtilTools;
var _default$_ = UtilTools;
utils.default = _default$_;
var dom$1 = {};
Object.defineProperty(dom$1, "__esModule", {
  value: true
});
dom$1.default = dom$1.browse = dom$1.DomTools = void 0;
dom$1.getOffsetHeight = getOffsetHeight;
dom$1.getPaddingTopBottomSize = getPaddingTopBottomSize;
dom$1.setScrollLeft = setScrollLeft;
dom$1.setScrollTop = setScrollTop;
var _xeUtils$E = _interopRequireDefault$1x(xeUtils);
var _utils$4 = _interopRequireDefault$1x(utils);
function _interopRequireDefault$1x(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var getRowid$2 = _utils$4.default.getRowid;
var browse = _xeUtils$E.default.browse();
dom$1.browse = browse;
var reClsMap = {};
function getClsRE(cls) {
  if (!reClsMap[cls]) {
    reClsMap[cls] = new RegExp("(?:^|\\s)".concat(cls, "(?!\\S)"), "g");
  }
  return reClsMap[cls];
}
function getNodeOffset(elem, container, rest) {
  if (elem) {
    var parentElem = elem.parentNode;
    rest.top += elem.offsetTop;
    rest.left += elem.offsetLeft;
    if (parentElem && parentElem !== document.documentElement && parentElem !== document.body) {
      rest.top -= parentElem.scrollTop;
      rest.left -= parentElem.scrollLeft;
    }
    if (container && (elem === container || elem.offsetParent === container) ? 0 : elem.offsetParent) {
      return getNodeOffset(elem.offsetParent, container, rest);
    }
  }
  return rest;
}
function isScale(val) {
  return val && /^\d+%$/.test(val);
}
function hasClass$2(elem, cls) {
  return elem && elem.className && elem.className.match && elem.className.match(getClsRE(cls));
}
function removeClass$3(elem, cls) {
  if (elem && hasClass$2(elem, cls)) {
    elem.className = elem.className.replace(getClsRE(cls), "");
  }
}
function getDomNode() {
  var documentElement = document.documentElement;
  var bodyElem = document.body;
  return {
    scrollTop: documentElement.scrollTop || bodyElem.scrollTop,
    scrollLeft: documentElement.scrollLeft || bodyElem.scrollLeft,
    visibleHeight: documentElement.clientHeight || bodyElem.clientHeight,
    visibleWidth: documentElement.clientWidth || bodyElem.clientWidth
  };
}
function getOffsetHeight(elem) {
  return elem ? elem.offsetHeight : 0;
}
function getPaddingTopBottomSize(elem) {
  if (elem) {
    var computedStyle = getComputedStyle(elem);
    var paddingTop = _xeUtils$E.default.toNumber(computedStyle.paddingTop);
    var paddingBottom = _xeUtils$E.default.toNumber(computedStyle.paddingBottom);
    return paddingTop + paddingBottom;
  }
  return 0;
}
function setScrollTop(elem, scrollTop) {
  if (elem) {
    elem.scrollTop = scrollTop;
  }
}
function setScrollLeft(elem, scrollLeft) {
  if (elem) {
    elem.scrollLeft = scrollLeft;
  }
}
function isNodeElement$1(elem) {
  return elem && elem.nodeType === 1;
}
var DomTools = {
  browse,
  isPx: function isPx(val) {
    return val && /^\d+(px)?$/.test(val);
  },
  isScale,
  hasClass: hasClass$2,
  removeClass: removeClass$3,
  addClass: function addClass(elem, cls) {
    if (elem && !hasClass$2(elem, cls)) {
      removeClass$3(elem, cls);
      elem.className = "".concat(elem.className, " ").concat(cls);
    }
  },
  updateCellTitle: function updateCellTitle(overflowElem, column2) {
    var content2 = column2.type === "html" ? overflowElem.innerText : overflowElem.textContent;
    if (overflowElem.getAttribute("title") !== content2) {
      overflowElem.setAttribute("title", content2);
    }
  },
  rowToVisible: function rowToVisible($xetable, row) {
    var tableBody = $xetable.$refs.tableBody;
    var bodyElem = tableBody ? tableBody.$el : null;
    if (bodyElem) {
      var trElem = bodyElem.querySelector('[rowid="'.concat(getRowid$2($xetable, row), '"]'));
      if (trElem) {
        var bodyHeight = bodyElem.clientHeight;
        var bodySrcollTop = bodyElem.scrollTop;
        var trOffsetTop = trElem.offsetTop + (trElem.offsetParent ? trElem.offsetParent.offsetTop : 0);
        var trHeight = trElem.clientHeight;
        if (trOffsetTop < bodySrcollTop || trOffsetTop > bodySrcollTop + bodyHeight) {
          return $xetable.scrollTo(null, trOffsetTop);
        } else if (trOffsetTop + trHeight >= bodyHeight + bodySrcollTop) {
          return $xetable.scrollTo(null, bodySrcollTop + trHeight);
        }
      } else {
        if ($xetable.scrollYLoad) {
          return $xetable.scrollTo(null, ($xetable.afterFullData.indexOf(row) - 1) * $xetable.scrollYStore.rowHeight);
        }
      }
    }
    return Promise.resolve();
  },
  colToVisible: function colToVisible($xetable, column2) {
    var tableBody = $xetable.$refs.tableBody;
    var bodyElem = tableBody ? tableBody.$el : null;
    if (bodyElem) {
      var tdElem = bodyElem.querySelector(".".concat(column2.id));
      if (tdElem) {
        var bodyWidth = bodyElem.clientWidth;
        var bodySrcollLeft = bodyElem.scrollLeft;
        var tdOffsetLeft = tdElem.offsetLeft + (tdElem.offsetParent ? tdElem.offsetParent.offsetLeft : 0);
        var tdWidth = tdElem.clientWidth;
        if (tdOffsetLeft < bodySrcollLeft || tdOffsetLeft > bodySrcollLeft + bodyWidth) {
          return $xetable.scrollTo(tdOffsetLeft);
        } else if (tdOffsetLeft + tdWidth >= bodyWidth + bodySrcollLeft) {
          return $xetable.scrollTo(bodySrcollLeft + tdWidth);
        }
      } else {
        if ($xetable.scrollXLoad) {
          var visibleColumn = $xetable.visibleColumn;
          var scrollLeft = 0;
          for (var index2 = 0; index2 < visibleColumn.length; index2++) {
            if (visibleColumn[index2] === column2) {
              break;
            }
            scrollLeft += visibleColumn[index2].renderWidth;
          }
          return $xetable.scrollTo(scrollLeft);
        }
      }
    }
    return Promise.resolve();
  },
  getDomNode,
  getEventTargetNode: function getEventTargetNode(evnt, container, queryCls, queryMethod) {
    var targetElem;
    var target2 = evnt.target;
    while (target2 && target2.nodeType && target2 !== document) {
      if (queryCls && hasClass$2(target2, queryCls) && (!queryMethod || queryMethod(target2))) {
        targetElem = target2;
      } else if (target2 === container) {
        return {
          flag: queryCls ? !!targetElem : true,
          container,
          targetElem
        };
      }
      target2 = target2.parentNode;
    }
    return {
      flag: false
    };
  },
  getOffsetPos: function getOffsetPos(elem, container) {
    return getNodeOffset(elem, container, {
      left: 0,
      top: 0
    });
  },
  getAbsolutePos: function getAbsolutePos(elem) {
    var bounding = elem.getBoundingClientRect();
    var boundingTop = bounding.top;
    var boundingLeft = bounding.left;
    var _getDomNode = getDomNode(), scrollTop = _getDomNode.scrollTop, scrollLeft = _getDomNode.scrollLeft, visibleHeight = _getDomNode.visibleHeight, visibleWidth = _getDomNode.visibleWidth;
    return {
      boundingTop,
      top: scrollTop + boundingTop,
      boundingLeft,
      left: scrollLeft + boundingLeft,
      visibleHeight,
      visibleWidth
    };
  },
  scrollToView: function scrollToView(elem) {
    var scrollIntoViewIfNeeded = "scrollIntoViewIfNeeded";
    var scrollIntoView2 = "scrollIntoView";
    if (elem) {
      if (elem[scrollIntoViewIfNeeded]) {
        elem[scrollIntoViewIfNeeded]();
      } else if (elem[scrollIntoView2]) {
        elem[scrollIntoView2]();
      }
    }
  },
  triggerEvent: function triggerEvent(targetElem, type3) {
    if (targetElem) {
      targetElem.dispatchEvent(new Event(type3));
    }
  },
  calcHeight: function calcHeight($xetable, key) {
    var val = $xetable[key];
    var num = 0;
    if (val) {
      if (val === "auto") {
        num = $xetable.parentHeight;
      } else {
        var excludeHeight = $xetable.getExcludeHeight();
        if (isScale(val)) {
          num = Math.floor((_xeUtils$E.default.toInteger(val) || 1) / 100 * $xetable.parentHeight);
        } else {
          num = _xeUtils$E.default.toNumber(val);
        }
        num = Math.max(40, num - excludeHeight);
      }
    }
    return num;
  },
  isNodeElement: isNodeElement$1
};
dom$1.DomTools = DomTools;
var _default$Z = DomTools;
dom$1.default = _default$Z;
var event = {};
Object.defineProperty(event, "__esModule", {
  value: true
});
event.hasEventKey = event.default = event.GlobalEvent = event.EVENT_KEYS = void 0;
var _xeUtils$D = _interopRequireDefault$1w(xeUtils);
var _dom$d = dom$1;
function _interopRequireDefault$1w(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var EVENT_KEYS = {
  F2: "F2",
  ESCAPE: "Escape",
  ENTER: "Enter",
  TAB: "Tab",
  DELETE: "Delete",
  BACKSPACE: "Backspace",
  SPACEBAR: " ",
  CONTEXT_MENU: "ContextMenu",
  ARROW_UP: "ArrowUp",
  ARROW_DOWN: "ArrowDown",
  ARROW_LEFT: "ArrowLeft",
  ARROW_RIGHT: "ArrowRight",
  PAGE_UP: "PageUp",
  PAGE_DOWN: "PageDown"
};
event.EVENT_KEYS = EVENT_KEYS;
var convertEventKeys = {
  " ": "Spacebar",
  Apps: EVENT_KEYS.CONTEXT_MENU,
  Del: EVENT_KEYS.DELETE,
  Up: EVENT_KEYS.ARROW_UP,
  Down: EVENT_KEYS.ARROW_DOWN,
  Left: EVENT_KEYS.ARROW_LEFT,
  Right: EVENT_KEYS.ARROW_RIGHT
};
var wheelName = _dom$d.browse.firefox ? "DOMMouseScroll" : "mousewheel";
var eventStore$1 = [];
var hasEventKey = function hasEventKey2(evnt, targetKey) {
  var key = evnt.key;
  targetKey = targetKey.toLowerCase();
  return key ? targetKey === key.toLowerCase() || !!(convertEventKeys[key] && convertEventKeys[key].toLowerCase() === targetKey) : false;
};
event.hasEventKey = hasEventKey;
var GlobalEvent = {
  on: function on(comp, type3, cb) {
    if (cb) {
      eventStore$1.push({
        comp,
        type: type3,
        cb
      });
    }
  },
  off: function off(comp, type3) {
    _xeUtils$D.default.remove(eventStore$1, function(item) {
      return item.comp === comp && item.type === type3;
    });
  },
  trigger: function trigger(evnt) {
    var isWheel = evnt.type === wheelName;
    eventStore$1.forEach(function(_ref) {
      var comp = _ref.comp, type3 = _ref.type, cb = _ref.cb;
      if (!evnt.cancelBubble) {
        if (type3 === evnt.type || isWheel && type3 === "mousewheel") {
          cb.call(comp, evnt);
        }
      }
    });
  },
  eqKeypad: function eqKeypad(evnt, keyVal) {
    var key = evnt.key;
    if (keyVal.toLowerCase() === key.toLowerCase()) {
      return true;
    }
    return false;
  }
};
event.GlobalEvent = GlobalEvent;
if (_dom$d.browse.isDoc) {
  if (!_dom$d.browse.msie) {
    document.addEventListener("copy", GlobalEvent.trigger, false);
    document.addEventListener("cut", GlobalEvent.trigger, false);
    document.addEventListener("paste", GlobalEvent.trigger, false);
  }
  document.addEventListener("keydown", GlobalEvent.trigger, false);
  document.addEventListener("contextmenu", GlobalEvent.trigger, false);
  window.addEventListener("mousedown", GlobalEvent.trigger, false);
  window.addEventListener("blur", GlobalEvent.trigger, false);
  window.addEventListener("resize", GlobalEvent.trigger, false);
  window.addEventListener(wheelName, _xeUtils$D.default.throttle(GlobalEvent.trigger, 100, {
    leading: true,
    trailing: false
  }), false);
}
var _default$Y = GlobalEvent;
event.default = _default$Y;
var resize = {};
Object.defineProperty(resize, "__esModule", {
  value: true
});
resize.createResizeEvent = createResizeEvent;
var _xeUtils$C = _interopRequireDefault$1v(xeUtils);
var _conf$v = _interopRequireDefault$1v(conf);
function _interopRequireDefault$1v(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
function _classCallCheck$5(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$4(target2, props2) {
  for (var i = 0; i < props2.length; i++) {
    var descriptor2 = props2[i];
    descriptor2.enumerable = descriptor2.enumerable || false;
    descriptor2.configurable = true;
    if ("value" in descriptor2)
      descriptor2.writable = true;
    Object.defineProperty(target2, descriptor2.key, descriptor2);
  }
}
function _createClass$4(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$4(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$4(Constructor, staticProps);
  return Constructor;
}
var resizeTimeout;
var eventStore = [];
var defaultInterval = 500;
function eventHandle() {
  if (eventStore.length) {
    eventStore.forEach(function(item) {
      item.tarList.forEach(function(observer) {
        var target2 = observer.target, width2 = observer.width, heighe = observer.heighe;
        var clientWidth = target2.clientWidth;
        var clientHeight = target2.clientHeight;
        var rWidth = clientWidth && width2 !== clientWidth;
        var rHeight = clientHeight && heighe !== clientHeight;
        if (rWidth || rHeight) {
          observer.width = clientWidth;
          observer.heighe = clientHeight;
          setTimeout(item.callback);
        }
      });
    });
    eventListener();
  }
}
function eventListener() {
  clearTimeout(resizeTimeout);
  resizeTimeout = setTimeout(eventHandle, _conf$v.default.resizeInterval || defaultInterval);
}
var ResizeObserverPolyfill = /* @__PURE__ */ function() {
  function ResizeObserverPolyfill2(callback) {
    _classCallCheck$5(this, ResizeObserverPolyfill2);
    this.tarList = [];
    this.callback = callback;
  }
  _createClass$4(ResizeObserverPolyfill2, [{
    key: "observe",
    value: function observe2(target2) {
      var _this = this;
      if (target2) {
        if (!this.tarList.some(function(observer) {
          return observer.target === target2;
        })) {
          this.tarList.push({
            target: target2,
            width: target2.clientWidth,
            heighe: target2.clientHeight
          });
        }
        if (!eventStore.length) {
          eventListener();
        }
        if (!eventStore.some(function(item) {
          return item === _this;
        })) {
          eventStore.push(this);
        }
      }
    }
  }, {
    key: "unobserve",
    value: function unobserve(target2) {
      _xeUtils$C.default.remove(eventStore, function(item) {
        return item.tarList.some(function(observer) {
          return observer.target === target2;
        });
      });
    }
  }, {
    key: "disconnect",
    value: function disconnect() {
      var _this2 = this;
      _xeUtils$C.default.remove(eventStore, function(item) {
        return item === _this2;
      });
    }
  }]);
  return ResizeObserverPolyfill2;
}();
function createResizeEvent(callback) {
  if (window.ResizeObserver) {
    return new window.ResizeObserver(callback);
  }
  return new ResizeObserverPolyfill(callback);
}
(function(exports2) {
  function _typeof2(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof2 = function _typeof3(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof2 = function _typeof3(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof2(obj);
  }
  Object.defineProperty(exports2, "__esModule", {
    value: true
  });
  var _exportNames = {};
  exports2.default = void 0;
  var _utils2 = _interopRequireWildcard2(utils);
  Object.keys(_utils2).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key))
      return;
    if (key in exports2 && exports2[key] === _utils2[key])
      return;
    Object.defineProperty(exports2, key, {
      enumerable: true,
      get: function get7() {
        return _utils2[key];
      }
    });
  });
  var _dom2 = _interopRequireWildcard2(dom$1);
  Object.keys(_dom2).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key))
      return;
    if (key in exports2 && exports2[key] === _dom2[key])
      return;
    Object.defineProperty(exports2, key, {
      enumerable: true,
      get: function get7() {
        return _dom2[key];
      }
    });
  });
  var _event = _interopRequireWildcard2(event);
  Object.keys(_event).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key))
      return;
    if (key in exports2 && exports2[key] === _event[key])
      return;
    Object.defineProperty(exports2, key, {
      enumerable: true,
      get: function get7() {
        return _event[key];
      }
    });
  });
  var _resize = resize;
  Object.keys(_resize).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key))
      return;
    if (key in exports2 && exports2[key] === _resize[key])
      return;
    Object.defineProperty(exports2, key, {
      enumerable: true,
      get: function get7() {
        return _resize[key];
      }
    });
  });
  function _getRequireWildcardCache2(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
    var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache2 = function _getRequireWildcardCache3(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard2(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache2(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  var _default116 = {
    UtilTools: _utils2.default,
    DomTools: _dom2.default,
    GlobalEvent: _event.default
  };
  exports2.default = _default116;
})(tools);
Object.defineProperty(interceptor$1, "__esModule", {
  value: true
});
interceptor$1.interceptor = void 0;
var _xeUtils$B = _interopRequireDefault$1u(xeUtils);
function _interopRequireDefault$1u(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
function toType(type3) {
  return _xeUtils$B.default.toValueString(type3).replace("_", "").toLowerCase();
}
var eventTypes = "created,mounted,activated,beforeDestroy,destroyed,event.clearActived,event.clearFilter,event.clearAreas,event.showMenu,event.keydown,event.export,event.import".split(",").map(toType);
var storeMap = {};
var interceptor = {
  mixin: function mixin(map2) {
    _xeUtils$B.default.each(map2, function(callback, type3) {
      return interceptor.add(type3, callback);
    });
    return interceptor;
  },
  get: function get2(type3) {
    return storeMap[toType(type3)] || [];
  },
  add: function add(type3, callback) {
    type3 = toType(type3);
    if (callback && eventTypes.indexOf(type3) > -1) {
      var eList = storeMap[type3];
      if (!eList) {
        eList = storeMap[type3] = [];
      }
      eList.push(callback);
    }
    return interceptor;
  },
  delete: function _delete(type3, callback) {
    var eList = storeMap[toType(type3)];
    if (eList) {
      _xeUtils$B.default.remove(eList, function(fn) {
        return fn === callback;
      });
    }
    return interceptor;
  }
};
interceptor$1.interceptor = interceptor;
var renderer$1 = {};
Object.defineProperty(renderer$1, "__esModule", {
  value: true
});
renderer$1.renderer = void 0;
var _xeUtils$A = _interopRequireDefault$1t(xeUtils);
var _conf$u = _interopRequireDefault$1t(conf);
var _tools$z = tools;
function _interopRequireDefault$1t(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
function _defineProperty$m(obj, key, value6) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value: value6, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value6;
  }
  return obj;
}
var defaultCompProps = {
  transfer: true
};
var componentDefaultModelProp = "value";
function isEmptyValue$1(cellValue) {
  return cellValue === null || cellValue === void 0 || cellValue === "";
}
function getChangeEvent(renderOpts2) {
  switch (renderOpts2.name) {
    case "input":
    case "textarea":
    case "$input":
    case "$textarea":
      return "input";
  }
  return "change";
}
function parseDate$1(value6, props2) {
  return value6 && props2.valueFormat ? _xeUtils$A.default.toStringDate(value6, props2.valueFormat) : value6;
}
function getFormatDate(value6, props2, defaultFormat) {
  var _props$dateConfig = props2.dateConfig, dateConfig = _props$dateConfig === void 0 ? {} : _props$dateConfig;
  return _xeUtils$A.default.toDateString(parseDate$1(value6, props2), dateConfig.labelFormat || defaultFormat);
}
function getLabelFormatDate(value6, props2) {
  return getFormatDate(value6, props2, _conf$u.default.i18n("vxe.input.date.labelFormat.".concat(props2.type)));
}
function getDefaultComponentName(_ref) {
  var name = _ref.name;
  return "vxe-".concat(name.replace("$", ""));
}
function handleConfirmFilter(params, checked, option2) {
  var $panel = params.$panel;
  $panel.changeOption({}, checked, option2);
}
function getNativeAttrs(_ref2) {
  var name = _ref2.name, attrs2 = _ref2.attrs;
  if (name === "input") {
    attrs2 = Object.assign({
      type: "text"
    }, attrs2);
  }
  return attrs2;
}
function getInputImmediateModel(renderOpts2) {
  var name = renderOpts2.name, immediate = renderOpts2.immediate, props2 = renderOpts2.props;
  if (!immediate) {
    if (name === "$input") {
      var _ref3 = props2 || {}, type3 = _ref3.type;
      return !(!type3 || type3 === "text" || type3 === "number" || type3 === "integer" || type3 === "float");
    }
    if (name === "input" || name === "textarea" || name === "$textarea") {
      return false;
    }
    return true;
  }
  return immediate;
}
function isImmediateCell(renderOpts2, params) {
  return params.$type === "cell" || getInputImmediateModel(renderOpts2);
}
function getCellEditProps(renderOpts2, params, value6, defaultProps) {
  var vSize8 = params.$table.vSize;
  return _xeUtils$A.default.assign({
    immediate: getInputImmediateModel(renderOpts2)
  }, vSize8 ? {
    size: vSize8
  } : {}, defaultCompProps, defaultProps, renderOpts2.props, _defineProperty$m({}, componentDefaultModelProp, value6));
}
function getFilterProps(renderOpts2, params, value6, defaultProps) {
  var vSize8 = params.$table.vSize;
  return _xeUtils$A.default.assign(vSize8 ? {
    size: vSize8
  } : {}, defaultCompProps, defaultProps, renderOpts2.props, _defineProperty$m({}, componentDefaultModelProp, value6));
}
function getItemProps(renderOpts2, params, value6, defaultProps) {
  var vSize8 = params.$form.vSize;
  return _xeUtils$A.default.assign(vSize8 ? {
    size: vSize8
  } : {}, defaultCompProps, defaultProps, renderOpts2.props, _defineProperty$m({}, componentDefaultModelProp, value6));
}
function getCellLabelVNs(h, renderOpts2, params, cellLabel) {
  var placeholder2 = renderOpts2.placeholder;
  return [h("span", {
    class: "vxe-cell--label"
  }, placeholder2 && isEmptyValue$1(cellLabel) ? [h("span", {
    class: "vxe-cell--placeholder"
  }, _tools$z.UtilTools.formatText(_tools$z.UtilTools.getFuncText(placeholder2), 1))] : _tools$z.UtilTools.formatText(cellLabel, 1))];
}
function getNativeOns(renderOpts2, params) {
  var nativeEvents = renderOpts2.nativeEvents;
  var nativeOns = {};
  _xeUtils$A.default.objectEach(nativeEvents, function(func, key) {
    nativeOns[key] = function() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      func.apply(void 0, [params].concat(args));
    };
  });
  return nativeOns;
}
function getOns(renderOpts2, params, inputFunc, changeFunc) {
  var name = renderOpts2.name, events2 = renderOpts2.events;
  var modelEvent = "input";
  var changeEvent7 = getChangeEvent(renderOpts2);
  var isSameEvent = changeEvent7 === modelEvent;
  var ons = {};
  _xeUtils$A.default.objectEach(events2, function(func, key) {
    ons[key] = function() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      func.apply(void 0, [params].concat(args));
    };
  });
  if (inputFunc) {
    ons[modelEvent] = function(targetEvnt) {
      inputFunc(name === "$input" || name === "$textarea" ? targetEvnt.value : targetEvnt);
      if (events2 && events2[modelEvent]) {
        events2[modelEvent](params, targetEvnt);
      }
      if (isSameEvent && changeFunc) {
        changeFunc(targetEvnt);
      }
    };
  }
  if (!isSameEvent && changeFunc) {
    ons[changeEvent7] = function() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }
      changeFunc.apply(void 0, args);
      if (events2 && events2[changeEvent7]) {
        events2[changeEvent7].apply(events2, [params].concat(args));
      }
    };
  }
  return ons;
}
function getEditOns(renderOpts2, params) {
  var $table = params.$table, row = params.row, column2 = params.column;
  var name = renderOpts2.name;
  var model = column2.model;
  var isImmediate = isImmediateCell(renderOpts2, params);
  return getOns(renderOpts2, params, function(cellValue) {
    if (isImmediate) {
      _tools$z.UtilTools.setCellValue(row, column2, cellValue);
    } else {
      model.update = true;
      model.value = cellValue;
    }
  }, function(eventParams) {
    if (!isImmediate && (name === "$input" || name === "$textarea")) {
      $table.updateStatus(params, eventParams.value);
    } else {
      $table.updateStatus(params);
    }
  });
}
function getFilterOns(renderOpts2, params, option2) {
  return getOns(renderOpts2, params, function(value6) {
    option2.data = value6;
  }, function() {
    handleConfirmFilter(params, !_xeUtils$A.default.eqNull(option2.data), option2);
  });
}
function getItemOns(renderOpts2, params) {
  var $form = params.$form, data25 = params.data, property2 = params.property;
  return getOns(renderOpts2, params, function(value6) {
    _xeUtils$A.default.set(data25, property2, value6);
  }, function() {
    $form.updateStatus(params);
  });
}
function getNativeEditOns(renderOpts2, params) {
  var $table = params.$table, row = params.row, column2 = params.column;
  var model = column2.model;
  return getOns(renderOpts2, params, function(evnt) {
    var cellValue = evnt.target.value;
    if (isImmediateCell(renderOpts2, params)) {
      _tools$z.UtilTools.setCellValue(row, column2, cellValue);
    } else {
      model.update = true;
      model.value = cellValue;
    }
  }, function(evnt) {
    var cellValue = evnt.target.value;
    $table.updateStatus(params, cellValue);
  });
}
function getNativeFilterOns(renderOpts2, params, option2) {
  return getOns(renderOpts2, params, function(evnt) {
    option2.data = evnt.target.value;
  }, function() {
    handleConfirmFilter(params, !_xeUtils$A.default.eqNull(option2.data), option2);
  });
}
function getNativeItemOns(renderOpts2, params) {
  var $form = params.$form, data25 = params.data, property2 = params.property;
  return getOns(renderOpts2, params, function(evnt) {
    var itemValue = evnt.target.value;
    _xeUtils$A.default.set(data25, property2, itemValue);
  }, function() {
    $form.updateStatus(params);
  });
}
function nativeEditRender(h, renderOpts2, params) {
  var row = params.row, column2 = params.column;
  var name = renderOpts2.name;
  var attrs2 = getNativeAttrs(renderOpts2);
  var cellValue = isImmediateCell(renderOpts2, params) ? _tools$z.UtilTools.getCellValue(row, column2) : column2.model.value;
  return [h(name, {
    class: "vxe-default-".concat(name),
    attrs: attrs2,
    domProps: {
      value: cellValue
    },
    on: getNativeEditOns(renderOpts2, params)
  })];
}
function defaultEditRender(h, renderOpts2, params) {
  var row = params.row, column2 = params.column;
  var cellValue = _tools$z.UtilTools.getCellValue(row, column2);
  return [h(getDefaultComponentName(renderOpts2), {
    props: getCellEditProps(renderOpts2, params, cellValue),
    on: getEditOns(renderOpts2, params),
    nativeOn: getNativeOns(renderOpts2, params)
  })];
}
function defaultButtonEditRender(h, renderOpts2, params) {
  return [h("vxe-button", {
    props: getCellEditProps(renderOpts2, params),
    on: getOns(renderOpts2, params),
    nativeOn: getNativeOns(renderOpts2, params)
  })];
}
function defaultButtonsEditRender(h, renderOpts2, params) {
  return renderOpts2.children.map(function(childRenderOpts) {
    return defaultButtonEditRender(h, childRenderOpts, params)[0];
  });
}
function renderNativeOptgroups(h, renderOpts2, params, renderOptionsMethods) {
  var optionGroups2 = renderOpts2.optionGroups, _renderOpts$optionGro = renderOpts2.optionGroupProps, optionGroupProps = _renderOpts$optionGro === void 0 ? {} : _renderOpts$optionGro;
  var groupOptions = optionGroupProps.options || "options";
  var groupLabel = optionGroupProps.label || "label";
  return optionGroups2.map(function(group2, gIndex) {
    return h("optgroup", {
      key: gIndex,
      domProps: {
        label: group2[groupLabel]
      }
    }, renderOptionsMethods(h, group2[groupOptions], renderOpts2, params));
  });
}
function renderNativeOptions(h, options2, renderOpts2, params) {
  var _renderOpts$optionPro = renderOpts2.optionProps, optionProps = _renderOpts$optionPro === void 0 ? {} : _renderOpts$optionPro;
  var row = params.row, column2 = params.column;
  var labelProp = optionProps.label || "label";
  var valueProp = optionProps.value || "value";
  var disabledProp = optionProps.disabled || "disabled";
  var cellValue = isImmediateCell(renderOpts2, params) ? _tools$z.UtilTools.getCellValue(row, column2) : column2.model.value;
  return options2.map(function(option2, oIndex) {
    return h("option", {
      key: oIndex,
      attrs: {
        value: option2[valueProp],
        disabled: option2[disabledProp]
      },
      domProps: {
        selected: option2[valueProp] == cellValue
      }
    }, option2[labelProp]);
  });
}
function nativeFilterRender(h, renderOpts2, params) {
  var column2 = params.column;
  var name = renderOpts2.name;
  var attrs2 = getNativeAttrs(renderOpts2);
  return column2.filters.map(function(option2, oIndex) {
    return h(name, {
      key: oIndex,
      class: "vxe-default-".concat(name),
      attrs: attrs2,
      domProps: {
        value: option2.data
      },
      on: getNativeFilterOns(renderOpts2, params, option2)
    });
  });
}
function defaultFilterRender(h, renderOpts2, params) {
  var column2 = params.column;
  return column2.filters.map(function(option2, oIndex) {
    var optionValue = option2.data;
    return h(getDefaultComponentName(renderOpts2), {
      key: oIndex,
      props: getFilterProps(renderOpts2, renderOpts2, optionValue),
      on: getFilterOns(renderOpts2, params, option2)
    });
  });
}
function handleFilterMethod(_ref4) {
  var option2 = _ref4.option, row = _ref4.row, column2 = _ref4.column;
  var data25 = option2.data;
  var cellValue = _xeUtils$A.default.get(row, column2.property);
  return cellValue == data25;
}
function nativeSelectEditRender(h, renderOpts2, params) {
  return [h("select", {
    class: "vxe-default-select",
    attrs: getNativeAttrs(renderOpts2),
    on: getNativeEditOns(renderOpts2, params)
  }, renderOpts2.optionGroups ? renderNativeOptgroups(h, renderOpts2, params, renderNativeOptions) : renderNativeOptions(h, renderOpts2.options, renderOpts2, params))];
}
function defaultSelectEditRender(h, renderOpts2, params) {
  var row = params.row, column2 = params.column;
  var options2 = renderOpts2.options, optionProps = renderOpts2.optionProps, optionGroups2 = renderOpts2.optionGroups, optionGroupProps = renderOpts2.optionGroupProps;
  var cellValue = _tools$z.UtilTools.getCellValue(row, column2);
  return [h(getDefaultComponentName(renderOpts2), {
    props: getCellEditProps(renderOpts2, params, cellValue, {
      options: options2,
      optionProps,
      optionGroups: optionGroups2,
      optionGroupProps
    }),
    on: getEditOns(renderOpts2, params)
  })];
}
function getSelectCellValue(renderOpts2, _ref5) {
  var row = _ref5.row, column2 = _ref5.column;
  var _renderOpts$props = renderOpts2.props, props2 = _renderOpts$props === void 0 ? {} : _renderOpts$props, options2 = renderOpts2.options, optionGroups2 = renderOpts2.optionGroups, _renderOpts$optionPro2 = renderOpts2.optionProps, optionProps = _renderOpts$optionPro2 === void 0 ? {} : _renderOpts$optionPro2, _renderOpts$optionGro2 = renderOpts2.optionGroupProps, optionGroupProps = _renderOpts$optionGro2 === void 0 ? {} : _renderOpts$optionGro2;
  var cellValue = _xeUtils$A.default.get(row, column2.property);
  var selectItem;
  var labelProp = optionProps.label || "label";
  var valueProp = optionProps.value || "value";
  if (!isEmptyValue$1(cellValue)) {
    return _xeUtils$A.default.map(props2.multiple ? cellValue : [cellValue], optionGroups2 ? function(value6) {
      var groupOptions = optionGroupProps.options || "options";
      for (var index2 = 0; index2 < optionGroups2.length; index2++) {
        selectItem = _xeUtils$A.default.find(optionGroups2[index2][groupOptions], function(item) {
          return item[valueProp] == value6;
        });
        if (selectItem) {
          break;
        }
      }
      return selectItem ? selectItem[labelProp] : value6;
    } : function(value6) {
      selectItem = _xeUtils$A.default.find(options2, function(item) {
        return item[valueProp] == value6;
      });
      return selectItem ? selectItem[labelProp] : value6;
    }).join(", ");
  }
  return null;
}
function nativeItemRender(h, renderOpts2, params) {
  var data25 = params.data, property2 = params.property;
  var name = renderOpts2.name;
  var attrs2 = getNativeAttrs(renderOpts2);
  var itemValue = _xeUtils$A.default.get(data25, property2);
  return [h(name, {
    class: "vxe-default-".concat(name),
    attrs: attrs2,
    domProps: attrs2 && name === "input" && (attrs2.type === "submit" || attrs2.type === "reset") ? null : {
      value: itemValue
    },
    on: getNativeItemOns(renderOpts2, params)
  })];
}
function defaultItemRender(h, renderOpts2, params) {
  var data25 = params.data, property2 = params.property;
  var itemValue = _xeUtils$A.default.get(data25, property2);
  return [h(getDefaultComponentName(renderOpts2), {
    props: getItemProps(renderOpts2, params, itemValue),
    on: getItemOns(renderOpts2, params),
    nativeOn: getNativeOns(renderOpts2, params)
  })];
}
function defaultButtonItemRender(h, renderOpts2, params) {
  return [h("vxe-button", {
    props: getItemProps(renderOpts2, params),
    on: getOns(renderOpts2, params),
    nativeOn: getNativeOns(renderOpts2, params)
  })];
}
function defaultButtonsItemRender(h, renderOpts2, params) {
  return renderOpts2.children.map(function(childRenderOpts) {
    return defaultButtonItemRender(h, childRenderOpts, params)[0];
  });
}
function renderNativeFormOptions(h, options2, renderOpts2, params) {
  var data25 = params.data, property2 = params.property;
  var _renderOpts$optionPro3 = renderOpts2.optionProps, optionProps = _renderOpts$optionPro3 === void 0 ? {} : _renderOpts$optionPro3;
  var labelProp = optionProps.label || "label";
  var valueProp = optionProps.value || "value";
  var disabledProp = optionProps.disabled || "disabled";
  var cellValue = _xeUtils$A.default.get(data25, property2);
  return options2.map(function(item, oIndex) {
    return h("option", {
      key: oIndex,
      attrs: {
        value: item[valueProp],
        disabled: item[disabledProp]
      },
      domProps: {
        selected: item[valueProp] == cellValue
      }
    }, item[labelProp]);
  });
}
function handleExportSelectMethod(params) {
  var row = params.row, column2 = params.column, options2 = params.options;
  return options2.original ? _tools$z.UtilTools.getCellValue(row, column2) : getSelectCellValue(column2.editRender || column2.cellRender, params);
}
function defaultFormItemRadioAndCheckboxRender(h, renderOpts2, params) {
  var options2 = renderOpts2.options, _renderOpts$optionPro4 = renderOpts2.optionProps, optionProps = _renderOpts$optionPro4 === void 0 ? {} : _renderOpts$optionPro4;
  var data25 = params.data, property2 = params.property;
  var labelProp = optionProps.label || "label";
  var valueProp = optionProps.value || "value";
  var disabledProp = optionProps.disabled || "disabled";
  var itemValue = _xeUtils$A.default.get(data25, property2);
  var name = getDefaultComponentName(renderOpts2);
  if (options2) {
    return [h("".concat(name, "-group"), {
      props: getItemProps(renderOpts2, params, itemValue),
      on: getItemOns(renderOpts2, params),
      nativeOn: getNativeOns(renderOpts2, params)
    }, options2.map(function(item, index2) {
      return h(name, {
        key: index2,
        props: {
          label: item[valueProp],
          content: item[labelProp],
          disabled: item[disabledProp]
        }
      });
    }))];
  }
  return [h(name, {
    props: getItemProps(renderOpts2, params, itemValue),
    on: getItemOns(renderOpts2, params),
    nativeOn: getNativeOns(renderOpts2, params)
  })];
}
var renderMap = {
  input: {
    autofocus: "input",
    renderEdit: nativeEditRender,
    renderDefault: nativeEditRender,
    renderFilter: nativeFilterRender,
    defaultFilterMethod: handleFilterMethod,
    renderItemContent: nativeItemRender
  },
  textarea: {
    autofocus: "textarea",
    renderEdit: nativeEditRender,
    renderItemContent: nativeItemRender
  },
  select: {
    renderEdit: nativeSelectEditRender,
    renderDefault: nativeSelectEditRender,
    renderCell: function renderCell(h, renderOpts2, params) {
      return getCellLabelVNs(h, renderOpts2, params, getSelectCellValue(renderOpts2, params));
    },
    renderFilter: function renderFilter(h, renderOpts2, params) {
      var column2 = params.column;
      return column2.filters.map(function(option2, oIndex) {
        return h("select", {
          key: oIndex,
          class: "vxe-default-select",
          attrs: getNativeAttrs(renderOpts2),
          on: getNativeFilterOns(renderOpts2, params, option2)
        }, renderOpts2.optionGroups ? renderNativeOptgroups(h, renderOpts2, params, renderNativeOptions) : renderNativeOptions(h, renderOpts2.options, renderOpts2, params));
      });
    },
    defaultFilterMethod: handleFilterMethod,
    renderItemContent: function renderItemContent(h, renderOpts2, params) {
      return [h("select", {
        class: "vxe-default-select",
        attrs: getNativeAttrs(renderOpts2),
        on: getNativeItemOns(renderOpts2, params)
      }, renderOpts2.optionGroups ? renderNativeOptgroups(h, renderOpts2, params, renderNativeFormOptions) : renderNativeFormOptions(h, renderOpts2.options, renderOpts2, params))];
    },
    cellExportMethod: handleExportSelectMethod
  },
  $input: {
    autofocus: ".vxe-input--inner",
    renderEdit: defaultEditRender,
    renderCell: function renderCell2(h, renderOpts2, params) {
      var _renderOpts$props2 = renderOpts2.props, props2 = _renderOpts$props2 === void 0 ? {} : _renderOpts$props2;
      var row = params.row, column2 = params.column;
      var digits = props2.digits || _conf$u.default.input.digits;
      var cellValue = _xeUtils$A.default.get(row, column2.property);
      if (cellValue) {
        switch (props2.type) {
          case "date":
          case "week":
          case "month":
          case "year":
            cellValue = getLabelFormatDate(cellValue, props2);
            break;
          case "float":
            cellValue = _xeUtils$A.default.toFixed(_xeUtils$A.default.floor(cellValue, digits), digits);
            break;
        }
      }
      return getCellLabelVNs(h, renderOpts2, params, cellValue);
    },
    renderDefault: defaultEditRender,
    renderFilter: defaultFilterRender,
    defaultFilterMethod: handleFilterMethod,
    renderItemContent: defaultItemRender
  },
  $textarea: {
    autofocus: ".vxe-textarea--inner",
    renderItemContent: defaultItemRender
  },
  $button: {
    renderDefault: defaultButtonEditRender,
    renderItemContent: defaultButtonItemRender
  },
  $buttons: {
    renderDefault: defaultButtonsEditRender,
    renderItemContent: defaultButtonsItemRender
  },
  $select: {
    autofocus: ".vxe-input--inner",
    renderEdit: defaultSelectEditRender,
    renderDefault: defaultSelectEditRender,
    renderCell: function renderCell3(h, renderOpts2, params) {
      return getCellLabelVNs(h, renderOpts2, params, getSelectCellValue(renderOpts2, params));
    },
    renderFilter: function renderFilter2(h, renderOpts2, params) {
      var column2 = params.column;
      var options2 = renderOpts2.options, optionProps = renderOpts2.optionProps, optionGroups2 = renderOpts2.optionGroups, optionGroupProps = renderOpts2.optionGroupProps;
      var nativeOn = getNativeOns(renderOpts2, params);
      return column2.filters.map(function(option2, oIndex) {
        var optionValue = option2.data;
        return h(getDefaultComponentName(renderOpts2), {
          key: oIndex,
          props: getFilterProps(renderOpts2, params, optionValue, {
            options: options2,
            optionProps,
            optionGroups: optionGroups2,
            optionGroupProps
          }),
          on: getFilterOns(renderOpts2, params, option2),
          nativeOn
        });
      });
    },
    defaultFilterMethod: handleFilterMethod,
    renderItemContent: function renderItemContent2(h, renderOpts2, params) {
      var data25 = params.data, property2 = params.property;
      var options2 = renderOpts2.options, optionProps = renderOpts2.optionProps, optionGroups2 = renderOpts2.optionGroups, optionGroupProps = renderOpts2.optionGroupProps;
      var itemValue = _xeUtils$A.default.get(data25, property2);
      return [h(getDefaultComponentName(renderOpts2), {
        props: getItemProps(renderOpts2, params, itemValue, {
          options: options2,
          optionProps,
          optionGroups: optionGroups2,
          optionGroupProps
        }),
        on: getItemOns(renderOpts2, params),
        nativeOn: getNativeOns(renderOpts2, params)
      })];
    },
    cellExportMethod: handleExportSelectMethod
  },
  $radio: {
    autofocus: ".vxe-radio--input",
    renderItemContent: defaultFormItemRadioAndCheckboxRender
  },
  $checkbox: {
    autofocus: ".vxe-checkbox--input",
    renderItemContent: defaultFormItemRadioAndCheckboxRender
  },
  $switch: {
    autofocus: ".vxe-switch--button",
    renderEdit: defaultEditRender,
    renderDefault: defaultEditRender,
    renderItemContent: defaultItemRender
  }
};
var renderer = {
  mixin: function mixin2(map2) {
    _xeUtils$A.default.each(map2, function(options2, name) {
      return renderer.add(name, options2);
    });
    return renderer;
  },
  get: function get3(name) {
    return renderMap[name] || null;
  },
  add: function add2(name, options2) {
    if (name && options2) {
      var renders = renderMap[name];
      if (renders) {
        Object.assign(renders, options2);
      } else {
        renderMap[name] = options2;
      }
    }
    return renderer;
  },
  delete: function _delete2(name) {
    delete renderMap[name];
    return renderer;
  }
};
renderer$1.renderer = renderer;
var commands$1 = {};
Object.defineProperty(commands$1, "__esModule", {
  value: true
});
commands$1.commands = void 0;
var _store$1 = _interopRequireDefault$1s(store$2);
function _interopRequireDefault$1s(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var commands = new _store$1.default();
commands$1.commands = commands;
var menus$1 = {};
Object.defineProperty(menus$1, "__esModule", {
  value: true
});
menus$1.menus = void 0;
var _store = _interopRequireDefault$1r(store$2);
function _interopRequireDefault$1r(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var menus = new _store.default();
menus$1.menus = menus;
var setup$1 = {};
Object.defineProperty(setup$1, "__esModule", {
  value: true
});
setup$1.setup = setup;
var _conf$t = _interopRequireDefault$1q(conf);
var _xeUtils$z = _interopRequireDefault$1q(xeUtils);
function _interopRequireDefault$1q(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
function setup(options2) {
  return _xeUtils$z.default.merge(_conf$t.default, options2);
}
(function(exports2) {
  Object.defineProperty(exports2, "__esModule", {
    value: true
  });
  var _exportNames = {
    use: true,
    config: true,
    t: true,
    _t: true,
    v: true,
    VXETable: true
  };
  exports2.VXETable = void 0;
  exports2._t = _t;
  exports2.default = exports2.config = void 0;
  exports2.t = t4;
  exports2.use = use3;
  exports2.v = void 0;
  var _xeUtils2 = _interopRequireDefault2(xeUtils);
  var _conf2 = _interopRequireDefault2(conf);
  var _interceptor = interceptor$1;
  Object.keys(_interceptor).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key))
      return;
    if (key in exports2 && exports2[key] === _interceptor[key])
      return;
    Object.defineProperty(exports2, key, {
      enumerable: true,
      get: function get7() {
        return _interceptor[key];
      }
    });
  });
  var _renderer = renderer$1;
  Object.keys(_renderer).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key))
      return;
    if (key in exports2 && exports2[key] === _renderer[key])
      return;
    Object.defineProperty(exports2, key, {
      enumerable: true,
      get: function get7() {
        return _renderer[key];
      }
    });
  });
  var _commands = commands$1;
  Object.keys(_commands).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key))
      return;
    if (key in exports2 && exports2[key] === _commands[key])
      return;
    Object.defineProperty(exports2, key, {
      enumerable: true,
      get: function get7() {
        return _commands[key];
      }
    });
  });
  var _menus = menus$1;
  Object.keys(_menus).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key))
      return;
    if (key in exports2 && exports2[key] === _menus[key])
      return;
    Object.defineProperty(exports2, key, {
      enumerable: true,
      get: function get7() {
        return _menus[key];
      }
    });
  });
  var _formats2 = formats$1;
  Object.keys(_formats2).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key))
      return;
    if (key in exports2 && exports2[key] === _formats2[key])
      return;
    Object.defineProperty(exports2, key, {
      enumerable: true,
      get: function get7() {
        return _formats2[key];
      }
    });
  });
  var _setup = setup$1;
  Object.keys(_setup).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key))
      return;
    if (key in exports2 && exports2[key] === _setup[key])
      return;
    Object.defineProperty(exports2, key, {
      enumerable: true,
      get: function get7() {
        return _setup[key];
      }
    });
  });
  var _tools2 = tools;
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _classCallCheck2(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties2(target2, props2) {
    for (var i = 0; i < props2.length; i++) {
      var descriptor2 = props2[i];
      descriptor2.enumerable = descriptor2.enumerable || false;
      descriptor2.configurable = true;
      if ("value" in descriptor2)
        descriptor2.writable = true;
      Object.defineProperty(target2, descriptor2.key, descriptor2);
    }
  }
  function _createClass2(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties2(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties2(Constructor, staticProps);
    return Constructor;
  }
  var installedPlugins = [];
  function use3(Plugin, options2) {
    if (Plugin && Plugin.install) {
      if (installedPlugins.indexOf(Plugin) === -1) {
        Plugin.install(VXETable, options2);
        installedPlugins.push(Plugin);
      }
    }
    return VXETable;
  }
  function reg(key) {
    VXETable["_".concat(key)] = 1;
  }
  function getExportOrImpotType(types2, flag) {
    var rest = [];
    _xeUtils2.default.objectEach(types2, function(val, type3) {
      if (val === 0 || val === flag) {
        rest.push(type3);
      }
    });
    return rest;
  }
  var VXETableConfig = /* @__PURE__ */ function() {
    function VXETableConfig2() {
      _classCallCheck2(this, VXETableConfig2);
    }
    _createClass2(VXETableConfig2, [{
      key: "zIndex",
      get: function get7() {
        return _tools2.UtilTools.getLastZIndex();
      }
    }, {
      key: "nextZIndex",
      get: function get7() {
        return _tools2.UtilTools.nextZIndex();
      }
    }, {
      key: "exportTypes",
      get: function get7() {
        return getExportOrImpotType(_conf2.default.export.types, 1);
      }
    }, {
      key: "importTypes",
      get: function get7() {
        return getExportOrImpotType(_conf2.default.export.types, 2);
      }
    }]);
    return VXETableConfig2;
  }();
  var config2 = new VXETableConfig();
  exports2.config = config2;
  function t4(key, args) {
    return _conf2.default.i18n(key, args);
  }
  function _t(key, args) {
    return key ? _xeUtils2.default.toValueString(_conf2.default.translate ? _conf2.default.translate(key, args) : key) : "";
  }
  var v = "v3";
  exports2.v = v;
  var VXETable = {
    v,
    reg,
    use: use3,
    setup: _setup.setup,
    interceptor: _interceptor.interceptor,
    renderer: _renderer.renderer,
    commands: _commands.commands,
    formats: _formats2.formats,
    menus: _menus.menus,
    config: config2,
    t: t4,
    _t
  };
  exports2.VXETable = VXETable;
  var _default116 = VXETable;
  exports2.default = _default116;
})(vXETable);
var icon = {};
Object.defineProperty(icon, "__esModule", {
  value: true
});
icon.default = icon.Icon = void 0;
var Icon = {
  install: function install() {
  }
};
icon.Icon = Icon;
var _default$X = Icon;
icon.default = _default$X;
var filter = {};
var table$1 = {};
var table = {};
var body = {};
var util$4 = {};
Object.defineProperty(util$4, "__esModule", {
  value: true
});
util$4.calcTreeLine = calcTreeLine;
util$4.clearTableAllStatus = clearTableAllStatus;
util$4.clearTableDefaultStatus = clearTableDefaultStatus;
util$4.getColMinWidth = getColMinWidth;
util$4.getOffsetSize = getOffsetSize;
util$4.handleFieldOrColumn = handleFieldOrColumn;
util$4.mergeBodyMethod = mergeBodyMethod;
util$4.removeScrollListener = removeScrollListener;
util$4.restoreScrollListener = restoreScrollListener;
util$4.restoreScrollLocation = restoreScrollLocation;
util$4.toTreePathSeq = toTreePathSeq;
var _vXETable$n = _interopRequireDefault$1p(vXETable);
var _xeUtils$y = _interopRequireDefault$1p(xeUtils);
var _tools$y = tools;
function _interopRequireDefault$1p(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var lineOffsetSizes = {
  mini: 3,
  small: 2,
  medium: 1
};
function restoreScrollLocation(_vm, scrollLeft, scrollTop) {
  return _vm.clearScroll().then(function() {
    if (scrollLeft || scrollTop) {
      _vm.lastScrollLeft = 0;
      _vm.lastScrollTop = 0;
      return _vm.scrollTo(scrollLeft, scrollTop);
    }
  });
}
function toTreePathSeq(path) {
  return path.map(function(num, i) {
    return i % 2 === 0 ? Number(num) + 1 : ".";
  }).join("");
}
function removeScrollListener(scrollElem) {
  if (scrollElem && scrollElem._onscroll) {
    scrollElem.onscroll = null;
  }
}
function restoreScrollListener(scrollElem) {
  if (scrollElem && scrollElem._onscroll) {
    scrollElem.onscroll = scrollElem._onscroll;
  }
}
function getPaddingLeftRightSize(elem) {
  if (elem) {
    var computedStyle = getComputedStyle(elem);
    var paddingLeft = _xeUtils$y.default.toNumber(computedStyle.paddingLeft);
    var paddingRight = _xeUtils$y.default.toNumber(computedStyle.paddingRight);
    return paddingLeft + paddingRight;
  }
  return 0;
}
function getElemenMarginWidth(elem) {
  if (elem) {
    var computedStyle = getComputedStyle(elem);
    var marginLeft = _xeUtils$y.default.toNumber(computedStyle.marginLeft);
    var marginRight = _xeUtils$y.default.toNumber(computedStyle.marginRight);
    return elem.offsetWidth + marginLeft + marginRight;
  }
  return 0;
}
function handleFieldOrColumn(_vm, fieldOrColumn) {
  if (fieldOrColumn) {
    return _xeUtils$y.default.isString(fieldOrColumn) ? _vm.getColumnByField(fieldOrColumn) : fieldOrColumn;
  }
  return null;
}
function queryCellElement(cell2, selector) {
  return cell2.querySelector(".vxe-cell" + selector);
}
function getColMinWidth(params) {
  var $table = params.$table, column2 = params.column, cell2 = params.cell;
  var allColumnHeaderOverflow = $table.showHeaderOverflow, resizableOpts2 = $table.resizableOpts;
  var minWidth = resizableOpts2.minWidth;
  if (minWidth) {
    var customMinWidth = _xeUtils$y.default.isFunction(minWidth) ? minWidth(params) : minWidth;
    if (customMinWidth !== "auto") {
      return Math.max(1, _xeUtils$y.default.toNumber(customMinWidth));
    }
  }
  var showHeaderOverflow = column2.showHeaderOverflow, colMinWidth = column2.minWidth;
  var headOverflow = _xeUtils$y.default.isUndefined(showHeaderOverflow) || _xeUtils$y.default.isNull(showHeaderOverflow) ? allColumnHeaderOverflow : showHeaderOverflow;
  var showEllipsis = headOverflow === "ellipsis";
  var showTitle = headOverflow === "title";
  var showTooltip = headOverflow === true || headOverflow === "tooltip";
  var hasEllipsis2 = showTitle || showTooltip || showEllipsis;
  var minTitleWidth = _xeUtils$y.default.floor((_xeUtils$y.default.toNumber(getComputedStyle(cell2).fontSize) || 14) * 1.6);
  var paddingLeftRight = getPaddingLeftRightSize(cell2) + getPaddingLeftRightSize(queryCellElement(cell2, ""));
  var mWidth = minTitleWidth + paddingLeftRight;
  if (hasEllipsis2) {
    var checkboxIconWidth = getPaddingLeftRightSize(queryCellElement(cell2, "--title>.vxe-cell--checkbox"));
    var requiredIconWidth = getElemenMarginWidth(queryCellElement(cell2, ">.vxe-cell--required-icon"));
    var editIconWidth = getElemenMarginWidth(queryCellElement(cell2, ">.vxe-cell--edit-icon"));
    var helpIconWidth = getElemenMarginWidth(queryCellElement(cell2, ">.vxe-cell-help-icon"));
    var sortIconWidth = getElemenMarginWidth(queryCellElement(cell2, ">.vxe-cell--sort"));
    var filterIconWidth = getElemenMarginWidth(queryCellElement(cell2, ">.vxe-cell--filter"));
    mWidth += checkboxIconWidth + requiredIconWidth + editIconWidth + helpIconWidth + filterIconWidth + sortIconWidth;
  }
  if (colMinWidth) {
    var tableBody = $table.$refs.tableBody;
    var bodyElem = tableBody ? tableBody.$el : null;
    if (bodyElem) {
      if (_tools$y.DomTools.isScale(colMinWidth)) {
        var bodyWidth = bodyElem.clientWidth - 1;
        var meanWidth = bodyWidth / 100;
        return Math.max(mWidth, Math.floor(_xeUtils$y.default.toInteger(colMinWidth) * meanWidth));
      } else if (_tools$y.DomTools.isPx(colMinWidth)) {
        return Math.max(mWidth, _xeUtils$y.default.toInteger(colMinWidth));
      }
    }
  }
  return mWidth;
}
function countTreeExpand(prevRow, params) {
  var count = 1;
  if (!prevRow) {
    return count;
  }
  var $table = params.$table;
  var rowChildren = prevRow[$table.treeOpts.children];
  if ($table.isTreeExpandByRow(prevRow)) {
    for (var index2 = 0; index2 < rowChildren.length; index2++) {
      count += countTreeExpand(rowChildren[index2], params);
    }
  }
  return count;
}
function getOffsetSize($xetable) {
  return lineOffsetSizes[$xetable.vSize] || 0;
}
function calcTreeLine(params, items2, rIndex) {
  var $table = params.$table;
  var expandSize = 1;
  if (rIndex) {
    expandSize = countTreeExpand(items2[rIndex - 1], params);
  }
  return $table.rowHeight * expandSize - (rIndex ? 1 : 12 - getOffsetSize($table));
}
function mergeBodyMethod(mergeList, _rowIndex, _columnIndex) {
  for (var mIndex = 0; mIndex < mergeList.length; mIndex++) {
    var _mergeList$mIndex = mergeList[mIndex], mergeRowIndex = _mergeList$mIndex.row, mergeColIndex = _mergeList$mIndex.col, mergeRowspan = _mergeList$mIndex.rowspan, mergeColspan = _mergeList$mIndex.colspan;
    if (mergeColIndex > -1 && mergeRowIndex > -1 && mergeRowspan && mergeColspan) {
      if (mergeRowIndex === _rowIndex && mergeColIndex === _columnIndex) {
        return {
          rowspan: mergeRowspan,
          colspan: mergeColspan
        };
      }
      if (_rowIndex >= mergeRowIndex && _rowIndex < mergeRowIndex + mergeRowspan && _columnIndex >= mergeColIndex && _columnIndex < mergeColIndex + mergeColspan) {
        return {
          rowspan: 0,
          colspan: 0
        };
      }
    }
  }
}
function clearTableDefaultStatus(_vm) {
  _vm.initStatus = false;
  _vm.clearSort();
  _vm.clearCurrentRow();
  _vm.clearCurrentColumn();
  _vm.clearRadioRow();
  _vm.clearRadioReserve();
  _vm.clearCheckboxRow();
  _vm.clearCheckboxReserve();
  _vm.clearRowExpand();
  _vm.clearTreeExpand();
  _vm.clearTreeExpandReserve();
  if (_vm.clearActived && _vXETable$n.default._edit) {
    _vm.clearActived();
  }
  if (_vm.clearSelected && (_vm.keyboardConfig || _vm.mouseConfig)) {
    _vm.clearSelected();
  }
  if (_vm.clearCellAreas && _vm.mouseConfig) {
    _vm.clearCellAreas();
    _vm.clearCopyCellArea();
  }
  return _vm.clearScroll();
}
function clearTableAllStatus(_vm) {
  if (_vm.clearFilter && _vXETable$n.default._filter) {
    _vm.clearFilter();
  }
  return clearTableDefaultStatus(_vm);
}
Object.defineProperty(body, "__esModule", {
  value: true
});
body.default = void 0;
var _xeUtils$x = _interopRequireDefault$1o(xeUtils);
var _conf$s = _interopRequireDefault$1o(conf);
var _vXETable$m = _interopRequireDefault$1o(vXETable);
var _tools$x = tools;
var _util$a = util$4;
var _dom$c = dom$1;
function _interopRequireDefault$1o(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
function _defineProperty$l(obj, key, value6) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value: value6, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value6;
  }
  return obj;
}
function _toConsumableArray$6(arr) {
  return _arrayWithoutHoles$6(arr) || _iterableToArray$6(arr) || _unsupportedIterableToArray$6(arr) || _nonIterableSpread$6();
}
function _nonIterableSpread$6() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$6(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$6(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$6(o, minLen);
}
function _iterableToArray$6(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _arrayWithoutHoles$6(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray$6(arr);
}
function _arrayLikeToArray$6(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
var renderType = "body";
function isOperateMouse($xetable) {
  return $xetable._isResize || $xetable.lastScrollTime && Date.now() < $xetable.lastScrollTime + $xetable.delayHover;
}
function renderLine(h, _vm, $xetable, params) {
  var row = params.row, column2 = params.column;
  var treeOpts2 = $xetable.treeOpts, treeConfig = $xetable.treeConfig, fullAllDataRowIdData = $xetable.fullAllDataRowIdData;
  var slots = column2.slots, treeNode = column2.treeNode;
  var rowid = _tools$x.UtilTools.getRowid($xetable, row);
  var rest = fullAllDataRowIdData[rowid];
  var rLevel = 0;
  var rIndex = 0;
  var items2 = [];
  if (rest) {
    rLevel = rest.level;
    rIndex = rest._index;
    items2 = rest.items;
  }
  if (slots && slots.line) {
    return $xetable.callSlot(slots.line, params, h);
  }
  if (treeConfig && treeNode && treeOpts2.line) {
    return [h("div", {
      class: "vxe-tree--line-wrapper"
    }, [h("div", {
      class: "vxe-tree--line",
      style: {
        height: "".concat((0, _util$a.calcTreeLine)(params, items2, rIndex), "px"),
        left: "".concat(rLevel * treeOpts2.indent + (rLevel ? 2 - (0, _util$a.getOffsetSize)($xetable) : 0) + 16, "px")
      }
    })])];
  }
  return [];
}
function renderColumn(h, _vm, $xetable, seq, rowid, fixedType, rowLevel, row, rowIndex, $rowIndex, _rowIndex, column2, $columnIndex, columns2, items2) {
  var _ref2;
  var tableListeners = $xetable.$listeners, afterFullData = $xetable.afterFullData, tableData = $xetable.tableData, height3 = $xetable.height, columnKey = $xetable.columnKey, overflowX = $xetable.overflowX, sYOpts3 = $xetable.sYOpts, scrollXLoad = $xetable.scrollXLoad, scrollYLoad = $xetable.scrollYLoad, highlightCurrentRow = $xetable.highlightCurrentRow, allColumnOverflow = $xetable.showOverflow, isAllOverflow = $xetable.isAllOverflow, allAlign = $xetable.align, currentColumn = $xetable.currentColumn, cellClassName = $xetable.cellClassName, cellStyle = $xetable.cellStyle, mergeList = $xetable.mergeList, spanMethod = $xetable.spanMethod, radioOpts2 = $xetable.radioOpts, checkboxOpts2 = $xetable.checkboxOpts, expandOpts2 = $xetable.expandOpts, treeOpts2 = $xetable.treeOpts, tooltipOpts3 = $xetable.tooltipOpts, mouseConfig = $xetable.mouseConfig, editConfig = $xetable.editConfig, editOpts2 = $xetable.editOpts, editRules = $xetable.editRules, validOpts3 = $xetable.validOpts, editStore = $xetable.editStore, validStore = $xetable.validStore, tooltipConfig = $xetable.tooltipConfig, rowOpts2 = $xetable.rowOpts;
  var type3 = column2.type, cellRender = column2.cellRender, editRender = column2.editRender, align = column2.align, showOverflow = column2.showOverflow, className = column2.className, treeNode = column2.treeNode;
  var actived = editStore.actived;
  var scrollYRHeight = sYOpts3.rHeight;
  var rowHeight = rowOpts2.height;
  var showAllTip = tooltipOpts3.showAll || tooltipOpts3.enabled;
  var columnIndex = $xetable.getColumnIndex(column2);
  var _columnIndex = $xetable.getVTColumnIndex(column2);
  var isEdit = (0, _tools$x.isEnableConf)(editRender);
  var fixedHiddenColumn = fixedType ? column2.fixed !== fixedType : column2.fixed && overflowX;
  var cellOverflow = _xeUtils$x.default.isUndefined(showOverflow) || _xeUtils$x.default.isNull(showOverflow) ? allColumnOverflow : showOverflow;
  var showEllipsis = cellOverflow === "ellipsis";
  var showTitle = cellOverflow === "title";
  var showTooltip = cellOverflow === true || cellOverflow === "tooltip";
  var hasEllipsis2 = showTitle || showTooltip || showEllipsis;
  var isDirty;
  var tdOns = {};
  var cellAlign = align || allAlign;
  var hasValidError = validStore.row === row && validStore.column === column2;
  var showValidTip = editRules && validOpts3.showMessage && (validOpts3.message === "default" ? height3 || tableData.length > 1 : validOpts3.message === "inline");
  var attrs2 = {
    colid: column2.id
  };
  var bindMouseenter = tableListeners["cell-mouseenter"];
  var bindMouseleave = tableListeners["cell-mouseleave"];
  var triggerDblclick = editRender && editConfig && editOpts2.trigger === "dblclick";
  var params = {
    $table: $xetable,
    seq,
    rowid,
    row,
    rowIndex,
    $rowIndex,
    _rowIndex,
    column: column2,
    columnIndex,
    $columnIndex,
    _columnIndex,
    fixed: fixedType,
    type: renderType,
    isHidden: fixedHiddenColumn,
    level: rowLevel,
    visibleData: afterFullData,
    data: tableData,
    items: items2
  };
  if ((scrollXLoad || scrollYLoad) && !hasEllipsis2) {
    showEllipsis = hasEllipsis2 = true;
  }
  if (showTitle || showTooltip || showAllTip || bindMouseenter || tooltipConfig) {
    tdOns.mouseenter = function(evnt) {
      if (isOperateMouse($xetable)) {
        return;
      }
      if (showTitle) {
        _tools$x.DomTools.updateCellTitle(evnt.currentTarget, column2);
      } else if (showTooltip || showAllTip) {
        $xetable.triggerBodyTooltipEvent(evnt, params);
      }
      if (bindMouseenter) {
        $xetable.emitEvent("cell-mouseenter", Object.assign({
          cell: evnt.currentTarget
        }, params), evnt);
      }
    };
  }
  if (showTooltip || showAllTip || bindMouseleave || tooltipConfig) {
    tdOns.mouseleave = function(evnt) {
      if (isOperateMouse($xetable)) {
        return;
      }
      if (showTooltip || showAllTip) {
        $xetable.handleTargetLeaveEvent(evnt);
      }
      if (bindMouseleave) {
        $xetable.emitEvent("cell-mouseleave", Object.assign({
          cell: evnt.currentTarget
        }, params), evnt);
      }
    };
  }
  if (checkboxOpts2.range || mouseConfig) {
    tdOns.mousedown = function(evnt) {
      $xetable.triggerCellMousedownEvent(evnt, params);
    };
  }
  if (rowOpts2.isCurrent || highlightCurrentRow || tableListeners["cell-click"] || editRender && editConfig || expandOpts2.trigger === "row" || expandOpts2.trigger === "cell" || radioOpts2.trigger === "row" || column2.type === "radio" && radioOpts2.trigger === "cell" || checkboxOpts2.trigger === "row" || column2.type === "checkbox" && checkboxOpts2.trigger === "cell" || treeOpts2.trigger === "row" || column2.treeNode && treeOpts2.trigger === "cell") {
    tdOns.click = function(evnt) {
      $xetable.triggerCellClickEvent(evnt, params);
    };
  }
  if (triggerDblclick || tableListeners["cell-dblclick"]) {
    tdOns.dblclick = function(evnt) {
      $xetable.triggerCellDblclickEvent(evnt, params);
    };
  }
  if (mergeList.length) {
    var spanRest = (0, _util$a.mergeBodyMethod)(mergeList, _rowIndex, _columnIndex);
    if (spanRest) {
      var rowspan = spanRest.rowspan, colspan = spanRest.colspan;
      if (!rowspan || !colspan) {
        return null;
      }
      if (rowspan > 1) {
        attrs2.rowspan = rowspan;
      }
      if (colspan > 1) {
        attrs2.colspan = colspan;
      }
    }
  } else if (spanMethod) {
    var _ref = spanMethod(params) || {}, _ref$rowspan = _ref.rowspan, _rowspan = _ref$rowspan === void 0 ? 1 : _ref$rowspan, _ref$colspan = _ref.colspan, _colspan = _ref$colspan === void 0 ? 1 : _ref$colspan;
    if (!_rowspan || !_colspan) {
      return null;
    }
    if (_rowspan > 1) {
      attrs2.rowspan = _rowspan;
    }
    if (_colspan > 1) {
      attrs2.colspan = _colspan;
    }
  }
  if (fixedHiddenColumn && mergeList) {
    if (attrs2.colspan > 1 || attrs2.rowspan > 1) {
      fixedHiddenColumn = false;
    }
  }
  if (!fixedHiddenColumn && editConfig && (editRender || cellRender) && (editOpts2.showStatus || editOpts2.showUpdateStatus)) {
    isDirty = $xetable.isUpdateByRow(row, column2.property);
  }
  var tdVNs = [];
  if (fixedHiddenColumn && (allColumnOverflow ? isAllOverflow : allColumnOverflow)) {
    tdVNs.push(h("div", {
      class: ["vxe-cell", {
        "c--title": showTitle,
        "c--tooltip": showTooltip,
        "c--ellipsis": showEllipsis
      }],
      style: {
        maxHeight: hasEllipsis2 && (scrollYRHeight || rowHeight) ? "".concat(scrollYRHeight || rowHeight, "px") : ""
      }
    }));
  } else {
    tdVNs.push.apply(tdVNs, _toConsumableArray$6(renderLine(h, _vm, $xetable, params)).concat([h("div", {
      class: ["vxe-cell", {
        "c--title": showTitle,
        "c--tooltip": showTooltip,
        "c--ellipsis": showEllipsis
      }],
      style: {
        maxHeight: hasEllipsis2 && (scrollYRHeight || rowHeight) ? "".concat(scrollYRHeight || rowHeight, "px") : ""
      },
      attrs: {
        title: showTitle ? $xetable.getCellLabel(row, column2) : null
      }
    }, column2.renderCell(h, params))]));
    if (showValidTip && hasValidError) {
      tdVNs.push(h("div", {
        class: "vxe-cell--valid",
        style: validStore.rule && validStore.rule.maxWidth ? {
          width: "".concat(validStore.rule.maxWidth, "px")
        } : null
      }, [h("span", {
        class: "vxe-cell--valid-msg"
      }, validStore.content)]));
    }
  }
  return h("td", {
    class: ["vxe-body--column", column2.id, (_ref2 = {}, _defineProperty$l(_ref2, "col--".concat(cellAlign), cellAlign), _defineProperty$l(_ref2, "col--".concat(type3), type3), _defineProperty$l(_ref2, "col--last", $columnIndex === columns2.length - 1), _defineProperty$l(_ref2, "col--tree-node", treeNode), _defineProperty$l(_ref2, "col--edit", isEdit), _defineProperty$l(_ref2, "col--ellipsis", hasEllipsis2), _defineProperty$l(_ref2, "fixed--hidden", fixedHiddenColumn), _defineProperty$l(_ref2, "col--dirty", isDirty), _defineProperty$l(_ref2, "col--actived", editConfig && isEdit && actived.row === row && (actived.column === column2 || editOpts2.mode === "row")), _defineProperty$l(_ref2, "col--valid-error", hasValidError), _defineProperty$l(_ref2, "col--current", currentColumn === column2), _ref2), _tools$x.UtilTools.getClass(className, params), _tools$x.UtilTools.getClass(cellClassName, params)],
    key: columnKey ? column2.id : $columnIndex,
    attrs: attrs2,
    style: Object.assign({
      height: hasEllipsis2 && (scrollYRHeight || rowHeight) ? "".concat(scrollYRHeight || rowHeight, "px") : ""
    }, cellStyle ? _xeUtils$x.default.isFunction(cellStyle) ? cellStyle(params) : cellStyle : null),
    on: tdOns
  }, tdVNs);
}
function renderRows(h, _vm, $xetable, fixedType, tableData, tableColumn3) {
  var stripe = $xetable.stripe, rowKey = $xetable.rowKey, highlightHoverRow = $xetable.highlightHoverRow, rowClassName = $xetable.rowClassName, rowStyle = $xetable.rowStyle, editConfig = $xetable.editConfig, allColumnOverflow = $xetable.showOverflow, treeConfig = $xetable.treeConfig, treeOpts2 = $xetable.treeOpts, editOpts2 = $xetable.editOpts, treeExpandeds = $xetable.treeExpandeds, scrollYLoad = $xetable.scrollYLoad, editStore = $xetable.editStore, rowExpandeds = $xetable.rowExpandeds, radioOpts2 = $xetable.radioOpts, checkboxOpts2 = $xetable.checkboxOpts, expandColumn = $xetable.expandColumn, hasFixedColumn = $xetable.hasFixedColumn, fullAllDataRowIdData = $xetable.fullAllDataRowIdData, rowOpts2 = $xetable.rowOpts;
  var rows = [];
  tableData.forEach(function(row, $rowIndex) {
    var trOn = {};
    var rowIndex = $rowIndex;
    var _rowIndex = $xetable.getVTRowIndex(row);
    rowIndex = $xetable.getRowIndex(row);
    if (rowOpts2.isHover || highlightHoverRow) {
      trOn.mouseenter = function(evnt) {
        if (isOperateMouse($xetable)) {
          return;
        }
        $xetable.triggerHoverEvent(evnt, {
          row,
          rowIndex
        });
      };
      trOn.mouseleave = function() {
        if (isOperateMouse($xetable)) {
          return;
        }
        $xetable.clearHoverRow();
      };
    }
    var rowid = _tools$x.UtilTools.getRowid($xetable, row);
    var rest = fullAllDataRowIdData[rowid];
    var rowLevel = rest ? rest.level : 0;
    var seq = rest ? rest.seq : -1;
    var params = {
      $table: $xetable,
      seq,
      rowid,
      fixed: fixedType,
      type: renderType,
      level: rowLevel,
      row,
      rowIndex,
      $rowIndex
    };
    var isNewRow = false;
    if (editConfig) {
      isNewRow = editStore.insertList.indexOf(row) > -1;
    }
    rows.push(h("tr", {
      class: ["vxe-body--row", {
        "row--stripe": stripe && ($xetable.getVTRowIndex(row) + 1) % 2 === 0,
        "is--new": isNewRow,
        "row--new": isNewRow && (editOpts2.showStatus || editOpts2.showInsertStatus),
        "row--radio": radioOpts2.highlight && $xetable.selectRow === row,
        "row--checked": checkboxOpts2.highlight && $xetable.isCheckedByCheckboxRow(row)
      }, rowClassName ? _xeUtils$x.default.isFunction(rowClassName) ? rowClassName(params) : rowClassName : ""],
      attrs: {
        rowid
      },
      style: rowStyle ? _xeUtils$x.default.isFunction(rowStyle) ? rowStyle(params) : rowStyle : null,
      key: rowKey || treeConfig ? rowid : $rowIndex,
      on: trOn
    }, tableColumn3.map(function(column2, $columnIndex) {
      return renderColumn(h, _vm, $xetable, seq, rowid, fixedType, rowLevel, row, rowIndex, $rowIndex, _rowIndex, column2, $columnIndex, tableColumn3, tableData);
    })));
    if (expandColumn && rowExpandeds.length && rowExpandeds.indexOf(row) > -1) {
      var cellStyle;
      if (treeConfig) {
        cellStyle = {
          paddingLeft: "".concat(rowLevel * treeOpts2.indent + 30, "px")
        };
      }
      var showOverflow = expandColumn.showOverflow;
      var hasEllipsis2 = _xeUtils$x.default.isUndefined(showOverflow) || _xeUtils$x.default.isNull(showOverflow) ? allColumnOverflow : showOverflow;
      var expandParams = {
        $table: $xetable,
        seq,
        column: expandColumn,
        fixed: fixedType,
        type: renderType,
        level: rowLevel,
        row,
        rowIndex,
        $rowIndex
      };
      rows.push(h("tr", {
        class: "vxe-body--expanded-row",
        key: "expand_".concat(rowid),
        style: rowStyle ? _xeUtils$x.default.isFunction(rowStyle) ? rowStyle(expandParams) : rowStyle : null,
        on: trOn
      }, [h("td", {
        class: ["vxe-body--expanded-column", {
          "fixed--hidden": fixedType && !hasFixedColumn,
          "col--ellipsis": hasEllipsis2
        }],
        attrs: {
          colspan: tableColumn3.length
        }
      }, [h("div", {
        class: "vxe-body--expanded-cell",
        style: cellStyle
      }, [expandColumn.renderData(h, expandParams)])])]));
    }
    if (treeConfig && !scrollYLoad && !treeOpts2.transform && treeExpandeds.length) {
      var rowChildren = row[treeOpts2.children];
      if (rowChildren && rowChildren.length && treeExpandeds.indexOf(row) > -1) {
        rows.push.apply(rows, _toConsumableArray$6(renderRows(h, _vm, $xetable, fixedType, rowChildren, tableColumn3)));
      }
    }
  });
  return rows;
}
var scrollProcessTimeout;
function syncBodyScroll(_vm, fixedType, scrollTop, elem1, elem2) {
  if (elem1 || elem2) {
    if (elem1) {
      (0, _util$a.removeScrollListener)(elem1);
      elem1.scrollTop = scrollTop;
    }
    if (elem2) {
      (0, _util$a.removeScrollListener)(elem2);
      elem2.scrollTop = scrollTop;
    }
    clearTimeout(scrollProcessTimeout);
    scrollProcessTimeout = setTimeout(function() {
      var _vm$$refs = _vm.$refs, tableBody = _vm$$refs.tableBody, leftBody = _vm$$refs.leftBody, rightBody = _vm$$refs.rightBody;
      var bodyElem = tableBody.$el;
      var leftElem = leftBody ? leftBody.$el : null;
      var rightElem = rightBody ? rightBody.$el : null;
      (0, _util$a.restoreScrollListener)(elem1);
      (0, _util$a.restoreScrollListener)(elem2);
      var targetTop = bodyElem.scrollTop;
      if (fixedType === "left") {
        if (leftElem) {
          targetTop = leftElem.scrollTop;
        }
      } else if (fixedType === "right") {
        if (rightElem) {
          targetTop = rightElem.scrollTop;
        }
      }
      (0, _dom$c.setScrollTop)(bodyElem, targetTop);
      (0, _dom$c.setScrollTop)(leftElem, targetTop);
      (0, _dom$c.setScrollTop)(rightElem, targetTop);
    }, 300);
  }
}
var _default$W = {
  name: "VxeTableBody",
  props: {
    tableData: Array,
    tableColumn: Array,
    fixedColumn: Array,
    size: String,
    fixedType: String
  },
  data: function data() {
    return {
      wheelTime: null,
      wheelYSize: 0,
      wheelYInterval: 0,
      wheelYTotal: 0
    };
  },
  mounted: function mounted() {
    var $xetable = this.$parent, $el = this.$el, $refs = this.$refs, fixedType = this.fixedType;
    var elemStore = $xetable.elemStore;
    var prefix = "".concat(fixedType || "main", "-body-");
    elemStore["".concat(prefix, "wrapper")] = $el;
    elemStore["".concat(prefix, "table")] = $refs.table;
    elemStore["".concat(prefix, "colgroup")] = $refs.colgroup;
    elemStore["".concat(prefix, "list")] = $refs.tbody;
    elemStore["".concat(prefix, "xSpace")] = $refs.xSpace;
    elemStore["".concat(prefix, "ySpace")] = $refs.ySpace;
    elemStore["".concat(prefix, "emptyBlock")] = $refs.emptyBlock;
    this.$el.onscroll = this.scrollEvent;
    this.$el._onscroll = this.scrollEvent;
  },
  beforeDestroy: function beforeDestroy() {
    clearTimeout(this.wheelTime);
    this.$el._onscroll = null;
    this.$el.onscroll = null;
  },
  destroyed: function destroyed() {
    var $xetable = this.$parent, fixedType = this.fixedType;
    var elemStore = $xetable.elemStore;
    var prefix = "".concat(fixedType || "main", "-body-");
    elemStore["".concat(prefix, "wrapper")] = null;
    elemStore["".concat(prefix, "table")] = null;
    elemStore["".concat(prefix, "colgroup")] = null;
    elemStore["".concat(prefix, "list")] = null;
    elemStore["".concat(prefix, "xSpace")] = null;
    elemStore["".concat(prefix, "ySpace")] = null;
    elemStore["".concat(prefix, "emptyBlock")] = null;
  },
  render: function render(h) {
    var _e = this._e, $xetable = this.$parent, fixedColumn = this.fixedColumn, fixedType = this.fixedType;
    var $scopedSlots = $xetable.$scopedSlots, tId = $xetable.tId, tableData = $xetable.tableData, tableColumn3 = $xetable.tableColumn, visibleColumn = $xetable.visibleColumn, allColumnOverflow = $xetable.showOverflow, keyboardConfig = $xetable.keyboardConfig, keyboardOpts2 = $xetable.keyboardOpts, mergeList = $xetable.mergeList, spanMethod = $xetable.spanMethod, scrollXLoad = $xetable.scrollXLoad, scrollYLoad = $xetable.scrollYLoad, isAllOverflow = $xetable.isAllOverflow, emptyOpts2 = $xetable.emptyOpts, mouseConfig = $xetable.mouseConfig, mouseOpts2 = $xetable.mouseOpts, sYOpts3 = $xetable.sYOpts;
    if (fixedType) {
      if (scrollXLoad || scrollYLoad || (allColumnOverflow ? isAllOverflow : allColumnOverflow)) {
        if (!mergeList.length && !spanMethod && !(keyboardConfig && keyboardOpts2.isMerge)) {
          tableColumn3 = fixedColumn;
        } else {
          tableColumn3 = visibleColumn;
        }
      } else {
        tableColumn3 = visibleColumn;
      }
    }
    var emptyContent;
    if ($scopedSlots.empty) {
      emptyContent = $scopedSlots.empty.call(this, {
        $table: $xetable
      }, h);
    } else {
      var compConf = emptyOpts2.name ? _vXETable$m.default.renderer.get(emptyOpts2.name) : null;
      var renderEmpty = compConf ? compConf.renderEmpty : null;
      if (renderEmpty) {
        emptyContent = renderEmpty.call(this, h, emptyOpts2, {
          $table: $xetable
        });
      } else {
        emptyContent = $xetable.emptyText || _conf$s.default.i18n("vxe.table.emptyText");
      }
    }
    return h("div", {
      class: ["vxe-table--body-wrapper", fixedType ? "fixed-".concat(fixedType, "--wrapper") : "body--wrapper"],
      attrs: {
        xid: tId
      },
      on: scrollYLoad && sYOpts3.mode === "wheel" ? {
        wheel: this.wheelEvent
      } : {}
    }, [fixedType ? _e() : h("div", {
      class: "vxe-body--x-space",
      ref: "xSpace"
    }), h("div", {
      class: "vxe-body--y-space",
      ref: "ySpace"
    }), h("table", {
      class: "vxe-table--body",
      attrs: {
        xid: tId,
        cellspacing: 0,
        cellpadding: 0,
        border: 0
      },
      ref: "table"
    }, [
      h("colgroup", {
        ref: "colgroup"
      }, tableColumn3.map(function(column2, $columnIndex) {
        return h("col", {
          attrs: {
            name: column2.id
          },
          key: $columnIndex
        });
      })),
      h("tbody", {
        ref: "tbody"
      }, renderRows(h, this, $xetable, fixedType, tableData, tableColumn3))
    ]), h("div", {
      class: "vxe-table--checkbox-range"
    }), mouseConfig && mouseOpts2.area ? h("div", {
      class: "vxe-table--cell-area"
    }, [h("span", {
      class: "vxe-table--cell-main-area"
    }, mouseOpts2.extension ? [h("span", {
      class: "vxe-table--cell-main-area-btn",
      on: {
        mousedown: function mousedown(evnt) {
          $xetable.triggerCellExtendMousedownEvent(evnt, {
            $table: $xetable,
            fixed: fixedType,
            type: renderType
          });
        }
      }
    })] : null), h("span", {
      class: "vxe-table--cell-copy-area"
    }), h("span", {
      class: "vxe-table--cell-extend-area"
    }), h("span", {
      class: "vxe-table--cell-multi-area"
    }), h("span", {
      class: "vxe-table--cell-active-area"
    })]) : null, !fixedType ? h("div", {
      class: "vxe-table--empty-block",
      ref: "emptyBlock"
    }, [h("div", {
      class: "vxe-table--empty-content"
    }, emptyContent)]) : null]);
  },
  methods: {
    scrollEvent: function scrollEvent(evnt) {
      var scrollBodyElem = this.$el, $xetable = this.$parent, fixedType = this.fixedType;
      var $refs = $xetable.$refs, elemStore = $xetable.elemStore, highlightHoverRow = $xetable.highlightHoverRow, scrollXLoad = $xetable.scrollXLoad, scrollYLoad = $xetable.scrollYLoad, lastScrollTop = $xetable.lastScrollTop, lastScrollLeft = $xetable.lastScrollLeft, rowOpts2 = $xetable.rowOpts;
      var tableHeader = $refs.tableHeader, tableBody = $refs.tableBody, leftBody = $refs.leftBody, rightBody = $refs.rightBody, tableFooter = $refs.tableFooter, validTip = $refs.validTip;
      var headerElem = tableHeader ? tableHeader.$el : null;
      var footerElem = tableFooter ? tableFooter.$el : null;
      var bodyElem = tableBody.$el;
      var leftElem = leftBody ? leftBody.$el : null;
      var rightElem = rightBody ? rightBody.$el : null;
      var bodyYElem = elemStore["main-body-ySpace"];
      var bodyXElem = elemStore["main-body-xSpace"];
      var bodyHeight = scrollYLoad && bodyYElem ? bodyYElem.clientHeight : bodyElem.clientHeight;
      var bodyWidth = scrollXLoad && bodyXElem ? bodyXElem.clientWidth : bodyElem.clientWidth;
      var scrollTop = scrollBodyElem.scrollTop;
      var scrollLeft = bodyElem.scrollLeft;
      var isRollX = scrollLeft !== lastScrollLeft;
      var isRollY = scrollTop !== lastScrollTop;
      $xetable.lastScrollTop = scrollTop;
      $xetable.lastScrollLeft = scrollLeft;
      $xetable.lastScrollTime = Date.now();
      if (rowOpts2.isHover || highlightHoverRow) {
        $xetable.clearHoverRow();
      }
      if (leftElem && fixedType === "left") {
        scrollTop = leftElem.scrollTop;
        syncBodyScroll($xetable, fixedType, scrollTop, bodyElem, rightElem);
      } else if (rightElem && fixedType === "right") {
        scrollTop = rightElem.scrollTop;
        syncBodyScroll($xetable, fixedType, scrollTop, bodyElem, leftElem);
      } else {
        if (isRollX) {
          if (headerElem) {
            headerElem.scrollLeft = bodyElem.scrollLeft;
          }
          if (footerElem) {
            footerElem.scrollLeft = bodyElem.scrollLeft;
          }
        }
        if (leftElem || rightElem) {
          $xetable.checkScrolling();
          if (isRollY) {
            syncBodyScroll($xetable, fixedType, scrollTop, leftElem, rightElem);
          }
        }
      }
      if (scrollXLoad && isRollX) {
        $xetable.triggerScrollXEvent(evnt);
      }
      if (scrollYLoad && isRollY) {
        $xetable.triggerScrollYEvent(evnt);
      }
      if (isRollX && validTip && validTip.visible) {
        validTip.updatePlacement();
      }
      $xetable.emitEvent("scroll", {
        type: renderType,
        fixed: fixedType,
        scrollTop,
        scrollLeft,
        scrollHeight: bodyElem.scrollHeight,
        scrollWidth: bodyElem.scrollWidth,
        bodyHeight,
        bodyWidth,
        isX: isRollX,
        isY: isRollY
      }, evnt);
    },
    handleWheel: function handleWheel(evnt, isTopWheel, deltaTop, isRollX, isRollY) {
      var _this = this;
      var $xetable = this.$parent;
      var $refs = $xetable.$refs, elemStore = $xetable.elemStore, scrollYLoad = $xetable.scrollYLoad, scrollXLoad = $xetable.scrollXLoad;
      var tableBody = $refs.tableBody, leftBody = $refs.leftBody, rightBody = $refs.rightBody;
      var bodyElem = tableBody.$el;
      var leftElem = leftBody ? leftBody.$el : null;
      var rightElem = rightBody ? rightBody.$el : null;
      var remainSize = this.isPrevWheelTop === isTopWheel ? Math.max(0, this.wheelYSize - this.wheelYTotal) : 0;
      var bodyYElem = elemStore["main-body-ySpace"];
      var bodyXElem = elemStore["main-body-xSpace"];
      var bodyHeight = scrollYLoad && bodyYElem ? bodyYElem.clientHeight : bodyElem.clientHeight;
      var bodyWidth = scrollXLoad && bodyXElem ? bodyXElem.clientWidth : bodyElem.clientWidth;
      this.isPrevWheelTop = isTopWheel;
      this.wheelYSize = Math.abs(isTopWheel ? deltaTop - remainSize : deltaTop + remainSize);
      this.wheelYInterval = 0;
      this.wheelYTotal = 0;
      clearTimeout(this.wheelTime);
      var handleSmooth = function handleSmooth2() {
        var fixedType = _this.fixedType, wheelYTotal = _this.wheelYTotal, wheelYSize = _this.wheelYSize, wheelYInterval = _this.wheelYInterval;
        if (wheelYTotal < wheelYSize) {
          wheelYInterval = Math.max(5, Math.floor(wheelYInterval * 1.5));
          wheelYTotal = wheelYTotal + wheelYInterval;
          if (wheelYTotal > wheelYSize) {
            wheelYInterval = wheelYInterval - (wheelYTotal - wheelYSize);
          }
          var scrollTop = bodyElem.scrollTop, clientHeight = bodyElem.clientHeight, scrollHeight = bodyElem.scrollHeight;
          var targetTop = scrollTop + wheelYInterval * (isTopWheel ? -1 : 1);
          bodyElem.scrollTop = targetTop;
          if (leftElem) {
            leftElem.scrollTop = targetTop;
          }
          if (rightElem) {
            rightElem.scrollTop = targetTop;
          }
          if (isTopWheel ? targetTop < scrollHeight - clientHeight : targetTop >= 0) {
            _this.wheelTime = setTimeout(handleSmooth2, 10);
          }
          _this.wheelYTotal = wheelYTotal;
          _this.wheelYInterval = wheelYInterval;
          $xetable.emitEvent("scroll", {
            type: renderType,
            fixed: fixedType,
            scrollTop: bodyElem.scrollTop,
            scrollLeft: bodyElem.scrollLeft,
            scrollHeight: bodyElem.scrollHeight,
            scrollWidth: bodyElem.scrollWidth,
            bodyHeight,
            bodyWidth,
            isX: isRollX,
            isY: isRollY
          }, evnt);
        }
      };
      handleSmooth();
    },
    wheelEvent: function wheelEvent(evnt) {
      var deltaY = evnt.deltaY, deltaX = evnt.deltaX;
      var scrollBodyElem = this.$el, $xetable = this.$parent;
      var $refs = $xetable.$refs, highlightHoverRow = $xetable.highlightHoverRow, scrollYLoad = $xetable.scrollYLoad, lastScrollTop = $xetable.lastScrollTop, lastScrollLeft = $xetable.lastScrollLeft, rowOpts2 = $xetable.rowOpts;
      var tableBody = $refs.tableBody;
      var bodyElem = tableBody.$el;
      var deltaTop = deltaY;
      var deltaLeft = deltaX;
      var isTopWheel = deltaTop < 0;
      if (isTopWheel ? scrollBodyElem.scrollTop <= 0 : scrollBodyElem.scrollTop >= scrollBodyElem.scrollHeight - scrollBodyElem.clientHeight) {
        return;
      }
      var scrollTop = scrollBodyElem.scrollTop + deltaTop;
      var scrollLeft = bodyElem.scrollLeft + deltaLeft;
      var isRollX = scrollLeft !== lastScrollLeft;
      var isRollY = scrollTop !== lastScrollTop;
      if (isRollY) {
        evnt.preventDefault();
        $xetable.lastScrollTop = scrollTop;
        $xetable.lastScrollLeft = scrollLeft;
        $xetable.lastScrollTime = Date.now();
        if (rowOpts2.isHover || highlightHoverRow) {
          $xetable.clearHoverRow();
        }
        this.handleWheel(evnt, isTopWheel, deltaTop, isRollX, isRollY);
        if (scrollYLoad) {
          $xetable.triggerScrollYEvent(evnt);
        }
      }
    }
  }
};
body.default = _default$W;
var size = {};
Object.defineProperty(size, "__esModule", {
  value: true
});
size.default = void 0;
var _default$V = {
  computed: {
    vSize: function vSize() {
      var $parent = this.$parent, size2 = this.size;
      return size2 || $parent && ($parent.size || $parent.vSize);
    }
  }
};
size.default = _default$V;
var methods$1 = {};
var cell = {};
Object.defineProperty(cell, "__esModule", {
  value: true
});
cell.default = cell.Cell = void 0;
var _xeUtils$w = _interopRequireDefault$1n(xeUtils);
var _conf$r = _interopRequireDefault$1n(conf);
var _vXETable$l = _interopRequireDefault$1n(vXETable);
var _tools$w = tools;
var _utils$3 = utils;
function _interopRequireDefault$1n(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
function ownKeys$6(object3, enumerableOnly) {
  var keys3 = Object.keys(object3);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object3);
    if (enumerableOnly) {
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object3, sym).enumerable;
      });
    }
    keys3.push.apply(keys3, symbols);
  }
  return keys3;
}
function _objectSpread$6(target2) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys$6(Object(source), true).forEach(function(key) {
        _defineProperty$k(target2, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target2, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys$6(Object(source)).forEach(function(key) {
        Object.defineProperty(target2, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target2;
}
function _defineProperty$k(obj, key, value6) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value: value6, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value6;
  }
  return obj;
}
function renderHelpIcon(h, params) {
  var $table = params.$table, column2 = params.column;
  var titleHelp = column2.titleHelp;
  return titleHelp ? [h("i", {
    class: ["vxe-cell-help-icon", titleHelp.icon || _conf$r.default.icon.TABLE_HELP],
    on: {
      mouseenter: function mouseenter(evnt) {
        $table.triggerHeaderHelpEvent(evnt, params);
      },
      mouseleave: function mouseleave(evnt) {
        $table.handleTargetLeaveEvent(evnt);
      }
    }
  })] : [];
}
function renderTitleContent(h, params, content2) {
  var $table = params.$table, column2 = params.column;
  var type3 = column2.type, showHeaderOverflow = column2.showHeaderOverflow;
  var allColumnHeaderOverflow = $table.showHeaderOverflow, tooltipOpts3 = $table.tooltipOpts;
  var showAllTip = tooltipOpts3.showAll || tooltipOpts3.enabled;
  var headOverflow = _xeUtils$w.default.isUndefined(showHeaderOverflow) || _xeUtils$w.default.isNull(showHeaderOverflow) ? allColumnHeaderOverflow : showHeaderOverflow;
  var showTitle = headOverflow === "title";
  var showTooltip = headOverflow === true || headOverflow === "tooltip";
  var ons = {};
  if (showTitle || showTooltip || showAllTip) {
    ons.mouseenter = function(evnt) {
      if ($table._isResize) {
        return;
      }
      if (showTitle) {
        _tools$w.DomTools.updateCellTitle(evnt.currentTarget, column2);
      } else if (showTooltip || showAllTip) {
        $table.triggerHeaderTooltipEvent(evnt, params);
      }
    };
  }
  if (showTooltip || showAllTip) {
    ons.mouseleave = function(evnt) {
      if ($table._isResize) {
        return;
      }
      if (showTooltip || showAllTip) {
        $table.handleTargetLeaveEvent(evnt);
      }
    };
  }
  return [type3 === "html" && _xeUtils$w.default.isString(content2) ? h("span", {
    class: "vxe-cell--title",
    domProps: {
      innerHTML: content2
    },
    on: ons
  }) : h("span", {
    class: "vxe-cell--title",
    on: ons
  }, content2)];
}
function getFooterContent(h, params) {
  var $table = params.$table, column2 = params.column, _columnIndex = params._columnIndex, items2 = params.items;
  var slots = column2.slots, editRender = column2.editRender, cellRender = column2.cellRender;
  var renderOpts2 = editRender || cellRender;
  if (slots && slots.footer) {
    return $table.callSlot(slots.footer, params, h);
  }
  if (renderOpts2) {
    var compConf = _vXETable$l.default.renderer.get(renderOpts2.name);
    if (compConf && compConf.renderFooter) {
      return compConf.renderFooter.call($table, h, renderOpts2, params);
    }
  }
  return [_tools$w.UtilTools.formatText(items2[_columnIndex], 1)];
}
function getDefaultCellLabel(params) {
  var $table = params.$table, row = params.row, column2 = params.column;
  return _tools$w.UtilTools.formatText($table.getCellLabel(row, column2), 1);
}
var Cell = {
  createColumn: function createColumn($xetable, _vm) {
    var type3 = _vm.type, sortable = _vm.sortable, remoteSort = _vm.remoteSort, filters = _vm.filters, editRender = _vm.editRender, treeNode = _vm.treeNode;
    var editConfig = $xetable.editConfig, editOpts2 = $xetable.editOpts, checkboxOpts2 = $xetable.checkboxOpts;
    var renMaps = {
      renderHeader: this.renderDefaultHeader,
      renderCell: treeNode ? this.renderTreeCell : this.renderDefaultCell,
      renderFooter: this.renderDefaultFooter
    };
    switch (type3) {
      case "seq":
        renMaps.renderHeader = this.renderSeqHeader;
        renMaps.renderCell = treeNode ? this.renderTreeIndexCell : this.renderSeqCell;
        break;
      case "radio":
        renMaps.renderHeader = this.renderRadioHeader;
        renMaps.renderCell = treeNode ? this.renderTreeRadioCell : this.renderRadioCell;
        break;
      case "checkbox":
        renMaps.renderHeader = this.renderCheckboxHeader;
        renMaps.renderCell = checkboxOpts2.checkField ? treeNode ? this.renderTreeSelectionCellByProp : this.renderCheckboxCellByProp : treeNode ? this.renderTreeSelectionCell : this.renderCheckboxCell;
        break;
      case "expand":
        renMaps.renderCell = this.renderExpandCell;
        renMaps.renderData = this.renderExpandData;
        break;
      case "html":
        renMaps.renderCell = treeNode ? this.renderTreeHTMLCell : this.renderHTMLCell;
        if (filters && (sortable || remoteSort)) {
          renMaps.renderHeader = this.renderSortAndFilterHeader;
        } else if (sortable || remoteSort) {
          renMaps.renderHeader = this.renderSortHeader;
        } else if (filters) {
          renMaps.renderHeader = this.renderFilterHeader;
        }
        break;
      default:
        if (editConfig && editRender) {
          renMaps.renderHeader = this.renderEditHeader;
          renMaps.renderCell = editOpts2.mode === "cell" ? treeNode ? this.renderTreeCellEdit : this.renderCellEdit : treeNode ? this.renderTreeRowEdit : this.renderRowEdit;
        } else if (filters && (sortable || remoteSort)) {
          renMaps.renderHeader = this.renderSortAndFilterHeader;
        } else if (sortable || remoteSort) {
          renMaps.renderHeader = this.renderSortHeader;
        } else if (filters) {
          renMaps.renderHeader = this.renderFilterHeader;
        }
    }
    return _tools$w.UtilTools.getColumnConfig($xetable, _vm, renMaps);
  },
  renderHeaderTitle: function renderHeaderTitle(h, params) {
    var $table = params.$table, column2 = params.column;
    var slots = column2.slots, editRender = column2.editRender, cellRender = column2.cellRender;
    var renderOpts2 = editRender || cellRender;
    if (slots && slots.header) {
      return renderTitleContent(h, params, $table.callSlot(slots.header, params, h));
    }
    if (renderOpts2) {
      var compConf = _vXETable$l.default.renderer.get(renderOpts2.name);
      if (compConf && compConf.renderHeader) {
        return renderTitleContent(h, params, compConf.renderHeader.call($table, h, renderOpts2, params));
      }
    }
    return renderTitleContent(h, params, _tools$w.UtilTools.formatText(column2.getTitle(), 1));
  },
  renderDefaultHeader: function renderDefaultHeader(h, params) {
    return renderHelpIcon(h, params).concat(Cell.renderHeaderTitle(h, params));
  },
  renderDefaultCell: function renderDefaultCell(h, params) {
    var $table = params.$table, row = params.row, column2 = params.column;
    var slots = column2.slots, editRender = column2.editRender, cellRender = column2.cellRender;
    var renderOpts2 = editRender || cellRender;
    if (slots && slots.default) {
      return $table.callSlot(slots.default, params, h);
    }
    if (renderOpts2) {
      var funName = editRender ? "renderCell" : "renderDefault";
      var compConf = _vXETable$l.default.renderer.get(renderOpts2.name);
      if (compConf && compConf[funName]) {
        return compConf[funName].call($table, h, renderOpts2, Object.assign({
          $type: editRender ? "edit" : "cell"
        }, params));
      }
    }
    var cellValue = $table.getCellLabel(row, column2);
    var cellPlaceholder = editRender ? editRender.placeholder : "";
    return [h("span", {
      class: "vxe-cell--label"
    }, editRender && (0, _utils$3.eqEmptyValue)(cellValue) ? [
      h("span", {
        class: "vxe-cell--placeholder"
      }, _tools$w.UtilTools.formatText(_tools$w.UtilTools.getFuncText(cellPlaceholder), 1))
    ] : _tools$w.UtilTools.formatText(cellValue, 1))];
  },
  renderTreeCell: function renderTreeCell(h, params) {
    return Cell.renderTreeIcon(h, params, Cell.renderDefaultCell.call(this, h, params));
  },
  renderDefaultFooter: function renderDefaultFooter(h, params) {
    return [h("span", {
      class: "vxe-cell--item"
    }, getFooterContent(h, params))];
  },
  renderTreeIcon: function renderTreeIcon(h, params, cellVNodes) {
    var $table = params.$table, isHidden = params.isHidden;
    var treeOpts2 = $table.treeOpts, treeExpandeds = $table.treeExpandeds, treeLazyLoadeds = $table.treeLazyLoadeds;
    var row = params.row, column2 = params.column, level = params.level;
    var slots = column2.slots;
    var children = treeOpts2.children, hasChild = treeOpts2.hasChild, indent = treeOpts2.indent, lazy = treeOpts2.lazy, trigger3 = treeOpts2.trigger, iconLoaded = treeOpts2.iconLoaded, showIcon = treeOpts2.showIcon, iconOpen = treeOpts2.iconOpen, iconClose = treeOpts2.iconClose;
    var rowChilds = row[children];
    var hasLazyChilds = false;
    var isAceived = false;
    var isLazyLoaded = false;
    var on3 = {};
    if (slots && slots.icon) {
      return $table.callSlot(slots.icon, params, h, cellVNodes);
    }
    if (!isHidden) {
      isAceived = treeExpandeds.indexOf(row) > -1;
      if (lazy) {
        isLazyLoaded = treeLazyLoadeds.indexOf(row) > -1;
        hasLazyChilds = row[hasChild];
      }
    }
    if (!trigger3 || trigger3 === "default") {
      on3.click = function(evnt) {
        return $table.triggerTreeExpandEvent(evnt, params);
      };
    }
    return [h("div", {
      class: ["vxe-cell--tree-node", {
        "is--active": isAceived
      }],
      style: {
        paddingLeft: "".concat(level * indent, "px")
      }
    }, [showIcon && (rowChilds && rowChilds.length || hasLazyChilds) ? [h("div", {
      class: "vxe-tree--btn-wrapper",
      on: on3
    }, [h("i", {
      class: ["vxe-tree--node-btn", isLazyLoaded ? iconLoaded || _conf$r.default.icon.TABLE_TREE_LOADED : isAceived ? iconOpen || _conf$r.default.icon.TABLE_TREE_OPEN : iconClose || _conf$r.default.icon.TABLE_TREE_CLOSE]
    })])] : null, h("div", {
      class: "vxe-tree-cell"
    }, cellVNodes)])];
  },
  renderSeqHeader: function renderSeqHeader(h, params) {
    var $table = params.$table, column2 = params.column;
    var slots = column2.slots;
    return renderTitleContent(h, params, slots && slots.header ? $table.callSlot(slots.header, params, h) : _tools$w.UtilTools.formatText(column2.getTitle(), 1));
  },
  renderSeqCell: function renderSeqCell(h, params) {
    var $table = params.$table, column2 = params.column;
    var treeConfig = $table.treeConfig, seqOpts2 = $table.seqOpts;
    var slots = column2.slots;
    if (slots && slots.default) {
      return $table.callSlot(slots.default, params, h);
    }
    var seq = params.seq;
    var seqMethod = seqOpts2.seqMethod;
    return [_tools$w.UtilTools.formatText(seqMethod ? seqMethod(params) : treeConfig ? seq : (seqOpts2.startIndex || 0) + seq, 1)];
  },
  renderTreeIndexCell: function renderTreeIndexCell(h, params) {
    return Cell.renderTreeIcon(h, params, Cell.renderSeqCell(h, params));
  },
  renderRadioHeader: function renderRadioHeader(h, params) {
    var $table = params.$table, column2 = params.column;
    var slots = column2.slots;
    var headerSlot = slots ? slots.header : null;
    var titleSlot = slots ? slots.title : null;
    return renderTitleContent(h, params, headerSlot ? $table.callSlot(headerSlot, params, h) : [h("span", {
      class: "vxe-radio--label"
    }, titleSlot ? $table.callSlot(titleSlot, params, h) : _tools$w.UtilTools.formatText(column2.getTitle(), 1))]);
  },
  renderRadioCell: function renderRadioCell(h, params) {
    var $table = params.$table, column2 = params.column, isHidden = params.isHidden;
    var radioOpts2 = $table.radioOpts, selectRow = $table.selectRow;
    var slots = column2.slots;
    var labelField2 = radioOpts2.labelField, checkMethod = radioOpts2.checkMethod, visibleMethod = radioOpts2.visibleMethod;
    var row = params.row;
    var defaultSlot = slots ? slots.default : null;
    var radioSlot = slots ? slots.radio : null;
    var isChecked2 = row === selectRow;
    var isVisible = !visibleMethod || visibleMethod({
      row
    });
    var isDisabled4 = !!checkMethod;
    var on3;
    if (!isHidden) {
      on3 = {
        click: function click(evnt) {
          if (!isDisabled4 && isVisible) {
            $table.triggerRadioRowEvent(evnt, params);
          }
        }
      };
      if (checkMethod) {
        isDisabled4 = !checkMethod({
          row
        });
      }
    }
    var radioParams = _objectSpread$6(_objectSpread$6({}, params), {}, {
      checked: isChecked2,
      disabled: isDisabled4,
      visible: isVisible
    });
    if (radioSlot) {
      return $table.callSlot(radioSlot, radioParams, h);
    }
    var radioVNs = [];
    if (isVisible) {
      radioVNs.push(h("span", {
        class: "vxe-radio--icon vxe-radio--checked-icon"
      }), h("span", {
        class: "vxe-radio--icon vxe-radio--unchecked-icon"
      }));
    }
    if (defaultSlot || labelField2) {
      radioVNs.push(h("span", {
        class: "vxe-radio--label"
      }, defaultSlot ? $table.callSlot(defaultSlot, radioParams, h) : _xeUtils$w.default.get(row, labelField2)));
    }
    return [h("span", {
      class: ["vxe-cell--radio", {
        "is--checked": isChecked2,
        "is--disabled": isDisabled4
      }],
      on: on3
    }, radioVNs)];
  },
  renderTreeRadioCell: function renderTreeRadioCell(h, params) {
    return Cell.renderTreeIcon(h, params, Cell.renderRadioCell(h, params));
  },
  renderCheckboxHeader: function renderCheckboxHeader(h, params) {
    var $table = params.$table, column2 = params.column, isHidden = params.isHidden;
    var isAllCheckboxSelected = $table.isAllSelected, isAllCheckboxIndeterminate2 = $table.isIndeterminate, isAllCheckboxDisabled2 = $table.isAllCheckboxDisabled;
    var slots = column2.slots;
    var headerSlot = slots ? slots.header : null;
    var titleSlot = slots ? slots.title : null;
    var checkboxOpts2 = $table.checkboxOpts;
    var headerTitle = column2.getTitle();
    var on3;
    if (!isHidden) {
      on3 = {
        click: function click(evnt) {
          if (!isAllCheckboxDisabled2) {
            $table.triggerCheckAllEvent(evnt, !isAllCheckboxSelected);
          }
        }
      };
    }
    var checkboxParams = _objectSpread$6(_objectSpread$6({}, params), {}, {
      checked: isAllCheckboxSelected,
      disabled: isAllCheckboxDisabled2,
      indeterminate: isAllCheckboxIndeterminate2
    });
    if (headerSlot) {
      return renderTitleContent(h, checkboxParams, $table.callSlot(headerSlot, checkboxParams, h));
    }
    if (checkboxOpts2.checkStrictly ? !checkboxOpts2.showHeader : checkboxOpts2.showHeader === false) {
      return renderTitleContent(h, checkboxParams, [h("span", {
        class: "vxe-checkbox--label"
      }, titleSlot ? $table.callSlot(titleSlot, checkboxParams, h) : headerTitle)]);
    }
    return renderTitleContent(h, checkboxParams, [h("span", {
      class: ["vxe-cell--checkbox", {
        "is--checked": isAllCheckboxSelected,
        "is--disabled": isAllCheckboxDisabled2,
        "is--indeterminate": isAllCheckboxIndeterminate2
      }],
      attrs: {
        title: _conf$r.default.i18n("vxe.table.allTitle")
      },
      on: on3
    }, [h("span", {
      class: "vxe-checkbox--icon vxe-checkbox--checked-icon"
    }), h("span", {
      class: "vxe-checkbox--icon vxe-checkbox--unchecked-icon"
    }), h("span", {
      class: "vxe-checkbox--icon vxe-checkbox--indeterminate-icon"
    })].concat(titleSlot || headerTitle ? [h("span", {
      class: "vxe-checkbox--label"
    }, titleSlot ? $table.callSlot(titleSlot, checkboxParams, h) : headerTitle)] : []))]);
  },
  renderCheckboxCell: function renderCheckboxCell(h, params) {
    var $table = params.$table, row = params.row, column2 = params.column, isHidden = params.isHidden;
    var treeConfig = $table.treeConfig, treeIndeterminates = $table.treeIndeterminates;
    var _$table$checkboxOpts = $table.checkboxOpts, labelField2 = _$table$checkboxOpts.labelField, checkMethod = _$table$checkboxOpts.checkMethod, visibleMethod = _$table$checkboxOpts.visibleMethod;
    var slots = column2.slots;
    var defaultSlot = slots ? slots.default : null;
    var checkboxSlot = slots ? slots.checkbox : null;
    var indeterminate = false;
    var isChecked2 = false;
    var isVisible = !visibleMethod || visibleMethod({
      row
    });
    var isDisabled4 = !!checkMethod;
    var on3;
    if (!isHidden) {
      isChecked2 = $table.selection.indexOf(row) > -1;
      on3 = {
        click: function click(evnt) {
          if (!isDisabled4 && isVisible) {
            $table.triggerCheckRowEvent(evnt, params, !isChecked2);
          }
        }
      };
      if (checkMethod) {
        isDisabled4 = !checkMethod({
          row
        });
      }
      if (treeConfig) {
        indeterminate = treeIndeterminates.indexOf(row) > -1;
      }
    }
    var checkboxParams = _objectSpread$6(_objectSpread$6({}, params), {}, {
      checked: isChecked2,
      disabled: isDisabled4,
      visible: isVisible,
      indeterminate
    });
    if (checkboxSlot) {
      return $table.callSlot(checkboxSlot, checkboxParams, h);
    }
    var checkVNs = [];
    if (isVisible) {
      checkVNs.push(h("span", {
        class: "vxe-checkbox--icon vxe-checkbox--checked-icon"
      }), h("span", {
        class: "vxe-checkbox--icon vxe-checkbox--unchecked-icon"
      }), h("span", {
        class: "vxe-checkbox--icon vxe-checkbox--indeterminate-icon"
      }));
    }
    if (defaultSlot || labelField2) {
      checkVNs.push(h("span", {
        class: "vxe-checkbox--label"
      }, defaultSlot ? $table.callSlot(defaultSlot, checkboxParams, h) : _xeUtils$w.default.get(row, labelField2)));
    }
    return [h("span", {
      class: ["vxe-cell--checkbox", {
        "is--checked": isChecked2,
        "is--disabled": isDisabled4,
        "is--indeterminate": indeterminate
      }],
      on: on3
    }, checkVNs)];
  },
  renderTreeSelectionCell: function renderTreeSelectionCell(h, params) {
    return Cell.renderTreeIcon(h, params, Cell.renderCheckboxCell(h, params));
  },
  renderCheckboxCellByProp: function renderCheckboxCellByProp(h, params) {
    var $table = params.$table, row = params.row, column2 = params.column, isHidden = params.isHidden;
    var treeConfig = $table.treeConfig, treeIndeterminates = $table.treeIndeterminates;
    var _$table$checkboxOpts2 = $table.checkboxOpts, labelField2 = _$table$checkboxOpts2.labelField, property2 = _$table$checkboxOpts2.checkField, halfField = _$table$checkboxOpts2.halfField, checkMethod = _$table$checkboxOpts2.checkMethod, visibleMethod = _$table$checkboxOpts2.visibleMethod;
    var slots = column2.slots;
    var defaultSlot = slots ? slots.default : null;
    var checkboxSlot = slots ? slots.checkbox : null;
    var indeterminate = false;
    var isChecked2 = false;
    var isVisible = !visibleMethod || visibleMethod({
      row
    });
    var isDisabled4 = !!checkMethod;
    var on3;
    if (!isHidden) {
      isChecked2 = _xeUtils$w.default.get(row, property2);
      on3 = {
        click: function click(evnt) {
          if (!isDisabled4 && isVisible) {
            $table.triggerCheckRowEvent(evnt, params, !isChecked2);
          }
        }
      };
      if (checkMethod) {
        isDisabled4 = !checkMethod({
          row
        });
      }
      if (treeConfig) {
        indeterminate = treeIndeterminates.indexOf(row) > -1;
      }
    }
    var checkboxParams = _objectSpread$6(_objectSpread$6({}, params), {}, {
      checked: isChecked2,
      disabled: isDisabled4,
      visible: isVisible,
      indeterminate
    });
    if (checkboxSlot) {
      return $table.callSlot(checkboxSlot, checkboxParams, h);
    }
    var checkVNs = [];
    if (isVisible) {
      checkVNs.push(h("span", {
        class: "vxe-checkbox--icon vxe-checkbox--checked-icon"
      }), h("span", {
        class: "vxe-checkbox--icon vxe-checkbox--unchecked-icon"
      }), h("span", {
        class: "vxe-checkbox--icon vxe-checkbox--indeterminate-icon"
      }));
    }
    if (defaultSlot || labelField2) {
      checkVNs.push(h("span", {
        class: "vxe-checkbox--label"
      }, defaultSlot ? $table.callSlot(defaultSlot, checkboxParams, h) : _xeUtils$w.default.get(row, labelField2)));
    }
    return [h("span", {
      class: ["vxe-cell--checkbox", {
        "is--checked": isChecked2,
        "is--disabled": isDisabled4,
        "is--indeterminate": halfField && !isChecked2 ? row[halfField] : indeterminate
      }],
      on: on3
    }, checkVNs)];
  },
  renderTreeSelectionCellByProp: function renderTreeSelectionCellByProp(h, params) {
    return Cell.renderTreeIcon(h, params, Cell.renderCheckboxCellByProp(h, params));
  },
  renderExpandCell: function renderExpandCell(h, params) {
    var $table = params.$table, isHidden = params.isHidden, row = params.row, column2 = params.column;
    var expandOpts2 = $table.expandOpts, rowExpandeds = $table.rowExpandeds, expandLazyLoadeds = $table.expandLazyLoadeds;
    var lazy = expandOpts2.lazy, labelField2 = expandOpts2.labelField, iconLoaded = expandOpts2.iconLoaded, showIcon = expandOpts2.showIcon, iconOpen = expandOpts2.iconOpen, iconClose = expandOpts2.iconClose, visibleMethod = expandOpts2.visibleMethod;
    var slots = column2.slots;
    var defaultSlot = slots ? slots.default : null;
    var isAceived = false;
    var isLazyLoaded = false;
    if (slots && slots.icon) {
      return $table.callSlot(slots.icon, params, h);
    }
    if (!isHidden) {
      isAceived = rowExpandeds.indexOf(params.row) > -1;
      if (lazy) {
        isLazyLoaded = expandLazyLoadeds.indexOf(row) > -1;
      }
    }
    return [showIcon && (!visibleMethod || visibleMethod(params)) ? h("span", {
      class: ["vxe-table--expanded", {
        "is--active": isAceived
      }],
      on: {
        click: function click(evnt) {
          $table.triggerRowExpandEvent(evnt, params);
        }
      }
    }, [h("i", {
      class: ["vxe-table--expand-btn", isLazyLoaded ? iconLoaded || _conf$r.default.icon.TABLE_EXPAND_LOADED : isAceived ? iconOpen || _conf$r.default.icon.TABLE_EXPAND_OPEN : iconClose || _conf$r.default.icon.TABLE_EXPAND_CLOSE]
    })]) : null, defaultSlot || labelField2 ? h("span", {
      class: "vxe-table--expand-label"
    }, defaultSlot ? $table.callSlot(defaultSlot, params, h) : _xeUtils$w.default.get(row, labelField2)) : null];
  },
  renderExpandData: function renderExpandData(h, params) {
    var $table = params.$table, column2 = params.column;
    var slots = column2.slots, contentRender = column2.contentRender;
    if (slots && slots.content) {
      return $table.callSlot(slots.content, params, h);
    }
    if (contentRender) {
      var compConf = _vXETable$l.default.renderer.get(contentRender.name);
      if (compConf && compConf.renderExpand) {
        return compConf.renderExpand.call($table, h, contentRender, params);
      }
    }
    return [];
  },
  renderHTMLCell: function renderHTMLCell(h, params) {
    var $table = params.$table, column2 = params.column;
    var slots = column2.slots;
    if (slots && slots.default) {
      return $table.callSlot(slots.default, params, h);
    }
    return [h("span", {
      class: "vxe-cell--html",
      domProps: {
        innerHTML: getDefaultCellLabel(params)
      }
    })];
  },
  renderTreeHTMLCell: function renderTreeHTMLCell(h, params) {
    return Cell.renderTreeIcon(h, params, Cell.renderHTMLCell(h, params));
  },
  renderSortAndFilterHeader: function renderSortAndFilterHeader(h, params) {
    return Cell.renderDefaultHeader(h, params).concat(Cell.renderSortIcon(h, params)).concat(Cell.renderFilterIcon(h, params));
  },
  renderSortHeader: function renderSortHeader(h, params) {
    return Cell.renderDefaultHeader(h, params).concat(Cell.renderSortIcon(h, params));
  },
  renderSortIcon: function renderSortIcon(h, params) {
    var $table = params.$table, column2 = params.column;
    var _$table$sortOpts = $table.sortOpts, showIcon = _$table$sortOpts.showIcon, iconAsc = _$table$sortOpts.iconAsc, iconDesc = _$table$sortOpts.iconDesc;
    return showIcon ? [h("span", {
      class: "vxe-cell--sort"
    }, [h("i", {
      class: ["vxe-sort--asc-btn", iconAsc || _conf$r.default.icon.TABLE_SORT_ASC, {
        "sort--active": column2.order === "asc"
      }],
      attrs: {
        title: _conf$r.default.i18n("vxe.table.sortAsc")
      },
      on: {
        click: function click(evnt) {
          $table.triggerSortEvent(evnt, column2, "asc");
        }
      }
    }), h("i", {
      class: ["vxe-sort--desc-btn", iconDesc || _conf$r.default.icon.TABLE_SORT_DESC, {
        "sort--active": column2.order === "desc"
      }],
      attrs: {
        title: _conf$r.default.i18n("vxe.table.sortDesc")
      },
      on: {
        click: function click(evnt) {
          $table.triggerSortEvent(evnt, column2, "desc");
        }
      }
    })])] : [];
  },
  renderFilterHeader: function renderFilterHeader(h, params) {
    return Cell.renderDefaultHeader(h, params).concat(Cell.renderFilterIcon(h, params));
  },
  renderFilterIcon: function renderFilterIcon(h, params) {
    var $table = params.$table, column2 = params.column, hasFilter = params.hasFilter;
    var filterStore = $table.filterStore, filterOpts2 = $table.filterOpts;
    var showIcon = filterOpts2.showIcon, iconNone = filterOpts2.iconNone, iconMatch = filterOpts2.iconMatch;
    return showIcon ? [h("span", {
      class: ["vxe-cell--filter", {
        "is--active": filterStore.visible && filterStore.column === column2
      }]
    }, [h("i", {
      class: ["vxe-filter--btn", hasFilter ? iconMatch || _conf$r.default.icon.TABLE_FILTER_MATCH : iconNone || _conf$r.default.icon.TABLE_FILTER_NONE],
      attrs: {
        title: _conf$r.default.i18n("vxe.table.filter")
      },
      on: {
        click: function click(evnt) {
          $table.triggerFilterEvent(evnt, params.column, params);
        }
      }
    })])] : [];
  },
  renderEditHeader: function renderEditHeader(h, params) {
    var $table = params.$table, column2 = params.column;
    var editConfig = $table.editConfig, editRules = $table.editRules, editOpts2 = $table.editOpts;
    var sortable = column2.sortable, remoteSort = column2.remoteSort, filters = column2.filters, editRender = column2.editRender;
    var isRequired = false;
    if (editRules) {
      var columnRules = _xeUtils$w.default.get(editRules, params.column.property);
      if (columnRules) {
        isRequired = columnRules.some(function(rule) {
          return rule.required;
        });
      }
    }
    return ((0, _utils$3.isEnableConf)(editConfig) ? [isRequired && editOpts2.showAsterisk ? h("i", {
      class: "vxe-cell--required-icon"
    }) : null, (0, _utils$3.isEnableConf)(editRender) && editOpts2.showIcon ? h("i", {
      class: ["vxe-cell--edit-icon", editOpts2.icon || _conf$r.default.icon.TABLE_EDIT]
    }) : null] : []).concat(Cell.renderDefaultHeader(h, params)).concat(sortable || remoteSort ? Cell.renderSortIcon(h, params) : []).concat(filters ? Cell.renderFilterIcon(h, params) : []);
  },
  renderRowEdit: function renderRowEdit(h, params) {
    var $table = params.$table, column2 = params.column;
    var editRender = column2.editRender;
    var actived = $table.editStore.actived;
    return Cell.runRenderer(h, params, this, (0, _utils$3.isEnableConf)(editRender) && actived && actived.row === params.row);
  },
  renderTreeRowEdit: function renderTreeRowEdit(h, params) {
    return Cell.renderTreeIcon(h, params, Cell.renderRowEdit(h, params));
  },
  renderCellEdit: function renderCellEdit(h, params) {
    var $table = params.$table, column2 = params.column;
    var editRender = column2.editRender;
    var actived = $table.editStore.actived;
    return Cell.runRenderer(h, params, this, (0, _utils$3.isEnableConf)(editRender) && actived && actived.row === params.row && actived.column === params.column);
  },
  renderTreeCellEdit: function renderTreeCellEdit(h, params) {
    return Cell.renderTreeIcon(h, params, Cell.renderCellEdit(h, params));
  },
  runRenderer: function runRenderer(h, params, _vm, isEdit) {
    var $table = params.$table, column2 = params.column;
    var slots = column2.slots, editRender = column2.editRender, formatter = column2.formatter;
    var compConf = _vXETable$l.default.renderer.get(editRender.name);
    if (isEdit) {
      if (slots && slots.edit) {
        return $table.callSlot(slots.edit, params, h);
      }
      return compConf && compConf.renderEdit ? compConf.renderEdit.call($table, h, editRender, Object.assign({
        $type: "edit"
      }, params)) : [];
    }
    if (slots && slots.default) {
      return $table.callSlot(slots.default, params, h);
    }
    if (formatter) {
      return [h("span", {
        class: "vxe-cell--label"
      }, [getDefaultCellLabel(params)])];
    }
    return Cell.renderDefaultCell.call(_vm, h, params);
  }
};
cell.Cell = Cell;
var _default$U = Cell;
cell.default = _default$U;
Object.defineProperty(methods$1, "__esModule", {
  value: true
});
methods$1.default = void 0;
var _xeUtils$v = _interopRequireDefault$1m(xeUtils);
var _conf$q = _interopRequireDefault$1m(conf);
var _cell$1 = _interopRequireDefault$1m(cell);
var _vXETable$k = _interopRequireDefault$1m(vXETable);
var _tools$v = tools;
var _util$9 = util$4;
var _utils$2 = utils;
var _dom$b = dom$1;
var _formats = formats$1;
function _interopRequireDefault$1m(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
function _toConsumableArray$5(arr) {
  return _arrayWithoutHoles$5(arr) || _iterableToArray$5(arr) || _unsupportedIterableToArray$5(arr) || _nonIterableSpread$5();
}
function _nonIterableSpread$5() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$5(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$5(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$5(o, minLen);
}
function _iterableToArray$5(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _arrayWithoutHoles$5(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray$5(arr);
}
function _arrayLikeToArray$5(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function ownKeys$5(object3, enumerableOnly) {
  var keys3 = Object.keys(object3);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object3);
    if (enumerableOnly) {
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object3, sym).enumerable;
      });
    }
    keys3.push.apply(keys3, symbols);
  }
  return keys3;
}
function _objectSpread$5(target2) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys$5(Object(source), true).forEach(function(key) {
        _defineProperty$j(target2, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target2, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys$5(Object(source)).forEach(function(key) {
        Object.defineProperty(target2, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target2;
}
function _defineProperty$j(obj, key, value6) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value: value6, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value6;
  }
  return obj;
}
var getRowid$1 = _tools$v.UtilTools.getRowid, getRowkey2 = _tools$v.UtilTools.getRowkey, setCellValue2 = _tools$v.UtilTools.setCellValue, hasChildrenList2 = _tools$v.UtilTools.hasChildrenList, getColumnList2 = _tools$v.UtilTools.getColumnList;
var calcHeight2 = _tools$v.DomTools.calcHeight, hasClass$1 = _tools$v.DomTools.hasClass, addClass$2 = _tools$v.DomTools.addClass, removeClass$2 = _tools$v.DomTools.removeClass, getEventTargetNode2 = _tools$v.DomTools.getEventTargetNode, isNodeElement = _tools$v.DomTools.isNodeElement;
var isWebkit = _dom$b.browse["-webkit"] && !_dom$b.browse.edge;
var debounceScrollYDuration = _dom$b.browse.msie ? 80 : 20;
var resizableStorageKey = "VXE_TABLE_CUSTOM_COLUMN_WIDTH";
var visibleStorageKey = "VXE_TABLE_CUSTOM_COLUMN_VISIBLE";
function getRowUniqueId() {
  return _xeUtils$v.default.uniqueId("row_");
}
function eqCellValue(row1, row2, field) {
  var val1 = _xeUtils$v.default.get(row1, field);
  var val2 = _xeUtils$v.default.get(row2, field);
  if ((0, _utils$2.eqEmptyValue)(val1) && (0, _utils$2.eqEmptyValue)(val2)) {
    return true;
  }
  if (_xeUtils$v.default.isString(val1) || _xeUtils$v.default.isNumber(val1)) {
    return val1 == val2;
  }
  return _xeUtils$v.default.isEqual(val1, val2);
}
function getNextSortOrder(_vm, column2) {
  var orders = _vm.sortOpts.orders;
  var currOrder = column2.order || null;
  var oIndex = orders.indexOf(currOrder) + 1;
  return orders[oIndex < orders.length ? oIndex : 0];
}
function getCustomStorageMap(key) {
  var version = _conf$q.default.version;
  var rest = _xeUtils$v.default.toStringJSON(localStorage.getItem(key));
  return rest && rest._v === version ? rest : {
    _v: version
  };
}
function getRecoverRow(_vm, list2) {
  var fullAllDataRowMap = _vm.fullAllDataRowMap;
  return list2.filter(function(row) {
    return fullAllDataRowMap.has(row);
  });
}
function handleReserveRow(_vm, reserveRowMap) {
  var fullDataRowIdData = _vm.fullDataRowIdData;
  var reserveList = [];
  _xeUtils$v.default.each(reserveRowMap, function(item, rowid) {
    if (fullDataRowIdData[rowid] && reserveList.indexOf(fullDataRowIdData[rowid].row) === -1) {
      reserveList.push(fullDataRowIdData[rowid].row);
    }
  });
  return reserveList;
}
function computeVirtualX(_vm) {
  var $refs = _vm.$refs, visibleColumn = _vm.visibleColumn;
  var tableBody = $refs.tableBody;
  var tableBodyElem = tableBody ? tableBody.$el : null;
  if (tableBodyElem) {
    var scrollLeft = tableBodyElem.scrollLeft, clientWidth = tableBodyElem.clientWidth;
    var endWidth = scrollLeft + clientWidth;
    var toVisibleIndex = -1;
    var cWidth = 0;
    var visibleSize = 0;
    for (var colIndex = 0, colLen = visibleColumn.length; colIndex < colLen; colIndex++) {
      cWidth += visibleColumn[colIndex].renderWidth;
      if (toVisibleIndex === -1 && scrollLeft < cWidth) {
        toVisibleIndex = colIndex;
      }
      if (toVisibleIndex >= 0) {
        visibleSize++;
        if (cWidth > endWidth) {
          break;
        }
      }
    }
    return {
      toVisibleIndex: Math.max(0, toVisibleIndex),
      visibleSize: Math.max(8, visibleSize)
    };
  }
  return {
    toVisibleIndex: 0,
    visibleSize: 8
  };
}
function computeVirtualY(_vm) {
  var $refs = _vm.$refs, vSize8 = _vm.vSize, rowHeightMaps2 = _vm.rowHeightMaps;
  var tableHeader = $refs.tableHeader, tableBody = $refs.tableBody;
  var tableBodyElem = tableBody ? tableBody.$el : null;
  if (tableBodyElem) {
    var tableHeaderElem = tableHeader ? tableHeader.$el : null;
    var rowHeight = 0;
    var firstTrElem;
    firstTrElem = tableBodyElem.querySelector("tr");
    if (!firstTrElem && tableHeaderElem) {
      firstTrElem = tableHeaderElem.querySelector("tr");
    }
    if (firstTrElem) {
      rowHeight = firstTrElem.clientHeight;
    }
    if (!rowHeight) {
      rowHeight = rowHeightMaps2[vSize8 || "default"];
    }
    var visibleSize = Math.max(8, Math.ceil(tableBodyElem.clientHeight / rowHeight) + 2);
    return {
      rowHeight,
      visibleSize
    };
  }
  return {
    rowHeight: 0,
    visibleSize: 8
  };
}
function calculateMergerOffserIndex(list2, offsetItem, type3) {
  for (var mcIndex = 0, len = list2.length; mcIndex < len; mcIndex++) {
    var mergeItem = list2[mcIndex];
    var startIndex = offsetItem.startIndex, endIndex = offsetItem.endIndex;
    var mergeStartIndex = mergeItem[type3];
    var mergeSpanNumber = mergeItem[type3 + "span"];
    var mergeEndIndex = mergeStartIndex + mergeSpanNumber;
    if (mergeStartIndex < startIndex && startIndex < mergeEndIndex) {
      offsetItem.startIndex = mergeStartIndex;
    }
    if (mergeStartIndex < endIndex && endIndex < mergeEndIndex) {
      offsetItem.endIndex = mergeEndIndex;
    }
    if (offsetItem.startIndex !== startIndex || offsetItem.endIndex !== endIndex) {
      mcIndex = -1;
    }
  }
}
function setMerges(_vm, merges, mList, rowList) {
  if (merges) {
    var treeConfig = _vm.treeConfig, visibleColumn = _vm.visibleColumn;
    if (treeConfig) {
      throw new Error(_tools$v.UtilTools.getLog("vxe.error.noTree", ["merge-footer-items"]));
    }
    if (!_xeUtils$v.default.isArray(merges)) {
      merges = [merges];
    }
    merges.forEach(function(item) {
      var row = item.row, col = item.col, rowspan = item.rowspan, colspan = item.colspan;
      if (rowList && _xeUtils$v.default.isNumber(row)) {
        row = rowList[row];
      }
      if (_xeUtils$v.default.isNumber(col)) {
        col = visibleColumn[col];
      }
      if ((rowList ? row : _xeUtils$v.default.isNumber(row)) && col && (rowspan || colspan)) {
        rowspan = _xeUtils$v.default.toNumber(rowspan) || 1;
        colspan = _xeUtils$v.default.toNumber(colspan) || 1;
        if (rowspan > 1 || colspan > 1) {
          var mcIndex = _xeUtils$v.default.findIndexOf(mList, function(item2) {
            return item2._row === row && item2._col === col;
          });
          var mergeItem = mList[mcIndex];
          if (mergeItem) {
            mergeItem.rowspan = rowspan;
            mergeItem.colspan = colspan;
            mergeItem._rowspan = rowspan;
            mergeItem._colspan = colspan;
          } else {
            var mergeRowIndex = rowList ? rowList.indexOf(row) : row;
            var mergeColIndex = visibleColumn.indexOf(col);
            mList.push({
              row: mergeRowIndex,
              col: mergeColIndex,
              rowspan,
              colspan,
              _row: row,
              _col: col,
              _rowspan: rowspan,
              _colspan: colspan
            });
          }
        }
      }
    });
  }
}
function removeMerges(_vm, merges, mList, rowList) {
  var rest = [];
  if (merges) {
    var treeConfig = _vm.treeConfig, visibleColumn = _vm.visibleColumn;
    if (treeConfig) {
      throw new Error(_tools$v.UtilTools.getLog("vxe.error.noTree", ["merge-cells"]));
    }
    if (!_xeUtils$v.default.isArray(merges)) {
      merges = [merges];
    }
    merges.forEach(function(item) {
      var row = item.row, col = item.col;
      if (rowList && _xeUtils$v.default.isNumber(row)) {
        row = rowList[row];
      }
      if (_xeUtils$v.default.isNumber(col)) {
        col = visibleColumn[col];
      }
      var mcIndex = _xeUtils$v.default.findIndexOf(mList, function(item2) {
        return item2._row === row && item2._col === col;
      });
      if (mcIndex > -1) {
        var rItems = mList.splice(mcIndex, 1);
        rest.push(rItems[0]);
      }
    });
  }
  return rest;
}
function clearAllSort(_vm) {
  _vm.tableFullColumn.forEach(function(column2) {
    column2.order = null;
  });
}
function getOrderField(_vm, column2) {
  var sortBy2 = column2.sortBy, sortType = column2.sortType;
  return function(row) {
    var cellValue;
    if (sortBy2) {
      cellValue = _xeUtils$v.default.isFunction(sortBy2) ? sortBy2({
        row,
        column: column2
      }) : _xeUtils$v.default.get(row, sortBy2);
    } else {
      cellValue = _vm.getCellLabel(row, column2);
    }
    if (!sortType || sortType === "auto") {
      return isNaN(cellValue) ? cellValue : _xeUtils$v.default.toNumber(cellValue);
    } else if (sortType === "number") {
      return _xeUtils$v.default.toNumber(cellValue);
    } else if (sortType === "string") {
      return _xeUtils$v.default.toValueString(cellValue);
    }
    return cellValue;
  };
}
var Methods = {
  callSlot: function callSlot(slotFunc, params, h, vNodes) {
    if (slotFunc) {
      var $xegrid = this.$xegrid;
      if ($xegrid) {
        return $xegrid.callSlot(slotFunc, params, h, vNodes);
      }
      if (_xeUtils$v.default.isFunction(slotFunc)) {
        return slotFunc.call(this, params, h, vNodes);
      }
    }
    return [];
  },
  getParentElem: function getParentElem() {
    var $el = this.$el, $xegrid = this.$xegrid;
    return $xegrid ? $xegrid.$el.parentNode : $el.parentNode;
  },
  getParentHeight: function getParentHeight() {
    var $el = this.$el, $xegrid = this.$xegrid, height3 = this.height;
    var parentElem = $el.parentNode;
    var parentPaddingSize = height3 === "auto" ? (0, _dom$b.getPaddingTopBottomSize)(parentElem) : 0;
    return Math.floor($xegrid ? $xegrid.getParentHeight() : _xeUtils$v.default.toNumber(getComputedStyle(parentElem).height) - parentPaddingSize);
  },
  getExcludeHeight: function getExcludeHeight() {
    var $xegrid = this.$xegrid;
    return $xegrid ? $xegrid.getExcludeHeight() : 0;
  },
  clearAll: function clearAll() {
    return (0, _util$9.clearTableAllStatus)(this);
  },
  syncData: function syncData() {
    var _this = this;
    return this.$nextTick().then(function() {
      _this.tableData = [];
      return _this.$nextTick().then(function() {
        return _this.loadTableData(_this.tableFullData);
      });
    });
  },
  updateData: function updateData() {
    var _this2 = this;
    var scrollXLoad = this.scrollXLoad, scrollYLoad = this.scrollYLoad;
    return this.handleTableData(true).then(function() {
      _this2.updateFooter();
      _this2.checkSelectionStatus();
      if (scrollXLoad || scrollYLoad) {
        if (scrollXLoad) {
          _this2.updateScrollXSpace();
        }
        if (scrollYLoad) {
          _this2.updateScrollYSpace();
        }
        return _this2.refreshScroll();
      }
    }).then(function() {
      _this2.updateCellAreas();
      return _this2.recalculate(true);
    }).then(function() {
      setTimeout(function() {
        return _this2.recalculate();
      }, 50);
    });
  },
  handleTableData: function handleTableData(force) {
    var _this3 = this;
    var scrollYLoad = this.scrollYLoad, scrollYStore = this.scrollYStore, fullDataRowIdData = this.fullDataRowIdData, afterFullData = this.afterFullData;
    var fullList = afterFullData;
    if (force) {
      this.updateAfterFullData();
      fullList = this.handleVirtualTreeToList();
    }
    var tableData = scrollYLoad ? fullList.slice(scrollYStore.startIndex, scrollYStore.endIndex) : fullList.slice(0);
    tableData.forEach(function(row, $index) {
      var rowid = getRowid$1(_this3, row);
      var rest = fullDataRowIdData[rowid];
      if (rest) {
        rest.$index = $index;
      }
    });
    this.tableData = tableData;
    return this.$nextTick();
  },
  updateScrollYStatus: function updateScrollYStatus(fullData) {
    var treeConfig = this.treeConfig, treeOpts2 = this.treeOpts, sYOpts3 = this.sYOpts;
    var transform = treeOpts2.transform;
    var scrollYLoad = (transform || !treeConfig) && !!sYOpts3.enabled && sYOpts3.gt > -1 && sYOpts3.gt < fullData.length;
    this.scrollYLoad = scrollYLoad;
    return scrollYLoad;
  },
  loadTableData: function loadTableData(datas) {
    var _this4 = this;
    var keepSource = this.keepSource, treeConfig = this.treeConfig, treeOpts2 = this.treeOpts, editStore = this.editStore, scrollYStore = this.scrollYStore, scrollXStore = this.scrollXStore, lastScrollLeft = this.lastScrollLeft, lastScrollTop = this.lastScrollTop, oldScrollYLoad = this.scrollYLoad;
    var treeData = [];
    var fullData = datas ? datas.slice(0) : [];
    if (treeConfig) {
      if (treeOpts2.transform) {
        treeData = _xeUtils$v.default.toArrayTree(fullData, {
          key: treeOpts2.rowField,
          parentKey: treeOpts2.parentField,
          children: treeOpts2.children,
          mapChildren: treeOpts2.mapChildren
        });
        fullData = treeData.slice(0);
      } else {
        treeData = fullData.slice(0);
      }
    }
    scrollYStore.startIndex = 0;
    scrollYStore.endIndex = 1;
    scrollXStore.startIndex = 0;
    scrollXStore.endIndex = 1;
    editStore.insertList = [];
    editStore.removeList = [];
    var sYLoad = this.updateScrollYStatus(fullData);
    this.scrollYLoad = sYLoad;
    this.tableFullData = fullData;
    this.tableFullTreeData = treeData;
    this.cacheRowMap(true);
    this.tableSynchData = datas;
    if (keepSource) {
      this.tableSourceData = _xeUtils$v.default.clone(fullData, true);
    }
    if (this.clearCellAreas && this.mouseConfig) {
      this.clearCellAreas();
      this.clearCopyCellArea();
    }
    this.clearMergeCells();
    this.clearMergeFooterItems();
    this.handleTableData(true);
    this.updateFooter();
    return this.$nextTick().then(function() {
      _this4.updateHeight();
      _this4.updateStyle();
    }).then(function() {
      _this4.computeScrollLoad();
    }).then(function() {
      if (sYLoad) {
        scrollYStore.endIndex = scrollYStore.visibleSize;
      }
      _this4.handleReserveStatus();
      _this4.checkSelectionStatus();
      return new Promise(function(resolve) {
        _this4.$nextTick().then(function() {
          return _this4.recalculate();
        }).then(function() {
          if (oldScrollYLoad === sYLoad) {
            (0, _util$9.restoreScrollLocation)(_this4, lastScrollLeft, lastScrollTop).then(resolve);
          } else {
            setTimeout(function() {
              return (0, _util$9.restoreScrollLocation)(_this4, lastScrollLeft, lastScrollTop).then(resolve);
            });
          }
        });
      });
    });
  },
  loadData: function loadData(datas) {
    var _this5 = this;
    var inited = this.inited, initStatus = this.initStatus;
    return this.loadTableData(datas).then(function() {
      _this5.inited = true;
      _this5.initStatus = true;
      if (!initStatus) {
        _this5.handleLoadDefaults();
      }
      if (!inited) {
        _this5.handleInitDefaults();
      }
      return _this5.recalculate();
    });
  },
  reloadData: function reloadData(datas) {
    var _this6 = this;
    var inited = this.inited;
    return this.clearAll().then(function() {
      _this6.inited = true;
      _this6.initStatus = true;
      return _this6.loadTableData(datas);
    }).then(function() {
      _this6.handleLoadDefaults();
      if (!inited) {
        _this6.handleInitDefaults();
      }
      return _this6.recalculate();
    });
  },
  reloadRow: function reloadRow(row, record, field) {
    var keepSource = this.keepSource, tableSourceData = this.tableSourceData, tableData = this.tableData;
    if (keepSource) {
      var rowIndex = this.getRowIndex(row);
      var oRow = tableSourceData[rowIndex];
      if (oRow && row) {
        if (field) {
          var newValue = _xeUtils$v.default.get(record || row, field);
          _xeUtils$v.default.set(row, field, newValue);
          _xeUtils$v.default.set(oRow, field, newValue);
        } else {
          var newRecord = _xeUtils$v.default.clone(_objectSpread$5({}, record), true);
          _xeUtils$v.default.destructuring(oRow, Object.assign(row, newRecord));
        }
      }
      this.tableData = tableData.slice(0);
    }
    return this.$nextTick();
  },
  loadColumn: function loadColumn(columns2) {
    var _this7 = this;
    var collectColumn = _xeUtils$v.default.mapTree(columns2, function(column2) {
      return _cell$1.default.createColumn(_this7, column2);
    }, {
      children: "children"
    });
    return this.handleColumn(collectColumn);
  },
  reloadColumn: function reloadColumn(columns2) {
    var _this8 = this;
    return this.clearAll().then(function() {
      return _this8.loadColumn(columns2);
    });
  },
  handleColumn: function handleColumn(collectColumn) {
    var _this9 = this;
    this.collectColumn = collectColumn;
    var tableFullColumn = getColumnList2(collectColumn);
    this.tableFullColumn = tableFullColumn;
    this.cacheColumnMap();
    this.restoreCustomStorage();
    this.parseColumns().then(function() {
      if (_this9.scrollXLoad) {
        _this9.loadScrollXData(true);
      }
    });
    this.clearMergeCells();
    this.clearMergeFooterItems();
    this.handleTableData(true);
    return this.$nextTick().then(function() {
      if (_this9.$toolbar) {
        _this9.$toolbar.syncUpdate({
          collectColumn,
          $table: _this9
        });
      }
      return _this9.recalculate();
    });
  },
  cacheRowMap: function cacheRowMap(source) {
    var _this10 = this;
    var treeConfig = this.treeConfig, treeOpts2 = this.treeOpts, tableFullData = this.tableFullData, fullDataRowMap = this.fullDataRowMap, fullAllDataRowMap = this.fullAllDataRowMap, tableFullTreeData = this.tableFullTreeData;
    var fullDataRowIdData = this.fullDataRowIdData, fullAllDataRowIdData = this.fullAllDataRowIdData;
    var rowkey = getRowkey2(this);
    var isLazy = treeConfig && treeOpts2.lazy;
    var handleCache = function handleCache2(row, index2, items2, path, parent2, nodes) {
      var rowid = getRowid$1(_this10, row);
      var seq = treeConfig && path ? (0, _util$9.toTreePathSeq)(path) : index2 + 1;
      var level = nodes ? nodes.length - 1 : 0;
      if ((0, _utils$2.eqEmptyValue)(rowid)) {
        rowid = getRowUniqueId();
        _xeUtils$v.default.set(row, rowkey, rowid);
      }
      if (isLazy && row[treeOpts2.hasChild] && _xeUtils$v.default.isUndefined(row[treeOpts2.children])) {
        row[treeOpts2.children] = null;
      }
      var rest = {
        row,
        rowid,
        seq,
        index: treeConfig && parent2 ? -1 : index2,
        _index: -1,
        $index: -1,
        items: items2,
        parent: parent2,
        level
      };
      if (source) {
        fullDataRowIdData[rowid] = rest;
        fullDataRowMap.set(row, rest);
      }
      fullAllDataRowIdData[rowid] = rest;
      fullAllDataRowMap.set(row, rest);
    };
    if (source) {
      fullDataRowIdData = this.fullDataRowIdData = {};
      fullDataRowMap.clear();
    }
    fullAllDataRowIdData = this.fullAllDataRowIdData = {};
    fullAllDataRowMap.clear();
    if (treeConfig) {
      _xeUtils$v.default.eachTree(tableFullTreeData, handleCache, treeOpts2);
    } else {
      tableFullData.forEach(handleCache);
    }
  },
  loadTreeChildren: function loadTreeChildren(row, childRecords) {
    var _this11 = this;
    var keepSource = this.keepSource, tableSourceData = this.tableSourceData, treeOpts2 = this.treeOpts, fullDataRowIdData = this.fullDataRowIdData, fullDataRowMap = this.fullDataRowMap, fullAllDataRowMap = this.fullAllDataRowMap, fullAllDataRowIdData = this.fullAllDataRowIdData;
    var transform = treeOpts2.transform, children = treeOpts2.children, mapChildren = treeOpts2.mapChildren;
    var rest = fullAllDataRowIdData[getRowid$1(this, row)];
    var parentLevel = rest ? rest.level : 0;
    return this.createData(childRecords).then(function(rows) {
      if (keepSource) {
        var rowid = getRowid$1(_this11, row);
        var matchObj = _xeUtils$v.default.findTree(tableSourceData, function(item) {
          return rowid === getRowid$1(_this11, item);
        }, treeOpts2);
        if (matchObj) {
          matchObj.item[children] = _xeUtils$v.default.clone(rows, true);
        }
      }
      _xeUtils$v.default.eachTree(rows, function(childRow, index2, items2, path, parent2, nodes) {
        var rowid2 = getRowid$1(_this11, childRow);
        var rest2 = {
          row: childRow,
          rowid: rowid2,
          seq: -1,
          index: index2,
          _index: -1,
          $index: -1,
          items: items2,
          parent: parent2,
          level: parentLevel + nodes.length
        };
        fullDataRowIdData[rowid2] = rest2;
        fullDataRowMap.set(childRow, rest2);
        fullAllDataRowIdData[rowid2] = rest2;
        fullAllDataRowMap.set(childRow, rest2);
      }, treeOpts2);
      row[children] = rows;
      if (transform) {
        row[mapChildren] = rows;
      }
      _this11.updateAfterDataIndex();
      return rows;
    });
  },
  cacheColumnMap: function cacheColumnMap() {
    var tableFullColumn = this.tableFullColumn, collectColumn = this.collectColumn, fullColumnMap = this.fullColumnMap, showOverflow = this.showOverflow;
    var fullColumnIdData = this.fullColumnIdData = {};
    var fullColumnFieldData = this.fullColumnFieldData = {};
    var isGroup3 = collectColumn.some(hasChildrenList2);
    var isAllOverflow = !!showOverflow;
    var expandColumn;
    var treeNodeColumn;
    var handleFunc = function handleFunc2(column2, index2, items2, path, parent2) {
      var colid = column2.id, property2 = column2.property;
      column2.fixed;
      var type3 = column2.type, treeNode = column2.treeNode;
      var rest = {
        column: column2,
        colid,
        index: index2,
        items: items2,
        parent: parent2
      };
      if (property2) {
        fullColumnFieldData[property2] = rest;
      }
      if (treeNode) {
        if (!treeNodeColumn) {
          treeNodeColumn = column2;
        }
      } else if (type3 === "expand") {
        if (!expandColumn) {
          expandColumn = column2;
        }
      }
      if (isAllOverflow && column2.showOverflow === false) {
        isAllOverflow = false;
      }
      if (fullColumnIdData[colid]) {
        _tools$v.UtilTools.error("vxe.error.colRepet", ["colId", colid]);
      }
      fullColumnIdData[colid] = rest;
      fullColumnMap.set(column2, rest);
    };
    fullColumnMap.clear();
    if (isGroup3) {
      _xeUtils$v.default.eachTree(collectColumn, function(column2, index2, items2, path, parent2, nodes) {
        column2.level = nodes.length;
        handleFunc(column2, index2, items2, path, parent2);
      });
    } else {
      tableFullColumn.forEach(handleFunc);
    }
    this.isGroup = isGroup3;
    this.treeNodeColumn = treeNodeColumn;
    this.expandColumn = expandColumn;
    this.isAllOverflow = isAllOverflow;
  },
  getRowNode: function getRowNode(tr) {
    if (tr) {
      var fullAllDataRowIdData = this.fullAllDataRowIdData;
      var rowid = tr.getAttribute("rowid");
      var rest = fullAllDataRowIdData[rowid];
      if (rest) {
        return {
          rowid: rest.rowid,
          item: rest.row,
          index: rest.index,
          items: rest.items,
          parent: rest.parent
        };
      }
    }
    return null;
  },
  getColumnNode: function getColumnNode(cell2) {
    if (cell2) {
      var fullColumnIdData = this.fullColumnIdData;
      var colid = cell2.getAttribute("colid");
      var rest = fullColumnIdData[colid];
      if (rest) {
        return {
          colid: rest.colid,
          item: rest.column,
          index: rest.index,
          items: rest.items,
          parent: rest.parent
        };
      }
    }
    return null;
  },
  getRowSeq: function getRowSeq(row) {
    var fullDataRowIdData = this.fullDataRowIdData;
    if (row) {
      var rowid = getRowid$1(this, row);
      var rest = fullDataRowIdData[rowid];
      if (rest) {
        return rest.seq;
      }
    }
    return -1;
  },
  getRowIndex: function getRowIndex(row) {
    return this.fullDataRowMap.has(row) ? this.fullDataRowMap.get(row).index : -1;
  },
  getVTRowIndex: function getVTRowIndex(row) {
    return this.afterFullData.indexOf(row);
  },
  _getRowIndex: function _getRowIndex(row) {
    return this.getVTRowIndex(row);
  },
  getVMRowIndex: function getVMRowIndex(row) {
    return this.tableData.indexOf(row);
  },
  $getRowIndex: function $getRowIndex(row) {
    return this.getVMRowIndex(row);
  },
  getColumnIndex: function getColumnIndex(column2) {
    return this.fullColumnMap.has(column2) ? this.fullColumnMap.get(column2).index : -1;
  },
  getVTColumnIndex: function getVTColumnIndex(column2) {
    return this.visibleColumn.indexOf(column2);
  },
  _getColumnIndex: function _getColumnIndex(column2) {
    return this.getVTColumnIndex(column2);
  },
  getVMColumnIndex: function getVMColumnIndex(column2) {
    return this.tableColumn.indexOf(column2);
  },
  $getColumnIndex: function $getColumnIndex(column2) {
    return this.getVMColumnIndex(column2);
  },
  isSeqColumn: function isSeqColumn(column2) {
    return column2 && column2.type === "seq";
  },
  defineField: function defineField(record) {
    var radioOpts2 = this.radioOpts, checkboxOpts2 = this.checkboxOpts, treeConfig = this.treeConfig, treeOpts2 = this.treeOpts, expandOpts2 = this.expandOpts;
    var rowkey = getRowkey2(this);
    this.tableFullColumn.forEach(function(column2) {
      var property2 = column2.property, editRender = column2.editRender;
      if (property2 && !_xeUtils$v.default.has(record, property2)) {
        var cellValue = null;
        if (editRender) {
          var defaultValue = editRender.defaultValue;
          if (_xeUtils$v.default.isFunction(defaultValue)) {
            cellValue = defaultValue({
              column: column2
            });
          } else if (!_xeUtils$v.default.isUndefined(defaultValue)) {
            cellValue = defaultValue;
          }
        }
        _xeUtils$v.default.set(record, property2, cellValue);
      }
    });
    var otherFields = [radioOpts2.labelField, checkboxOpts2.checkField, checkboxOpts2.labelField, expandOpts2.labelField];
    otherFields.forEach(function(key) {
      if (key && (0, _utils$2.eqEmptyValue)(_xeUtils$v.default.get(record, key))) {
        _xeUtils$v.default.set(record, key, null);
      }
    });
    if (treeConfig && treeOpts2.lazy && _xeUtils$v.default.isUndefined(record[treeOpts2.children])) {
      record[treeOpts2.children] = null;
    }
    if ((0, _utils$2.eqEmptyValue)(_xeUtils$v.default.get(record, rowkey))) {
      _xeUtils$v.default.set(record, rowkey, getRowUniqueId());
    }
    return record;
  },
  createData: function createData(records) {
    var _this13 = this;
    var treeConfig = this.treeConfig, treeOpts2 = this.treeOpts;
    var handleRrecord = function handleRrecord2(record) {
      return _this13.defineField(Object.assign({}, record));
    };
    var rows = treeConfig ? _xeUtils$v.default.mapTree(records, handleRrecord, treeOpts2) : records.map(handleRrecord);
    return this.$nextTick().then(function() {
      return rows;
    });
  },
  createRow: function createRow(records) {
    var _this14 = this;
    var isArr = _xeUtils$v.default.isArray(records);
    if (!isArr) {
      records = [records];
    }
    return this.$nextTick().then(function() {
      return _this14.createData(records).then(function(rows) {
        return isArr ? rows : rows[0];
      });
    });
  },
  revertData: function revertData(rows, field) {
    var _this15 = this;
    var keepSource = this.keepSource, tableSourceData = this.tableSourceData, treeConfig = this.treeConfig;
    if (!keepSource) {
      return this.$nextTick();
    }
    var targetRows = rows;
    if (rows) {
      if (!_xeUtils$v.default.isArray(rows)) {
        targetRows = [rows];
      }
    } else {
      targetRows = _xeUtils$v.default.toArray(this.getUpdateRecords());
    }
    if (targetRows.length) {
      targetRows.forEach(function(row) {
        if (!_this15.isInsertByRow(row)) {
          var rowIndex = _this15.getRowIndex(row);
          if (treeConfig && rowIndex === -1) {
            throw new Error(_tools$v.UtilTools.getLog("vxe.error.noTree", ["revertData"]));
          }
          var oRow = tableSourceData[rowIndex];
          if (oRow && row) {
            if (field) {
              _xeUtils$v.default.set(row, field, _xeUtils$v.default.clone(_xeUtils$v.default.get(oRow, field), true));
            } else {
              _xeUtils$v.default.destructuring(row, _xeUtils$v.default.clone(oRow, true));
            }
          }
        }
      });
    }
    if (rows) {
      return this.$nextTick();
    }
    return this.reloadData(tableSourceData);
  },
  clearData: function clearData(rows, field) {
    var tableFullData = this.tableFullData, visibleColumn = this.visibleColumn;
    if (!arguments.length) {
      rows = tableFullData;
    } else if (rows && !_xeUtils$v.default.isArray(rows)) {
      rows = [rows];
    }
    if (field) {
      rows.forEach(function(row) {
        return _xeUtils$v.default.set(row, field, null);
      });
    } else {
      rows.forEach(function(row) {
        visibleColumn.forEach(function(column2) {
          if (column2.property) {
            setCellValue2(row, column2, null);
          }
        });
      });
    }
    return this.$nextTick();
  },
  isInsertByRow: function isInsertByRow(row) {
    return this.editStore.insertList.indexOf(row) > -1;
  },
  removeInsertRow: function removeInsertRow() {
    return this.remove(this.editStore.insertList);
  },
  isUpdateByRow: function isUpdateByRow(row, field) {
    var _this16 = this;
    var visibleColumn = this.visibleColumn, keepSource = this.keepSource, treeConfig = this.treeConfig, treeOpts2 = this.treeOpts, tableSourceData = this.tableSourceData, fullDataRowIdData = this.fullDataRowIdData;
    if (keepSource) {
      var oRow, property2;
      var rowid = getRowid$1(this, row);
      if (!fullDataRowIdData[rowid]) {
        return false;
      }
      if (treeConfig) {
        var children = treeOpts2.children;
        var matchObj = _xeUtils$v.default.findTree(tableSourceData, function(item) {
          return rowid === getRowid$1(_this16, item);
        }, treeOpts2);
        row = Object.assign({}, row, _defineProperty$j({}, children, null));
        if (matchObj) {
          oRow = Object.assign({}, matchObj.item, _defineProperty$j({}, children, null));
        }
      } else {
        var oRowIndex = fullDataRowIdData[rowid].index;
        oRow = tableSourceData[oRowIndex];
      }
      if (oRow) {
        if (arguments.length > 1) {
          return !eqCellValue(oRow, row, field);
        }
        for (var index2 = 0, len = visibleColumn.length; index2 < len; index2++) {
          property2 = visibleColumn[index2].property;
          if (property2 && !eqCellValue(oRow, row, property2)) {
            return true;
          }
        }
      }
    }
    return false;
  },
  getColumns: function getColumns(columnIndex) {
    var columns2 = this.visibleColumn;
    return _xeUtils$v.default.isUndefined(columnIndex) ? columns2.slice(0) : columns2[columnIndex];
  },
  getColumnById: function getColumnById(colid) {
    var fullColumnIdData = this.fullColumnIdData;
    return fullColumnIdData[colid] ? fullColumnIdData[colid].column : null;
  },
  getColumnByField: function getColumnByField(field) {
    var fullColumnFieldData = this.fullColumnFieldData;
    return fullColumnFieldData[field] ? fullColumnFieldData[field].column : null;
  },
  getTableColumn: function getTableColumn() {
    return {
      collectColumn: this.collectColumn.slice(0),
      fullColumn: this.tableFullColumn.slice(0),
      visibleColumn: this.visibleColumn.slice(0),
      tableColumn: this.tableColumn.slice(0)
    };
  },
  getData: function getData(rowIndex) {
    var tableSynchData = this.data || this.tableSynchData;
    return _xeUtils$v.default.isUndefined(rowIndex) ? tableSynchData.slice(0) : tableSynchData[rowIndex];
  },
  getCheckboxRecords: function getCheckboxRecords(isFull) {
    var tableFullData = this.tableFullData, afterFullData = this.afterFullData, treeConfig = this.treeConfig, treeOpts2 = this.treeOpts, checkboxOpts2 = this.checkboxOpts, tableFullTreeData = this.tableFullTreeData, afterTreeFullData = this.afterTreeFullData;
    var transform = treeOpts2.transform, children = treeOpts2.children, mapChildren = treeOpts2.mapChildren;
    var property2 = checkboxOpts2.checkField;
    var currTableData = isFull ? transform ? tableFullTreeData : tableFullData : transform ? afterTreeFullData : afterFullData;
    var rowList = [];
    if (property2) {
      if (treeConfig) {
        rowList = _xeUtils$v.default.filterTree(currTableData, function(row) {
          return _xeUtils$v.default.get(row, property2);
        }, {
          children: transform ? mapChildren : children
        });
      } else {
        rowList = currTableData.filter(function(row) {
          return _xeUtils$v.default.get(row, property2);
        });
      }
    } else {
      var selection = this.selection;
      if (treeConfig) {
        rowList = _xeUtils$v.default.filterTree(currTableData, function(row) {
          return selection.indexOf(row) > -1;
        }, {
          children: transform ? mapChildren : children
        });
      } else {
        rowList = currTableData.filter(function(row) {
          return selection.indexOf(row) > -1;
        });
      }
    }
    return rowList;
  },
  handleVirtualTreeToList: function handleVirtualTreeToList() {
    var treeOpts2 = this.treeOpts, treeConfig = this.treeConfig, treeExpandeds = this.treeExpandeds, afterTreeFullData = this.afterTreeFullData, afterFullData = this.afterFullData;
    if (treeConfig && treeOpts2.transform) {
      var fullData = [];
      var expandMaps = /* @__PURE__ */ new Map();
      _xeUtils$v.default.eachTree(afterTreeFullData, function(row, index2, items2, path, parent2) {
        if (!parent2 || expandMaps.has(parent2) && treeExpandeds.indexOf(parent2) > -1) {
          expandMaps.set(row, 1);
          fullData.push(row);
        }
      }, {
        children: treeOpts2.mapChildren
      });
      this.afterFullData = fullData;
      this.updateScrollYStatus(fullData);
      return fullData;
    }
    return afterFullData;
  },
  updateAfterFullData: function updateAfterFullData() {
    var _this17 = this;
    var tableFullColumn = this.tableFullColumn, tableFullData = this.tableFullData, filterOpts2 = this.filterOpts, sortOpts2 = this.sortOpts, treeConfig = this.treeConfig, treeOpts2 = this.treeOpts, tableFullTreeData = this.tableFullTreeData;
    var allRemoteFilter = filterOpts2.remote, allFilterMethod = filterOpts2.filterMethod;
    var allRemoteSort = sortOpts2.remote, allSortMethod = sortOpts2.sortMethod, sortMultiple = sortOpts2.multiple;
    var transform = treeOpts2.transform;
    var tableData = [];
    var tableTree = [];
    var filterColumns = [];
    var orderColumns = [];
    tableFullColumn.forEach(function(column2) {
      var property2 = column2.property, sortable = column2.sortable, order = column2.order, filters = column2.filters;
      if (!allRemoteFilter && filters && filters.length) {
        var valueList = [];
        var itemList = [];
        filters.forEach(function(item) {
          if (item.checked) {
            itemList.push(item);
            valueList.push(item.value);
          }
        });
        if (itemList.length) {
          filterColumns.push({
            column: column2,
            valueList,
            itemList
          });
        }
      }
      if (!allRemoteSort && sortable && order) {
        orderColumns.push({
          column: column2,
          field: column2.property,
          property: property2,
          order
        });
      }
    });
    if (filterColumns.length) {
      var handleFilter = function handleFilter2(row) {
        return filterColumns.every(function(_ref) {
          var column2 = _ref.column, valueList = _ref.valueList, itemList = _ref.itemList;
          if (valueList.length && !allRemoteFilter) {
            var filterMethod = column2.filterMethod, filterRender = column2.filterRender;
            var compConf = filterRender ? _vXETable$k.default.renderer.get(filterRender.name) : null;
            var compFilterMethod = compConf && compConf.renderFilter ? compConf.filterMethod : null;
            var defaultFilterMethod = compConf ? compConf.defaultFilterMethod : null;
            var cellValue = _tools$v.UtilTools.getCellValue(row, column2);
            if (filterMethod) {
              return itemList.some(function(item) {
                return filterMethod({
                  value: item.value,
                  option: item,
                  cellValue,
                  row,
                  column: column2,
                  $table: _this17
                });
              });
            } else if (compFilterMethod) {
              return itemList.some(function(item) {
                return compFilterMethod({
                  value: item.value,
                  option: item,
                  cellValue,
                  row,
                  column: column2,
                  $table: _this17
                });
              });
            } else if (allFilterMethod) {
              return allFilterMethod({
                options: itemList,
                values: valueList,
                cellValue,
                row,
                column: column2
              });
            } else if (defaultFilterMethod) {
              return itemList.some(function(item) {
                return defaultFilterMethod({
                  value: item.value,
                  option: item,
                  cellValue,
                  row,
                  column: column2,
                  $table: _this17
                });
              });
            }
            return valueList.indexOf(_xeUtils$v.default.get(row, column2.property)) > -1;
          }
          return true;
        });
      };
      if (treeConfig && transform) {
        tableTree = _xeUtils$v.default.searchTree(tableFullTreeData, handleFilter, _objectSpread$5(_objectSpread$5({}, treeOpts2), {}, {
          original: true
        }));
        tableData = tableTree;
      } else {
        tableData = treeConfig ? tableFullTreeData.filter(handleFilter) : tableFullData.filter(handleFilter);
        tableTree = tableData;
      }
    } else {
      if (treeConfig && transform) {
        tableTree = _xeUtils$v.default.searchTree(tableFullTreeData, function() {
          return true;
        }, _objectSpread$5(_objectSpread$5({}, treeOpts2), {}, {
          original: true
        }));
        tableData = tableTree;
      } else {
        tableData = treeConfig ? tableFullTreeData.slice(0) : tableFullData.slice(0);
        tableTree = tableData;
      }
    }
    var firstOrderColumn = orderColumns[0];
    if (!allRemoteSort && firstOrderColumn) {
      if (treeConfig && transform) {
        if (allSortMethod) {
          var sortRests = allSortMethod({
            data: tableTree,
            sortList: orderColumns,
            $table: this
          });
          tableTree = _xeUtils$v.default.isArray(sortRests) ? sortRests : tableTree;
        } else {
          tableTree = _xeUtils$v.default.orderBy(tableTree, orderColumns.map(function(_ref2) {
            var column2 = _ref2.column, order = _ref2.order;
            return [getOrderField(_this17, column2), order];
          }));
        }
        tableData = tableTree;
      } else {
        if (allSortMethod) {
          var _sortRests = allSortMethod({
            data: tableData,
            column: firstOrderColumn.column,
            property: firstOrderColumn.property,
            order: firstOrderColumn.order,
            sortList: orderColumns,
            $table: this
          });
          tableData = _xeUtils$v.default.isArray(_sortRests) ? _sortRests : tableData;
        } else {
          if (sortMultiple) {
            tableData = _xeUtils$v.default.orderBy(tableData, orderColumns.map(function(_ref3) {
              var column2 = _ref3.column, order = _ref3.order;
              return [getOrderField(_this17, column2), order];
            }));
          } else {
            var sortByConfs;
            if (_xeUtils$v.default.isArray(firstOrderColumn.sortBy)) {
              sortByConfs = firstOrderColumn.sortBy.map(function(item) {
                return [item, firstOrderColumn.order];
              });
            }
            tableData = _xeUtils$v.default.orderBy(tableData, sortByConfs || [firstOrderColumn].map(function(_ref4) {
              var column2 = _ref4.column, order = _ref4.order;
              return [getOrderField(_this17, column2), order];
            }));
          }
        }
        tableTree = tableData;
      }
    }
    this.afterFullData = tableData;
    this.afterTreeFullData = tableTree;
    this.updateAfterDataIndex();
  },
  updateAfterDataIndex: function updateAfterDataIndex() {
    var _this18 = this;
    var treeConfig = this.treeConfig, afterFullData = this.afterFullData, fullDataRowIdData = this.fullDataRowIdData, fullAllDataRowIdData = this.fullAllDataRowIdData, afterTreeFullData = this.afterTreeFullData, treeOpts2 = this.treeOpts;
    if (treeConfig) {
      _xeUtils$v.default.eachTree(afterTreeFullData, function(row, index2, items2, path) {
        var rowid = getRowid$1(_this18, row);
        var allrest = fullAllDataRowIdData[rowid];
        var seq = path.map(function(num, i) {
          return i % 2 === 0 ? Number(num) + 1 : ".";
        }).join("");
        if (allrest) {
          allrest.seq = seq;
          allrest._index = index2;
        } else {
          var rest = {
            row,
            rowid,
            seq,
            index: -1,
            $index: -1,
            _index: index2,
            items: [],
            parent: null,
            level: 0
          };
          fullAllDataRowIdData[rowid] = rest;
          fullDataRowIdData[rowid] = rest;
        }
      }, {
        children: treeOpts2.transform ? treeOpts2.mapChildren : treeOpts2.children
      });
    } else {
      afterFullData.forEach(function(row, index2) {
        var rowid = getRowid$1(_this18, row);
        var allrest = fullAllDataRowIdData[rowid];
        var seq = index2 + 1;
        if (allrest) {
          allrest.seq = seq;
          allrest._index = index2;
        } else {
          var rest = {
            row,
            rowid,
            seq,
            index: -1,
            $index: -1,
            _index: index2,
            items: [],
            parent: null,
            level: 0
          };
          fullAllDataRowIdData[rowid] = rest;
          fullDataRowIdData[rowid] = rest;
        }
      });
    }
  },
  getParentRow: function getParentRow(rowOrRowid) {
    var treeConfig = this.treeConfig, fullDataRowIdData = this.fullDataRowIdData;
    if (rowOrRowid && treeConfig) {
      var rowid;
      if (_xeUtils$v.default.isString(rowOrRowid)) {
        rowid = rowOrRowid;
      } else {
        rowid = getRowid$1(this, rowOrRowid);
      }
      if (rowid) {
        return fullDataRowIdData[rowid] ? fullDataRowIdData[rowid].parent : null;
      }
    }
    return null;
  },
  getRowById: function getRowById(rowid) {
    var fullDataRowIdData = this.fullDataRowIdData;
    return fullDataRowIdData[rowid] ? fullDataRowIdData[rowid].row : null;
  },
  getRowid: function getRowid2(row) {
    var fullAllDataRowMap = this.fullAllDataRowMap;
    return fullAllDataRowMap.has(row) ? fullAllDataRowMap.get(row).rowid : null;
  },
  getTableData: function getTableData() {
    var tableFullData = this.tableFullData, afterFullData = this.afterFullData, tableData = this.tableData, footerTableData = this.footerTableData;
    return {
      fullData: tableFullData.slice(0),
      visibleData: afterFullData.slice(0),
      tableData: tableData.slice(0),
      footerData: footerTableData.slice(0)
    };
  },
  handleLoadDefaults: function handleLoadDefaults() {
    var _this19 = this;
    if (this.checkboxConfig) {
      this.handleDefaultSelectionChecked();
    }
    if (this.radioConfig) {
      this.handleDefaultRadioChecked();
    }
    if (this.expandConfig) {
      this.handleDefaultRowExpand();
    }
    if (this.treeConfig) {
      this.handleDefaultTreeExpand();
    }
    if (this.mergeCells) {
      this.handleDefaultMergeCells();
    }
    if (this.mergeFooterItems) {
      this.handleDefaultMergeFooterItems();
    }
    this.$nextTick(function() {
      return setTimeout(_this19.recalculate);
    });
  },
  handleInitDefaults: function handleInitDefaults() {
    var sortConfig = this.sortConfig;
    if (sortConfig) {
      this.handleDefaultSort();
    }
  },
  hideColumn: function hideColumn(fieldOrColumn) {
    var column2 = (0, _util$9.handleFieldOrColumn)(this, fieldOrColumn);
    if (column2) {
      column2.visible = false;
    }
    return this.handleCustom();
  },
  showColumn: function showColumn(fieldOrColumn) {
    var column2 = (0, _util$9.handleFieldOrColumn)(this, fieldOrColumn);
    if (column2) {
      column2.visible = true;
    }
    return this.handleCustom();
  },
  resetColumn: function resetColumn(options2) {
    var customOpts3 = this.customOpts;
    var checkMethod = customOpts3.checkMethod;
    var opts = Object.assign({
      visible: true,
      resizable: options2 === true
    }, options2);
    this.tableFullColumn.forEach(function(column2) {
      if (opts.resizable) {
        column2.resizeWidth = 0;
      }
      if (!checkMethod || checkMethod({
        column: column2
      })) {
        column2.visible = column2.defaultVisible;
      }
    });
    if (opts.resizable) {
      this.saveCustomResizable(true);
    }
    return this.handleCustom();
  },
  handleCustom: function handleCustom() {
    this.saveCustomVisible();
    this.analyColumnWidth();
    return this.refreshColumn();
  },
  restoreCustomStorage: function restoreCustomStorage() {
    var id2 = this.id, collectColumn = this.collectColumn, customConfig = this.customConfig, customOpts3 = this.customOpts;
    var storage = customOpts3.storage;
    var isAllStorage = customOpts3.storage === true;
    var isResizable = isAllStorage || storage && storage.resizable;
    var isVisible = isAllStorage || storage && storage.visible;
    if (customConfig && (isResizable || isVisible)) {
      var customMap = {};
      if (!id2) {
        _tools$v.UtilTools.error("vxe.error.reqProp", ["id"]);
        return;
      }
      if (isResizable) {
        var columnWidthStorage = getCustomStorageMap(resizableStorageKey)[id2];
        if (columnWidthStorage) {
          _xeUtils$v.default.each(columnWidthStorage, function(resizeWidth, field) {
            customMap[field] = {
              field,
              resizeWidth
            };
          });
        }
      }
      if (isVisible) {
        var columnVisibleStorage = getCustomStorageMap(visibleStorageKey)[id2];
        if (columnVisibleStorage) {
          var colVisibles = columnVisibleStorage.split("|");
          var colHides = colVisibles[0] ? colVisibles[0].split(",") : [];
          var colShows = colVisibles[1] ? colVisibles[1].split(",") : [];
          colHides.forEach(function(field) {
            if (customMap[field]) {
              customMap[field].visible = false;
            } else {
              customMap[field] = {
                field,
                visible: false
              };
            }
          });
          colShows.forEach(function(field) {
            if (customMap[field]) {
              customMap[field].visible = true;
            } else {
              customMap[field] = {
                field,
                visible: true
              };
            }
          });
        }
      }
      var keyMap = {};
      _xeUtils$v.default.eachTree(collectColumn, function(column2) {
        var colKey = column2.getKey();
        if (colKey) {
          keyMap[colKey] = column2;
        }
      });
      _xeUtils$v.default.each(customMap, function(_ref5, field) {
        var visible2 = _ref5.visible, resizeWidth = _ref5.resizeWidth;
        var column2 = keyMap[field];
        if (column2) {
          if (_xeUtils$v.default.isNumber(resizeWidth)) {
            column2.resizeWidth = resizeWidth;
          }
          if (_xeUtils$v.default.isBoolean(visible2)) {
            column2.visible = visible2;
          }
        }
      });
    }
  },
  saveCustomVisible: function saveCustomVisible() {
    var id2 = this.id, collectColumn = this.collectColumn, customConfig = this.customConfig, customOpts3 = this.customOpts;
    var checkMethod = customOpts3.checkMethod, storage = customOpts3.storage;
    var isAllStorage = customOpts3.storage === true;
    var isVisible = isAllStorage || storage && storage.visible;
    if (customConfig && isVisible) {
      var columnVisibleStorageMap = getCustomStorageMap(visibleStorageKey);
      var colHides = [];
      var colShows = [];
      if (!id2) {
        _tools$v.UtilTools.error("vxe.error.reqProp", ["id"]);
        return;
      }
      _xeUtils$v.default.eachTree(collectColumn, function(column2) {
        if (!checkMethod || checkMethod({
          column: column2
        })) {
          if (!column2.visible && column2.defaultVisible) {
            var colKey = column2.getKey();
            if (colKey) {
              colHides.push(colKey);
            }
          } else if (column2.visible && !column2.defaultVisible) {
            var _colKey = column2.getKey();
            if (_colKey) {
              colShows.push(_colKey);
            }
          }
        }
      });
      columnVisibleStorageMap[id2] = [colHides.join(",")].concat(colShows.length ? [colShows.join(",")] : []).join("|") || void 0;
      localStorage.setItem(visibleStorageKey, _xeUtils$v.default.toJSONString(columnVisibleStorageMap));
    }
  },
  saveCustomResizable: function saveCustomResizable(isReset) {
    var id2 = this.id, collectColumn = this.collectColumn, customConfig = this.customConfig, customOpts3 = this.customOpts;
    var storage = customOpts3.storage;
    var isAllStorage = customOpts3.storage === true;
    var isResizable = isAllStorage || storage && storage.resizable;
    if (customConfig && isResizable) {
      var columnWidthStorageMap = getCustomStorageMap(resizableStorageKey);
      var columnWidthStorage;
      if (!id2) {
        _tools$v.UtilTools.error("vxe.error.reqProp", ["id"]);
        return;
      }
      if (!isReset) {
        columnWidthStorage = _xeUtils$v.default.isPlainObject(columnWidthStorageMap[id2]) ? columnWidthStorageMap[id2] : {};
        _xeUtils$v.default.eachTree(collectColumn, function(column2) {
          if (column2.resizeWidth) {
            var colKey = column2.getKey();
            if (colKey) {
              columnWidthStorage[colKey] = column2.renderWidth;
            }
          }
        });
      }
      columnWidthStorageMap[id2] = _xeUtils$v.default.isEmpty(columnWidthStorage) ? void 0 : columnWidthStorage;
      localStorage.setItem(resizableStorageKey, _xeUtils$v.default.toJSONString(columnWidthStorageMap));
    }
  },
  refreshColumn: function refreshColumn() {
    var _this20 = this;
    return this.parseColumns().then(function() {
      return _this20.refreshScroll();
    }).then(function() {
      return _this20.recalculate();
    });
  },
  parseColumns: function parseColumns() {
    var _this21 = this;
    var leftList = [];
    var centerList = [];
    var rightList = [];
    var collectColumn = this.collectColumn, tableFullColumn = this.tableFullColumn, isGroup3 = this.isGroup, columnStore = this.columnStore, sXOpts2 = this.sXOpts, scrollXStore = this.scrollXStore;
    if (isGroup3) {
      var leftGroupList = [];
      var centerGroupList = [];
      var rightGroupList = [];
      _xeUtils$v.default.eachTree(collectColumn, function(column2, index2, items2, path, parent2) {
        var isColGroup = hasChildrenList2(column2);
        if (parent2 && parent2.fixed) {
          column2.fixed = parent2.fixed;
        }
        if (parent2 && column2.fixed !== parent2.fixed) {
          _tools$v.UtilTools.error("vxe.error.groupFixed");
        }
        if (isColGroup) {
          column2.visible = !!_xeUtils$v.default.findTree(column2.children, function(subColumn) {
            return hasChildrenList2(subColumn) ? null : subColumn.visible;
          });
        } else if (column2.visible) {
          if (column2.fixed === "left") {
            leftList.push(column2);
          } else if (column2.fixed === "right") {
            rightList.push(column2);
          } else {
            centerList.push(column2);
          }
        }
      });
      collectColumn.forEach(function(column2) {
        if (column2.visible) {
          if (column2.fixed === "left") {
            leftGroupList.push(column2);
          } else if (column2.fixed === "right") {
            rightGroupList.push(column2);
          } else {
            centerGroupList.push(column2);
          }
        }
      });
      this.tableGroupColumn = leftGroupList.concat(centerGroupList).concat(rightGroupList);
    } else {
      tableFullColumn.forEach(function(column2) {
        if (column2.visible) {
          if (column2.fixed === "left") {
            leftList.push(column2);
          } else if (column2.fixed === "right") {
            rightList.push(column2);
          } else {
            centerList.push(column2);
          }
        }
      });
    }
    var visibleColumn = leftList.concat(centerList).concat(rightList);
    var scrollXLoad = sXOpts2.enabled && sXOpts2.gt > -1 && sXOpts2.gt < tableFullColumn.length;
    this.hasFixedColumn = leftList.length > 0 || rightList.length > 0;
    Object.assign(columnStore, {
      leftList,
      centerList,
      rightList
    });
    if (scrollXLoad && isGroup3) {
      scrollXLoad = false;
    }
    if (scrollXLoad) {
      var _computeVirtualX = computeVirtualX(this), visibleSize = _computeVirtualX.visibleSize;
      scrollXStore.startIndex = 0;
      scrollXStore.endIndex = visibleSize;
      scrollXStore.visibleSize = visibleSize;
    }
    if (visibleColumn.length !== this.visibleColumn.length || !this.visibleColumn.every(function(column2, index2) {
      return column2 === visibleColumn[index2];
    })) {
      this.clearMergeCells();
      this.clearMergeFooterItems();
    }
    this.scrollXLoad = scrollXLoad;
    this.visibleColumn = visibleColumn;
    this.handleTableColumn();
    return this.updateFooter().then(function() {
      return _this21.recalculate();
    }).then(function() {
      _this21.updateCellAreas();
      return _this21.recalculate();
    });
  },
  analyColumnWidth: function analyColumnWidth() {
    var columnOpts2 = this.columnOpts;
    var defaultWidth = columnOpts2.width, defaultMinWidth = columnOpts2.minWidth;
    var resizeList = [];
    var pxList = [];
    var pxMinList = [];
    var scaleList = [];
    var scaleMinList = [];
    var autoList = [];
    this.tableFullColumn.forEach(function(column2) {
      if (defaultWidth && !column2.width) {
        column2.width = defaultWidth;
      }
      if (defaultMinWidth && !column2.minWidth) {
        column2.minWidth = defaultMinWidth;
      }
      if (column2.visible) {
        if (column2.resizeWidth) {
          resizeList.push(column2);
        } else if (_tools$v.DomTools.isPx(column2.width)) {
          pxList.push(column2);
        } else if (_tools$v.DomTools.isScale(column2.width)) {
          scaleList.push(column2);
        } else if (_tools$v.DomTools.isPx(column2.minWidth)) {
          pxMinList.push(column2);
        } else if (_tools$v.DomTools.isScale(column2.minWidth)) {
          scaleMinList.push(column2);
        } else {
          autoList.push(column2);
        }
      }
    });
    Object.assign(this.columnStore, {
      resizeList,
      pxList,
      pxMinList,
      scaleList,
      scaleMinList,
      autoList
    });
  },
  refreshScroll: function refreshScroll() {
    var _this22 = this;
    var lastScrollLeft = this.lastScrollLeft, lastScrollTop = this.lastScrollTop;
    var $refs = this.$refs;
    var tableBody = $refs.tableBody, leftBody = $refs.leftBody, rightBody = $refs.rightBody, tableFooter = $refs.tableFooter;
    var tableBodyElem = tableBody ? tableBody.$el : null;
    var leftBodyElem = leftBody ? leftBody.$el : null;
    var rightBodyElem = rightBody ? rightBody.$el : null;
    var tableFooterElem = tableFooter ? tableFooter.$el : null;
    return new Promise(function(resolve) {
      if (lastScrollLeft || lastScrollTop) {
        return (0, _util$9.restoreScrollLocation)(_this22, lastScrollLeft, lastScrollTop).then(function() {
          setTimeout(resolve, 30);
        });
      }
      (0, _dom$b.setScrollTop)(tableBodyElem, lastScrollTop);
      (0, _dom$b.setScrollTop)(leftBodyElem, lastScrollTop);
      (0, _dom$b.setScrollTop)(rightBodyElem, lastScrollTop);
      (0, _dom$b.setScrollLeft)(tableFooterElem, lastScrollLeft);
      setTimeout(resolve, 30);
    });
  },
  recalculate: function recalculate(refull) {
    var _this23 = this;
    var $refs = this.$refs;
    var tableBody = $refs.tableBody, tableHeader = $refs.tableHeader, tableFooter = $refs.tableFooter;
    var bodyElem = tableBody ? tableBody.$el : null;
    var headerElem = tableHeader ? tableHeader.$el : null;
    var footerElem = tableFooter ? tableFooter.$el : null;
    if (bodyElem) {
      this.autoCellWidth(headerElem, bodyElem, footerElem);
      if (refull === true) {
        return this.computeScrollLoad().then(function() {
          _this23.autoCellWidth(headerElem, bodyElem, footerElem);
          return _this23.computeScrollLoad();
        });
      }
    }
    return this.computeScrollLoad();
  },
  autoCellWidth: function autoCellWidth(headerElem, bodyElem, footerElem) {
    var tableWidth = 0;
    var minCellWidth = 40;
    var bodyWidth = bodyElem.clientWidth - 1;
    var remainWidth = bodyWidth;
    var meanWidth = remainWidth / 100;
    var fit = this.fit, columnStore = this.columnStore;
    var resizeList = columnStore.resizeList, pxMinList = columnStore.pxMinList, pxList = columnStore.pxList, scaleList = columnStore.scaleList, scaleMinList = columnStore.scaleMinList, autoList = columnStore.autoList;
    pxMinList.forEach(function(column2) {
      var minWidth = parseInt(column2.minWidth);
      tableWidth += minWidth;
      column2.renderWidth = minWidth;
    });
    scaleMinList.forEach(function(column2) {
      var scaleWidth = Math.floor(parseInt(column2.minWidth) * meanWidth);
      tableWidth += scaleWidth;
      column2.renderWidth = scaleWidth;
    });
    scaleList.forEach(function(column2) {
      var scaleWidth = Math.floor(parseInt(column2.width) * meanWidth);
      tableWidth += scaleWidth;
      column2.renderWidth = scaleWidth;
    });
    pxList.forEach(function(column2) {
      var width2 = parseInt(column2.width);
      tableWidth += width2;
      column2.renderWidth = width2;
    });
    resizeList.forEach(function(column2) {
      var width2 = parseInt(column2.resizeWidth);
      tableWidth += width2;
      column2.renderWidth = width2;
    });
    remainWidth -= tableWidth;
    meanWidth = remainWidth > 0 ? Math.floor(remainWidth / (scaleMinList.length + pxMinList.length + autoList.length)) : 0;
    if (fit) {
      if (remainWidth > 0) {
        scaleMinList.concat(pxMinList).forEach(function(column2) {
          tableWidth += meanWidth;
          column2.renderWidth += meanWidth;
        });
      }
    } else {
      meanWidth = minCellWidth;
    }
    autoList.forEach(function(column2) {
      var width2 = Math.max(meanWidth, minCellWidth);
      column2.renderWidth = width2;
      tableWidth += width2;
    });
    if (fit) {
      var dynamicList = scaleList.concat(scaleMinList).concat(pxMinList).concat(autoList);
      var dynamicSize = dynamicList.length - 1;
      if (dynamicSize > 0) {
        var odiffer = bodyWidth - tableWidth;
        if (odiffer > 0) {
          while (odiffer > 0 && dynamicSize >= 0) {
            odiffer--;
            dynamicList[dynamicSize--].renderWidth++;
          }
          tableWidth = bodyWidth;
        }
      }
    }
    var tableHeight = bodyElem.offsetHeight;
    var overflowY = bodyElem.scrollHeight > bodyElem.clientHeight;
    this.scrollbarWidth = overflowY ? bodyElem.offsetWidth - bodyElem.clientWidth : 0;
    this.overflowY = overflowY;
    this.tableWidth = tableWidth;
    this.tableHeight = tableHeight;
    if (headerElem) {
      this.headerHeight = headerElem.clientHeight;
      this.$nextTick(function() {
        if (headerElem && bodyElem && headerElem.scrollLeft !== bodyElem.scrollLeft) {
          headerElem.scrollLeft = bodyElem.scrollLeft;
        }
      });
    } else {
      this.headerHeight = 0;
    }
    if (footerElem) {
      var footerHeight = footerElem.offsetHeight;
      this.scrollbarHeight = Math.max(footerHeight - footerElem.clientHeight, 0);
      this.overflowX = tableWidth > footerElem.clientWidth;
      this.footerHeight = footerHeight;
    } else {
      this.footerHeight = 0;
      this.scrollbarHeight = Math.max(tableHeight - bodyElem.clientHeight, 0);
      this.overflowX = tableWidth > bodyWidth;
    }
    this.updateHeight();
    this.parentHeight = Math.max(this.headerHeight + this.footerHeight + 20, this.getParentHeight());
    if (this.overflowX) {
      this.checkScrolling();
    }
  },
  updateHeight: function updateHeight() {
    this.customHeight = calcHeight2(this, "height");
    this.customMaxHeight = calcHeight2(this, "maxHeight");
  },
  updateStyle: function updateStyle() {
    var _this24 = this;
    var $refs = this.$refs, isGroup3 = this.isGroup, fullColumnIdData = this.fullColumnIdData, tableColumn3 = this.tableColumn, customHeight = this.customHeight, customMaxHeight = this.customMaxHeight, border = this.border, headerHeight = this.headerHeight, showFooter2 = this.showFooter, allColumnOverflow = this.showOverflow, allColumnHeaderOverflow = this.showHeaderOverflow, allColumnFooterOverflow = this.showFooterOverflow, footerHeight = this.footerHeight, tableHeight = this.tableHeight, tableWidth = this.tableWidth, scrollbarHeight = this.scrollbarHeight, scrollbarWidth2 = this.scrollbarWidth, scrollXLoad = this.scrollXLoad, scrollYLoad = this.scrollYLoad, cellOffsetWidth2 = this.cellOffsetWidth, columnStore = this.columnStore, elemStore = this.elemStore, editStore = this.editStore, currentRow = this.currentRow, mouseConfig = this.mouseConfig, keyboardConfig = this.keyboardConfig, keyboardOpts2 = this.keyboardOpts, spanMethod = this.spanMethod, mergeList = this.mergeList, mergeFooterList = this.mergeFooterList, footerSpanMethod = this.footerSpanMethod, isAllOverflow = this.isAllOverflow, visibleColumn = this.visibleColumn;
    var containerList = ["main", "left", "right"];
    var emptyPlaceholderElem = $refs.emptyPlaceholder;
    var bodyWrapperElem = elemStore["main-body-wrapper"];
    if (emptyPlaceholderElem) {
      emptyPlaceholderElem.style.top = "".concat(headerHeight, "px");
      emptyPlaceholderElem.style.height = bodyWrapperElem ? "".concat(bodyWrapperElem.offsetHeight - scrollbarHeight, "px") : "";
    }
    if (customHeight > 0) {
      if (showFooter2) {
        customHeight += scrollbarHeight;
      }
    }
    containerList.forEach(function(name, index2) {
      var fixedType = index2 > 0 ? name : "";
      var layoutList = ["header", "body", "footer"];
      var fixedColumn = columnStore["".concat(fixedType, "List")];
      var fixedWrapperElem = $refs["".concat(fixedType, "Container")];
      layoutList.forEach(function(layout) {
        var wrapperElem = elemStore["".concat(name, "-").concat(layout, "-wrapper")];
        var tableElem = elemStore["".concat(name, "-").concat(layout, "-table")];
        if (layout === "header") {
          var tWidth = tableWidth;
          var isOptimize = false;
          if (!isGroup3) {
            if (fixedType) {
              if (scrollXLoad || allColumnHeaderOverflow) {
                isOptimize = true;
              }
            }
          }
          if (isOptimize) {
            tableColumn3 = fixedColumn;
          }
          if (isOptimize || scrollXLoad) {
            tWidth = tableColumn3.reduce(function(previous, column2) {
              return previous + column2.renderWidth;
            }, 0);
          }
          if (tableElem) {
            tableElem.style.width = tWidth ? "".concat(tWidth + scrollbarWidth2, "px") : "";
            if (_dom$b.browse.msie) {
              _xeUtils$v.default.arrayEach(tableElem.querySelectorAll(".vxe-resizable"), function(resizeElem) {
                resizeElem.style.height = "".concat(resizeElem.parentNode.offsetHeight, "px");
              });
            }
          }
          var repairElem = elemStore["".concat(name, "-").concat(layout, "-repair")];
          if (repairElem) {
            repairElem.style.width = "".concat(tableWidth, "px");
          }
          var listElem = elemStore["".concat(name, "-").concat(layout, "-list")];
          if (isGroup3 && listElem) {
            _xeUtils$v.default.arrayEach(listElem.querySelectorAll(".col--group"), function(thElem) {
              var colNode = _this24.getColumnNode(thElem);
              if (colNode) {
                var column2 = colNode.item;
                var showHeaderOverflow = column2.showHeaderOverflow;
                var cellOverflow = _xeUtils$v.default.isBoolean(showHeaderOverflow) ? showHeaderOverflow : allColumnHeaderOverflow;
                var showEllipsis = cellOverflow === "ellipsis";
                var showTitle = cellOverflow === "title";
                var showTooltip = cellOverflow === true || cellOverflow === "tooltip";
                var hasEllipsis2 = showTitle || showTooltip || showEllipsis;
                var childWidth = 0;
                var countChild = 0;
                if (hasEllipsis2) {
                  _xeUtils$v.default.eachTree(column2.children, function(item) {
                    if (!item.children || !column2.children.length) {
                      countChild++;
                    }
                    childWidth += item.renderWidth;
                  });
                }
                thElem.style.width = hasEllipsis2 ? "".concat(childWidth - countChild - (border ? 2 : 0), "px") : "";
              }
            });
          }
        } else if (layout === "body") {
          var emptyBlockElem = elemStore["".concat(name, "-").concat(layout, "-emptyBlock")];
          if (isNodeElement(wrapperElem)) {
            if (customMaxHeight) {
              wrapperElem.style.maxHeight = "".concat(fixedType ? customMaxHeight - headerHeight - (showFooter2 ? 0 : scrollbarHeight) : customMaxHeight - headerHeight, "px");
            } else {
              if (customHeight > 0) {
                wrapperElem.style.height = "".concat(fixedType ? (customHeight > 0 ? customHeight - headerHeight - footerHeight : tableHeight) - (showFooter2 ? 0 : scrollbarHeight) : customHeight - headerHeight - footerHeight, "px");
              } else {
                wrapperElem.style.height = "";
              }
            }
          }
          if (fixedWrapperElem) {
            var isRightFixed = fixedType === "right";
            var _fixedColumn = columnStore["".concat(fixedType, "List")];
            if (isNodeElement(wrapperElem)) {
              wrapperElem.style.top = "".concat(headerHeight, "px");
            }
            fixedWrapperElem.style.height = "".concat((customHeight > 0 ? customHeight - headerHeight - footerHeight : tableHeight) + headerHeight + footerHeight - scrollbarHeight * (showFooter2 ? 2 : 1), "px");
            fixedWrapperElem.style.width = "".concat(_fixedColumn.reduce(function(previous, column2) {
              return previous + column2.renderWidth;
            }, isRightFixed ? scrollbarWidth2 : 0), "px");
          }
          var _tWidth = tableWidth;
          if (fixedType) {
            if (scrollXLoad || scrollYLoad || (allColumnOverflow ? isAllOverflow : allColumnOverflow)) {
              if (!mergeList.length && !spanMethod && !(keyboardConfig && keyboardOpts2.isMerge)) {
                tableColumn3 = fixedColumn;
              } else {
                tableColumn3 = visibleColumn;
              }
            } else {
              tableColumn3 = visibleColumn;
            }
          }
          _tWidth = tableColumn3.reduce(function(previous, column2) {
            return previous + column2.renderWidth;
          }, 0);
          if (tableElem) {
            tableElem.style.width = _tWidth ? "".concat(_tWidth, "px") : "";
            tableElem.style.paddingRight = scrollbarWidth2 && fixedType && (_dom$b.browse["-moz"] || _dom$b.browse.safari) ? "".concat(scrollbarWidth2, "px") : "";
          }
          if (emptyBlockElem) {
            emptyBlockElem.style.width = _tWidth ? "".concat(_tWidth, "px") : "";
          }
        } else if (layout === "footer") {
          var _tWidth2 = tableWidth;
          if (fixedType) {
            if (scrollXLoad || allColumnFooterOverflow) {
              if (!mergeFooterList.length || !footerSpanMethod) {
                tableColumn3 = fixedColumn;
              } else {
                tableColumn3 = visibleColumn;
              }
            } else {
              tableColumn3 = visibleColumn;
            }
          }
          _tWidth2 = tableColumn3.reduce(function(previous, column2) {
            return previous + column2.renderWidth;
          }, 0);
          if (isNodeElement(wrapperElem)) {
            if (fixedWrapperElem) {
              wrapperElem.style.top = "".concat(customHeight > 0 ? customHeight - footerHeight : tableHeight + headerHeight, "px");
            }
            wrapperElem.style.marginTop = "".concat(-scrollbarHeight, "px");
          }
          if (tableElem) {
            tableElem.style.width = _tWidth2 ? "".concat(_tWidth2 + scrollbarWidth2, "px") : "";
          }
        }
        var colgroupElem = elemStore["".concat(name, "-").concat(layout, "-colgroup")];
        if (colgroupElem) {
          _xeUtils$v.default.arrayEach(colgroupElem.children, function(colElem) {
            var colid = colElem.getAttribute("name");
            if (colid === "col_gutter") {
              colElem.style.width = "".concat(scrollbarWidth2, "px");
            }
            if (fullColumnIdData[colid]) {
              var column2 = fullColumnIdData[colid].column;
              var showHeaderOverflow = column2.showHeaderOverflow, showFooterOverflow = column2.showFooterOverflow, showOverflow = column2.showOverflow;
              var cellOverflow;
              colElem.style.width = "".concat(column2.renderWidth, "px");
              if (layout === "header") {
                cellOverflow = _xeUtils$v.default.isUndefined(showHeaderOverflow) || _xeUtils$v.default.isNull(showHeaderOverflow) ? allColumnHeaderOverflow : showHeaderOverflow;
              } else if (layout === "footer") {
                cellOverflow = _xeUtils$v.default.isUndefined(showFooterOverflow) || _xeUtils$v.default.isNull(showFooterOverflow) ? allColumnFooterOverflow : showFooterOverflow;
              } else {
                cellOverflow = _xeUtils$v.default.isUndefined(showOverflow) || _xeUtils$v.default.isNull(showOverflow) ? allColumnOverflow : showOverflow;
              }
              var showEllipsis = cellOverflow === "ellipsis";
              var showTitle = cellOverflow === "title";
              var showTooltip = cellOverflow === true || cellOverflow === "tooltip";
              var hasEllipsis2 = showTitle || showTooltip || showEllipsis;
              var _listElem = elemStore["".concat(name, "-").concat(layout, "-list")];
              if (layout === "header" || layout === "footer") {
                if (scrollXLoad && !hasEllipsis2) {
                  hasEllipsis2 = true;
                }
              } else {
                if ((scrollXLoad || scrollYLoad) && !hasEllipsis2) {
                  hasEllipsis2 = true;
                }
              }
              if (_listElem) {
                _xeUtils$v.default.arrayEach(_listElem.querySelectorAll(".".concat(column2.id)), function(elem) {
                  var colspan = parseInt(elem.getAttribute("colspan") || 1);
                  var cellElem = elem.querySelector(".vxe-cell");
                  var colWidth = column2.renderWidth;
                  if (cellElem) {
                    if (colspan > 1) {
                      var columnIndex = _this24.getColumnIndex(column2);
                      for (var _index = 1; _index < colspan; _index++) {
                        var nextColumn = _this24.getColumns(columnIndex + _index);
                        if (nextColumn) {
                          colWidth += nextColumn.renderWidth;
                        }
                      }
                    }
                    cellElem.style.width = hasEllipsis2 ? "".concat(colWidth - cellOffsetWidth2 * colspan, "px") : "";
                  }
                });
              }
            }
          });
        }
      });
    });
    if (currentRow) {
      this.setCurrentRow(currentRow);
    }
    if (mouseConfig && mouseConfig.selected && editStore.selected.row && editStore.selected.column) {
      this.addColSdCls();
    }
    return this.$nextTick();
  },
  checkScrolling: function checkScrolling() {
    var _this$$refs = this.$refs, tableBody = _this$$refs.tableBody, leftContainer = _this$$refs.leftContainer, rightContainer = _this$$refs.rightContainer;
    var bodyElem = tableBody ? tableBody.$el : null;
    if (bodyElem) {
      if (leftContainer) {
        _tools$v.DomTools[bodyElem.scrollLeft > 0 ? "addClass" : "removeClass"](leftContainer, "scrolling--middle");
      }
      if (rightContainer) {
        _tools$v.DomTools[bodyElem.clientWidth < bodyElem.scrollWidth - Math.ceil(bodyElem.scrollLeft) ? "addClass" : "removeClass"](rightContainer, "scrolling--middle");
      }
    }
  },
  preventEvent: function preventEvent(evnt, type3, args, next, end) {
    var _this25 = this;
    var evntList = _vXETable$k.default.interceptor.get(type3);
    var rest;
    if (!evntList.some(function(func) {
      return func(Object.assign({
        $grid: _this25.$xegrid,
        $table: _this25,
        $event: evnt
      }, args)) === false;
    })) {
      if (next) {
        rest = next();
      }
    }
    if (end) {
      end();
    }
    return rest;
  },
  handleGlobalMousedownEvent: function handleGlobalMousedownEvent(evnt) {
    var _this26 = this;
    var $el = this.$el, $refs = this.$refs, $xegrid = this.$xegrid, $toolbar = this.$toolbar, mouseConfig = this.mouseConfig, editStore = this.editStore, ctxMenuStore = this.ctxMenuStore, editOpts2 = this.editOpts, filterStore = this.filterStore, getRowNode2 = this.getRowNode;
    var actived = editStore.actived;
    var ctxWrapper = $refs.ctxWrapper, filterWrapper = $refs.filterWrapper, validTip = $refs.validTip;
    if (filterWrapper) {
      if (getEventTargetNode2(evnt, $el, "vxe-cell--filter").flag)
        ;
      else if (getEventTargetNode2(evnt, filterWrapper.$el).flag)
        ;
      else {
        if (!getEventTargetNode2(evnt, document.body, "vxe-table--ignore-clear").flag) {
          this.preventEvent(evnt, "event.clearFilter", filterStore.args, this.closeFilter);
        }
      }
    }
    if (actived.row) {
      if (!(editOpts2.autoClear === false)) {
        var cell2 = actived.args.cell;
        if (!cell2 || !getEventTargetNode2(evnt, cell2).flag) {
          if (validTip && getEventTargetNode2(evnt, validTip.$el).flag)
            ;
          else if (!this.lastCallTime || this.lastCallTime + 50 < Date.now()) {
            if (!getEventTargetNode2(evnt, document.body, "vxe-table--ignore-clear").flag) {
              this.preventEvent(evnt, "event.clearActived", actived.args, function() {
                var isClearActived;
                if (editOpts2.mode === "row") {
                  var rowNode = getEventTargetNode2(evnt, $el, "vxe-body--row");
                  isClearActived = rowNode.flag ? getRowNode2(rowNode.targetElem).item !== actived.args.row : false;
                } else {
                  isClearActived = !getEventTargetNode2(evnt, $el, "col--edit").flag;
                }
                if (!isClearActived) {
                  isClearActived = getEventTargetNode2(evnt, $el, "vxe-header--row").flag;
                }
                if (!isClearActived) {
                  isClearActived = getEventTargetNode2(evnt, $el, "vxe-footer--row").flag;
                }
                if (!isClearActived && _this26.height && !_this26.overflowY) {
                  var bodyWrapperElem = evnt.target;
                  if (hasClass$1(bodyWrapperElem, "vxe-table--body-wrapper")) {
                    isClearActived = evnt.offsetY < bodyWrapperElem.clientHeight;
                  }
                }
                if (isClearActived || !getEventTargetNode2(evnt, $el).flag) {
                  setTimeout(function() {
                    return _this26.clearActived(evnt);
                  });
                }
              });
            }
          }
        }
      }
    } else if (mouseConfig) {
      if (!getEventTargetNode2(evnt, $el).flag && !($xegrid && getEventTargetNode2(evnt, $xegrid.$el).flag) && !(ctxWrapper && getEventTargetNode2(evnt, ctxWrapper.$el).flag) && !($toolbar && getEventTargetNode2(evnt, $toolbar.$el).flag)) {
        this.clearSelected();
        if (!getEventTargetNode2(evnt, document.body, "vxe-table--ignore-areas-clear").flag) {
          this.preventEvent(evnt, "event.clearAreas", {}, function() {
            _this26.clearCellAreas();
            _this26.clearCopyCellArea();
          });
        }
      }
    }
    if (ctxMenuStore.visible && ctxWrapper && !getEventTargetNode2(evnt, ctxWrapper.$el).flag) {
      this.closeMenu();
    }
    this.isActivated = getEventTargetNode2(evnt, ($xegrid || this).$el).flag;
  },
  handleGlobalBlurEvent: function handleGlobalBlurEvent() {
    this.closeFilter();
    this.closeMenu();
  },
  handleGlobalMousewheelEvent: function handleGlobalMousewheelEvent() {
    this.closeTooltip();
    this.closeMenu();
  },
  keydownEvent: function keydownEvent(evnt) {
    var _this27 = this;
    var filterStore = this.filterStore, ctxMenuStore = this.ctxMenuStore, editStore = this.editStore, keyboardConfig = this.keyboardConfig, mouseConfig = this.mouseConfig, mouseOpts2 = this.mouseOpts, keyboardOpts2 = this.keyboardOpts;
    var actived = editStore.actived;
    var keyCode = evnt.keyCode;
    var isEsc = keyCode === 27;
    if (isEsc) {
      this.preventEvent(evnt, "event.keydown", null, function() {
        if (keyboardConfig && mouseConfig && mouseOpts2.area && _this27.handleKeyboardEvent) {
          _this27.handleKeyboardEvent(evnt);
        } else if (actived.row || filterStore.visible || ctxMenuStore.visible) {
          evnt.stopPropagation();
          _this27.closeFilter();
          _this27.closeMenu();
          if (keyboardConfig && keyboardOpts2.isEsc) {
            if (actived.row) {
              var params = actived.args;
              _this27.clearActived(evnt);
              if (mouseConfig && mouseOpts2.selected) {
                _this27.$nextTick(function() {
                  return _this27.handleSelected(params, evnt);
                });
              }
            }
          }
        }
        _this27.emitEvent("keydown", {}, evnt);
      });
    }
  },
  handleGlobalKeydownEvent: function handleGlobalKeydownEvent(evnt) {
    var _this28 = this;
    if (this.isActivated) {
      this.preventEvent(evnt, "event.keydown", null, function() {
        var filterStore = _this28.filterStore, isCtxMenu2 = _this28.isCtxMenu, ctxMenuStore = _this28.ctxMenuStore, editStore = _this28.editStore, editOpts2 = _this28.editOpts, editConfig = _this28.editConfig, mouseConfig = _this28.mouseConfig, mouseOpts2 = _this28.mouseOpts, keyboardConfig = _this28.keyboardConfig, keyboardOpts2 = _this28.keyboardOpts, treeConfig = _this28.treeConfig, treeOpts2 = _this28.treeOpts, highlightCurrentRow = _this28.highlightCurrentRow, currentRow = _this28.currentRow, bodyCtxMenu2 = _this28.bodyCtxMenu, rowOpts2 = _this28.rowOpts;
        var selected = editStore.selected, actived = editStore.actived;
        var keyCode = evnt.keyCode;
        var isBack = keyCode === 8;
        var isTab = keyCode === 9;
        var isEnter = keyCode === 13;
        var isEsc = keyCode === 27;
        var isSpacebar = keyCode === 32;
        var isLeftArrow = keyCode === 37;
        var isUpArrow = keyCode === 38;
        var isRightArrow = keyCode === 39;
        var isDwArrow = keyCode === 40;
        var isDel = keyCode === 46;
        var isF2 = keyCode === 113;
        var isContextMenu = keyCode === 93;
        var hasMetaKey = evnt.metaKey;
        var hasCtrlKey = evnt.ctrlKey;
        var hasShiftKey = evnt.shiftKey;
        var hasAltKey = evnt.altKey;
        var operArrow = isLeftArrow || isUpArrow || isRightArrow || isDwArrow;
        var operCtxMenu = isCtxMenu2 && ctxMenuStore.visible && (isEnter || isSpacebar || operArrow);
        var isEditStatus = (0, _utils$2.isEnableConf)(editConfig) && actived.column && actived.row;
        var params;
        if (filterStore.visible) {
          if (isEsc) {
            _this28.closeFilter();
          }
          return;
        }
        if (operCtxMenu) {
          evnt.preventDefault();
          if (ctxMenuStore.showChild && hasChildrenList2(ctxMenuStore.selected)) {
            _this28.moveCtxMenu(evnt, keyCode, ctxMenuStore, "selectChild", 37, false, ctxMenuStore.selected.children);
          } else {
            _this28.moveCtxMenu(evnt, keyCode, ctxMenuStore, "selected", 39, true, _this28.ctxMenuList);
          }
        } else if (keyboardConfig && mouseConfig && mouseOpts2.area && _this28.handleKeyboardEvent) {
          _this28.handleKeyboardEvent(evnt);
        } else if (keyboardConfig && isSpacebar && keyboardOpts2.isChecked && selected.row && selected.column && (selected.column.type === "checkbox" || selected.column.type === "radio")) {
          evnt.preventDefault();
          if (selected.column.type === "checkbox") {
            _this28.handleToggleCheckRowEvent(evnt, selected.args);
          } else {
            _this28.triggerRadioRowEvent(evnt, selected.args);
          }
        } else if (isF2 && (0, _utils$2.isEnableConf)(editConfig)) {
          if (!isEditStatus) {
            if (selected.row && selected.column) {
              evnt.stopPropagation();
              evnt.preventDefault();
              _this28.handleActived(selected.args, evnt);
            }
          }
        } else if (isContextMenu) {
          _this28._keyCtx = selected.row && selected.column && bodyCtxMenu2.length;
          clearTimeout(_this28.keyCtxTimeout);
          _this28.keyCtxTimeout = setTimeout(function() {
            _this28._keyCtx = false;
          }, 1e3);
        } else if (isEnter && !hasAltKey && keyboardConfig && keyboardOpts2.isEnter && (selected.row || actived.row || treeConfig && (rowOpts2.isCurrent || highlightCurrentRow) && currentRow)) {
          if (hasCtrlKey) {
            if (actived.row) {
              params = actived.args;
              _this28.clearActived(evnt);
              if (mouseConfig && mouseOpts2.selected) {
                _this28.$nextTick(function() {
                  return _this28.handleSelected(params, evnt);
                });
              }
            }
          } else {
            if (selected.row || actived.row) {
              var targetArgs = selected.row ? selected.args : actived.args;
              if (hasShiftKey) {
                if (keyboardOpts2.enterToTab) {
                  _this28.moveTabSelected(targetArgs, hasShiftKey, evnt);
                } else {
                  _this28.moveSelected(targetArgs, isLeftArrow, true, isRightArrow, false, evnt);
                }
              } else {
                if (keyboardOpts2.enterToTab) {
                  _this28.moveTabSelected(targetArgs, hasShiftKey, evnt);
                } else {
                  _this28.moveSelected(targetArgs, isLeftArrow, false, isRightArrow, true, evnt);
                }
              }
            } else if (treeConfig && (rowOpts2.isCurrent || highlightCurrentRow) && currentRow) {
              var childrens = currentRow[treeOpts2.children];
              if (childrens && childrens.length) {
                evnt.preventDefault();
                var targetRow = childrens[0];
                params = {
                  $table: _this28,
                  row: targetRow
                };
                _this28.setTreeExpand(currentRow, true).then(function() {
                  return _this28.scrollToRow(targetRow);
                }).then(function() {
                  return _this28.triggerCurrentRowEvent(evnt, params);
                });
              }
            }
          }
        } else if (operArrow && keyboardConfig && keyboardOpts2.isArrow) {
          if (!isEditStatus) {
            if (selected.row && selected.column) {
              _this28.moveSelected(selected.args, isLeftArrow, isUpArrow, isRightArrow, isDwArrow, evnt);
            } else if ((isUpArrow || isDwArrow) && (rowOpts2.isCurrent || highlightCurrentRow)) {
              _this28.moveCurrentRow(isUpArrow, isDwArrow, evnt);
            }
          }
        } else if (isTab && keyboardConfig && keyboardOpts2.isTab) {
          if (selected.row || selected.column) {
            _this28.moveTabSelected(selected.args, hasShiftKey, evnt);
          } else if (actived.row || actived.column) {
            _this28.moveTabSelected(actived.args, hasShiftKey, evnt);
          }
        } else if (keyboardConfig && (isDel || (treeConfig && (rowOpts2.isCurrent || highlightCurrentRow) && currentRow ? isBack && keyboardOpts2.isArrow : isBack))) {
          if (!isEditStatus) {
            var delMethod = keyboardOpts2.delMethod, backMethod = keyboardOpts2.backMethod;
            if (keyboardOpts2.isDel && (selected.row || selected.column)) {
              if (delMethod) {
                delMethod({
                  row: selected.row,
                  rowIndex: _this28.getRowIndex(selected.row),
                  column: selected.column,
                  columnIndex: _this28.getColumnIndex(selected.column),
                  $table: _this28
                });
              } else {
                setCellValue2(selected.row, selected.column, null);
              }
              if (isBack) {
                if (backMethod) {
                  backMethod({
                    row: selected.row,
                    rowIndex: _this28.getRowIndex(selected.row),
                    column: selected.column,
                    columnIndex: _this28.getColumnIndex(selected.column),
                    $table: _this28
                  });
                } else {
                  _this28.handleActived(selected.args, evnt);
                }
              } else if (isDel) {
                _this28.updateFooter();
              }
            } else if (isBack && keyboardOpts2.isArrow && treeConfig && (rowOpts2.isCurrent || highlightCurrentRow) && currentRow) {
              var _XEUtils$findTree = _xeUtils$v.default.findTree(_this28.afterFullData, function(item) {
                return item === currentRow;
              }, treeOpts2), parentRow = _XEUtils$findTree.parent;
              if (parentRow) {
                evnt.preventDefault();
                params = {
                  $table: _this28,
                  row: parentRow
                };
                _this28.setTreeExpand(parentRow, false).then(function() {
                  return _this28.scrollToRow(parentRow);
                }).then(function() {
                  return _this28.triggerCurrentRowEvent(evnt, params);
                });
              }
            }
          }
        } else if (keyboardConfig && keyboardOpts2.isEdit && !hasCtrlKey && !hasMetaKey && (isSpacebar || keyCode >= 48 && keyCode <= 57 || keyCode >= 65 && keyCode <= 90 || keyCode >= 96 && keyCode <= 111 || keyCode >= 186 && keyCode <= 192 || keyCode >= 219 && keyCode <= 222)) {
          var editMethod = keyboardOpts2.editMethod;
          if (selected.column && selected.row && (0, _utils$2.isEnableConf)(selected.column.editRender)) {
            if (!editOpts2.activeMethod || editOpts2.activeMethod(_objectSpread$5(_objectSpread$5({}, selected.args), {}, {
              $table: _this28
            }))) {
              if (editMethod) {
                editMethod({
                  row: selected.row,
                  rowIndex: _this28.getRowIndex(selected.row),
                  column: selected.column,
                  columnIndex: _this28.getColumnIndex(selected.column),
                  $table: _this28
                });
              } else {
                setCellValue2(selected.row, selected.column, null);
                _this28.handleActived(selected.args, evnt);
              }
            }
          }
        }
        _this28.emitEvent("keydown", {}, evnt);
      });
    }
  },
  handleGlobalPasteEvent: function handleGlobalPasteEvent(evnt) {
    var isActivated = this.isActivated, keyboardConfig = this.keyboardConfig, keyboardOpts2 = this.keyboardOpts, mouseConfig = this.mouseConfig, mouseOpts2 = this.mouseOpts, editStore = this.editStore, filterStore = this.filterStore;
    var actived = editStore.actived;
    if (isActivated && !filterStore.visible) {
      if (!(actived.row || actived.column)) {
        if (keyboardConfig && keyboardOpts2.isClip && mouseConfig && mouseOpts2.area && this.handlePasteCellAreaEvent) {
          this.handlePasteCellAreaEvent(evnt);
        }
      }
      this.emitEvent("paste", {}, evnt);
    }
  },
  handleGlobalCopyEvent: function handleGlobalCopyEvent(evnt) {
    var isActivated = this.isActivated, keyboardConfig = this.keyboardConfig, keyboardOpts2 = this.keyboardOpts, mouseConfig = this.mouseConfig, mouseOpts2 = this.mouseOpts, editStore = this.editStore, filterStore = this.filterStore;
    var actived = editStore.actived;
    if (isActivated && !filterStore.visible) {
      if (!(actived.row || actived.column)) {
        if (keyboardConfig && keyboardOpts2.isClip && mouseConfig && mouseOpts2.area && this.handleCopyCellAreaEvent) {
          this.handleCopyCellAreaEvent(evnt);
        }
      }
      this.emitEvent("copy", {}, evnt);
    }
  },
  handleGlobalCutEvent: function handleGlobalCutEvent(evnt) {
    var isActivated = this.isActivated, keyboardConfig = this.keyboardConfig, keyboardOpts2 = this.keyboardOpts, mouseConfig = this.mouseConfig, mouseOpts2 = this.mouseOpts, editStore = this.editStore, filterStore = this.filterStore;
    var actived = editStore.actived;
    if (isActivated && !filterStore.visible) {
      if (!(actived.row || actived.column)) {
        if (keyboardConfig && keyboardOpts2.isClip && mouseConfig && mouseOpts2.area && this.handleCutCellAreaEvent) {
          this.handleCutCellAreaEvent(evnt);
        }
      }
      this.emitEvent("cut", {}, evnt);
    }
  },
  handleGlobalResizeEvent: function handleGlobalResizeEvent() {
    this.closeMenu();
    this.updateCellAreas();
    this.recalculate(true);
  },
  handleTooltipLeaveMethod: function handleTooltipLeaveMethod() {
    var _this29 = this;
    var tooltipOpts3 = this.tooltipOpts;
    setTimeout(function() {
      if (!_this29.tooltipActive) {
        _this29.closeTooltip();
      }
    }, tooltipOpts3.leaveDelay);
    return false;
  },
  handleTargetEnterEvent: function handleTargetEnterEvent(isClear) {
    var $tooltip = this.$refs.tooltip;
    clearTimeout(this.tooltipTimeout);
    this.tooltipActive = true;
    if (isClear) {
      this.closeTooltip();
    } else {
      if ($tooltip) {
        $tooltip.setActived(true);
      }
    }
  },
  handleTargetLeaveEvent: function handleTargetLeaveEvent() {
    var _this30 = this;
    var tooltipOpts3 = this.tooltipOpts;
    var $tooltip = this.$refs.tooltip;
    this.tooltipActive = false;
    if ($tooltip) {
      $tooltip.setActived(false);
    }
    if (tooltipOpts3.enterable) {
      this.tooltipTimeout = setTimeout(function() {
        $tooltip = _this30.$refs.tooltip;
        if ($tooltip && !$tooltip.isActived()) {
          _this30.closeTooltip();
        }
      }, tooltipOpts3.leaveDelay);
    } else {
      this.closeTooltip();
    }
  },
  triggerHeaderHelpEvent: function triggerHeaderHelpEvent(evnt, params) {
    var column2 = params.column;
    var titleHelp = column2.titleHelp;
    if (titleHelp.content || titleHelp.message) {
      var $refs = this.$refs, tooltipStore = this.tooltipStore;
      var $tooltip = $refs.tooltip;
      var content2 = _tools$v.UtilTools.getFuncText(titleHelp.content || titleHelp.message);
      this.handleTargetEnterEvent(true);
      tooltipStore.visible = true;
      if ($tooltip) {
        $tooltip.open(evnt.currentTarget, content2);
      }
    }
  },
  triggerHeaderTooltipEvent: function triggerHeaderTooltipEvent(evnt, params) {
    var tooltipStore = this.tooltipStore;
    var column2 = params.column;
    var titleElem = evnt.currentTarget;
    this.handleTargetEnterEvent(tooltipStore.column !== column2 || tooltipStore.row);
    if (tooltipStore.column !== column2 || !tooltipStore.visible) {
      this.handleTooltip(evnt, titleElem, titleElem, null, params);
    }
  },
  triggerBodyTooltipEvent: function triggerBodyTooltipEvent(evnt, params) {
    var editConfig = this.editConfig, editOpts2 = this.editOpts, editStore = this.editStore, tooltipStore = this.tooltipStore;
    var actived = editStore.actived;
    var row = params.row, column2 = params.column;
    var cell2 = evnt.currentTarget;
    this.handleTargetEnterEvent(tooltipStore.column !== column2 || tooltipStore.row !== row);
    if ((0, _utils$2.isEnableConf)(editConfig)) {
      if (editOpts2.mode === "row" && actived.row === row || actived.row === row && actived.column === column2) {
        return;
      }
    }
    if (tooltipStore.column !== column2 || tooltipStore.row !== row || !tooltipStore.visible) {
      var overflowElem;
      var tipElem;
      if (column2.treeNode) {
        overflowElem = cell2.querySelector(".vxe-tree-cell");
        if (column2.type === "html") {
          tipElem = cell2.querySelector(".vxe-cell--html");
        }
      } else {
        tipElem = cell2.querySelector(column2.type === "html" ? ".vxe-cell--html" : ".vxe-cell--label");
      }
      this.handleTooltip(evnt, cell2, overflowElem || cell2.children[0], tipElem, params);
    }
  },
  triggerFooterTooltipEvent: function triggerFooterTooltipEvent(evnt, params) {
    var column2 = params.column;
    var tooltipStore = this.tooltipStore;
    var cell2 = evnt.currentTarget;
    this.handleTargetEnterEvent(true);
    if (tooltipStore.column !== column2 || !tooltipStore.visible) {
      this.handleTooltip(evnt, cell2, cell2.querySelector(".vxe-cell--item") || cell2.children[0], null, params);
    }
  },
  handleTooltip: function handleTooltip(evnt, cell2, overflowElem, tipElem, params) {
    params.cell = cell2;
    var $refs = this.$refs, tooltipOpts3 = this.tooltipOpts, tooltipStore = this.tooltipStore;
    var column2 = params.column, row = params.row;
    var showAll = tooltipOpts3.showAll, enabled = tooltipOpts3.enabled, contentMethod = tooltipOpts3.contentMethod;
    var tooltip2 = $refs.tooltip;
    var customContent = contentMethod ? contentMethod(params) : null;
    var useCustom = contentMethod && !_xeUtils$v.default.eqNull(customContent);
    var content2 = useCustom ? customContent : (column2.type === "html" ? overflowElem.innerText : overflowElem.textContent).trim();
    var isCellOverflow = overflowElem.scrollWidth > overflowElem.clientWidth;
    if (content2 && (showAll || enabled || useCustom || isCellOverflow)) {
      Object.assign(tooltipStore, {
        row,
        column: column2,
        visible: true
      });
      if (tooltip2) {
        tooltip2.open(isCellOverflow ? overflowElem : tipElem || overflowElem, _tools$v.UtilTools.formatText(content2));
      }
    }
    return this.$nextTick();
  },
  openTooltip: function openTooltip(target2, content2) {
    var $refs = this.$refs;
    var commTip = $refs.commTip;
    if (commTip) {
      return commTip.open(target2, content2);
    }
    return this.$nextTick();
  },
  closeTooltip: function closeTooltip() {
    var $refs = this.$refs, tooltipStore = this.tooltipStore;
    var tooltip2 = $refs.tooltip;
    var commTip = $refs.commTip;
    if (tooltipStore.visible) {
      Object.assign(tooltipStore, {
        row: null,
        column: null,
        content: null,
        visible: false
      });
      if (tooltip2) {
        tooltip2.close();
      }
    }
    if (commTip) {
      commTip.close();
    }
    return this.$nextTick();
  },
  isAllCheckboxChecked: function isAllCheckboxChecked() {
    return this.isAllSelected;
  },
  isAllCheckboxIndeterminate: function isAllCheckboxIndeterminate() {
    return !this.isAllSelected && this.isIndeterminate;
  },
  isCheckboxIndeterminate: function isCheckboxIndeterminate() {
    _tools$v.UtilTools.warn("vxe.error.delFunc", ["isCheckboxIndeterminate", "isAllCheckboxIndeterminate"]);
    return this.isAllCheckboxIndeterminate();
  },
  getCheckboxIndeterminateRecords: function getCheckboxIndeterminateRecords(isFull) {
    var treeConfig = this.treeConfig, treeIndeterminates = this.treeIndeterminates, afterFullData = this.afterFullData;
    if (treeConfig) {
      return isFull ? treeIndeterminates.slice(0) : treeIndeterminates.filter(function(row) {
        return afterFullData.indexOf(row);
      });
    }
    return [];
  },
  handleDefaultSelectionChecked: function handleDefaultSelectionChecked() {
    var fullDataRowIdData = this.fullDataRowIdData, checkboxOpts2 = this.checkboxOpts;
    var checkAll = checkboxOpts2.checkAll, checkRowKeys = checkboxOpts2.checkRowKeys;
    if (checkAll) {
      this.setAllCheckboxRow(true);
    } else if (checkRowKeys) {
      var defSelection = [];
      checkRowKeys.forEach(function(rowid) {
        if (fullDataRowIdData[rowid]) {
          defSelection.push(fullDataRowIdData[rowid].row);
        }
      });
      this.setCheckboxRow(defSelection, true);
    }
  },
  setCheckboxRow: function setCheckboxRow(rows, value6) {
    var _this31 = this;
    if (rows && !_xeUtils$v.default.isArray(rows)) {
      rows = [rows];
    }
    rows.forEach(function(row) {
      return _this31.handleSelectRow({
        row
      }, !!value6);
    });
    return this.$nextTick();
  },
  isCheckedByCheckboxRow: function isCheckedByCheckboxRow(row) {
    var property2 = this.checkboxOpts.checkField;
    if (property2) {
      return _xeUtils$v.default.get(row, property2);
    }
    return this.selection.indexOf(row) > -1;
  },
  isIndeterminateByCheckboxRow: function isIndeterminateByCheckboxRow(row) {
    return this.treeIndeterminates.indexOf(row) > -1 && !this.isCheckedByCheckboxRow(row);
  },
  handleSelectRow: function handleSelectRow(_ref6, value6) {
    var _this32 = this;
    var row = _ref6.row;
    var selection = this.selection, afterFullData = this.afterFullData, treeConfig = this.treeConfig, treeOpts2 = this.treeOpts, treeIndeterminates = this.treeIndeterminates, checkboxOpts2 = this.checkboxOpts;
    var property2 = checkboxOpts2.checkField, checkStrictly = checkboxOpts2.checkStrictly, checkMethod = checkboxOpts2.checkMethod;
    if (property2) {
      if (treeConfig && !checkStrictly) {
        if (value6 === -1) {
          if (treeIndeterminates.indexOf(row) === -1) {
            treeIndeterminates.push(row);
          }
          _xeUtils$v.default.set(row, property2, false);
        } else {
          _xeUtils$v.default.eachTree([row], function(item) {
            if (row === item || !checkMethod || checkMethod({
              row: item
            })) {
              _xeUtils$v.default.set(item, property2, value6);
              _xeUtils$v.default.remove(treeIndeterminates, function(half) {
                return half === item;
              });
              _this32.handleCheckboxReserveRow(row, value6);
            }
          }, treeOpts2);
        }
        var matchObj = _xeUtils$v.default.findTree(afterFullData, function(item) {
          return item === row;
        }, treeOpts2);
        if (matchObj && matchObj.parent) {
          var parentStatus;
          var vItems = checkMethod ? matchObj.items.filter(function(item) {
            return checkMethod({
              row: item
            });
          }) : matchObj.items;
          var indeterminatesItem = _xeUtils$v.default.find(matchObj.items, function(item) {
            return treeIndeterminates.indexOf(item) > -1;
          });
          if (indeterminatesItem) {
            parentStatus = -1;
          } else {
            var selectItems = matchObj.items.filter(function(item) {
              return _xeUtils$v.default.get(item, property2);
            });
            parentStatus = selectItems.filter(function(item) {
              return vItems.indexOf(item) > -1;
            }).length === vItems.length ? true : selectItems.length || value6 === -1 ? -1 : false;
          }
          return this.handleSelectRow({
            row: matchObj.parent
          }, parentStatus);
        }
      } else {
        if (!checkMethod || checkMethod({
          row
        })) {
          _xeUtils$v.default.set(row, property2, value6);
          this.handleCheckboxReserveRow(row, value6);
        }
      }
    } else {
      if (treeConfig && !checkStrictly) {
        if (value6 === -1) {
          if (treeIndeterminates.indexOf(row) === -1) {
            treeIndeterminates.push(row);
          }
          _xeUtils$v.default.remove(selection, function(item) {
            return item === row;
          });
        } else {
          _xeUtils$v.default.eachTree([row], function(item) {
            if (row === item || !checkMethod || checkMethod({
              row: item
            })) {
              if (value6) {
                selection.push(item);
              } else {
                _xeUtils$v.default.remove(selection, function(select2) {
                  return select2 === item;
                });
              }
              _xeUtils$v.default.remove(treeIndeterminates, function(half) {
                return half === item;
              });
              _this32.handleCheckboxReserveRow(row, value6);
            }
          }, treeOpts2);
        }
        var _matchObj = _xeUtils$v.default.findTree(afterFullData, function(item) {
          return item === row;
        }, treeOpts2);
        if (_matchObj && _matchObj.parent) {
          var _parentStatus;
          var _vItems = checkMethod ? _matchObj.items.filter(function(item) {
            return checkMethod({
              row: item
            });
          }) : _matchObj.items;
          var _indeterminatesItem = _xeUtils$v.default.find(_matchObj.items, function(item) {
            return treeIndeterminates.indexOf(item) > -1;
          });
          if (_indeterminatesItem) {
            _parentStatus = -1;
          } else {
            var _selectItems = _matchObj.items.filter(function(item) {
              return selection.indexOf(item) > -1;
            });
            _parentStatus = _selectItems.filter(function(item) {
              return _vItems.indexOf(item) > -1;
            }).length === _vItems.length ? true : _selectItems.length || value6 === -1 ? -1 : false;
          }
          return this.handleSelectRow({
            row: _matchObj.parent
          }, _parentStatus);
        }
      } else {
        if (!checkMethod || checkMethod({
          row
        })) {
          if (value6) {
            if (selection.indexOf(row) === -1) {
              selection.push(row);
            }
          } else {
            _xeUtils$v.default.remove(selection, function(item) {
              return item === row;
            });
          }
          this.handleCheckboxReserveRow(row, value6);
        }
      }
    }
    this.checkSelectionStatus();
  },
  handleToggleCheckRowEvent: function handleToggleCheckRowEvent(evnt, params) {
    var selection = this.selection, checkboxOpts2 = this.checkboxOpts;
    var property2 = checkboxOpts2.checkField;
    var row = params.row;
    var value6 = property2 ? !_xeUtils$v.default.get(row, property2) : selection.indexOf(row) === -1;
    if (evnt) {
      this.triggerCheckRowEvent(evnt, params, value6);
    } else {
      this.handleSelectRow(params, value6);
    }
  },
  triggerCheckRowEvent: function triggerCheckRowEvent(evnt, params, value6) {
    var checkMethod = this.checkboxOpts.checkMethod;
    if (!checkMethod || checkMethod({
      row: params.row
    })) {
      this.handleSelectRow(params, value6);
      this.emitEvent("checkbox-change", Object.assign({
        records: this.getCheckboxRecords(),
        reserves: this.getCheckboxReserveRecords(),
        indeterminates: this.getCheckboxIndeterminateRecords(),
        checked: value6
      }, params), evnt);
    }
  },
  toggleCheckboxRow: function toggleCheckboxRow(row) {
    this.handleToggleCheckRowEvent(null, {
      row
    });
    return this.$nextTick();
  },
  setAllCheckboxRow: function setAllCheckboxRow(value6) {
    var _this33 = this;
    var afterFullData = this.afterFullData, treeConfig = this.treeConfig, treeOpts2 = this.treeOpts, selection = this.selection, checkboxReserveRowMap = this.checkboxReserveRowMap, checkboxOpts2 = this.checkboxOpts;
    var property2 = checkboxOpts2.checkField, reserve = checkboxOpts2.reserve, checkStrictly = checkboxOpts2.checkStrictly, checkMethod = checkboxOpts2.checkMethod;
    var selectRows = [];
    var beforeSelection = treeConfig ? [] : selection.filter(function(row) {
      return afterFullData.indexOf(row) === -1;
    });
    if (checkStrictly) {
      this.isAllSelected = value6;
    } else {
      if (property2) {
        var checkValFn = function checkValFn2(row) {
          if (!checkMethod || checkMethod({
            row
          })) {
            if (value6) {
              selectRows.push(row);
            }
            _xeUtils$v.default.set(row, property2, value6);
          }
        };
        if (treeConfig) {
          _xeUtils$v.default.eachTree(afterFullData, checkValFn, treeOpts2);
        } else {
          afterFullData.forEach(checkValFn);
        }
      } else {
        if (treeConfig) {
          if (value6) {
            _xeUtils$v.default.eachTree(afterFullData, function(row) {
              if (!checkMethod || checkMethod({
                row
              })) {
                selectRows.push(row);
              }
            }, treeOpts2);
          } else {
            if (checkMethod) {
              _xeUtils$v.default.eachTree(afterFullData, function(row) {
                if (checkMethod({
                  row
                }) ? 0 : selection.indexOf(row) > -1) {
                  selectRows.push(row);
                }
              }, treeOpts2);
            }
          }
        } else {
          if (value6) {
            if (checkMethod) {
              selectRows = afterFullData.filter(function(row) {
                return selection.indexOf(row) > -1 || checkMethod({
                  row
                });
              });
            } else {
              selectRows = afterFullData.slice(0);
            }
          } else {
            if (checkMethod) {
              selectRows = afterFullData.filter(function(row) {
                return checkMethod({
                  row
                }) ? 0 : selection.indexOf(row) > -1;
              });
            }
          }
        }
      }
      if (reserve) {
        if (value6) {
          selectRows.forEach(function(row) {
            checkboxReserveRowMap[getRowid$1(_this33, row)] = row;
          });
        } else {
          afterFullData.forEach(function(row) {
            return _this33.handleCheckboxReserveRow(row, false);
          });
        }
      }
      this.selection = property2 ? [] : beforeSelection.concat(selectRows);
    }
    this.treeIndeterminates = [];
    this.checkSelectionStatus();
  },
  checkSelectionStatus: function checkSelectionStatus() {
    var afterFullData = this.afterFullData, selection = this.selection, treeIndeterminates = this.treeIndeterminates, checkboxOpts2 = this.checkboxOpts, treeConfig = this.treeConfig;
    var checkField = checkboxOpts2.checkField, halfField = checkboxOpts2.halfField, checkStrictly = checkboxOpts2.checkStrictly, checkMethod = checkboxOpts2.checkMethod;
    if (!checkStrictly) {
      var disableRows = [];
      var checkRows = [];
      var isAllResolve = false;
      var isAllSelected = false;
      var isIndeterminate = false;
      if (checkField) {
        isAllResolve = afterFullData.every(checkMethod ? function(row) {
          if (!checkMethod({
            row
          })) {
            disableRows.push(row);
            return true;
          }
          if (_xeUtils$v.default.get(row, checkField)) {
            checkRows.push(row);
            return true;
          }
          return false;
        } : function(row) {
          return _xeUtils$v.default.get(row, checkField);
        });
        isAllSelected = isAllResolve && afterFullData.length !== disableRows.length;
        if (treeConfig) {
          if (halfField) {
            isIndeterminate = !isAllSelected && afterFullData.some(function(row) {
              return _xeUtils$v.default.get(row, checkField) || _xeUtils$v.default.get(row, halfField) || treeIndeterminates.indexOf(row) > -1;
            });
          } else {
            isIndeterminate = !isAllSelected && afterFullData.some(function(row) {
              return _xeUtils$v.default.get(row, checkField) || treeIndeterminates.indexOf(row) > -1;
            });
          }
        } else {
          if (halfField) {
            isIndeterminate = !isAllSelected && afterFullData.some(function(row) {
              return _xeUtils$v.default.get(row, checkField) || _xeUtils$v.default.get(row, halfField);
            });
          } else {
            isIndeterminate = !isAllSelected && afterFullData.some(function(row) {
              return _xeUtils$v.default.get(row, checkField);
            });
          }
        }
      } else {
        isAllResolve = afterFullData.every(checkMethod ? function(row) {
          if (!checkMethod({
            row
          })) {
            disableRows.push(row);
            return true;
          }
          if (selection.indexOf(row) > -1) {
            checkRows.push(row);
            return true;
          }
          return false;
        } : function(row) {
          return selection.indexOf(row) > -1;
        });
        isAllSelected = isAllResolve && afterFullData.length !== disableRows.length;
        if (treeConfig) {
          isIndeterminate = !isAllSelected && afterFullData.some(function(row) {
            return treeIndeterminates.indexOf(row) > -1 || selection.indexOf(row) > -1;
          });
        } else {
          isIndeterminate = !isAllSelected && afterFullData.some(function(row) {
            return selection.indexOf(row) > -1;
          });
        }
      }
      this.isAllSelected = isAllSelected;
      this.isIndeterminate = isIndeterminate;
    }
  },
  handleReserveStatus: function handleReserveStatus() {
    var expandColumn = this.expandColumn, treeOpts2 = this.treeOpts, treeConfig = this.treeConfig, fullDataRowIdData = this.fullDataRowIdData, fullAllDataRowMap = this.fullAllDataRowMap, currentRow = this.currentRow, selectRow = this.selectRow, radioReserveRow = this.radioReserveRow, radioOpts2 = this.radioOpts, checkboxOpts2 = this.checkboxOpts, selection = this.selection, rowExpandeds = this.rowExpandeds, treeExpandeds = this.treeExpandeds, expandOpts2 = this.expandOpts;
    if (selectRow && !fullAllDataRowMap.has(selectRow)) {
      this.selectRow = null;
    }
    if (radioOpts2.reserve && radioReserveRow) {
      var rowid = getRowid$1(this, radioReserveRow);
      if (fullDataRowIdData[rowid]) {
        this.setRadioRow(fullDataRowIdData[rowid].row);
      }
    }
    this.selection = getRecoverRow(this, selection);
    if (checkboxOpts2.reserve) {
      this.setCheckboxRow(handleReserveRow(this, this.checkboxReserveRowMap), true);
    }
    if (currentRow && !fullAllDataRowMap.has(currentRow)) {
      this.currentRow = null;
    }
    this.rowExpandeds = expandColumn ? getRecoverRow(this, rowExpandeds) : [];
    if (expandColumn && expandOpts2.reserve) {
      this.setRowExpand(handleReserveRow(this, this.rowExpandedReserveRowMap), true);
    }
    this.treeExpandeds = treeConfig ? getRecoverRow(this, treeExpandeds) : [];
    if (treeConfig && treeOpts2.reserve) {
      this.setTreeExpand(handleReserveRow(this, this.treeExpandedReserveRowMap), true);
    }
  },
  getRadioReserveRecord: function getRadioReserveRecord(isFull) {
    var fullDataRowIdData = this.fullDataRowIdData, radioReserveRow = this.radioReserveRow, radioOpts2 = this.radioOpts, afterFullData = this.afterFullData, treeConfig = this.treeConfig, treeOpts2 = this.treeOpts;
    if (radioOpts2.reserve && radioReserveRow) {
      var rowid = getRowid$1(this, radioReserveRow);
      if (isFull) {
        if (!fullDataRowIdData[rowid]) {
          return radioReserveRow;
        }
      } else {
        var rowkey = getRowkey2(this);
        if (treeConfig) {
          var matchObj = _xeUtils$v.default.findTree(afterFullData, function(row) {
            return rowid === _xeUtils$v.default.get(row, rowkey);
          }, treeOpts2);
          if (matchObj) {
            return radioReserveRow;
          }
        } else {
          if (!afterFullData.some(function(row) {
            return rowid === _xeUtils$v.default.get(row, rowkey);
          })) {
            return radioReserveRow;
          }
        }
      }
    }
    return null;
  },
  clearRadioReserve: function clearRadioReserve() {
    this.radioReserveRow = null;
    return this.$nextTick();
  },
  handleRadioReserveRow: function handleRadioReserveRow(row) {
    var radioOpts2 = this.radioOpts;
    if (radioOpts2.reserve) {
      this.radioReserveRow = row;
    }
  },
  getCheckboxReserveRecords: function getCheckboxReserveRecords(isFull) {
    var _this34 = this;
    var fullDataRowIdData = this.fullDataRowIdData, afterFullData = this.afterFullData, checkboxReserveRowMap = this.checkboxReserveRowMap, checkboxOpts2 = this.checkboxOpts, treeConfig = this.treeConfig, treeOpts2 = this.treeOpts;
    var reserveSelection = [];
    if (checkboxOpts2.reserve) {
      var afterFullIdMaps = {};
      if (treeConfig) {
        _xeUtils$v.default.eachTree(afterFullData, function(row) {
          afterFullIdMaps[getRowid$1(_this34, row)] = 1;
        }, treeOpts2);
      } else {
        afterFullData.forEach(function(row) {
          afterFullIdMaps[getRowid$1(_this34, row)] = 1;
        });
      }
      _xeUtils$v.default.each(checkboxReserveRowMap, function(oldRow, oldRowid) {
        if (oldRow) {
          if (isFull) {
            if (!fullDataRowIdData[oldRowid]) {
              reserveSelection.push(oldRow);
            }
          } else {
            if (!afterFullIdMaps[oldRowid]) {
              reserveSelection.push(oldRow);
            }
          }
        }
      });
    }
    return reserveSelection;
  },
  clearCheckboxReserve: function clearCheckboxReserve() {
    this.checkboxReserveRowMap = {};
    return this.$nextTick();
  },
  handleCheckboxReserveRow: function handleCheckboxReserveRow(row, checked) {
    var checkboxReserveRowMap = this.checkboxReserveRowMap, checkboxOpts2 = this.checkboxOpts;
    if (checkboxOpts2.reserve) {
      var rowid = getRowid$1(this, row);
      if (checked) {
        checkboxReserveRowMap[rowid] = row;
      } else if (checkboxReserveRowMap[rowid]) {
        delete checkboxReserveRowMap[rowid];
      }
    }
  },
  triggerCheckAllEvent: function triggerCheckAllEvent(evnt, value6) {
    this.setAllCheckboxRow(value6);
    this.emitEvent("checkbox-all", {
      records: this.getCheckboxRecords(),
      reserves: this.getCheckboxReserveRecords(),
      indeterminates: this.getCheckboxIndeterminateRecords(),
      checked: value6
    }, evnt);
  },
  toggleAllCheckboxRow: function toggleAllCheckboxRow() {
    this.triggerCheckAllEvent(null, !this.isAllSelected);
    return this.$nextTick();
  },
  clearCheckboxRow: function clearCheckboxRow() {
    var _this35 = this;
    var tableFullData = this.tableFullData, treeConfig = this.treeConfig, treeOpts2 = this.treeOpts, checkboxOpts2 = this.checkboxOpts;
    var property2 = checkboxOpts2.checkField, reserve = checkboxOpts2.reserve;
    if (property2) {
      if (treeConfig) {
        _xeUtils$v.default.eachTree(tableFullData, function(item) {
          return _xeUtils$v.default.set(item, property2, false);
        }, treeOpts2);
      } else {
        tableFullData.forEach(function(item) {
          return _xeUtils$v.default.set(item, property2, false);
        });
      }
    }
    if (reserve) {
      tableFullData.forEach(function(row) {
        return _this35.handleCheckboxReserveRow(row, false);
      });
    }
    this.isAllSelected = false;
    this.isIndeterminate = false;
    this.selection = [];
    this.treeIndeterminates = [];
    return this.$nextTick();
  },
  handleDefaultRadioChecked: function handleDefaultRadioChecked() {
    var radioOpts2 = this.radioOpts, fullDataRowIdData = this.fullDataRowIdData;
    var rowid = radioOpts2.checkRowKey, reserve = radioOpts2.reserve;
    if (rowid) {
      if (fullDataRowIdData[rowid]) {
        this.setRadioRow(fullDataRowIdData[rowid].row);
      }
      if (reserve) {
        var rowkey = getRowkey2(this);
        this.radioReserveRow = _defineProperty$j({}, rowkey, rowid);
      }
    }
  },
  triggerRadioRowEvent: function triggerRadioRowEvent(evnt, params) {
    var oldValue = this.selectRow, radioOpts2 = this.radioOpts;
    var row = params.row;
    var newValue = row;
    var isChange = oldValue !== newValue;
    if (isChange) {
      this.setRadioRow(newValue);
    } else if (!radioOpts2.strict) {
      isChange = oldValue === newValue;
      if (isChange) {
        newValue = null;
        this.clearRadioRow();
      }
    }
    if (isChange) {
      this.emitEvent("radio-change", _objectSpread$5({
        oldValue,
        newValue
      }, params), evnt);
    }
  },
  triggerCurrentRowEvent: function triggerCurrentRowEvent(evnt, params) {
    var oldValue = this.currentRow;
    var newValue = params.row;
    var isChange = oldValue !== newValue;
    this.setCurrentRow(newValue);
    if (isChange) {
      this.emitEvent("current-change", _objectSpread$5({
        oldValue,
        newValue
      }, params), evnt);
    }
  },
  setCurrentRow: function setCurrentRow(row) {
    var $el = this.$el, rowOpts2 = this.rowOpts;
    this.clearCurrentRow();
    this.clearCurrentColumn();
    this.currentRow = row;
    if (rowOpts2.isCurrent || this.highlightCurrentRow) {
      if ($el) {
        _xeUtils$v.default.arrayEach($el.querySelectorAll('[rowid="'.concat(getRowid$1(this, row), '"]')), function(elem) {
          return addClass$2(elem, "row--current");
        });
      }
    }
    return this.$nextTick();
  },
  isCheckedByRadioRow: function isCheckedByRadioRow(row) {
    return this.selectRow === row;
  },
  setRadioRow: function setRadioRow(row) {
    var radioOpts2 = this.radioOpts;
    var checkMethod = radioOpts2.checkMethod;
    if (row && (!checkMethod || checkMethod({
      row
    }))) {
      this.selectRow = row;
      this.handleRadioReserveRow(row);
    }
    return this.$nextTick();
  },
  clearCurrentRow: function clearCurrentRow() {
    var $el = this.$el;
    this.currentRow = null;
    this.hoverRow = null;
    if ($el) {
      _xeUtils$v.default.arrayEach($el.querySelectorAll(".row--current"), function(elem) {
        return removeClass$2(elem, "row--current");
      });
    }
    return this.$nextTick();
  },
  clearRadioRow: function clearRadioRow() {
    this.selectRow = null;
    return this.$nextTick();
  },
  getCurrentRecord: function getCurrentRecord() {
    return this.rowOpts.isCurrent || this.highlightCurrentRow ? this.currentRow : null;
  },
  getRadioRecord: function getRadioRecord(isFull) {
    var treeConfig = this.treeConfig, treeOpts2 = this.treeOpts, selectRow = this.selectRow, fullDataRowIdData = this.fullDataRowIdData, afterFullData = this.afterFullData;
    if (selectRow) {
      var rowid = getRowid$1(this, selectRow);
      if (isFull) {
        if (!fullDataRowIdData[rowid]) {
          return selectRow;
        }
      } else {
        if (treeConfig) {
          var rowkey = getRowkey2(this);
          var matchObj = _xeUtils$v.default.findTree(afterFullData, function(row) {
            return rowid === _xeUtils$v.default.get(row, rowkey);
          }, treeOpts2);
          if (matchObj) {
            return selectRow;
          }
        } else {
          if (afterFullData.indexOf(selectRow) > -1) {
            return selectRow;
          }
        }
      }
    }
    return null;
  },
  triggerHoverEvent: function triggerHoverEvent(evnt, _ref7) {
    var row = _ref7.row;
    this.setHoverRow(row);
  },
  setHoverRow: function setHoverRow(row) {
    var $el = this.$el;
    var rowid = getRowid$1(this, row);
    this.clearHoverRow();
    if ($el) {
      _xeUtils$v.default.arrayEach($el.querySelectorAll('[rowid="'.concat(rowid, '"]')), function(elem) {
        return addClass$2(elem, "row--hover");
      });
    }
    this.hoverRow = row;
  },
  clearHoverRow: function clearHoverRow() {
    var $el = this.$el;
    if ($el) {
      _xeUtils$v.default.arrayEach($el.querySelectorAll(".vxe-body--row.row--hover"), function(elem) {
        return removeClass$2(elem, "row--hover");
      });
    }
    this.hoverRow = null;
  },
  triggerHeaderCellClickEvent: function triggerHeaderCellClickEvent(evnt, params) {
    var _lastResizeTime = this._lastResizeTime, sortOpts2 = this.sortOpts;
    var column2 = params.column;
    var cell2 = evnt.currentTarget;
    var triggerResizable = _lastResizeTime && _lastResizeTime > Date.now() - 300;
    var triggerSort = getEventTargetNode2(evnt, cell2, "vxe-cell--sort").flag;
    var triggerFilter = getEventTargetNode2(evnt, cell2, "vxe-cell--filter").flag;
    if (sortOpts2.trigger === "cell" && !(triggerResizable || triggerSort || triggerFilter)) {
      this.triggerSortEvent(evnt, column2, getNextSortOrder(this, column2));
    }
    this.emitEvent("header-cell-click", Object.assign({
      triggerResizable,
      triggerSort,
      triggerFilter,
      cell: cell2
    }, params), evnt);
    if (this.columnOpts.isCurrent || this.highlightCurrentColumn) {
      return this.setCurrentColumn(column2);
    }
    return this.$nextTick();
  },
  triggerHeaderCellDblclickEvent: function triggerHeaderCellDblclickEvent(evnt, params) {
    this.emitEvent("header-cell-dblclick", Object.assign({
      cell: evnt.currentTarget
    }, params), evnt);
  },
  getCurrentColumn: function getCurrentColumn() {
    return this.columnOpts.isCurrent || this.highlightCurrentColumn ? this.currentColumn : null;
  },
  setCurrentColumn: function setCurrentColumn(fieldOrColumn) {
    var column2 = (0, _util$9.handleFieldOrColumn)(this, fieldOrColumn);
    if (column2) {
      this.clearCurrentRow();
      this.clearCurrentColumn();
      this.currentColumn = column2;
    }
    return this.$nextTick();
  },
  clearCurrentColumn: function clearCurrentColumn() {
    this.currentColumn = null;
    return this.$nextTick();
  },
  checkValidate: function checkValidate(type3) {
    if (_vXETable$k.default._valid) {
      return this.triggerValidate(type3);
    }
    return this.$nextTick();
  },
  handleChangeCell: function handleChangeCell(evnt, params) {
    var _this36 = this;
    this.checkValidate("blur").catch(function(e) {
      return e;
    }).then(function() {
      _this36.handleActived(params, evnt).then(function() {
        return _this36.checkValidate("change");
      }).catch(function(e) {
        return e;
      });
    });
  },
  triggerCellClickEvent: function triggerCellClickEvent(evnt, params) {
    var highlightCurrentRow = this.highlightCurrentRow, editStore = this.editStore, radioOpts2 = this.radioOpts, expandOpts2 = this.expandOpts, treeOpts2 = this.treeOpts, editConfig = this.editConfig, editOpts2 = this.editOpts, checkboxOpts2 = this.checkboxOpts, rowOpts2 = this.rowOpts;
    var actived = editStore.actived;
    var _params = params, row = _params.row, column2 = _params.column;
    var type3 = column2.type, treeNode = column2.treeNode;
    var isRadioType = type3 === "radio";
    var isCheckboxType = type3 === "checkbox";
    var isExpandType = type3 === "expand";
    var cell2 = evnt.currentTarget;
    var triggerRadio = isRadioType && getEventTargetNode2(evnt, cell2, "vxe-cell--radio").flag;
    var triggerCheckbox = isCheckboxType && getEventTargetNode2(evnt, cell2, "vxe-cell--checkbox").flag;
    var triggerTreeNode = treeNode && getEventTargetNode2(evnt, cell2, "vxe-tree--btn-wrapper").flag;
    var triggerExpandNode = isExpandType && getEventTargetNode2(evnt, cell2, "vxe-table--expanded").flag;
    params = Object.assign({
      cell: cell2,
      triggerRadio,
      triggerCheckbox,
      triggerTreeNode,
      triggerExpandNode
    }, params);
    if (!triggerCheckbox && !triggerRadio) {
      if (!triggerExpandNode && (expandOpts2.trigger === "row" || isExpandType && expandOpts2.trigger === "cell")) {
        this.triggerRowExpandEvent(evnt, params);
      }
      if (treeOpts2.trigger === "row" || treeNode && treeOpts2.trigger === "cell") {
        this.triggerTreeExpandEvent(evnt, params);
      }
    }
    if (!triggerTreeNode) {
      if (!triggerExpandNode) {
        if (rowOpts2.isCurrent || highlightCurrentRow) {
          if (!triggerCheckbox && !triggerRadio) {
            this.triggerCurrentRowEvent(evnt, params);
          }
        }
        if (!triggerRadio && (radioOpts2.trigger === "row" || isRadioType && radioOpts2.trigger === "cell")) {
          this.triggerRadioRowEvent(evnt, params);
        }
        if (!triggerCheckbox && (checkboxOpts2.trigger === "row" || isCheckboxType && checkboxOpts2.trigger === "cell")) {
          this.handleToggleCheckRowEvent(evnt, params);
        }
      }
      if ((0, _utils$2.isEnableConf)(editConfig)) {
        if (editOpts2.trigger === "manual") {
          if (actived.args && actived.row === row && column2 !== actived.column) {
            this.handleChangeCell(evnt, params);
          }
        } else if (!actived.args || row !== actived.row || column2 !== actived.column) {
          if (editOpts2.trigger === "click") {
            this.handleChangeCell(evnt, params);
          } else if (editOpts2.trigger === "dblclick") {
            if (editOpts2.mode === "row" && actived.row === row) {
              this.handleChangeCell(evnt, params);
            }
          }
        }
      }
    }
    this.emitEvent("cell-click", params, evnt);
  },
  triggerCellDblclickEvent: function triggerCellDblclickEvent(evnt, params) {
    var _this37 = this;
    var editStore = this.editStore, editConfig = this.editConfig, editOpts2 = this.editOpts;
    var actived = editStore.actived;
    var cell2 = evnt.currentTarget;
    params.cell = cell2;
    if ((0, _utils$2.isEnableConf)(editConfig) && editOpts2.trigger === "dblclick") {
      if (!actived.args || evnt.currentTarget !== actived.args.cell) {
        if (editOpts2.mode === "row") {
          this.checkValidate("blur").catch(function(e) {
            return e;
          }).then(function() {
            _this37.handleActived(params, evnt).then(function() {
              return _this37.checkValidate("change");
            }).catch(function(e) {
              return e;
            });
          });
        } else if (editOpts2.mode === "cell") {
          this.handleActived(params, evnt).then(function() {
            return _this37.checkValidate("change");
          }).catch(function(e) {
            return e;
          });
        }
      }
    }
    this.emitEvent("cell-dblclick", params, evnt);
  },
  handleDefaultSort: function handleDefaultSort() {
    var _this38 = this;
    var sortConfig = this.sortConfig, sortOpts2 = this.sortOpts;
    var defaultSort = sortOpts2.defaultSort;
    if (defaultSort) {
      if (!_xeUtils$v.default.isArray(defaultSort)) {
        defaultSort = [defaultSort];
      }
      if (defaultSort.length) {
        (sortConfig.multiple ? defaultSort : defaultSort.slice(0, 1)).forEach(function(item) {
          var field = item.field, order = item.order;
          if (field && order) {
            var column2 = _this38.getColumnByField(field);
            if (column2 && column2.sortable) {
              column2.order = order;
              column2.sortTime = Date.now();
            }
          }
        });
        if (!sortOpts2.remote) {
          this.handleTableData(true).then(this.updateStyle);
        }
      }
    }
  },
  triggerSortEvent: function triggerSortEvent(evnt, column2, order) {
    var sortOpts2 = this.sortOpts;
    var property2 = column2.property;
    if (column2.sortable || column2.remoteSort) {
      if (!order || column2.order === order) {
        this.clearSort(sortOpts2.multiple ? column2 : null);
      } else {
        this.sort({
          field: property2,
          order
        });
      }
      var params = {
        column: column2,
        property: property2,
        order: column2.order,
        sortList: this.getSortColumns()
      };
      this.emitEvent("sort-change", params, evnt);
    }
  },
  sort: function sort(sortConfs, sortOrder) {
    var _this39 = this;
    var sortOpts2 = this.sortOpts;
    var multiple = sortOpts2.multiple, remote = sortOpts2.remote, orders = sortOpts2.orders;
    if (sortConfs) {
      if (_xeUtils$v.default.isString(sortConfs)) {
        sortConfs = [{
          field: sortConfs,
          order: sortOrder
        }];
      }
    }
    if (!_xeUtils$v.default.isArray(sortConfs)) {
      sortConfs = [sortConfs];
    }
    if (sortConfs.length) {
      var firstSortColumn;
      if (!multiple) {
        clearAllSort(this);
      }
      (multiple ? sortConfs : [sortConfs[0]]).forEach(function(confs) {
        var field = confs.field, order = confs.order;
        var column2 = field;
        if (_xeUtils$v.default.isString(field)) {
          column2 = _this39.getColumnByField(field);
        }
        if (column2 && (column2.sortable || column2.remoteSort)) {
          if (!firstSortColumn) {
            firstSortColumn = column2;
          }
          if (orders.indexOf(order) === -1) {
            order = getNextSortOrder(_this39, column2);
          }
          if (column2.order !== order) {
            column2.order = order;
          }
        }
      });
      if (!remote || firstSortColumn && firstSortColumn.remoteSort) {
        this.handleTableData(true);
      }
      return this.$nextTick().then(this.updateStyle);
    }
    return this.$nextTick();
  },
  clearSort: function clearSort(fieldOrColumn) {
    var sortOpts2 = this.sortOpts;
    if (fieldOrColumn) {
      var column2 = (0, _util$9.handleFieldOrColumn)(this, fieldOrColumn);
      if (column2) {
        column2.order = null;
      }
    } else {
      clearAllSort(this);
    }
    if (!sortOpts2.remote) {
      this.handleTableData(true);
    }
    return this.$nextTick().then(this.updateStyle);
  },
  getSortColumn: function getSortColumn() {
    return _xeUtils$v.default.find(this.tableFullColumn, function(column2) {
      return (column2.sortable || column2.remoteSort) && column2.order;
    });
  },
  isSort: function isSort(fieldOrColumn) {
    if (fieldOrColumn) {
      var column2 = (0, _util$9.handleFieldOrColumn)(this, fieldOrColumn);
      return column2 && column2.sortable && !!column2.order;
    }
    return this.getSortColumns().length > 0;
  },
  getSortColumns: function getSortColumns() {
    var sortList = [];
    this.tableFullColumn.forEach(function(column2) {
      var property2 = column2.property, order = column2.order;
      if ((column2.sortable || column2.remoteSort) && order) {
        sortList.push({
          column: column2,
          field: column2.property,
          property: property2,
          order
        });
      }
    });
    return sortList;
  },
  closeFilter: function closeFilter() {
    var filterStore = this.filterStore;
    var column2 = filterStore.column, visible2 = filterStore.visible;
    Object.assign(filterStore, {
      isAllSelected: false,
      isIndeterminate: false,
      options: [],
      visible: false
    });
    if (visible2) {
      this.emitEvent("filter-visible", {
        column: column2,
        property: column2.property,
        filterList: this.getCheckedFilters(),
        visible: false
      }, null);
    }
    return this.$nextTick();
  },
  isFilter: function isFilter(fieldOrColumn) {
    var column2 = (0, _util$9.handleFieldOrColumn)(this, fieldOrColumn);
    if (column2) {
      return column2.filters && column2.filters.some(function(option2) {
        return option2.checked;
      });
    }
    return this.getCheckedFilters().length > 0;
  },
  isRowExpandLoaded: function isRowExpandLoaded(row) {
    var rest = this.fullAllDataRowMap.get(row);
    return rest && rest.expandLoaded;
  },
  clearRowExpandLoaded: function clearRowExpandLoaded(row) {
    var expandOpts2 = this.expandOpts, expandLazyLoadeds = this.expandLazyLoadeds, fullAllDataRowMap = this.fullAllDataRowMap;
    var lazy = expandOpts2.lazy;
    var rest = fullAllDataRowMap.get(row);
    if (lazy && rest) {
      rest.expandLoaded = false;
      _xeUtils$v.default.remove(expandLazyLoadeds, function(item) {
        return row === item;
      });
    }
    return this.$nextTick();
  },
  reloadRowExpand: function reloadRowExpand(row) {
    var _this40 = this;
    var expandOpts2 = this.expandOpts, expandLazyLoadeds = this.expandLazyLoadeds;
    var lazy = expandOpts2.lazy;
    if (lazy && expandLazyLoadeds.indexOf(row) === -1) {
      this.clearRowExpandLoaded(row).then(function() {
        return _this40.handleAsyncRowExpand(row);
      });
    }
    return this.$nextTick();
  },
  reloadExpandContent: function reloadExpandContent(row) {
    return this.reloadRowExpand(row);
  },
  triggerRowExpandEvent: function triggerRowExpandEvent(evnt, params) {
    var expandOpts2 = this.expandOpts, expandLazyLoadeds = this.expandLazyLoadeds, column2 = this.expandColumn;
    var row = params.row;
    var lazy = expandOpts2.lazy;
    if (!lazy || expandLazyLoadeds.indexOf(row) === -1) {
      var expanded = !this.isExpandByRow(row);
      var columnIndex = this.getColumnIndex(column2);
      var $columnIndex = this.getVMColumnIndex(column2);
      this.setRowExpand(row, expanded);
      this.emitEvent("toggle-row-expand", {
        expanded,
        column: column2,
        columnIndex,
        $columnIndex,
        row,
        rowIndex: this.getRowIndex(row),
        $rowIndex: this.getVMRowIndex(row)
      }, evnt);
    }
  },
  toggleRowExpand: function toggleRowExpand(row) {
    return this.setRowExpand(row, !this.isExpandByRow(row));
  },
  handleDefaultRowExpand: function handleDefaultRowExpand() {
    var expandOpts2 = this.expandOpts, fullDataRowIdData = this.fullDataRowIdData;
    var expandAll = expandOpts2.expandAll, expandRowKeys = expandOpts2.expandRowKeys;
    if (expandAll) {
      this.setAllRowExpand(true);
    } else if (expandRowKeys) {
      var defExpandeds = [];
      expandRowKeys.forEach(function(rowid) {
        if (fullDataRowIdData[rowid]) {
          defExpandeds.push(fullDataRowIdData[rowid].row);
        }
      });
      this.setRowExpand(defExpandeds, true);
    }
  },
  setAllRowExpand: function setAllRowExpand(expanded) {
    return this.setRowExpand(this.expandOpts.lazy ? this.tableData : this.tableFullData, expanded);
  },
  handleAsyncRowExpand: function handleAsyncRowExpand(row) {
    var _this41 = this;
    var rest = this.fullAllDataRowMap.get(row);
    return new Promise(function(resolve) {
      _this41.expandLazyLoadeds.push(row);
      _this41.expandOpts.loadMethod({
        $table: _this41,
        row,
        rowIndex: _this41.getRowIndex(row),
        $rowIndex: _this41.getVMRowIndex(row)
      }).catch(function(e) {
        return e;
      }).then(function() {
        rest.expandLoaded = true;
        _xeUtils$v.default.remove(_this41.expandLazyLoadeds, function(item) {
          return item === row;
        });
        _this41.rowExpandeds.push(row);
        resolve(_this41.$nextTick().then(_this41.recalculate));
      });
    });
  },
  setRowExpand: function setRowExpand(rows, expanded) {
    var _this42 = this;
    var fullAllDataRowMap = this.fullAllDataRowMap, expandLazyLoadeds = this.expandLazyLoadeds, expandOpts2 = this.expandOpts, column2 = this.expandColumn;
    var rowExpandeds = this.rowExpandeds;
    var reserve = expandOpts2.reserve, lazy = expandOpts2.lazy, accordion = expandOpts2.accordion, toggleMethod = expandOpts2.toggleMethod;
    var lazyRests = [];
    var columnIndex = this.getColumnIndex(column2);
    var $columnIndex = this.getVMColumnIndex(column2);
    if (rows) {
      if (!_xeUtils$v.default.isArray(rows)) {
        rows = [rows];
      }
      if (accordion) {
        rowExpandeds = [];
        rows = rows.slice(rows.length - 1, rows.length);
      }
      var validRows = toggleMethod ? rows.filter(function(row) {
        return toggleMethod({
          expanded,
          column: column2,
          columnIndex,
          $columnIndex,
          row,
          rowIndex: _this42.getRowIndex(row),
          $rowIndex: _this42.getVMRowIndex(row)
        });
      }) : rows;
      if (expanded) {
        validRows.forEach(function(row) {
          if (rowExpandeds.indexOf(row) === -1) {
            var rest = fullAllDataRowMap.get(row);
            var isLoad = lazy && !rest.expandLoaded && expandLazyLoadeds.indexOf(row) === -1;
            if (isLoad) {
              lazyRests.push(_this42.handleAsyncRowExpand(row));
            } else {
              rowExpandeds.push(row);
            }
          }
        });
      } else {
        _xeUtils$v.default.remove(rowExpandeds, function(row) {
          return validRows.indexOf(row) > -1;
        });
      }
      if (reserve) {
        validRows.forEach(function(row) {
          return _this42.handleRowExpandReserve(row, expanded);
        });
      }
    }
    this.rowExpandeds = rowExpandeds;
    return Promise.all(lazyRests).then(this.recalculate);
  },
  isExpandByRow: function isExpandByRow(row) {
    return this.rowExpandeds.indexOf(row) > -1;
  },
  clearRowExpand: function clearRowExpand() {
    var _this43 = this;
    var expandOpts2 = this.expandOpts, rowExpandeds = this.rowExpandeds, tableFullData = this.tableFullData;
    var reserve = expandOpts2.reserve;
    var isExists = rowExpandeds.length;
    this.rowExpandeds = [];
    if (reserve) {
      tableFullData.forEach(function(row) {
        return _this43.handleRowExpandReserve(row, false);
      });
    }
    return this.$nextTick().then(function() {
      if (isExists) {
        _this43.recalculate();
      }
    });
  },
  clearRowExpandReserve: function clearRowExpandReserve() {
    this.rowExpandedReserveRowMap = {};
    return this.$nextTick();
  },
  handleRowExpandReserve: function handleRowExpandReserve(row, expanded) {
    var rowExpandedReserveRowMap = this.rowExpandedReserveRowMap, expandOpts2 = this.expandOpts;
    if (expandOpts2.reserve) {
      var rowid = getRowid$1(this, row);
      if (expanded) {
        rowExpandedReserveRowMap[rowid] = row;
      } else if (rowExpandedReserveRowMap[rowid]) {
        delete rowExpandedReserveRowMap[rowid];
      }
    }
  },
  getRowExpandRecords: function getRowExpandRecords() {
    return this.rowExpandeds.slice(0);
  },
  getTreeExpandRecords: function getTreeExpandRecords() {
    return this.treeExpandeds.slice(0);
  },
  getTreeStatus: function getTreeStatus() {
    if (this.treeConfig) {
      return {
        config: this.treeOpts,
        rowExpandeds: this.getTreeExpandRecords()
      };
    }
    return null;
  },
  isTreeExpandLoaded: function isTreeExpandLoaded(row) {
    var rest = this.fullAllDataRowMap.get(row);
    return rest && rest.treeLoaded;
  },
  clearTreeExpandLoaded: function clearTreeExpandLoaded(row) {
    var treeOpts2 = this.treeOpts, treeExpandeds = this.treeExpandeds, fullAllDataRowMap = this.fullAllDataRowMap;
    var transform = treeOpts2.transform, lazy = treeOpts2.lazy;
    var rest = fullAllDataRowMap.get(row);
    if (lazy && rest) {
      rest.treeLoaded = false;
      _xeUtils$v.default.remove(treeExpandeds, function(item) {
        return row === item;
      });
    }
    if (transform) {
      this.handleVirtualTreeToList();
      return this.handleTableData();
    }
    return this.$nextTick();
  },
  reloadTreeExpand: function reloadTreeExpand(row) {
    var _this44 = this;
    var treeOpts2 = this.treeOpts, treeLazyLoadeds = this.treeLazyLoadeds;
    var transform = treeOpts2.transform, lazy = treeOpts2.lazy, hasChild = treeOpts2.hasChild;
    if (lazy && row[hasChild] && treeLazyLoadeds.indexOf(row) === -1) {
      this.clearTreeExpandLoaded(row).then(function() {
        return _this44.handleAsyncTreeExpandChilds(row);
      }).then(function() {
        if (transform) {
          _this44.handleVirtualTreeToList();
          return _this44.handleTableData();
        }
      }).then(function() {
        return _this44.recalculate();
      });
    }
    return this.$nextTick();
  },
  reloadTreeChilds: function reloadTreeChilds(row) {
    return this.reloadTreeExpand(row);
  },
  triggerTreeExpandEvent: function triggerTreeExpandEvent(evnt, params) {
    var treeOpts2 = this.treeOpts, treeLazyLoadeds = this.treeLazyLoadeds;
    var row = params.row, column2 = params.column;
    var lazy = treeOpts2.lazy;
    if (!lazy || treeLazyLoadeds.indexOf(row) === -1) {
      var expanded = !this.isTreeExpandByRow(row);
      var columnIndex = this.getColumnIndex(column2);
      var $columnIndex = this.getVMColumnIndex(column2);
      this.setTreeExpand(row, expanded);
      this.emitEvent("toggle-tree-expand", {
        expanded,
        column: column2,
        columnIndex,
        $columnIndex,
        row
      }, evnt);
    }
  },
  toggleTreeExpand: function toggleTreeExpand(row) {
    return this.setTreeExpand(row, !this.isTreeExpandByRow(row));
  },
  handleDefaultTreeExpand: function handleDefaultTreeExpand() {
    var treeConfig = this.treeConfig, treeOpts2 = this.treeOpts, tableFullData = this.tableFullData;
    if (treeConfig) {
      var expandAll = treeOpts2.expandAll, expandRowKeys = treeOpts2.expandRowKeys;
      if (expandAll) {
        this.setAllTreeExpand(true);
      } else if (expandRowKeys) {
        var defExpandeds = [];
        var rowkey = getRowkey2(this);
        expandRowKeys.forEach(function(rowid) {
          var matchObj = _xeUtils$v.default.findTree(tableFullData, function(item) {
            return rowid === _xeUtils$v.default.get(item, rowkey);
          }, treeOpts2);
          if (matchObj) {
            defExpandeds.push(matchObj.item);
          }
        });
        this.setTreeExpand(defExpandeds, true);
      }
    }
  },
  handleAsyncTreeExpandChilds: function handleAsyncTreeExpandChilds(row) {
    var _this45 = this;
    var fullAllDataRowMap = this.fullAllDataRowMap, treeExpandeds = this.treeExpandeds, treeOpts2 = this.treeOpts, treeLazyLoadeds = this.treeLazyLoadeds, checkboxOpts2 = this.checkboxOpts;
    var transform = treeOpts2.transform, loadMethod = treeOpts2.loadMethod;
    var checkStrictly = checkboxOpts2.checkStrictly;
    var rest = fullAllDataRowMap.get(row);
    return new Promise(function(resolve) {
      treeLazyLoadeds.push(row);
      loadMethod({
        $table: _this45,
        row
      }).catch(function() {
        return [];
      }).then(function(childRecords) {
        rest.treeLoaded = true;
        _xeUtils$v.default.remove(treeLazyLoadeds, function(item) {
          return item === row;
        });
        if (!_xeUtils$v.default.isArray(childRecords)) {
          childRecords = [];
        }
        if (childRecords) {
          _this45.loadTreeChildren(row, childRecords).then(function(childRows) {
            if (childRows.length && treeExpandeds.indexOf(row) === -1) {
              treeExpandeds.push(row);
            }
            if (!checkStrictly && _this45.isCheckedByCheckboxRow(row)) {
              _this45.setCheckboxRow(childRows, true);
            }
            _this45.$nextTick().then(function() {
              if (transform) {
                return _this45.handleTableData();
              }
            }).then(function() {
              return _this45.recalculate();
            }).then(function() {
              return resolve();
            });
          });
        } else {
          _this45.$nextTick().then(function() {
            return _this45.recalculate();
          }).then(function() {
            return resolve();
          });
        }
      });
    });
  },
  setAllTreeExpand: function setAllTreeExpand(expanded) {
    var tableFullData = this.tableFullData, treeOpts2 = this.treeOpts;
    var lazy = treeOpts2.lazy, children = treeOpts2.children;
    var expandeds = [];
    _xeUtils$v.default.eachTree(tableFullData, function(row) {
      var rowChildren = row[children];
      if (lazy || rowChildren && rowChildren.length) {
        expandeds.push(row);
      }
    }, treeOpts2);
    return this.setTreeExpand(expandeds, expanded);
  },
  handleBaseTreeExpand: function handleBaseTreeExpand(rows, expanded) {
    var _this46 = this;
    var fullAllDataRowMap = this.fullAllDataRowMap, tableFullData = this.tableFullData, treeExpandeds = this.treeExpandeds, treeOpts2 = this.treeOpts, treeLazyLoadeds = this.treeLazyLoadeds, treeNodeColumn = this.treeNodeColumn;
    var reserve = treeOpts2.reserve, lazy = treeOpts2.lazy, hasChild = treeOpts2.hasChild, children = treeOpts2.children, accordion = treeOpts2.accordion, toggleMethod = treeOpts2.toggleMethod;
    var result = [];
    var columnIndex = this.getColumnIndex(treeNodeColumn);
    var $columnIndex = this.getVMColumnIndex(treeNodeColumn);
    var validRows = toggleMethod ? rows.filter(function(row) {
      return toggleMethod({
        expanded,
        column: treeNodeColumn,
        columnIndex,
        $columnIndex,
        row
      });
    }) : rows;
    if (accordion) {
      validRows = validRows.length ? [validRows[validRows.length - 1]] : [];
      var matchObj = _xeUtils$v.default.findTree(tableFullData, function(item) {
        return item === validRows[0];
      }, treeOpts2);
      if (matchObj) {
        _xeUtils$v.default.remove(treeExpandeds, function(item) {
          return matchObj.items.indexOf(item) > -1;
        });
      }
    }
    if (expanded) {
      validRows.forEach(function(row) {
        if (treeExpandeds.indexOf(row) === -1) {
          var rest = fullAllDataRowMap.get(row);
          var isLoad = lazy && row[hasChild] && !rest.treeLoaded && treeLazyLoadeds.indexOf(row) === -1;
          if (isLoad) {
            result.push(_this46.handleAsyncTreeExpandChilds(row));
          } else {
            if (row[children] && row[children].length) {
              treeExpandeds.push(row);
            }
          }
        }
      });
    } else {
      _xeUtils$v.default.remove(treeExpandeds, function(row) {
        return validRows.indexOf(row) > -1;
      });
    }
    if (reserve) {
      validRows.forEach(function(row) {
        return _this46.handleTreeExpandReserve(row, expanded);
      });
    }
    return Promise.all(result).then(this.recalculate);
  },
  handleVirtualTreeExpand: function handleVirtualTreeExpand(rows, expanded) {
    var _this47 = this;
    return this.handleBaseTreeExpand(rows, expanded).then(function() {
      _this47.handleVirtualTreeToList();
      return _this47.handleTableData();
    }).then(function() {
      return _this47.recalculate();
    });
  },
  setTreeExpand: function setTreeExpand(rows, expanded) {
    var treeOpts2 = this.treeOpts;
    var transform = treeOpts2.transform;
    if (rows) {
      if (!_xeUtils$v.default.isArray(rows)) {
        rows = [rows];
      }
      if (rows.length) {
        if (transform) {
          return this.handleVirtualTreeExpand(rows, expanded);
        } else {
          return this.handleBaseTreeExpand(rows, expanded);
        }
      }
    }
    return this.$nextTick();
  },
  isTreeExpandByRow: function isTreeExpandByRow(row) {
    return this.treeExpandeds.indexOf(row) > -1;
  },
  clearTreeExpand: function clearTreeExpand() {
    var _this48 = this;
    var treeOpts2 = this.treeOpts, treeExpandeds = this.treeExpandeds, tableFullData = this.tableFullData;
    var transform = treeOpts2.transform, reserve = treeOpts2.reserve;
    var isExists = treeExpandeds.length;
    this.treeExpandeds = [];
    if (reserve) {
      _xeUtils$v.default.eachTree(tableFullData, function(row) {
        return _this48.handleTreeExpandReserve(row, false);
      }, treeOpts2);
    }
    return this.handleTableData().then(function() {
      if (transform) {
        _this48.handleVirtualTreeToList();
        return _this48.handleTableData();
      }
    }).then(function() {
      if (isExists) {
        _this48.recalculate();
      }
    });
  },
  clearTreeExpandReserve: function clearTreeExpandReserve() {
    this.treeExpandedReserveRowMap = {};
    return this.$nextTick();
  },
  handleTreeExpandReserve: function handleTreeExpandReserve(row, expanded) {
    var treeExpandedReserveRowMap = this.treeExpandedReserveRowMap, treeOpts2 = this.treeOpts;
    if (treeOpts2.reserve) {
      var rowid = getRowid$1(this, row);
      if (expanded) {
        treeExpandedReserveRowMap[rowid] = row;
      } else if (treeExpandedReserveRowMap[rowid]) {
        delete treeExpandedReserveRowMap[rowid];
      }
    }
  },
  getScroll: function getScroll() {
    var $refs = this.$refs, scrollXLoad = this.scrollXLoad, scrollYLoad = this.scrollYLoad;
    var bodyElem = $refs.tableBody.$el;
    return {
      virtualX: scrollXLoad,
      virtualY: scrollYLoad,
      scrollTop: bodyElem.scrollTop,
      scrollLeft: bodyElem.scrollLeft
    };
  },
  triggerScrollXEvent: function triggerScrollXEvent() {
    this.loadScrollXData();
  },
  loadScrollXData: function loadScrollXData() {
    var mergeList = this.mergeList, mergeFooterList = this.mergeFooterList, scrollXStore = this.scrollXStore;
    var startIndex = scrollXStore.startIndex, endIndex = scrollXStore.endIndex, offsetSize = scrollXStore.offsetSize;
    var _computeVirtualX2 = computeVirtualX(this), toVisibleIndex = _computeVirtualX2.toVisibleIndex, visibleSize = _computeVirtualX2.visibleSize;
    var offsetItem = {
      startIndex: Math.max(0, toVisibleIndex - 1 - offsetSize),
      endIndex: toVisibleIndex + visibleSize + offsetSize
    };
    calculateMergerOffserIndex(mergeList.concat(mergeFooterList), offsetItem, "col");
    var offsetStartIndex = offsetItem.startIndex, offsetEndIndex = offsetItem.endIndex;
    if (toVisibleIndex <= startIndex || toVisibleIndex >= endIndex - visibleSize - 1) {
      if (startIndex !== offsetStartIndex || endIndex !== offsetEndIndex) {
        scrollXStore.startIndex = offsetStartIndex;
        scrollXStore.endIndex = offsetEndIndex;
        this.updateScrollXData();
      }
    }
    this.closeTooltip();
  },
  triggerScrollYEvent: function triggerScrollYEvent(evnt) {
    var scrollYStore = this.scrollYStore;
    var adaptive = scrollYStore.adaptive, offsetSize = scrollYStore.offsetSize, visibleSize = scrollYStore.visibleSize;
    if (isWebkit && adaptive && offsetSize * 2 + visibleSize <= 40) {
      this.loadScrollYData(evnt);
    } else {
      this.debounceScrollY(evnt);
    }
  },
  debounceScrollY: _xeUtils$v.default.debounce(function(evnt) {
    this.loadScrollYData(evnt);
  }, debounceScrollYDuration, {
    leading: false,
    trailing: true
  }),
  loadScrollYData: function loadScrollYData(evnt) {
    var mergeList = this.mergeList, scrollYStore = this.scrollYStore;
    var startIndex = scrollYStore.startIndex, endIndex = scrollYStore.endIndex, visibleSize = scrollYStore.visibleSize, offsetSize = scrollYStore.offsetSize, rowHeight = scrollYStore.rowHeight;
    var scrollBodyElem = evnt.currentTarget || evnt.target;
    var scrollTop = scrollBodyElem.scrollTop;
    var toVisibleIndex = Math.floor(scrollTop / rowHeight);
    var offsetItem = {
      startIndex: Math.max(0, toVisibleIndex - 1 - offsetSize),
      endIndex: toVisibleIndex + visibleSize + offsetSize
    };
    calculateMergerOffserIndex(mergeList, offsetItem, "row");
    var offsetStartIndex = offsetItem.startIndex, offsetEndIndex = offsetItem.endIndex;
    if (toVisibleIndex <= startIndex || toVisibleIndex >= endIndex - visibleSize - 1) {
      if (startIndex !== offsetStartIndex || endIndex !== offsetEndIndex) {
        scrollYStore.startIndex = offsetStartIndex;
        scrollYStore.endIndex = offsetEndIndex;
        this.updateScrollYData();
      }
    }
  },
  computeScrollLoad: function computeScrollLoad() {
    var _this49 = this;
    return this.$nextTick().then(function() {
      var sYOpts3 = _this49.sYOpts, sXOpts2 = _this49.sXOpts, scrollXLoad = _this49.scrollXLoad, scrollYLoad = _this49.scrollYLoad, scrollXStore = _this49.scrollXStore, scrollYStore = _this49.scrollYStore;
      if (scrollXLoad) {
        var _computeVirtualX3 = computeVirtualX(_this49), visibleXSize = _computeVirtualX3.visibleSize;
        var offsetXSize = sXOpts2.oSize ? _xeUtils$v.default.toNumber(sXOpts2.oSize) : _dom$b.browse.msie ? 10 : _dom$b.browse.edge ? 5 : 0;
        scrollXStore.offsetSize = offsetXSize;
        scrollXStore.visibleSize = visibleXSize;
        scrollXStore.endIndex = Math.max(scrollXStore.startIndex + scrollXStore.visibleSize + offsetXSize, scrollXStore.endIndex);
        _this49.updateScrollXData();
      } else {
        _this49.updateScrollXSpace();
      }
      var _computeVirtualY = computeVirtualY(_this49), rowHeight = _computeVirtualY.rowHeight, visibleYSize = _computeVirtualY.visibleSize;
      scrollYStore.rowHeight = rowHeight;
      if (scrollYLoad) {
        var offsetYSize = sYOpts3.oSize ? _xeUtils$v.default.toNumber(sYOpts3.oSize) : _dom$b.browse.msie ? 20 : _dom$b.browse.edge ? 10 : 0;
        scrollYStore.offsetSize = offsetYSize;
        scrollYStore.visibleSize = visibleYSize;
        scrollYStore.endIndex = Math.max(scrollYStore.startIndex + visibleYSize + offsetYSize, scrollYStore.endIndex);
        _this49.updateScrollYData();
      } else {
        _this49.updateScrollYSpace();
      }
      _this49.rowHeight = rowHeight;
      _this49.$nextTick(_this49.updateStyle);
    });
  },
  handleTableColumn: function handleTableColumn() {
    var scrollXLoad = this.scrollXLoad, visibleColumn = this.visibleColumn, scrollXStore = this.scrollXStore;
    this.tableColumn = scrollXLoad ? visibleColumn.slice(scrollXStore.startIndex, scrollXStore.endIndex) : visibleColumn.slice(0);
  },
  updateScrollXData: function updateScrollXData() {
    this.handleTableColumn();
    this.updateScrollXSpace();
  },
  updateScrollXSpace: function updateScrollXSpace() {
    var $refs = this.$refs, elemStore = this.elemStore, visibleColumn = this.visibleColumn, scrollXStore = this.scrollXStore, scrollXLoad = this.scrollXLoad, tableWidth = this.tableWidth, scrollbarWidth2 = this.scrollbarWidth;
    var tableHeader = $refs.tableHeader, tableBody = $refs.tableBody, tableFooter = $refs.tableFooter;
    var tableBodyElem = tableBody ? tableBody.$el : null;
    if (tableBodyElem) {
      var tableHeaderElem = tableHeader ? tableHeader.$el : null;
      var tableFooterElem = tableFooter ? tableFooter.$el : null;
      var headerElem = tableHeaderElem ? tableHeaderElem.querySelector(".vxe-table--header") : null;
      var bodyElem = tableBodyElem.querySelector(".vxe-table--body");
      var footerElem = tableFooterElem ? tableFooterElem.querySelector(".vxe-table--footer") : null;
      var leftSpaceWidth = visibleColumn.slice(0, scrollXStore.startIndex).reduce(function(previous, column2) {
        return previous + column2.renderWidth;
      }, 0);
      var marginLeft = "";
      if (scrollXLoad) {
        marginLeft = "".concat(leftSpaceWidth, "px");
      }
      if (headerElem) {
        headerElem.style.marginLeft = marginLeft;
      }
      bodyElem.style.marginLeft = marginLeft;
      if (footerElem) {
        footerElem.style.marginLeft = marginLeft;
      }
      var containerList = ["main"];
      containerList.forEach(function(name) {
        var layoutList = ["header", "body", "footer"];
        layoutList.forEach(function(layout) {
          var xSpaceElem = elemStore["".concat(name, "-").concat(layout, "-xSpace")];
          if (xSpaceElem) {
            xSpaceElem.style.width = scrollXLoad ? "".concat(tableWidth + (layout === "header" ? scrollbarWidth2 : 0), "px") : "";
          }
        });
      });
      this.$nextTick(this.updateStyle);
    }
  },
  updateScrollYData: function updateScrollYData() {
    this.handleTableData();
    this.updateScrollYSpace();
  },
  updateScrollYSpace: function updateScrollYSpace() {
    var elemStore = this.elemStore, scrollYStore = this.scrollYStore, scrollYLoad = this.scrollYLoad, afterFullData = this.afterFullData;
    var startIndex = scrollYStore.startIndex, rowHeight = scrollYStore.rowHeight;
    var bodyHeight = afterFullData.length * rowHeight;
    var topSpaceHeight = Math.max(0, startIndex * rowHeight);
    var containerList = ["main", "left", "right"];
    var marginTop = "";
    var ySpaceHeight = "";
    if (scrollYLoad) {
      marginTop = "".concat(topSpaceHeight, "px");
      ySpaceHeight = "".concat(bodyHeight, "px");
    }
    containerList.forEach(function(name) {
      var layoutList = ["header", "body", "footer"];
      var tableElem = elemStore["".concat(name, "-body-table")];
      if (tableElem) {
        tableElem.style.marginTop = marginTop;
      }
      layoutList.forEach(function(layout) {
        var ySpaceElem = elemStore["".concat(name, "-").concat(layout, "-ySpace")];
        if (ySpaceElem) {
          ySpaceElem.style.height = ySpaceHeight;
        }
      });
    });
    this.$nextTick(this.updateStyle);
  },
  scrollTo: function scrollTo(scrollLeft, scrollTop) {
    var _this50 = this;
    var $refs = this.$refs;
    var tableBody = $refs.tableBody, rightBody = $refs.rightBody, tableFooter = $refs.tableFooter;
    var tableBodyElem = tableBody ? tableBody.$el : null;
    var rightBodyElem = rightBody ? rightBody.$el : null;
    var tableFooterElem = tableFooter ? tableFooter.$el : null;
    if (_xeUtils$v.default.isNumber(scrollLeft)) {
      (0, _dom$b.setScrollLeft)(tableFooterElem || tableBodyElem, scrollLeft);
    }
    if (_xeUtils$v.default.isNumber(scrollTop)) {
      (0, _dom$b.setScrollTop)(rightBodyElem || tableBodyElem, scrollTop);
    }
    if (this.scrollXLoad || this.scrollYLoad) {
      return new Promise(function(resolve) {
        return setTimeout(function() {
          return resolve(_this50.$nextTick());
        }, 50);
      });
    }
    return this.$nextTick();
  },
  scrollToRow: function scrollToRow(row, fieldOrColumn) {
    var rest = [];
    if (row) {
      if (this.treeConfig) {
        rest.push(this.scrollToTreeRow(row));
      } else {
        rest.push(_tools$v.DomTools.rowToVisible(this, row));
      }
    }
    if (fieldOrColumn) {
      rest.push(this.scrollToColumn(fieldOrColumn));
    }
    return Promise.all(rest);
  },
  scrollToColumn: function scrollToColumn(fieldOrColumn) {
    var column2 = (0, _util$9.handleFieldOrColumn)(this, fieldOrColumn);
    if (column2 && this.fullColumnMap.has(column2)) {
      return _tools$v.DomTools.colToVisible(this, column2);
    }
    return this.$nextTick();
  },
  scrollToTreeRow: function scrollToTreeRow(row) {
    var _this51 = this;
    var tableFullData = this.tableFullData, treeConfig = this.treeConfig, treeOpts2 = this.treeOpts;
    var rests = [];
    if (treeConfig) {
      var matchObj = _xeUtils$v.default.findTree(tableFullData, function(item) {
        return item === row;
      }, treeOpts2);
      if (matchObj) {
        var nodes = matchObj.nodes;
        nodes.forEach(function(row2, index2) {
          if (index2 < nodes.length - 1 && !_this51.isTreeExpandByRow(row2)) {
            rests.push(_this51.setTreeExpand(row2, true));
          }
        });
      }
    }
    return Promise.all(rests).then(function() {
      return _tools$v.DomTools.rowToVisible(_this51, row);
    });
  },
  clearScroll: function clearScroll() {
    var $refs = this.$refs, scrollXStore = this.scrollXStore, scrollYStore = this.scrollYStore;
    var tableBody = $refs.tableBody, rightBody = $refs.rightBody, tableFooter = $refs.tableFooter;
    var tableBodyElem = tableBody ? tableBody.$el : null;
    var rightBodyElem = rightBody ? rightBody.$el : null;
    var tableFooterElem = tableFooter ? tableFooter.$el : null;
    if (rightBodyElem) {
      (0, _util$9.restoreScrollListener)(rightBodyElem);
      rightBodyElem.scrollTop = 0;
    }
    if (tableFooterElem) {
      tableFooterElem.scrollLeft = 0;
    }
    if (tableBodyElem) {
      (0, _util$9.restoreScrollListener)(tableBodyElem);
      tableBodyElem.scrollTop = 0;
      tableBodyElem.scrollLeft = 0;
    }
    scrollXStore.startIndex = 0;
    scrollYStore.startIndex = 0;
    return this.$nextTick();
  },
  updateFooter: function updateFooter() {
    var showFooter2 = this.showFooter, visibleColumn = this.visibleColumn, footerMethod = this.footerMethod;
    if (showFooter2 && footerMethod) {
      this.footerTableData = visibleColumn.length ? footerMethod({
        columns: visibleColumn,
        data: this.afterFullData,
        $table: this,
        $grid: this.$xegrid
      }) : [];
    }
    return this.$nextTick();
  },
  updateStatus: function updateStatus(scope, cellValue) {
    var _this52 = this;
    var customVal = !_xeUtils$v.default.isUndefined(cellValue);
    return this.$nextTick().then(function() {
      var $refs = _this52.$refs, editRules = _this52.editRules, validStore = _this52.validStore;
      if (scope && $refs.tableBody && editRules) {
        var row = scope.row, column2 = scope.column;
        var type3 = "change";
        if (_this52.hasCellRules(type3, row, column2)) {
          var cell2 = _this52.getCell(row, column2);
          if (cell2) {
            return _this52.validCellRules(type3, row, column2, cellValue).then(function() {
              if (customVal && validStore.visible) {
                setCellValue2(row, column2, cellValue);
              }
              _this52.clearValidate();
            }).catch(function(_ref8) {
              var rule = _ref8.rule;
              if (customVal) {
                setCellValue2(row, column2, cellValue);
              }
              _this52.showValidTooltip({
                rule,
                row,
                column: column2,
                cell: cell2
              });
            });
          }
        }
      }
    });
  },
  handleDefaultMergeCells: function handleDefaultMergeCells() {
    this.setMergeCells(this.mergeCells);
  },
  setMergeCells: function setMergeCells(merges) {
    var _this53 = this;
    if (this.spanMethod) {
      _tools$v.UtilTools.error("vxe.error.errConflicts", ["merge-cells", "span-method"]);
    }
    setMerges(this, merges, this.mergeList, this.afterFullData);
    return this.$nextTick().then(function() {
      return _this53.updateCellAreas();
    });
  },
  removeMergeCells: function removeMergeCells(merges) {
    var _this54 = this;
    if (this.spanMethod) {
      _tools$v.UtilTools.error("vxe.error.errConflicts", ["merge-cells", "span-method"]);
    }
    var rest = removeMerges(this, merges, this.mergeList, this.afterFullData);
    return this.$nextTick().then(function() {
      _this54.updateCellAreas();
      return rest;
    });
  },
  getMergeCells: function getMergeCells() {
    return this.mergeList.slice(0);
  },
  clearMergeCells: function clearMergeCells() {
    this.mergeList = [];
    return this.$nextTick();
  },
  handleDefaultMergeFooterItems: function handleDefaultMergeFooterItems() {
    this.setMergeFooterItems(this.mergeFooterItems);
  },
  setMergeFooterItems: function setMergeFooterItems(merges) {
    var _this55 = this;
    if (this.footerSpanMethod) {
      _tools$v.UtilTools.error("vxe.error.errConflicts", ["merge-footer-items", "footer-span-method"]);
    }
    setMerges(this, merges, this.mergeFooterList, null);
    return this.$nextTick().then(function() {
      return _this55.updateCellAreas();
    });
  },
  removeMergeFooterItems: function removeMergeFooterItems(merges) {
    var _this56 = this;
    if (this.footerSpanMethod) {
      _tools$v.UtilTools.error("vxe.error.errConflicts", ["merge-footer-items", "footer-span-method"]);
    }
    var rest = removeMerges(this, merges, this.mergeFooterList, null);
    return this.$nextTick().then(function() {
      _this56.updateCellAreas();
      return rest;
    });
  },
  getMergeFooterItems: function getMergeFooterItems() {
    return this.mergeFooterList.slice(0);
  },
  clearMergeFooterItems: function clearMergeFooterItems() {
    this.mergeFooterList = [];
    return this.$nextTick();
  },
  updateZindex: function updateZindex() {
    if (this.zIndex) {
      this.tZindex = this.zIndex;
    } else if (this.tZindex < _tools$v.UtilTools.getLastZIndex()) {
      this.tZindex = _tools$v.UtilTools.nextZIndex();
    }
  },
  updateCellAreas: function updateCellAreas() {
    if (this.mouseConfig && this.mouseOpts.area && this.handleUpdateCellAreas) {
      this.handleUpdateCellAreas();
    }
  },
  emitEvent: function emitEvent(type3, params, evnt) {
    this.$emit(type3, Object.assign({
      $table: this,
      $grid: this.$xegrid,
      $event: evnt
    }, params));
  },
  focus: function focus() {
    this.isActivated = true;
    return this.$nextTick();
  },
  blur: function blur() {
    this.isActivated = false;
    return this.$nextTick();
  },
  connect: function connect($toolbar) {
    if ($toolbar && $toolbar.syncUpdate) {
      $toolbar.syncUpdate({
        collectColumn: this.collectColumn,
        $table: this
      });
      this.$toolbar = $toolbar;
    } else {
      _tools$v.UtilTools.error("vxe.error.barUnableLink");
    }
    return this.$nextTick();
  },
  getCell: function getCell(row, column2) {
    var $refs = this.$refs;
    var rowid = getRowid$1(this, row);
    var bodyElem = $refs["".concat(column2.fixed || "table", "Body")] || $refs.tableBody;
    if (bodyElem && bodyElem.$el) {
      return bodyElem.$el.querySelector('.vxe-body--row[rowid="'.concat(rowid, '"] .').concat(column2.id));
    }
    return null;
  },
  getCellLabel: function getCellLabel(row, column2) {
    var formatter = column2.formatter;
    var cellValue = _tools$v.UtilTools.getCellValue(row, column2);
    var cellLabel = cellValue;
    if (formatter) {
      var rest, formatData;
      var fullAllDataRowMap = this.fullAllDataRowMap;
      var colid = column2.id;
      var cacheFormat = fullAllDataRowMap.has(row);
      if (cacheFormat) {
        rest = fullAllDataRowMap.get(row);
        formatData = rest.formatData;
        if (!formatData) {
          formatData = fullAllDataRowMap.get(row).formatData = {};
        }
        if (rest && formatData[colid]) {
          if (formatData[colid].value === cellValue) {
            return formatData[colid].label;
          }
        }
      }
      var formatParams = {
        cellValue,
        row,
        rowIndex: this.getRowIndex(row),
        column: column2,
        columnIndex: this.getColumnIndex(column2)
      };
      if (_xeUtils$v.default.isString(formatter)) {
        var globalFunc = _formats.formats.get(formatter);
        cellLabel = globalFunc ? globalFunc(formatParams) : "";
      } else if (_xeUtils$v.default.isArray(formatter)) {
        var _globalFunc = _formats.formats.get(formatter[0]);
        cellLabel = _globalFunc ? _globalFunc.apply(void 0, [formatParams].concat(_toConsumableArray$5(formatter.slice(1)))) : "";
      } else {
        cellLabel = formatter(formatParams);
      }
      if (formatData) {
        formatData[colid] = {
          value: cellValue,
          label: cellLabel
        };
      }
    }
    return cellLabel;
  },
  getSetupOptions: function getSetupOptions() {
    return _conf$q.default;
  }
};
var funcs = "setFilter,openFilter,clearFilter,getCheckedFilters,closeMenu,setActiveCellArea,getActiveCellArea,getCellAreas,clearCellAreas,copyCellArea,cutCellArea,pasteCellArea,getCopyCellArea,clearCopyCellArea,setCellAreas,openFind,openReplace,closeFNR,getSelectedCell,clearSelected,insert,insertAt,remove,removeCheckboxRow,removeRadioRow,removeCurrentRow,getRecordset,getInsertRecords,getRemoveRecords,getUpdateRecords,clearActived,getActiveRecord,isActiveByRow,setActiveRow,setActiveCell,setSelectCell,clearValidate,fullValidate,validate,openExport,openPrint,exportData,openImport,importData,saveFile,readFile,importByFile,print".split(",");
funcs.forEach(function(name) {
  Methods[name] = function() {
    return this["_".concat(name)] ? this["_".concat(name)].apply(this, arguments) : null;
  };
});
var _default$T = Methods;
methods$1.default = _default$T;
Object.defineProperty(table, "__esModule", {
  value: true
});
table.default = void 0;
var _xeUtils$u = _interopRequireDefault$1l(xeUtils);
var _conf$p = _interopRequireDefault$1l(conf);
var _vXETable$j = _interopRequireDefault$1l(vXETable);
var _body$1 = _interopRequireDefault$1l(body);
var _size$f = _interopRequireDefault$1l(size);
var _tools$u = tools;
var _methods = _interopRequireDefault$1l(methods$1);
function _interopRequireDefault$1l(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
function renderFixed(h, $xetable, fixedType) {
  var _e = $xetable._e, tableData = $xetable.tableData, tableColumn3 = $xetable.tableColumn, tableGroupColumn = $xetable.tableGroupColumn, vSize8 = $xetable.vSize, showHeader2 = $xetable.showHeader, showFooter2 = $xetable.showFooter, columnStore = $xetable.columnStore, footerTableData = $xetable.footerTableData;
  var fixedColumn = columnStore["".concat(fixedType, "List")];
  return h("div", {
    class: "vxe-table--fixed-".concat(fixedType, "-wrapper"),
    ref: "".concat(fixedType, "Container")
  }, [showHeader2 ? h("vxe-table-header", {
    props: {
      fixedType,
      tableData,
      tableColumn: tableColumn3,
      tableGroupColumn,
      size: vSize8,
      fixedColumn
    },
    ref: "".concat(fixedType, "Header")
  }) : _e(), h("vxe-table-body", {
    props: {
      fixedType,
      tableData,
      tableColumn: tableColumn3,
      fixedColumn,
      size: vSize8
    },
    ref: "".concat(fixedType, "Body")
  }), showFooter2 ? h("vxe-table-footer", {
    props: {
      footerTableData,
      tableColumn: tableColumn3,
      fixedColumn,
      fixedType,
      size: vSize8
    },
    ref: "".concat(fixedType, "Footer")
  }) : _e()]);
}
function renderEmptyContenet(h, _vm) {
  var $scopedSlots = _vm.$scopedSlots, emptyOpts2 = _vm.emptyOpts;
  var emptyContent = "";
  var params = {
    $table: _vm
  };
  if ($scopedSlots.empty) {
    emptyContent = $scopedSlots.empty.call(_vm, params, h);
  } else {
    var compConf = emptyOpts2.name ? _vXETable$j.default.renderer.get(emptyOpts2.name) : null;
    var renderEmpty = compConf ? compConf.renderEmpty : null;
    if (renderEmpty) {
      emptyContent = renderEmpty.call(_vm, h, emptyOpts2, params);
    } else {
      emptyContent = _tools$u.UtilTools.getFuncText(_vm.emptyText) || _conf$p.default.i18n("vxe.table.emptyText");
    }
  }
  return emptyContent;
}
function handleUupdateResize(_vm) {
  var $el = _vm.$el;
  if ($el && $el.clientWidth && $el.clientHeight) {
    _vm.recalculate();
  }
}
var _default2$i = {
  name: "VxeTable",
  mixins: [_size$f.default],
  props: {
    id: String,
    data: Array,
    height: [Number, String],
    maxHeight: [Number, String],
    resizable: {
      type: Boolean,
      default: function _default() {
        return _conf$p.default.table.resizable;
      }
    },
    stripe: {
      type: Boolean,
      default: function _default2() {
        return _conf$p.default.table.stripe;
      }
    },
    border: {
      type: [Boolean, String],
      default: function _default3() {
        return _conf$p.default.table.border;
      }
    },
    round: {
      type: Boolean,
      default: function _default4() {
        return _conf$p.default.table.round;
      }
    },
    size: {
      type: String,
      default: function _default5() {
        return _conf$p.default.table.size || _conf$p.default.size;
      }
    },
    fit: {
      type: Boolean,
      default: function _default6() {
        return _conf$p.default.table.fit;
      }
    },
    loading: Boolean,
    align: {
      type: String,
      default: function _default7() {
        return _conf$p.default.table.align;
      }
    },
    headerAlign: {
      type: String,
      default: function _default8() {
        return _conf$p.default.table.headerAlign;
      }
    },
    footerAlign: {
      type: String,
      default: function _default9() {
        return _conf$p.default.table.footerAlign;
      }
    },
    showHeader: {
      type: Boolean,
      default: function _default10() {
        return _conf$p.default.table.showHeader;
      }
    },
    highlightCurrentRow: {
      type: Boolean,
      default: function _default11() {
        return _conf$p.default.table.highlightCurrentRow;
      }
    },
    highlightHoverRow: {
      type: Boolean,
      default: function _default12() {
        return _conf$p.default.table.highlightHoverRow;
      }
    },
    highlightCurrentColumn: {
      type: Boolean,
      default: function _default13() {
        return _conf$p.default.table.highlightCurrentColumn;
      }
    },
    highlightHoverColumn: {
      type: Boolean,
      default: function _default14() {
        return _conf$p.default.table.highlightHoverColumn;
      }
    },
    highlightCell: Boolean,
    showFooter: Boolean,
    footerMethod: Function,
    rowClassName: [String, Function],
    cellClassName: [String, Function],
    headerRowClassName: [String, Function],
    headerCellClassName: [String, Function],
    footerRowClassName: [String, Function],
    footerCellClassName: [String, Function],
    cellStyle: [Object, Function],
    headerCellStyle: [Object, Function],
    footerCellStyle: [Object, Function],
    rowStyle: [Object, Function],
    headerRowStyle: [Object, Function],
    footerRowStyle: [Object, Function],
    mergeCells: Array,
    mergeFooterItems: Array,
    spanMethod: Function,
    footerSpanMethod: Function,
    showOverflow: {
      type: [Boolean, String],
      default: function _default15() {
        return _conf$p.default.table.showOverflow;
      }
    },
    showHeaderOverflow: {
      type: [Boolean, String],
      default: function _default16() {
        return _conf$p.default.table.showHeaderOverflow;
      }
    },
    showFooterOverflow: {
      type: [Boolean, String],
      default: function _default17() {
        return _conf$p.default.table.showFooterOverflow;
      }
    },
    columnKey: Boolean,
    rowKey: Boolean,
    rowId: {
      type: String,
      default: function _default18() {
        return _conf$p.default.table.rowId;
      }
    },
    zIndex: Number,
    emptyText: {
      type: String,
      default: function _default19() {
        return _conf$p.default.table.emptyText;
      }
    },
    keepSource: {
      type: Boolean,
      default: function _default20() {
        return _conf$p.default.table.keepSource;
      }
    },
    autoResize: {
      type: Boolean,
      default: function _default21() {
        return _conf$p.default.table.autoResize;
      }
    },
    syncResize: [Boolean, String, Number],
    columnConfig: Object,
    rowConfig: Object,
    resizableConfig: Object,
    seqConfig: Object,
    sortConfig: Object,
    filterConfig: Object,
    radioConfig: Object,
    checkboxConfig: Object,
    tooltipConfig: Object,
    exportConfig: [Boolean, Object],
    importConfig: [Boolean, Object],
    printConfig: Object,
    expandConfig: Object,
    treeConfig: [Boolean, Object],
    menuConfig: [Boolean, Object],
    contextMenu: [Boolean, Object],
    mouseConfig: Object,
    areaConfig: Object,
    keyboardConfig: Object,
    clipConfig: Object,
    fnrConfig: Object,
    editConfig: [Boolean, Object],
    validConfig: Object,
    editRules: Object,
    emptyRender: [Boolean, Object],
    customConfig: [Boolean, Object],
    scrollX: Object,
    scrollY: Object,
    animat: {
      type: Boolean,
      default: function _default22() {
        return _conf$p.default.table.animat;
      }
    },
    delayHover: {
      type: Number,
      default: function _default23() {
        return _conf$p.default.table.delayHover;
      }
    },
    params: Object
  },
  components: {
    VxeTableBody: _body$1.default
  },
  provide: function provide() {
    return {
      $xetable: this,
      xecolgroup: null
    };
  },
  inject: {
    $xegrid: {
      default: null
    }
  },
  data: function data2() {
    return {
      tId: "".concat(_xeUtils$u.default.uniqueId()),
      staticColumns: [],
      tableGroupColumn: [],
      tableColumn: [],
      tableData: [],
      scrollXLoad: false,
      scrollYLoad: false,
      overflowY: true,
      overflowX: false,
      scrollbarWidth: 0,
      scrollbarHeight: 0,
      rowHeight: 0,
      parentHeight: 0,
      isGroup: false,
      isAllOverflow: false,
      isAllSelected: false,
      isIndeterminate: false,
      selection: [],
      currentRow: null,
      currentColumn: null,
      selectRow: null,
      footerTableData: [],
      expandColumn: null,
      hasFixedColumn: false,
      treeNodeColumn: null,
      rowExpandeds: [],
      expandLazyLoadeds: [],
      treeExpandeds: [],
      treeLazyLoadeds: [],
      treeIndeterminates: [],
      mergeList: [],
      mergeFooterList: [],
      initStore: {
        filter: false,
        import: false,
        export: false
      },
      filterStore: {
        isAllSelected: false,
        isIndeterminate: false,
        style: null,
        options: [],
        column: null,
        multiple: false,
        visible: false,
        maxHeight: null
      },
      columnStore: {
        leftList: [],
        centerList: [],
        rightList: [],
        resizeList: [],
        pxList: [],
        pxMinList: [],
        scaleList: [],
        scaleMinList: [],
        autoList: []
      },
      ctxMenuStore: {
        selected: null,
        visible: false,
        showChild: false,
        selectChild: null,
        list: [],
        style: null
      },
      editStore: {
        indexs: {
          columns: []
        },
        titles: {
          columns: []
        },
        selected: {
          row: null,
          column: null
        },
        copyed: {
          cut: false,
          rows: [],
          columns: []
        },
        actived: {
          row: null,
          column: null
        },
        insertList: [],
        removeList: []
      },
      validStore: {
        visible: false,
        row: null,
        column: null,
        content: "",
        rule: null,
        isArrow: false
      },
      importStore: {
        inited: false,
        file: null,
        type: "",
        modeList: [],
        typeList: [],
        filename: "",
        visible: false
      },
      importParams: {
        mode: "",
        types: null,
        message: true
      },
      exportStore: {
        inited: false,
        name: "",
        modeList: [],
        typeList: [],
        columns: [],
        isPrint: false,
        hasFooter: false,
        hasTree: false,
        hasMerge: false,
        hasColgroup: false,
        visible: false
      },
      exportParams: {
        filename: "",
        sheetName: "",
        mode: "",
        type: "",
        isColgroup: false,
        isMerge: false,
        isAllExpand: false,
        useStyle: false,
        original: false,
        message: true,
        isHeader: false,
        isFooter: false
      }
    };
  },
  computed: {
    validOpts: function validOpts() {
      return Object.assign({
        message: "default"
      }, _conf$p.default.table.validConfig, this.validConfig);
    },
    sXOpts: function sXOpts() {
      return Object.assign({}, _conf$p.default.table.scrollX, this.scrollX);
    },
    sYOpts: function sYOpts() {
      return Object.assign({}, _conf$p.default.table.scrollY, this.scrollY);
    },
    rowHeightMaps: function rowHeightMaps() {
      return {
        default: 48,
        medium: 44,
        small: 40,
        mini: 36
      };
    },
    columnOpts: function columnOpts() {
      return Object.assign({}, _conf$p.default.table.columnConfig, this.columnConfig);
    },
    rowOpts: function rowOpts() {
      return Object.assign({}, _conf$p.default.table.rowConfig, this.rowConfig);
    },
    resizableOpts: function resizableOpts() {
      return Object.assign({}, _conf$p.default.table.resizableConfig, this.resizableConfig);
    },
    seqOpts: function seqOpts() {
      return Object.assign({
        startIndex: 0
      }, _conf$p.default.table.seqConfig, this.seqConfig);
    },
    radioOpts: function radioOpts() {
      return Object.assign({}, _conf$p.default.table.radioConfig, this.radioConfig);
    },
    checkboxOpts: function checkboxOpts() {
      return Object.assign({}, _conf$p.default.table.checkboxConfig, this.checkboxConfig);
    },
    tooltipOpts: function tooltipOpts() {
      var opts = Object.assign({
        leaveDelay: 300
      }, _conf$p.default.table.tooltipConfig, this.tooltipConfig);
      if (opts.enterable) {
        opts.leaveMethod = this.handleTooltipLeaveMethod;
      }
      return opts;
    },
    validTipOpts: function validTipOpts() {
      return Object.assign({
        isArrow: false
      }, this.tooltipOpts);
    },
    editOpts: function editOpts() {
      return Object.assign({}, _conf$p.default.table.editConfig, this.editConfig);
    },
    sortOpts: function sortOpts() {
      return Object.assign({
        orders: ["asc", "desc", null]
      }, _conf$p.default.table.sortConfig, this.sortConfig);
    },
    filterOpts: function filterOpts() {
      return Object.assign({}, _conf$p.default.table.filterConfig, this.filterConfig);
    },
    mouseOpts: function mouseOpts() {
      return Object.assign({}, _conf$p.default.table.mouseConfig, this.mouseConfig);
    },
    areaOpts: function areaOpts() {
      return Object.assign({}, _conf$p.default.table.areaConfig, this.areaConfig);
    },
    keyboardOpts: function keyboardOpts() {
      return Object.assign({}, _conf$p.default.table.keyboardConfig, this.keyboardConfig);
    },
    clipOpts: function clipOpts() {
      return Object.assign({}, _conf$p.default.table.clipConfig, this.clipConfig);
    },
    fnrOpts: function fnrOpts() {
      return Object.assign({}, _conf$p.default.table.fnrConfig, this.fnrConfig);
    },
    hasTip: function hasTip() {
      return _vXETable$j.default._tooltip;
    },
    headerCtxMenu: function headerCtxMenu() {
      var headerOpts = this.ctxMenuOpts.header;
      return headerOpts && headerOpts.options ? headerOpts.options : [];
    },
    bodyCtxMenu: function bodyCtxMenu() {
      var bodyOpts = this.ctxMenuOpts.body;
      return bodyOpts && bodyOpts.options ? bodyOpts.options : [];
    },
    footerCtxMenu: function footerCtxMenu() {
      var footerOpts = this.ctxMenuOpts.footer;
      return footerOpts && footerOpts.options ? footerOpts.options : [];
    },
    isCtxMenu: function isCtxMenu() {
      return !!((this.contextMenu || this.menuConfig) && (0, _tools$u.isEnableConf)(this.ctxMenuOpts) && (this.headerCtxMenu.length || this.bodyCtxMenu.length || this.footerCtxMenu.length));
    },
    ctxMenuOpts: function ctxMenuOpts() {
      return Object.assign({}, _conf$p.default.table.menuConfig, this.contextMenu, this.menuConfig);
    },
    ctxMenuList: function ctxMenuList() {
      var rest = [];
      this.ctxMenuStore.list.forEach(function(list2) {
        list2.forEach(function(item) {
          rest.push(item);
        });
      });
      return rest;
    },
    exportOpts: function exportOpts() {
      return Object.assign({}, _conf$p.default.table.exportConfig, this.exportConfig);
    },
    importOpts: function importOpts() {
      return Object.assign({}, _conf$p.default.table.importConfig, this.importConfig);
    },
    printOpts: function printOpts() {
      return Object.assign({}, _conf$p.default.table.printConfig, this.printConfig);
    },
    expandOpts: function expandOpts() {
      return Object.assign({}, _conf$p.default.table.expandConfig, this.expandConfig);
    },
    treeOpts: function treeOpts() {
      return Object.assign({}, _conf$p.default.table.treeConfig, this.treeConfig);
    },
    emptyOpts: function emptyOpts() {
      return Object.assign({}, _conf$p.default.table.emptyRender, this.emptyRender);
    },
    cellOffsetWidth: function cellOffsetWidth() {
      return this.border ? Math.max(2, Math.ceil(this.scrollbarWidth / this.tableColumn.length)) : 1;
    },
    customOpts: function customOpts() {
      return Object.assign({}, _conf$p.default.table.customConfig, this.customConfig);
    },
    tableBorder: function tableBorder() {
      var border = this.border;
      if (border === true) {
        return "full";
      }
      if (border) {
        return border;
      }
      return "default";
    },
    isAllCheckboxDisabled: function isAllCheckboxDisabled() {
      var tableFullData = this.tableFullData, tableData = this.tableData;
      this.treeConfig;
      var checkboxOpts2 = this.checkboxOpts;
      var strict = checkboxOpts2.strict, checkMethod = checkboxOpts2.checkMethod;
      if (strict) {
        if (tableData.length || tableFullData.length) {
          if (checkMethod) {
            return tableFullData.every(function(row) {
              return !checkMethod({
                row
              });
            });
          }
          return false;
        }
        return true;
      }
      return false;
    }
  },
  watch: {
    data: function data3(value6) {
      var _this = this;
      var inited = this.inited, initStatus = this.initStatus;
      this.loadTableData(value6).then(function() {
        _this.inited = true;
        _this.initStatus = true;
        if (!initStatus) {
          _this.handleLoadDefaults();
        }
        if (!inited) {
          _this.handleInitDefaults();
        }
        if ((_this.scrollXLoad || _this.scrollYLoad) && _this.expandColumn) {
          _tools$u.UtilTools.warn("vxe.error.scrollErrProp", ["column.type=expand"]);
        }
        _this.recalculate();
      });
    },
    staticColumns: function staticColumns(value6) {
      this.handleColumn(value6);
    },
    tableColumn: function tableColumn() {
      this.analyColumnWidth();
    },
    showHeader: function showHeader() {
      var _this2 = this;
      this.$nextTick(function() {
        _this2.recalculate(true).then(function() {
          return _this2.refreshScroll();
        });
      });
    },
    showFooter: function showFooter() {
      var _this3 = this;
      this.$nextTick(function() {
        _this3.recalculate(true).then(function() {
          return _this3.refreshScroll();
        });
      });
    },
    height: function height() {
      var _this4 = this;
      this.$nextTick(function() {
        return _this4.recalculate(true);
      });
    },
    maxHeight: function maxHeight() {
      var _this5 = this;
      this.$nextTick(function() {
        return _this5.recalculate(true);
      });
    },
    syncResize: function syncResize(value6) {
      var _this6 = this;
      if (value6) {
        handleUupdateResize(this);
        this.$nextTick(function() {
          handleUupdateResize(_this6);
          setTimeout(function() {
            return handleUupdateResize(_this6);
          });
        });
      }
    },
    mergeCells: function mergeCells(value6) {
      var _this7 = this;
      this.clearMergeCells();
      this.$nextTick(function() {
        return _this7.setMergeCells(value6);
      });
    },
    mergeFooterItems: function mergeFooterItems(value6) {
      var _this8 = this;
      this.clearMergeFooterItems();
      this.$nextTick(function() {
        return _this8.setMergeFooterItems(value6);
      });
    }
  },
  created: function created() {
    var _this9 = this;
    var _Object$assign = Object.assign(this, {
      tZindex: 0,
      elemStore: {},
      scrollXStore: {},
      scrollYStore: {},
      tooltipStore: {},
      tableWidth: 0,
      tableHeight: 0,
      headerHeight: 0,
      footerHeight: 0,
      lastScrollLeft: 0,
      lastScrollTop: 0,
      radioReserveRow: null,
      checkboxReserveRowMap: {},
      rowExpandedReserveRowMap: {},
      treeExpandedReserveRowMap: {},
      tableFullData: [],
      afterFullData: [],
      collectColumn: [],
      tableFullColumn: [],
      visibleColumn: [],
      fullAllDataRowMap: /* @__PURE__ */ new Map(),
      fullAllDataRowIdData: {},
      fullDataRowMap: /* @__PURE__ */ new Map(),
      fullDataRowIdData: {},
      fullColumnMap: /* @__PURE__ */ new Map(),
      fullColumnIdData: {},
      fullColumnFieldData: {}
    }), scrollXStore = _Object$assign.scrollXStore, sYOpts3 = _Object$assign.sYOpts, scrollYStore = _Object$assign.scrollYStore, data25 = _Object$assign.data;
    _Object$assign.editOpts;
    _Object$assign.treeOpts;
    _Object$assign.treeConfig;
    _Object$assign.showOverflow;
    Object.assign(scrollYStore, {
      startIndex: 0,
      endIndex: 1,
      visibleSize: 0,
      adaptive: sYOpts3.adaptive !== false
    });
    Object.assign(scrollXStore, {
      startIndex: 0,
      endIndex: 1,
      visibleSize: 0
    });
    this.loadTableData(data25).then(function() {
      if (data25 && data25.length) {
        _this9.inited = true;
        _this9.initStatus = true;
        _this9.handleLoadDefaults();
        _this9.handleInitDefaults();
      }
      _this9.updateStyle();
    });
    _tools$u.GlobalEvent.on(this, "paste", this.handleGlobalPasteEvent);
    _tools$u.GlobalEvent.on(this, "copy", this.handleGlobalCopyEvent);
    _tools$u.GlobalEvent.on(this, "cut", this.handleGlobalCutEvent);
    _tools$u.GlobalEvent.on(this, "mousedown", this.handleGlobalMousedownEvent);
    _tools$u.GlobalEvent.on(this, "blur", this.handleGlobalBlurEvent);
    _tools$u.GlobalEvent.on(this, "mousewheel", this.handleGlobalMousewheelEvent);
    _tools$u.GlobalEvent.on(this, "keydown", this.handleGlobalKeydownEvent);
    _tools$u.GlobalEvent.on(this, "resize", this.handleGlobalResizeEvent);
    _tools$u.GlobalEvent.on(this, "contextmenu", this.handleGlobalContextmenuEvent);
    this.preventEvent(null, "created");
  },
  mounted: function mounted2() {
    var _this10 = this;
    if (this.autoResize) {
      var resizeObserver = (0, _tools$u.createResizeEvent)(function() {
        return _this10.recalculate(true);
      });
      resizeObserver.observe(this.$el);
      resizeObserver.observe(this.getParentElem());
      this.$resize = resizeObserver;
    }
    this.preventEvent(null, "mounted");
  },
  activated: function activated() {
    var _this11 = this;
    this.recalculate().then(function() {
      return _this11.refreshScroll();
    });
    this.preventEvent(null, "activated");
  },
  deactivated: function deactivated() {
    this.preventEvent(null, "deactivated");
  },
  beforeDestroy: function beforeDestroy2() {
    if (this.$resize) {
      this.$resize.disconnect();
    }
    this.closeFilter();
    this.closeMenu();
    this.preventEvent(null, "beforeDestroy");
  },
  destroyed: function destroyed2() {
    _tools$u.GlobalEvent.off(this, "paste");
    _tools$u.GlobalEvent.off(this, "copy");
    _tools$u.GlobalEvent.off(this, "cut");
    _tools$u.GlobalEvent.off(this, "mousedown");
    _tools$u.GlobalEvent.off(this, "blur");
    _tools$u.GlobalEvent.off(this, "mousewheel");
    _tools$u.GlobalEvent.off(this, "keydown");
    _tools$u.GlobalEvent.off(this, "resize");
    _tools$u.GlobalEvent.off(this, "contextmenu");
    this.preventEvent(null, "destroyed");
  },
  render: function render2(h) {
    var _e = this._e, tId = this.tId, tableData = this.tableData, tableColumn3 = this.tableColumn, tableGroupColumn = this.tableGroupColumn, isGroup3 = this.isGroup, loading = this.loading, stripe = this.stripe, showHeader2 = this.showHeader, height3 = this.height, tableBorder2 = this.tableBorder, treeOpts2 = this.treeOpts, treeConfig = this.treeConfig, mouseConfig = this.mouseConfig, mouseOpts2 = this.mouseOpts, vSize8 = this.vSize, validOpts3 = this.validOpts, showFooter2 = this.showFooter, overflowX = this.overflowX, overflowY = this.overflowY, scrollXLoad = this.scrollXLoad, scrollYLoad = this.scrollYLoad, scrollbarHeight = this.scrollbarHeight, highlightCell = this.highlightCell, highlightHoverRow = this.highlightHoverRow, highlightHoverColumn = this.highlightHoverColumn, editConfig = this.editConfig, validTipOpts2 = this.validTipOpts, tooltipOpts3 = this.tooltipOpts, initStore = this.initStore, columnStore = this.columnStore, filterStore = this.filterStore, ctxMenuStore = this.ctxMenuStore, ctxMenuOpts2 = this.ctxMenuOpts, footerTableData = this.footerTableData, hasTip2 = this.hasTip, columnOpts2 = this.columnOpts, rowOpts2 = this.rowOpts;
    var leftList = columnStore.leftList, rightList = columnStore.rightList;
    return h("div", {
      class: ["vxe-table", "vxe-table--render-default", "tid_".concat(tId), vSize8 ? "size--".concat(vSize8) : "", "border--".concat(tableBorder2), {
        "vxe-editable": !!editConfig,
        "cell--highlight": highlightCell,
        "cell--selected": mouseConfig && mouseOpts2.selected,
        "cell--area": mouseConfig && mouseOpts2.area,
        "row--highlight": rowOpts2.isHover || highlightHoverRow,
        "column--highlight": columnOpts2.isHover || highlightHoverColumn,
        "is--header": showHeader2,
        "is--footer": showFooter2,
        "is--group": isGroup3,
        "is--tree-line": treeConfig && treeOpts2.line,
        "is--fixed-left": leftList.length,
        "is--fixed-right": rightList.length,
        "is--animat": !!this.animat,
        "is--round": this.round,
        "is--stripe": !treeConfig && stripe,
        "is--loading": loading,
        "is--empty": !loading && !tableData.length,
        "is--scroll-y": overflowY,
        "is--scroll-x": overflowX,
        "is--virtual-x": scrollXLoad,
        "is--virtual-y": scrollYLoad
      }],
      on: {
        keydown: this.keydownEvent
      }
    }, [
      h("div", {
        class: "vxe-table-slots",
        ref: "hideColumn"
      }, this.$slots.default),
      h("div", {
        class: "vxe-table--render-wrapper"
      }, [h("div", {
        class: "vxe-table--main-wrapper"
      }, [
        showHeader2 ? h("vxe-table-header", {
          ref: "tableHeader",
          props: {
            tableData,
            tableColumn: tableColumn3,
            tableGroupColumn,
            size: vSize8
          }
        }) : _e(),
        h("vxe-table-body", {
          ref: "tableBody",
          props: {
            tableData,
            tableColumn: tableColumn3,
            size: vSize8
          }
        }),
        showFooter2 ? h("vxe-table-footer", {
          ref: "tableFooter",
          props: {
            footerTableData,
            tableColumn: tableColumn3,
            size: vSize8
          }
        }) : _e()
      ]), h("div", {
        class: "vxe-table--fixed-wrapper"
      }, [
        leftList && leftList.length && overflowX ? renderFixed(h, this, "left") : _e(),
        rightList && rightList.length && overflowX ? renderFixed(h, this, "right") : _e()
      ])]),
      h("div", {
        ref: "emptyPlaceholder",
        class: "vxe-table--empty-placeholder"
      }, [h("div", {
        class: "vxe-table--empty-content"
      }, renderEmptyContenet(h, this))]),
      h("div", {
        class: "vxe-table--border-line"
      }),
      h("div", {
        class: "vxe-table--resizable-bar",
        style: overflowX ? {
          "padding-bottom": "".concat(scrollbarHeight, "px")
        } : null,
        ref: "resizeBar"
      }),
      h("div", {
        class: ["vxe-table--loading vxe-loading", {
          "is--visible": loading
        }]
      }, [h("div", {
        class: "vxe-loading--spinner"
      })]),
      initStore.filter ? h("vxe-table-filter", {
        ref: "filterWrapper",
        props: {
          filterStore
        }
      }) : _e(),
      initStore.import && this.importConfig ? h("vxe-import-panel", {
        props: {
          defaultOptions: this.importParams,
          storeData: this.importStore
        }
      }) : _e(),
      initStore.export && (this.exportConfig || this.printConfig) ? h("vxe-export-panel", {
        props: {
          defaultOptions: this.exportParams,
          storeData: this.exportStore
        }
      }) : _e(),
      ctxMenuStore.visible && this.isCtxMenu ? h("vxe-table-context-menu", {
        ref: "ctxWrapper",
        props: {
          ctxMenuStore,
          ctxMenuOpts: ctxMenuOpts2
        }
      }) : _e(),
      hasTip2 ? h("vxe-tooltip", {
        ref: "commTip",
        props: {
          isArrow: false,
          enterable: false
        }
      }) : _e(),
      hasTip2 ? h("vxe-tooltip", {
        ref: "tooltip",
        props: tooltipOpts3
      }) : _e(),
      hasTip2 && this.editRules && validOpts3.showMessage && (validOpts3.message === "default" ? !height3 : validOpts3.message === "tooltip") ? h("vxe-tooltip", {
        ref: "validTip",
        class: "vxe-table--valid-error",
        props: validOpts3.message === "tooltip" || tableData.length === 1 ? validTipOpts2 : null
      }) : _e()
    ]);
  },
  methods: _methods.default
};
table.default = _default2$i;
Object.defineProperty(table$1, "__esModule", {
  value: true
});
table$1.default = table$1.Table = void 0;
var _table$6 = _interopRequireDefault$1k(table);
var _body = _interopRequireDefault$1k(body);
var _vXETable$i = _interopRequireDefault$1k(vXETable);
function _interopRequireDefault$1k(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var Table = Object.assign(_table$6.default, {
  install: function install2(Vue2) {
    if (typeof window !== "undefined" && window.VXETableMixin) {
      _table$6.default.mixins.push(window.VXETableMixin);
      delete window.VXETableMixin;
    }
    _vXETable$i.default.Vue = Vue2;
    _vXETable$i.default.Table = _table$6.default;
    _vXETable$i.default.TableComponent = _table$6.default;
    if (!Vue2.prototype.$vxe) {
      Vue2.prototype.$vxe = {
        t: _vXETable$i.default.t,
        _t: _vXETable$i.default._t
      };
    } else {
      Vue2.prototype.$vxe.t = _vXETable$i.default.t;
      Vue2.prototype.$vxe._t = _vXETable$i.default._t;
    }
    Vue2.component(_table$6.default.name, _table$6.default);
    Vue2.component(_body.default.name, _body.default);
  }
});
table$1.Table = Table;
var _default$S = Table;
table$1.default = _default$S;
var panel$1 = {};
Object.defineProperty(panel$1, "__esModule", {
  value: true
});
panel$1.default = void 0;
var _conf$o = _interopRequireDefault$1j(conf);
var _vXETable$h = _interopRequireDefault$1j(vXETable);
var _tools$t = tools;
var _xeUtils$t = _interopRequireDefault$1j(xeUtils);
function _interopRequireDefault$1j(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var _default$R = {
  name: "VxeTableFilter",
  props: {
    filterStore: Object
  },
  computed: {
    hasCheckOption: function hasCheckOption() {
      var filterStore = this.filterStore;
      return filterStore && filterStore.options.some(function(option2) {
        return option2.checked;
      });
    }
  },
  render: function render3(h) {
    var $xetable = this.$parent, filterStore = this.filterStore;
    var column2 = filterStore.column;
    var filterRender = column2 ? column2.filterRender : null;
    var compConf = filterRender ? _vXETable$h.default.renderer.get(filterRender.name) : null;
    return h("div", {
      class: ["vxe-table--filter-wrapper", "filter--prevent-default", compConf && compConf.className ? compConf.className : "", {
        "is--animat": $xetable.animat,
        "is--multiple": filterStore.multiple,
        "is--active": filterStore.visible
      }],
      style: filterStore.style
    }, filterStore.visible ? this.renderOptions(h, filterRender, compConf).concat(this.renderFooter(h)) : []);
  },
  methods: {
    renderOptions: function renderOptions(h, filterRender, compConf) {
      var _this = this;
      var $xetable = this.$parent, filterStore = this.filterStore;
      var args = filterStore.args, column2 = filterStore.column, multiple = filterStore.multiple, maxHeight2 = filterStore.maxHeight;
      var slots = column2.slots;
      if (slots && slots.filter) {
        return [h("div", {
          class: "vxe-table--filter-template"
        }, $xetable.callSlot(slots.filter, Object.assign({
          $panel: this,
          context: this
        }, args), h))];
      } else if (compConf && compConf.renderFilter) {
        return [h("div", {
          class: "vxe-table--filter-template"
        }, compConf.renderFilter.call($xetable, h, filterRender, Object.assign({
          $panel: this,
          context: this
        }, args)))];
      }
      return [h("ul", {
        class: "vxe-table--filter-header"
      }, [h("li", {
        class: ["vxe-table--filter-option", {
          "is--checked": multiple ? filterStore.isAllSelected : !filterStore.options.some(function(item) {
            return item._checked;
          }),
          "is--indeterminate": multiple && filterStore.isIndeterminate
        }],
        attrs: {
          title: _conf$o.default.i18n(multiple ? "vxe.table.allTitle" : "vxe.table.allFilter")
        },
        on: {
          click: function click(evnt) {
            _this.changeAllOption(evnt, !filterStore.isAllSelected);
          }
        }
      }, (multiple ? [h("span", {
        class: "vxe-checkbox--icon vxe-checkbox--checked-icon"
      }), h("span", {
        class: "vxe-checkbox--icon vxe-checkbox--unchecked-icon"
      }), h("span", {
        class: "vxe-checkbox--icon vxe-checkbox--indeterminate-icon"
      })] : []).concat([h("span", {
        class: "vxe-checkbox--label"
      }, _conf$o.default.i18n("vxe.table.allFilter"))]))]), h("ul", {
        class: "vxe-table--filter-body",
        style: maxHeight2 ? {
          maxHeight: "".concat(maxHeight2, "px")
        } : {}
      }, filterStore.options.map(function(item) {
        return h("li", {
          class: ["vxe-table--filter-option", {
            "is--checked": item._checked
          }],
          attrs: {
            title: item.label
          },
          on: {
            click: function click(evnt) {
              _this.changeOption(evnt, !item._checked, item);
            }
          }
        }, (multiple ? [h("span", {
          class: "vxe-checkbox--icon vxe-checkbox--checked-icon"
        }), h("span", {
          class: "vxe-checkbox--icon vxe-checkbox--unchecked-icon"
        }), h("span", {
          class: "vxe-checkbox--icon vxe-checkbox--indeterminate-icon"
        })] : []).concat([h("span", {
          class: "vxe-checkbox--label"
        }, _tools$t.UtilTools.formatText(item.label, 1))]));
      }))];
    },
    renderFooter: function renderFooter(h) {
      var hasCheckOption2 = this.hasCheckOption, filterStore = this.filterStore;
      var column2 = filterStore.column, multiple = filterStore.multiple;
      var filterRender = column2.filterRender;
      var compConf = filterRender ? _vXETable$h.default.renderer.get(filterRender.name) : null;
      var isDisabled4 = !hasCheckOption2 && !filterStore.isAllSelected && !filterStore.isIndeterminate;
      return multiple && (!compConf || (_xeUtils$t.default.isBoolean(compConf.showFilterFooter) ? compConf.showFilterFooter !== false : compConf.isFooter !== false)) ? [h("div", {
        class: "vxe-table--filter-footer"
      }, [h("button", {
        class: {
          "is--disabled": isDisabled4
        },
        attrs: {
          disabled: isDisabled4
        },
        on: {
          click: this.confirmFilter
        }
      }, _conf$o.default.i18n("vxe.table.confirmFilter")), h("button", {
        on: {
          click: this.resetFilter
        }
      }, _conf$o.default.i18n("vxe.table.resetFilter"))])] : [];
    },
    filterCheckAllEvent: function filterCheckAllEvent(evnt, value6) {
      var filterStore = this.filterStore;
      filterStore.options.forEach(function(option2) {
        option2._checked = value6;
        option2.checked = value6;
      });
      filterStore.isAllSelected = value6;
      filterStore.isIndeterminate = false;
    },
    changeRadioOption: function changeRadioOption(evnt, checked, item) {
      var $xetable = this.$parent, filterStore = this.filterStore;
      filterStore.options.forEach(function(option2) {
        option2._checked = false;
      });
      item._checked = checked;
      $xetable.checkFilterOptions();
      this.confirmFilter(evnt);
    },
    changeMultipleOption: function changeMultipleOption(evnt, checked, item) {
      var $xetable = this.$parent;
      item._checked = checked;
      $xetable.checkFilterOptions();
    },
    changeAllOption: function changeAllOption(evnt, checked) {
      if (this.filterStore.multiple) {
        this.filterCheckAllEvent(evnt, checked);
      } else {
        this.resetFilter(evnt);
      }
    },
    changeOption: function changeOption(evnt, checked, item) {
      if (this.filterStore.multiple) {
        this.changeMultipleOption(evnt, checked, item);
      } else {
        this.changeRadioOption(evnt, checked, item);
      }
    },
    confirmFilter: function confirmFilter(evnt) {
      var $xetable = this.$parent, filterStore = this.filterStore;
      filterStore.options.forEach(function(option2) {
        option2.checked = option2._checked;
      });
      $xetable.confirmFilterEvent(evnt);
    },
    resetFilter: function resetFilter(evnt) {
      var $xetable = this.$parent;
      $xetable.resetFilterEvent(evnt);
    }
  }
};
panel$1.default = _default$R;
var mixin$5 = {};
Object.defineProperty(mixin$5, "__esModule", {
  value: true
});
mixin$5.default = void 0;
var _xeUtils$s = _interopRequireDefault$1i(xeUtils);
var _tools$s = tools;
var _util$8 = util$4;
var _vXETable$g = _interopRequireDefault$1i(vXETable);
function _interopRequireDefault$1i(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var _default$Q = {
  methods: {
    _openFilter: function _openFilter(fieldOrColumn) {
      var column2 = (0, _util$8.handleFieldOrColumn)(this, fieldOrColumn);
      if (column2 && column2.filters) {
        var elemStore = this.elemStore;
        var fixed = column2.fixed;
        return this.scrollToColumn(column2).then(function() {
          var headerWrapperElem = elemStore["".concat(fixed || "main", "-header-wrapper")] || elemStore["main-header-wrapper"];
          if (headerWrapperElem) {
            var filterBtnElem = headerWrapperElem.querySelector(".vxe-header--column.".concat(column2.id, " .vxe-filter--btn"));
            _tools$s.DomTools.triggerEvent(filterBtnElem, "click");
          }
        });
      }
      return this.$nextTick();
    },
    _setFilter: function _setFilter(fieldOrColumn, options2) {
      var column2 = (0, _util$8.handleFieldOrColumn)(this, fieldOrColumn);
      if (column2 && column2.filters && options2) {
        column2.filters = _tools$s.UtilTools.getFilters(options2);
      }
      return this.$nextTick();
    },
    checkFilterOptions: function checkFilterOptions() {
      var filterStore = this.filterStore;
      filterStore.isAllSelected = filterStore.options.every(function(item) {
        return item._checked;
      });
      filterStore.isIndeterminate = !filterStore.isAllSelected && filterStore.options.some(function(item) {
        return item._checked;
      });
    },
    triggerFilterEvent: function triggerFilterEvent(evnt, column2, params) {
      var _this = this;
      var filterStore = this.filterStore;
      if (filterStore.column === column2 && filterStore.visible) {
        filterStore.visible = false;
      } else {
        var targetElem = evnt.target, pageX = evnt.pageX;
        var filters = column2.filters, filterMultiple = column2.filterMultiple, filterRender = column2.filterRender;
        var compConf = filterRender ? _vXETable$g.default.renderer.get(filterRender.name) : null;
        var filterRecoverMethod = column2.filterRecoverMethod || (compConf ? compConf.filterRecoverMethod : null);
        var _DomTools$getDomNode = _tools$s.DomTools.getDomNode(), visibleWidth = _DomTools$getDomNode.visibleWidth;
        Object.assign(filterStore, {
          args: params,
          multiple: filterMultiple,
          options: filters,
          column: column2,
          style: null,
          visible: true
        });
        filterStore.options.forEach(function(option2) {
          var _checked = option2._checked, checked = option2.checked;
          option2._checked = checked;
          if (!checked && _checked !== checked) {
            if (filterRecoverMethod) {
              filterRecoverMethod({
                option: option2,
                column: column2,
                $table: _this
              });
            }
          }
        });
        this.checkFilterOptions();
        this.initStore.filter = true;
        this.$nextTick(function() {
          var $refs = _this.$refs;
          var bodyElem = $refs.tableBody.$el;
          var filterWrapperElem = $refs.filterWrapper.$el;
          var filterWidth = 0;
          var filterHeight = 0;
          var filterHeadElem = null;
          var filterFootElem = null;
          if (filterWrapperElem) {
            filterWidth = filterWrapperElem.offsetWidth;
            filterHeight = filterWrapperElem.offsetHeight;
            filterHeadElem = filterWrapperElem.querySelector(".vxe-table--filter-header");
            filterFootElem = filterWrapperElem.querySelector(".vxe-table--filter-footer");
          }
          var centerWidth = filterWidth / 2;
          var minMargin = 10;
          var maxLeft = bodyElem.clientWidth - filterWidth - minMargin;
          var left, right;
          var style2 = {
            top: "".concat(targetElem.offsetTop + targetElem.offsetParent.offsetTop + targetElem.offsetHeight + 8, "px")
          };
          var maxHeight2 = null;
          if (filterHeight >= bodyElem.clientHeight) {
            maxHeight2 = Math.max(60, bodyElem.clientHeight - (filterFootElem ? filterFootElem.offsetHeight : 0) - (filterHeadElem ? filterHeadElem.offsetHeight : 0));
          }
          if (column2.fixed === "left") {
            left = targetElem.offsetLeft + targetElem.offsetParent.offsetLeft - centerWidth;
          } else if (column2.fixed === "right") {
            right = targetElem.offsetParent.offsetWidth - targetElem.offsetLeft + (targetElem.offsetParent.offsetParent.offsetWidth - targetElem.offsetParent.offsetLeft) - column2.renderWidth - centerWidth;
          } else {
            left = targetElem.offsetLeft + targetElem.offsetParent.offsetLeft - centerWidth - bodyElem.scrollLeft;
          }
          if (left) {
            var overflowWidth = pageX + filterWidth - centerWidth + minMargin - visibleWidth;
            if (overflowWidth > 0) {
              left -= overflowWidth;
            }
            style2.left = "".concat(Math.min(maxLeft, Math.max(minMargin, left)), "px");
          } else if (right) {
            var _overflowWidth = pageX + filterWidth - centerWidth + minMargin - visibleWidth;
            if (_overflowWidth > 0) {
              right += _overflowWidth;
            }
            style2.right = "".concat(Math.max(minMargin, right), "px");
          }
          filterStore.style = style2;
          filterStore.maxHeight = maxHeight2;
        });
      }
      this.emitEvent("filter-visible", {
        column: column2,
        property: column2.property,
        filterList: this.getCheckedFilters(),
        visible: filterStore.visible
      }, evnt);
    },
    _getCheckedFilters: function _getCheckedFilters() {
      var tableFullColumn = this.tableFullColumn;
      var filterList = [];
      tableFullColumn.filter(function(column2) {
        var property2 = column2.property, filters = column2.filters;
        var valueList = [];
        var dataList = [];
        if (filters && filters.length) {
          filters.forEach(function(item) {
            if (item.checked) {
              valueList.push(item.value);
              dataList.push(item.data);
            }
          });
          if (valueList.length) {
            filterList.push({
              column: column2,
              property: property2,
              values: valueList,
              datas: dataList
            });
          }
        }
      });
      return filterList;
    },
    confirmFilterEvent: function confirmFilterEvent(evnt) {
      var _this2 = this;
      var filterStore = this.filterStore, filterOpts2 = this.filterOpts, oldScrollXLoad = this.scrollXLoad, oldScrollYLoad = this.scrollYLoad;
      var column2 = filterStore.column;
      var property2 = column2.property;
      var values2 = [];
      var datas = [];
      column2.filters.forEach(function(item) {
        if (item.checked) {
          values2.push(item.value);
          datas.push(item.data);
        }
      });
      var filterList = this.getCheckedFilters();
      if (!filterOpts2.remote) {
        this.handleTableData(true);
        this.checkSelectionStatus();
      }
      this.emitEvent("filter-change", {
        column: column2,
        property: property2,
        values: values2,
        datas,
        filters: filterList,
        filterList
      }, evnt);
      this.closeFilter();
      this.updateFooter().then(function() {
        var scrollXLoad = _this2.scrollXLoad, scrollYLoad = _this2.scrollYLoad;
        if (oldScrollXLoad || scrollXLoad || oldScrollYLoad || scrollYLoad) {
          if (oldScrollXLoad || scrollXLoad) {
            _this2.updateScrollXSpace();
          }
          if (oldScrollYLoad || scrollYLoad) {
            _this2.updateScrollYSpace();
          }
          return _this2.refreshScroll();
        }
      }).then(function() {
        _this2.updateCellAreas();
        return _this2.recalculate(true);
      }).then(function() {
        setTimeout(function() {
          return _this2.recalculate();
        }, 50);
      });
    },
    handleClearFilter: function handleClearFilter(column2) {
      if (column2) {
        var filters = column2.filters, filterRender = column2.filterRender;
        if (filters) {
          var compConf = filterRender ? _vXETable$g.default.renderer.get(filterRender.name) : null;
          var filterResetMethod = column2.filterResetMethod || (compConf ? compConf.filterResetMethod : null);
          filters.forEach(function(item) {
            item._checked = false;
            item.checked = false;
            if (!filterResetMethod) {
              item.data = _xeUtils$s.default.clone(item.resetValue, true);
            }
          });
          if (filterResetMethod) {
            filterResetMethod({
              options: filters,
              column: column2,
              $table: this
            });
          }
        }
      }
    },
    resetFilterEvent: function resetFilterEvent(evnt) {
      this.handleClearFilter(this.filterStore.column);
      this.confirmFilterEvent(evnt);
    },
    _clearFilter: function _clearFilter(fieldOrColumn) {
      var filterStore = this.filterStore;
      var column2;
      if (fieldOrColumn) {
        column2 = (0, _util$8.handleFieldOrColumn)(this, fieldOrColumn);
        if (column2) {
          this.handleClearFilter(column2);
        }
      } else {
        this.visibleColumn.forEach(this.handleClearFilter);
      }
      if (!fieldOrColumn || column2 !== filterStore.column) {
        Object.assign(filterStore, {
          isAllSelected: false,
          isIndeterminate: false,
          style: null,
          options: [],
          column: null,
          multiple: false,
          visible: false
        });
      }
      return this.updateData();
    }
  }
};
mixin$5.default = _default$Q;
Object.defineProperty(filter, "__esModule", {
  value: true
});
filter.default = filter.Filter = void 0;
var _table$5 = _interopRequireDefault$1h(table$1);
var _vXETable$f = _interopRequireDefault$1h(vXETable);
var _panel$1 = _interopRequireDefault$1h(panel$1);
var _mixin$4 = _interopRequireDefault$1h(mixin$5);
function _interopRequireDefault$1h(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var Filter = {
  Panel: _panel$1.default,
  install: function install3(Vue2) {
    _vXETable$f.default.reg("filter");
    _table$5.default.mixins.push(_mixin$4.default);
    Vue2.component(_panel$1.default.name, _panel$1.default);
  }
};
filter.Filter = Filter;
var _default$P = Filter;
filter.default = _default$P;
var menu = {};
var panel = {};
Object.defineProperty(panel, "__esModule", {
  value: true
});
panel.default = void 0;
var _tools$r = tools;
var _default$O = {
  name: "VxeTableContextMenu",
  props: {
    ctxMenuStore: Object,
    ctxMenuOpts: Object
  },
  mounted: function mounted3() {
    document.body.appendChild(this.$el);
  },
  beforeDestroy: function beforeDestroy3() {
    var $el = this.$el;
    if ($el.parentNode) {
      $el.parentNode.removeChild($el);
    }
  },
  render: function render4(h) {
    var $xetable = this.$parent;
    var _e = this._e, ctxMenuOpts2 = this.ctxMenuOpts, ctxMenuStore = this.ctxMenuStore;
    return h("div", {
      class: ["vxe-table--context-menu-wrapper", ctxMenuOpts2.className],
      style: ctxMenuStore.style
    }, ctxMenuStore.list.map(function(options2, gIndex) {
      return options2.every(function(item) {
        return item.visible === false;
      }) ? _e() : h("ul", {
        class: "vxe-context-menu--option-wrapper",
        key: gIndex
      }, options2.map(function(item, index2) {
        var hasChildMenus = item.children && item.children.some(function(child) {
          return child.visible !== false;
        });
        return item.visible === false ? null : h("li", {
          class: [item.className, {
            "link--disabled": item.disabled,
            "link--active": item === ctxMenuStore.selected
          }],
          key: "".concat(gIndex, "_").concat(index2)
        }, [h("a", {
          class: "vxe-context-menu--link",
          on: {
            click: function click(evnt) {
              $xetable.ctxMenuLinkEvent(evnt, item);
            },
            mouseover: function mouseover(evnt) {
              $xetable.ctxMenuMouseoverEvent(evnt, item);
            },
            mouseout: function mouseout(evnt) {
              $xetable.ctxMenuMouseoutEvent(evnt, item);
            }
          }
        }, [h("i", {
          class: ["vxe-context-menu--link-prefix", item.prefixIcon]
        }), h("span", {
          class: "vxe-context-menu--link-content"
        }, _tools$r.UtilTools.getFuncText(item.name)), h("i", {
          class: ["vxe-context-menu--link-suffix", hasChildMenus ? item.suffixIcon || "suffix--haschild" : item.suffixIcon]
        })]), hasChildMenus ? h("ul", {
          class: ["vxe-table--context-menu-clild-wrapper", {
            "is--show": item === ctxMenuStore.selected && ctxMenuStore.showChild
          }]
        }, item.children.map(function(child, cIndex) {
          return child.visible === false ? null : h("li", {
            class: [child.className, {
              "link--disabled": child.disabled,
              "link--active": child === ctxMenuStore.selectChild
            }],
            key: "".concat(gIndex, "_").concat(index2, "_").concat(cIndex)
          }, [h("a", {
            class: "vxe-context-menu--link",
            on: {
              click: function click(evnt) {
                $xetable.ctxMenuLinkEvent(evnt, child);
              },
              mouseover: function mouseover(evnt) {
                $xetable.ctxMenuMouseoverEvent(evnt, item, child);
              },
              mouseout: function mouseout(evnt) {
                $xetable.ctxMenuMouseoutEvent(evnt, item, child);
              }
            }
          }, [h("i", {
            class: ["vxe-context-menu--link-prefix", child.prefixIcon]
          }), h("span", {
            class: "vxe-context-menu--link-content"
          }, _tools$r.UtilTools.getFuncText(child.name))])]);
        })) : null]);
      }));
    }));
  }
};
panel.default = _default$O;
var mixin$4 = {};
Object.defineProperty(mixin$4, "__esModule", {
  value: true
});
mixin$4.default = void 0;
var _xeUtils$r = _interopRequireDefault$1g(xeUtils);
var _tools$q = tools;
var _vXETable$e = _interopRequireDefault$1g(vXETable);
function _interopRequireDefault$1g(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var _default$N = {
  methods: {
    _closeMenu: function _closeMenu() {
      Object.assign(this.ctxMenuStore, {
        visible: false,
        selected: null,
        selectChild: null,
        showChild: false
      });
      return this.$nextTick();
    },
    moveCtxMenu: function moveCtxMenu(evnt, keyCode, ctxMenuStore, property2, operKey, operRest, menuList) {
      var selectItem;
      var selectIndex = _xeUtils$r.default.findIndexOf(menuList, function(item) {
        return ctxMenuStore[property2] === item;
      });
      if (keyCode === operKey) {
        if (operRest && _tools$q.UtilTools.hasChildrenList(ctxMenuStore.selected)) {
          ctxMenuStore.showChild = true;
        } else {
          ctxMenuStore.showChild = false;
          ctxMenuStore.selectChild = null;
        }
      } else if (keyCode === 38) {
        for (var len = selectIndex - 1; len >= 0; len--) {
          if (menuList[len].visible !== false) {
            selectItem = menuList[len];
            break;
          }
        }
        ctxMenuStore[property2] = selectItem || menuList[menuList.length - 1];
      } else if (keyCode === 40) {
        for (var index2 = selectIndex + 1; index2 < menuList.length; index2++) {
          if (menuList[index2].visible !== false) {
            selectItem = menuList[index2];
            break;
          }
        }
        ctxMenuStore[property2] = selectItem || menuList[0];
      } else if (ctxMenuStore[property2] && (keyCode === 13 || keyCode === 32)) {
        this.ctxMenuLinkEvent(evnt, ctxMenuStore[property2]);
      }
    },
    handleGlobalContextmenuEvent: function handleGlobalContextmenuEvent(evnt) {
      var $refs = this.$refs, tId = this.tId, editStore = this.editStore, menuConfig = this.menuConfig, contextMenu = this.contextMenu, ctxMenuStore = this.ctxMenuStore, ctxMenuOpts2 = this.ctxMenuOpts, mouseConfig = this.mouseConfig, mouseOpts2 = this.mouseOpts;
      var selected = editStore.selected;
      var layoutList = ["header", "body", "footer"];
      if ((0, _tools$q.isEnableConf)(menuConfig) || contextMenu) {
        if (ctxMenuStore.visible && $refs.ctxWrapper && _tools$q.DomTools.getEventTargetNode(evnt, $refs.ctxWrapper.$el).flag) {
          evnt.preventDefault();
          return;
        }
        if (this._keyCtx) {
          var type3 = "body";
          var params = {
            type: type3,
            $grid: this.$xegrid,
            $table: this,
            keyboard: true,
            columns: this.visibleColumn.slice(0),
            $event: evnt
          };
          if (mouseConfig && mouseOpts2.area) {
            var activeArea = this.getActiveCellArea();
            if (activeArea && activeArea.row && activeArea.column) {
              params.row = activeArea.row;
              params.column = activeArea.column;
              this.openContextMenu(evnt, type3, params);
              return;
            }
          } else if (mouseConfig && mouseOpts2.selected) {
            if (selected.row && selected.column) {
              params.row = selected.row;
              params.column = selected.column;
              this.openContextMenu(evnt, type3, params);
              return;
            }
          }
        }
        for (var index2 = 0; index2 < layoutList.length; index2++) {
          var layout = layoutList[index2];
          var columnTargetNode = _tools$q.DomTools.getEventTargetNode(evnt, this.$el, "vxe-".concat(layout, "--column"), function(target2) {
            return target2.parentNode.parentNode.parentNode.getAttribute("xid") === tId;
          });
          var _params = {
            type: layout,
            $grid: this.$xegrid,
            $table: this,
            columns: this.visibleColumn.slice(0),
            $event: evnt
          };
          if (columnTargetNode.flag) {
            var cell2 = columnTargetNode.targetElem;
            var column2 = this.getColumnNode(cell2).item;
            var typePrefix = "".concat(layout, "-");
            Object.assign(_params, {
              column: column2,
              columnIndex: this.getColumnIndex(column2),
              cell: cell2
            });
            if (layout === "body") {
              var row = this.getRowNode(cell2.parentNode).item;
              typePrefix = "";
              _params.row = row;
              _params.rowIndex = this.getRowIndex(row);
            }
            this.openContextMenu(evnt, layout, _params);
            if (this.$listeners["".concat(typePrefix, "cell-context-menu")]) {
              this.emitEvent("".concat(typePrefix, "cell-context-menu"), _params, evnt);
            } else {
              this.emitEvent("".concat(typePrefix, "cell-menu"), _params, evnt);
            }
            return;
          } else if (_tools$q.DomTools.getEventTargetNode(evnt, this.$el, "vxe-table--".concat(layout, "-wrapper"), function(target2) {
            return target2.getAttribute("xid") === tId;
          }).flag) {
            if (ctxMenuOpts2.trigger === "cell") {
              evnt.preventDefault();
            } else {
              this.openContextMenu(evnt, layout, _params);
            }
            return;
          }
        }
      }
      if ($refs.filterWrapper && !_tools$q.DomTools.getEventTargetNode(evnt, $refs.filterWrapper.$el).flag) {
        this.closeFilter();
      }
      this.closeMenu();
    },
    openContextMenu: function openContextMenu(evnt, type3, params) {
      var _this = this;
      var isCtxMenu2 = this.isCtxMenu, ctxMenuStore = this.ctxMenuStore, ctxMenuOpts2 = this.ctxMenuOpts;
      var config2 = ctxMenuOpts2[type3];
      var visibleMethod = ctxMenuOpts2.visibleMethod;
      if (config2) {
        var options2 = config2.options, disabled = config2.disabled;
        if (disabled) {
          evnt.preventDefault();
        } else if (isCtxMenu2 && options2 && options2.length) {
          params.options = options2;
          this.preventEvent(evnt, "event.showMenu", params, function() {
            if (!visibleMethod || visibleMethod(params)) {
              evnt.preventDefault();
              _this.updateZindex();
              var _DomTools$getDomNode = _tools$q.DomTools.getDomNode(), scrollTop = _DomTools$getDomNode.scrollTop, scrollLeft = _DomTools$getDomNode.scrollLeft, visibleHeight = _DomTools$getDomNode.visibleHeight, visibleWidth = _DomTools$getDomNode.visibleWidth;
              var top = evnt.clientY + scrollTop;
              var left = evnt.clientX + scrollLeft;
              var handleVisible = function handleVisible2() {
                Object.assign(ctxMenuStore, {
                  args: params,
                  visible: true,
                  list: options2,
                  selected: null,
                  selectChild: null,
                  showChild: false,
                  style: {
                    zIndex: _this.tZindex,
                    top: "".concat(top, "px"),
                    left: "".concat(left, "px")
                  }
                });
                _this.$nextTick(function() {
                  var ctxElem = _this.$refs.ctxWrapper.$el;
                  var clientHeight = ctxElem.clientHeight;
                  var clientWidth = ctxElem.clientWidth;
                  var _DomTools$getAbsolute = _tools$q.DomTools.getAbsolutePos(ctxElem), boundingTop = _DomTools$getAbsolute.boundingTop, boundingLeft = _DomTools$getAbsolute.boundingLeft;
                  var offsetTop = boundingTop + clientHeight - visibleHeight;
                  var offsetLeft = boundingLeft + clientWidth - visibleWidth;
                  if (offsetTop > -10) {
                    ctxMenuStore.style.top = "".concat(Math.max(scrollTop + 2, top - clientHeight - 2), "px");
                  }
                  if (offsetLeft > -10) {
                    ctxMenuStore.style.left = "".concat(Math.max(scrollLeft + 2, left - clientWidth - 2), "px");
                  }
                });
              };
              var keyboard2 = params.keyboard, row = params.row, column2 = params.column;
              if (keyboard2 && row && column2) {
                _this.scrollToRow(row, column2).then(function() {
                  var cell2 = _this.getCell(row, column2);
                  var _DomTools$getAbsolute2 = _tools$q.DomTools.getAbsolutePos(cell2), boundingTop = _DomTools$getAbsolute2.boundingTop, boundingLeft = _DomTools$getAbsolute2.boundingLeft;
                  top = boundingTop + scrollTop + Math.floor(cell2.offsetHeight / 2);
                  left = boundingLeft + scrollLeft + Math.floor(cell2.offsetWidth / 2);
                  handleVisible();
                });
              } else {
                handleVisible();
              }
            } else {
              _this.closeMenu();
            }
          });
        }
      }
      this.closeFilter();
    },
    ctxMenuMouseoverEvent: function ctxMenuMouseoverEvent(evnt, item, child) {
      var menuElem = evnt.currentTarget;
      var ctxMenuStore = this.ctxMenuStore;
      evnt.preventDefault();
      evnt.stopPropagation();
      ctxMenuStore.selected = item;
      ctxMenuStore.selectChild = child;
      if (!child) {
        ctxMenuStore.showChild = _tools$q.UtilTools.hasChildrenList(item);
        if (ctxMenuStore.showChild) {
          this.$nextTick(function() {
            var childWrapperElem = menuElem.nextElementSibling;
            if (childWrapperElem) {
              var _DomTools$getAbsolute3 = _tools$q.DomTools.getAbsolutePos(menuElem), boundingTop = _DomTools$getAbsolute3.boundingTop, boundingLeft = _DomTools$getAbsolute3.boundingLeft, visibleHeight = _DomTools$getAbsolute3.visibleHeight, visibleWidth = _DomTools$getAbsolute3.visibleWidth;
              var posTop = boundingTop + menuElem.offsetHeight;
              var posLeft = boundingLeft + menuElem.offsetWidth;
              var left = "";
              var right = "";
              if (posLeft + childWrapperElem.offsetWidth > visibleWidth - 10) {
                left = "auto";
                right = "".concat(menuElem.offsetWidth, "px");
              }
              var top = "";
              var bottom = "";
              if (posTop + childWrapperElem.offsetHeight > visibleHeight - 10) {
                top = "auto";
                bottom = "0";
              }
              childWrapperElem.style.left = left;
              childWrapperElem.style.right = right;
              childWrapperElem.style.top = top;
              childWrapperElem.style.bottom = bottom;
            }
          });
        }
      }
    },
    ctxMenuMouseoutEvent: function ctxMenuMouseoutEvent(evnt, item) {
      var ctxMenuStore = this.ctxMenuStore;
      if (!item.children) {
        ctxMenuStore.selected = null;
      }
      ctxMenuStore.selectChild = null;
    },
    ctxMenuLinkEvent: function ctxMenuLinkEvent(evnt, menu2) {
      if (!menu2.disabled && (menu2.code || !menu2.children || !menu2.children.length)) {
        var ctxMenuMethod = _vXETable$e.default.menus.get(menu2.code);
        var params = Object.assign({
          menu: menu2,
          $grid: this.$xegrid,
          $table: this,
          $event: evnt
        }, this.ctxMenuStore.args);
        if (ctxMenuMethod) {
          ctxMenuMethod.call(this, params, evnt);
        }
        if (this.$listeners["context-menu-click"]) {
          this.emitEvent("context-menu-click", params, evnt);
        } else {
          this.emitEvent("menu-click", params, evnt);
        }
        this.closeMenu();
      }
    }
  }
};
mixin$4.default = _default$N;
Object.defineProperty(menu, "__esModule", {
  value: true
});
menu.default = menu.Menu = void 0;
var _table$4 = _interopRequireDefault$1f(table$1);
var _vXETable$d = _interopRequireDefault$1f(vXETable);
var _panel = _interopRequireDefault$1f(panel);
var _mixin$3 = _interopRequireDefault$1f(mixin$4);
function _interopRequireDefault$1f(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var Menu = {
  Panel: _panel.default,
  install: function install4(Vue2) {
    _vXETable$d.default.reg("menu");
    _table$4.default.mixins.push(_mixin$3.default);
    Vue2.component(_panel.default.name, _panel.default);
  }
};
menu.Menu = Menu;
var _default$M = Menu;
menu.default = _default$M;
var edit = {};
var mixin$3 = {};
Object.defineProperty(mixin$3, "__esModule", {
  value: true
});
mixin$3.default = void 0;
var _xeUtils$q = _interopRequireDefault$1e(xeUtils);
var _vXETable$c = _interopRequireDefault$1e(vXETable);
var _tools$p = tools;
var _dom$a = dom$1;
function _interopRequireDefault$1e(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
function ownKeys$4(object3, enumerableOnly) {
  var keys3 = Object.keys(object3);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object3);
    if (enumerableOnly) {
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object3, sym).enumerable;
      });
    }
    keys3.push.apply(keys3, symbols);
  }
  return keys3;
}
function _objectSpread$4(target2) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys$4(Object(source), true).forEach(function(key) {
        _defineProperty$i(target2, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target2, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys$4(Object(source)).forEach(function(key) {
        Object.defineProperty(target2, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target2;
}
function _defineProperty$i(obj, key, value6) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value: value6, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value6;
  }
  return obj;
}
function _toConsumableArray$4(arr) {
  return _arrayWithoutHoles$4(arr) || _iterableToArray$4(arr) || _unsupportedIterableToArray$4(arr) || _nonIterableSpread$4();
}
function _nonIterableSpread$4() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$4(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$4(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$4(o, minLen);
}
function _iterableToArray$4(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _arrayWithoutHoles$4(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray$4(arr);
}
function _arrayLikeToArray$4(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
var getRowid3 = _tools$p.UtilTools.getRowid;
function insertTreeRow(_vm, newRecords, isAppend) {
  var tableFullTreeData = _vm.tableFullTreeData, afterFullData = _vm.afterFullData, fullDataRowIdData = _vm.fullDataRowIdData, fullAllDataRowIdData = _vm.fullAllDataRowIdData, treeOpts2 = _vm.treeOpts;
  var rowField = treeOpts2.rowField, parentField = treeOpts2.parentField, children = treeOpts2.children, mapChildren = treeOpts2.mapChildren;
  var funcName = isAppend ? "push" : "unshift";
  newRecords.forEach(function(item) {
    var parentRowId = item[parentField];
    var rowid = getRowid3(_vm, item);
    var matchObj = parentRowId ? _xeUtils$q.default.findTree(tableFullTreeData, function(item2) {
      return parentRowId === item2[rowField];
    }, {
      children: mapChildren
    }) : null;
    if (matchObj) {
      var parentRow = matchObj.item;
      var parentRest = fullAllDataRowIdData[getRowid3(_vm, parentRow)];
      var parentLevel = parentRest ? parentRest.level : 0;
      var parentChilds = parentRow[children];
      if (!_xeUtils$q.default.isArray(parentChilds)) {
        parentChilds = parentRow[children] = [];
      }
      parentChilds[funcName](item);
      var rest = {
        row: item,
        rowid,
        seq: -1,
        index: -1,
        _index: -1,
        $index: -1,
        items: parentChilds,
        parent,
        level: parentLevel + 1
      };
      fullDataRowIdData[rowid] = rest;
      fullAllDataRowIdData[rowid] = rest;
    } else {
      afterFullData[funcName](item);
      tableFullTreeData[funcName](item);
      var _rest = {
        row: item,
        rowid,
        seq: -1,
        index: -1,
        _index: -1,
        $index: -1,
        items: tableFullTreeData,
        parent: null,
        level: 0
      };
      fullDataRowIdData[rowid] = _rest;
      fullAllDataRowIdData[rowid] = _rest;
    }
  });
}
var _default$L = {
  methods: {
    _insert: function _insert(records) {
      return this.insertAt(records);
    },
    _insertAt: function _insertAt(records, row) {
      var _this = this, _editStore$insertList;
      var tableFullTreeData = this.tableFullTreeData, mergeList = this.mergeList, afterFullData = this.afterFullData, editStore = this.editStore, tableFullData = this.tableFullData, treeConfig = this.treeConfig, fullDataRowIdData = this.fullDataRowIdData, fullAllDataRowIdData = this.fullAllDataRowIdData, treeOpts2 = this.treeOpts;
      var transform = treeOpts2.transform, rowField = treeOpts2.rowField, mapChildren = treeOpts2.mapChildren;
      if (!_xeUtils$q.default.isArray(records)) {
        records = [records];
      }
      var newRecords = records.map(function(record) {
        return _this.defineField(Object.assign({}, record));
      });
      if (!row) {
        if (treeConfig && transform) {
          insertTreeRow(this, newRecords, false);
        } else {
          afterFullData.unshift.apply(afterFullData, _toConsumableArray$4(newRecords));
          tableFullData.unshift.apply(tableFullData, _toConsumableArray$4(newRecords));
          mergeList.forEach(function(mergeItem) {
            var mergeRowIndex = mergeItem.row;
            if (mergeRowIndex > 0) {
              mergeItem.row = mergeRowIndex + newRecords.length;
            }
          });
        }
      } else {
        if (row === -1) {
          if (treeConfig && transform) {
            insertTreeRow(this, newRecords, true);
          } else {
            afterFullData.push.apply(afterFullData, _toConsumableArray$4(newRecords));
            tableFullData.push.apply(tableFullData, _toConsumableArray$4(newRecords));
            mergeList.forEach(function(mergeItem) {
              var mergeRowIndex = mergeItem.row, mergeRowspan = mergeItem.rowspan;
              if (mergeRowIndex + mergeRowspan > afterFullData.length) {
                mergeItem.rowspan = mergeRowspan + newRecords.length;
              }
            });
          }
        } else {
          if (treeConfig && transform) {
            var matchObj = _xeUtils$q.default.findTree(tableFullTreeData, function(item) {
              return row[rowField] === item[rowField];
            }, {
              children: mapChildren
            });
            if (matchObj) {
              var parentRow = matchObj.parent;
              var parentChilds = matchObj.items;
              var parentRest = fullAllDataRowIdData[getRowid3(this, parentRow)];
              var parentLevel = parentRest ? parentRest.level : 0;
              newRecords.forEach(function(item, i) {
                var rowid = getRowid3(_this, item);
                if (parentRow) {
                  item[treeOpts2.parentField] = parentRow[rowField];
                }
                parentChilds.splice(matchObj.index + i, 0, item);
                var rest = {
                  row: item,
                  rowid,
                  seq: -1,
                  index: -1,
                  _index: -1,
                  $index: -1,
                  items: parentChilds,
                  parent: parentRow,
                  level: parentLevel + 1
                };
                fullDataRowIdData[rowid] = rest;
                fullAllDataRowIdData[rowid] = rest;
              });
            } else {
              insertTreeRow(this, newRecords, true);
            }
          } else {
            if (treeConfig) {
              throw new Error(_tools$p.UtilTools.getLog("vxe.error.noTree", ["insert"]));
            }
            var afIndex = -1;
            if (_xeUtils$q.default.isNumber(row)) {
              if (row < afterFullData.length) {
                afIndex = row;
              }
            } else {
              afIndex = afterFullData.indexOf(row);
            }
            if (afIndex === -1) {
              throw new Error(_tools$p.UtilTools.error("vxe.error.unableInsert"));
            }
            afterFullData.splice.apply(afterFullData, [afIndex, 0].concat(_toConsumableArray$4(newRecords)));
            tableFullData.splice.apply(tableFullData, [tableFullData.indexOf(row), 0].concat(_toConsumableArray$4(newRecords)));
            mergeList.forEach(function(mergeItem) {
              var mergeRowIndex = mergeItem.row, mergeRowspan = mergeItem.rowspan;
              if (mergeRowIndex > afIndex) {
                mergeItem.row = mergeRowIndex + newRecords.length;
              } else if (mergeRowIndex + mergeRowspan > afIndex) {
                mergeItem.rowspan = mergeRowspan + newRecords.length;
              }
            });
          }
        }
      }
      (_editStore$insertList = editStore.insertList).unshift.apply(_editStore$insertList, _toConsumableArray$4(newRecords));
      this.handleTableData(treeConfig && transform);
      if (!(treeConfig && transform)) {
        this.updateAfterDataIndex();
      }
      this.updateFooter();
      this.cacheRowMap();
      this.checkSelectionStatus();
      if (this.scrollYLoad) {
        this.updateScrollYSpace();
      }
      return this.$nextTick().then(function() {
        _this.updateCellAreas();
        return _this.recalculate();
      }).then(function() {
        return {
          row: newRecords.length ? newRecords[newRecords.length - 1] : null,
          rows: newRecords
        };
      });
    },
    _remove: function _remove(rows) {
      var _this2 = this;
      var afterFullData = this.afterFullData, tableFullData = this.tableFullData, tableFullTreeData = this.tableFullTreeData, treeConfig = this.treeConfig, mergeList = this.mergeList, editStore = this.editStore, checkboxOpts2 = this.checkboxOpts, selection = this.selection, isInsertByRow2 = this.isInsertByRow, treeOpts2 = this.treeOpts;
      var transform = treeOpts2.transform;
      var actived = editStore.actived, removeList = editStore.removeList, insertList = editStore.insertList;
      var property2 = checkboxOpts2.checkField;
      var rest = [];
      if (!rows) {
        rows = tableFullData;
      } else if (!_xeUtils$q.default.isArray(rows)) {
        rows = [rows];
      }
      rows.forEach(function(row) {
        if (!isInsertByRow2(row)) {
          removeList.push(row);
        }
      });
      if (!property2) {
        rows.forEach(function(row) {
          var sIndex = selection.indexOf(row);
          if (sIndex > -1) {
            selection.splice(sIndex, 1);
          }
        });
      }
      if (tableFullData === rows) {
        rows = rest = tableFullData.slice(0);
        this.tableFullData = [];
        this.afterFullData = [];
        this.clearMergeCells();
      } else {
        if (treeConfig && transform) {
          rows.forEach(function(row) {
            var rowid = getRowid3(_this2, row);
            var matchObj = _xeUtils$q.default.findTree(tableFullTreeData, function(item) {
              return rowid === getRowid3(_this2, item);
            }, treeOpts2);
            if (matchObj) {
              var rItems = matchObj.items.splice(matchObj.index, 1);
              rest.push(rItems[0]);
            }
            var afIndex = afterFullData.indexOf(row);
            if (afIndex > -1) {
              afterFullData.splice(afIndex, 1);
            }
          });
        } else {
          rows.forEach(function(row) {
            var tfIndex = tableFullData.indexOf(row);
            if (tfIndex > -1) {
              var rItems = tableFullData.splice(tfIndex, 1);
              rest.push(rItems[0]);
            }
            var afIndex = afterFullData.indexOf(row);
            if (afIndex > -1) {
              mergeList.forEach(function(mergeItem) {
                var mergeRowIndex = mergeItem.row, mergeRowspan = mergeItem.rowspan;
                if (mergeRowIndex > afIndex) {
                  mergeItem.row = mergeRowIndex - 1;
                } else if (mergeRowIndex + mergeRowspan > afIndex) {
                  mergeItem.rowspan = mergeRowspan - 1;
                }
              });
              afterFullData.splice(afIndex, 1);
            }
          });
        }
      }
      if (actived.row && rows.indexOf(actived.row) > -1) {
        this.clearActived();
      }
      rows.forEach(function(row) {
        var iIndex = insertList.indexOf(row);
        if (iIndex > -1) {
          insertList.splice(iIndex, 1);
        }
      });
      this.handleTableData(treeConfig && transform);
      if (!(treeConfig && transform)) {
        this.updateAfterDataIndex();
      }
      this.updateFooter();
      this.cacheRowMap();
      this.checkSelectionStatus();
      if (this.scrollYLoad) {
        this.updateScrollYSpace();
      }
      return this.$nextTick().then(function() {
        _this2.updateCellAreas();
        return _this2.recalculate();
      }).then(function() {
        return {
          row: rest.length ? rest[rest.length - 1] : null,
          rows: rest
        };
      });
    },
    _removeCheckboxRow: function _removeCheckboxRow() {
      var _this3 = this;
      return this.remove(this.getCheckboxRecords()).then(function(params) {
        _this3.clearCheckboxRow();
        return params;
      });
    },
    _removeRadioRow: function _removeRadioRow() {
      var _this4 = this;
      var radioRecord = this.getRadioRecord();
      return this.remove(radioRecord || []).then(function(params) {
        _this4.clearRadioRow();
        return params;
      });
    },
    _removeCurrentRow: function _removeCurrentRow() {
      var _this5 = this;
      var currentRecord = this.getCurrentRecord();
      return this.remove(currentRecord || []).then(function(params) {
        _this5.clearCurrentRow();
        return params;
      });
    },
    _getRecordset: function _getRecordset() {
      return {
        insertRecords: this.getInsertRecords(),
        removeRecords: this.getRemoveRecords(),
        updateRecords: this.getUpdateRecords()
      };
    },
    _getInsertRecords: function _getInsertRecords() {
      var _this6 = this;
      var treeConfig = this.treeConfig, tableFullTreeData = this.tableFullTreeData, tableFullData = this.tableFullData, treeOpts2 = this.treeOpts;
      var insertList = this.editStore.insertList;
      var insertRecords = [];
      if (insertList.length) {
        if (treeConfig && treeOpts2.transform) {
          insertList.forEach(function(row) {
            var rowid = getRowid3(_this6, row);
            var matchObj = _xeUtils$q.default.findTree(tableFullTreeData, function(item) {
              return rowid === getRowid3(_this6, item);
            }, treeOpts2);
            if (matchObj) {
              insertRecords.push(row);
            }
          });
        } else {
          insertList.forEach(function(row) {
            if (tableFullData.indexOf(row) > -1) {
              insertRecords.push(row);
            }
          });
        }
      }
      return insertRecords;
    },
    _getRemoveRecords: function _getRemoveRecords() {
      return this.editStore.removeList;
    },
    _getUpdateRecords: function _getUpdateRecords() {
      var keepSource = this.keepSource, tableFullData = this.tableFullData, isUpdateByRow2 = this.isUpdateByRow, treeConfig = this.treeConfig, treeOpts2 = this.treeOpts, editStore = this.editStore;
      if (keepSource) {
        var actived = editStore.actived;
        var row = actived.row, column2 = actived.column;
        if (row || column2) {
          this._syncActivedCell();
        }
        if (treeConfig) {
          return _xeUtils$q.default.filterTree(tableFullData, function(row2) {
            return isUpdateByRow2(row2);
          }, treeOpts2);
        }
        return tableFullData.filter(function(row2) {
          return isUpdateByRow2(row2);
        });
      }
      return [];
    },
    handleActived: function handleActived(params, evnt) {
      var _this7 = this;
      var editStore = this.editStore, editOpts2 = this.editOpts, tableColumn3 = this.tableColumn, editConfig = this.editConfig, mouseConfig = this.mouseConfig;
      var mode = editOpts2.mode, activeMethod = editOpts2.activeMethod;
      var actived = editStore.actived;
      var row = params.row, column2 = params.column;
      var editRender = column2.editRender;
      var cell2 = params.cell = params.cell || this.getCell(row, column2);
      if ((0, _tools$p.isEnableConf)(editConfig) && (0, _tools$p.isEnableConf)(editRender) && cell2) {
        if (actived.row !== row || (mode === "cell" ? actived.column !== column2 : false)) {
          var type3 = "edit-disabled";
          if (!activeMethod || activeMethod(_objectSpread$4(_objectSpread$4({}, params), {}, {
            $table: this
          }))) {
            if (mouseConfig) {
              this.clearSelected(evnt);
              this.clearCellAreas(evnt);
              this.clearCopyCellArea(evnt);
            }
            this.closeTooltip();
            this.clearActived(evnt);
            type3 = "edit-actived";
            column2.renderHeight = cell2.offsetHeight;
            actived.args = params;
            actived.row = row;
            actived.column = column2;
            if (mode === "row") {
              tableColumn3.forEach(function(column3) {
                return _this7._getColumnModel(row, column3);
              });
            } else {
              this._getColumnModel(row, column2);
            }
            this.$nextTick(function() {
              _this7.handleFocus(params, evnt);
            });
          }
          this.emitEvent(type3, {
            row,
            rowIndex: this.getRowIndex(row),
            $rowIndex: this.getVMRowIndex(row),
            column: column2,
            columnIndex: this.getColumnIndex(column2),
            $columnIndex: this.getVMColumnIndex(column2)
          }, evnt);
        } else {
          var oldColumn = actived.column;
          if (mouseConfig) {
            this.clearSelected(evnt);
            this.clearCellAreas(evnt);
            this.clearCopyCellArea(evnt);
          }
          if (oldColumn !== column2) {
            var oldModel = oldColumn.model;
            if (oldModel.update) {
              _tools$p.UtilTools.setCellValue(row, oldColumn, oldModel.value);
            }
            this.clearValidate();
          }
          column2.renderHeight = cell2.offsetHeight;
          actived.args = params;
          actived.column = column2;
          setTimeout(function() {
            _this7.handleFocus(params, evnt);
          });
        }
        this.focus();
      }
      return this.$nextTick();
    },
    _getColumnModel: function _getColumnModel(row, column2) {
      var model = column2.model, editRender = column2.editRender;
      if (editRender) {
        model.value = _tools$p.UtilTools.getCellValue(row, column2);
        model.update = false;
      }
    },
    _setColumnModel: function _setColumnModel(row, column2) {
      var model = column2.model, editRender = column2.editRender;
      if (editRender && model.update) {
        _tools$p.UtilTools.setCellValue(row, column2, model.value);
        model.update = false;
        model.value = null;
      }
    },
    _syncActivedCell: function _syncActivedCell() {
      var _this8 = this;
      var tableColumn3 = this.tableColumn, editStore = this.editStore, editOpts2 = this.editOpts;
      var actived = editStore.actived;
      var row = actived.row, column2 = actived.column;
      if (row || column2) {
        if (editOpts2.mode === "row") {
          tableColumn3.forEach(function(column3) {
            return _this8._setColumnModel(row, column3);
          });
        } else {
          this._setColumnModel(row, column2);
        }
      }
    },
    _clearActived: function _clearActived(evnt) {
      var editStore = this.editStore;
      var actived = editStore.actived;
      var row = actived.row, column2 = actived.column;
      if (row || column2) {
        this._syncActivedCell();
        actived.args = null;
        actived.row = null;
        actived.column = null;
        this.updateFooter();
        this.emitEvent("edit-closed", {
          row,
          rowIndex: this.getRowIndex(row),
          $rowIndex: this.getVMRowIndex(row),
          column: column2,
          columnIndex: this.getColumnIndex(column2),
          $columnIndex: this.getVMColumnIndex(column2)
        }, evnt);
      }
      return (_vXETable$c.default._valid ? this.clearValidate() : this.$nextTick()).then(this.recalculate);
    },
    _getActiveRecord: function _getActiveRecord() {
      var $el = this.$el, editStore = this.editStore, afterFullData = this.afterFullData;
      var actived = editStore.actived;
      var args = actived.args, row = actived.row;
      if (args && afterFullData.indexOf(row) > -1 && $el.querySelectorAll(".vxe-body--column.col--actived").length) {
        return Object.assign({}, args);
      }
      return null;
    },
    _isActiveByRow: function _isActiveByRow(row) {
      return this.editStore.actived.row === row;
    },
    handleFocus: function handleFocus(params) {
      var row = params.row, column2 = params.column, cell2 = params.cell;
      var editRender = column2.editRender;
      if ((0, _tools$p.isEnableConf)(editRender)) {
        var compRender = _vXETable$c.default.renderer.get(editRender.name);
        var autofocus = editRender.autofocus, autoselect = editRender.autoselect;
        var inputElem;
        if (autofocus) {
          inputElem = cell2.querySelector(autofocus);
        }
        if (!inputElem && compRender && compRender.autofocus) {
          inputElem = cell2.querySelector(compRender.autofocus);
        }
        if (inputElem) {
          inputElem.focus();
          if (autoselect) {
            inputElem.select();
          } else {
            if (_dom$a.browse.msie) {
              var textRange = inputElem.createTextRange();
              textRange.collapse(false);
              textRange.select();
            }
          }
        } else {
          this.scrollToRow(row, column2);
        }
      }
    },
    _setActiveRow: function _setActiveRow(row) {
      return this.setActiveCell(row, _xeUtils$q.default.find(this.visibleColumn, function(column2) {
        return (0, _tools$p.isEnableConf)(column2.editRender);
      }));
    },
    _setActiveCell: function _setActiveCell(row, fieldOrColumn) {
      var _this9 = this;
      var editConfig = this.editConfig;
      var column2 = _xeUtils$q.default.isString(fieldOrColumn) ? this.getColumnByField(fieldOrColumn) : fieldOrColumn;
      if (row && column2 && (0, _tools$p.isEnableConf)(editConfig) && (0, _tools$p.isEnableConf)(column2.editRender)) {
        return this.scrollToRow(row, true).then(function() {
          var cell2 = _this9.getCell(row, column2);
          if (cell2) {
            _this9.handleActived({
              row,
              rowIndex: _this9.getRowIndex(row),
              column: column2,
              columnIndex: _this9.getColumnIndex(column2),
              cell: cell2,
              $table: _this9
            });
            _this9.lastCallTime = Date.now();
          }
        });
      }
      return this.$nextTick();
    },
    _setSelectCell: function _setSelectCell(row, fieldOrColumn) {
      var tableData = this.tableData, editOpts2 = this.editOpts, visibleColumn = this.visibleColumn;
      var column2 = _xeUtils$q.default.isString(fieldOrColumn) ? this.getColumnByField(fieldOrColumn) : fieldOrColumn;
      if (row && column2 && editOpts2.trigger !== "manual") {
        var rowIndex = tableData.indexOf(row);
        if (rowIndex > -1) {
          var cell2 = this.getCell(row, column2);
          var params = {
            row,
            rowIndex,
            column: column2,
            columnIndex: visibleColumn.indexOf(column2),
            cell: cell2
          };
          this.handleSelected(params, {});
        }
      }
      return this.$nextTick();
    },
    handleSelected: function handleSelected(params, evnt) {
      var _this10 = this;
      var mouseConfig = this.mouseConfig, mouseOpts2 = this.mouseOpts, editOpts2 = this.editOpts, editStore = this.editStore;
      var actived = editStore.actived, selected = editStore.selected;
      var row = params.row, column2 = params.column;
      var isMouseSelected = mouseConfig && mouseOpts2.selected;
      var selectMethod = function selectMethod2() {
        if (isMouseSelected && (selected.row !== row || selected.column !== column2)) {
          if (actived.row !== row || (editOpts2.mode === "cell" ? actived.column !== column2 : false)) {
            _this10.clearActived(evnt);
            _this10.clearSelected(evnt);
            _this10.clearCellAreas(evnt);
            _this10.clearCopyCellArea(evnt);
            selected.args = params;
            selected.row = row;
            selected.column = column2;
            if (isMouseSelected) {
              _this10.addColSdCls();
            }
            _this10.focus();
            if (evnt) {
              _this10.emitEvent("cell-selected", params, evnt);
            }
          }
        }
        return _this10.$nextTick();
      };
      return selectMethod();
    },
    _getSelectedCell: function _getSelectedCell() {
      var _this$editStore$selec = this.editStore.selected, args = _this$editStore$selec.args, column2 = _this$editStore$selec.column;
      if (args && column2) {
        return Object.assign({}, args);
      }
      return null;
    },
    _clearSelected: function _clearSelected() {
      var selected = this.editStore.selected;
      selected.row = null;
      selected.column = null;
      this.reColTitleSdCls();
      this.reColSdCls();
      return this.$nextTick();
    },
    reColTitleSdCls: function reColTitleSdCls() {
      var headerElem = this.elemStore["main-header-list"];
      if (headerElem) {
        _xeUtils$q.default.arrayEach(headerElem.querySelectorAll(".col--title-selected"), function(elem) {
          return _tools$p.DomTools.removeClass(elem, "col--title-selected");
        });
      }
    },
    reColSdCls: function reColSdCls() {
      var cell2 = this.$el.querySelector(".col--selected");
      if (cell2) {
        _tools$p.DomTools.removeClass(cell2, "col--selected");
      }
    },
    addColSdCls: function addColSdCls() {
      var selected = this.editStore.selected;
      var row = selected.row, column2 = selected.column;
      this.reColSdCls();
      if (row && column2) {
        var cell2 = this.getCell(row, column2);
        if (cell2) {
          _tools$p.DomTools.addClass(cell2, "col--selected");
        }
      }
    }
  }
};
mixin$3.default = _default$L;
Object.defineProperty(edit, "__esModule", {
  value: true
});
edit.default = edit.Edit = void 0;
var _table$3 = _interopRequireDefault$1d(table$1);
var _mixin$2 = _interopRequireDefault$1d(mixin$3);
var _vXETable$b = _interopRequireDefault$1d(vXETable);
function _interopRequireDefault$1d(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var Edit = {
  install: function install5() {
    _vXETable$b.default.reg("edit");
    _table$3.default.mixins.push(_mixin$2.default);
  }
};
edit.Edit = Edit;
var _default$K = Edit;
edit.default = _default$K;
var _export$1 = {};
var exportPanel = {};
var modal$2 = {};
Object.defineProperty(modal$2, "__esModule", {
  value: true
});
modal$2.msgQueue = modal$2.default = modal$2.allActivedModals = void 0;
var _conf$n = _interopRequireDefault$1c(conf);
var _size$e = _interopRequireDefault$1c(size);
var _xeUtils$p = _interopRequireDefault$1c(xeUtils);
var _tools$o = tools;
function _interopRequireDefault$1c(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray$3(arr, i) || _nonIterableRest();
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$3(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$3(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$3(o, minLen);
}
function _arrayLikeToArray$3(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _defineProperty$h(obj, key, value6) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value: value6, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value6;
  }
  return obj;
}
var allActivedModals = [];
modal$2.allActivedModals = allActivedModals;
var msgQueue = [];
modal$2.msgQueue = msgQueue;
var _default2$h = {
  name: "VxeModal",
  mixins: [_size$e.default],
  props: {
    value: Boolean,
    id: String,
    type: {
      type: String,
      default: "modal"
    },
    loading: {
      type: Boolean,
      default: null
    },
    status: String,
    iconStatus: String,
    className: String,
    top: {
      type: [Number, String],
      default: function _default24() {
        return _conf$n.default.modal.top;
      }
    },
    position: [String, Object],
    title: String,
    duration: {
      type: [Number, String],
      default: function _default25() {
        return _conf$n.default.modal.duration;
      }
    },
    message: [String, Function],
    content: [String, Function],
    cancelButtonText: {
      type: String,
      default: function _default26() {
        return _conf$n.default.modal.cancelButtonText;
      }
    },
    confirmButtonText: {
      type: String,
      default: function _default27() {
        return _conf$n.default.modal.confirmButtonText;
      }
    },
    lockView: {
      type: Boolean,
      default: function _default28() {
        return _conf$n.default.modal.lockView;
      }
    },
    lockScroll: Boolean,
    mask: {
      type: Boolean,
      default: function _default29() {
        return _conf$n.default.modal.mask;
      }
    },
    maskClosable: {
      type: Boolean,
      default: function _default30() {
        return _conf$n.default.modal.maskClosable;
      }
    },
    escClosable: {
      type: Boolean,
      default: function _default31() {
        return _conf$n.default.modal.escClosable;
      }
    },
    resize: {
      type: Boolean,
      default: function _default32() {
        return _conf$n.default.modal.resize;
      }
    },
    showHeader: {
      type: Boolean,
      default: function _default33() {
        return _conf$n.default.modal.showHeader;
      }
    },
    showFooter: {
      type: Boolean,
      default: function _default34() {
        return _conf$n.default.modal.showFooter;
      }
    },
    showZoom: {
      type: Boolean,
      default: null
    },
    showClose: {
      type: Boolean,
      default: function _default35() {
        return _conf$n.default.modal.showClose;
      }
    },
    dblclickZoom: {
      type: Boolean,
      default: function _default36() {
        return _conf$n.default.modal.dblclickZoom;
      }
    },
    width: [Number, String],
    height: [Number, String],
    minWidth: {
      type: [Number, String],
      default: function _default37() {
        return _conf$n.default.modal.minWidth;
      }
    },
    minHeight: {
      type: [Number, String],
      default: function _default38() {
        return _conf$n.default.modal.minHeight;
      }
    },
    zIndex: Number,
    marginSize: {
      type: [Number, String],
      default: function _default39() {
        return _conf$n.default.modal.marginSize;
      }
    },
    fullscreen: Boolean,
    draggable: {
      type: Boolean,
      default: function _default40() {
        return _conf$n.default.modal.draggable;
      }
    },
    remember: {
      type: Boolean,
      default: function _default41() {
        return _conf$n.default.modal.remember;
      }
    },
    destroyOnClose: {
      type: Boolean,
      default: function _default42() {
        return _conf$n.default.modal.destroyOnClose;
      }
    },
    showTitleOverflow: {
      type: Boolean,
      default: function _default43() {
        return _conf$n.default.modal.showTitleOverflow;
      }
    },
    transfer: {
      type: Boolean,
      default: function _default44() {
        return _conf$n.default.modal.transfer;
      }
    },
    storage: {
      type: Boolean,
      default: function _default45() {
        return _conf$n.default.modal.storage;
      }
    },
    storageKey: {
      type: String,
      default: function _default46() {
        return _conf$n.default.modal.storageKey;
      }
    },
    animat: {
      type: Boolean,
      default: function _default47() {
        return _conf$n.default.modal.animat;
      }
    },
    size: {
      type: String,
      default: function _default48() {
        return _conf$n.default.modal.size || _conf$n.default.size;
      }
    },
    beforeHideMethod: {
      type: Function,
      default: function _default49() {
        return _conf$n.default.modal.beforeHideMethod;
      }
    },
    slots: Object,
    events: Object
  },
  data: function data4() {
    return {
      inited: false,
      visible: false,
      contentVisible: false,
      modalTop: 0,
      modalZindex: 0,
      zoomLocat: null,
      firstOpen: false
    };
  },
  computed: {
    isMsg: function isMsg() {
      return this.type === "message";
    }
  },
  watch: {
    width: function width() {
      this.recalculate();
    },
    height: function height2() {
      this.recalculate();
    },
    value: function value(visible2) {
      this[visible2 ? "open" : "close"]("model");
    }
  },
  created: function created2() {
    if (this.storage && !this.id) {
      _tools$o.UtilTools.error("vxe.error.reqProp", ["modal.id"]);
    }
  },
  mounted: function mounted4() {
    var $listeners = this.$listeners, _this$events = this.events, events2 = _this$events === void 0 ? {} : _this$events;
    if (this.value) {
      this.open();
    }
    this.recalculate();
    if (this.escClosable) {
      _tools$o.GlobalEvent.on(this, "keydown", this.handleGlobalKeydownEvent);
    }
    var type3 = "inserted";
    var params = {
      type: type3,
      $modal: this,
      $event: {
        type: type3
      }
    };
    if ($listeners.inserted) {
      this.$emit("inserted", params);
    } else if (events2.inserted) {
      events2.inserted.call(this, params);
    }
  },
  beforeDestroy: function beforeDestroy4() {
    var $el = this.$el;
    _tools$o.GlobalEvent.off(this, "keydown");
    this.removeMsgQueue();
    if ($el.parentNode === document.body) {
      $el.parentNode.removeChild($el);
    }
  },
  render: function render5(h) {
    var _ref, _this = this;
    var _e = this._e, $scopedSlots = this.$scopedSlots, _this$slots = this.slots, slots = _this$slots === void 0 ? {} : _this$slots, inited = this.inited, vSize8 = this.vSize, className = this.className, type3 = this.type, resize2 = this.resize, showClose = this.showClose, showZoom = this.showZoom, animat = this.animat, draggable = this.draggable, loading = this.loading, status = this.status, iconStatus = this.iconStatus, showFooter2 = this.showFooter, zoomLocat = this.zoomLocat, modalTop = this.modalTop, dblclickZoom = this.dblclickZoom, contentVisible = this.contentVisible, visible2 = this.visible, title = this.title, lockScroll = this.lockScroll, lockView = this.lockView, mask = this.mask, isMsg3 = this.isMsg, showTitleOverflow = this.showTitleOverflow, destroyOnClose = this.destroyOnClose;
    var content2 = this.content || this.message;
    var defaultSlot = $scopedSlots.default || slots.default;
    var footerSlot = $scopedSlots.footer || slots.footer;
    var headerSlot = $scopedSlots.header || slots.header;
    var titleSlot = $scopedSlots.title || slots.title;
    var headerOns = {};
    if (draggable) {
      headerOns.mousedown = this.mousedownEvent;
    }
    if (showZoom && dblclickZoom && type3 === "modal") {
      headerOns.dblclick = this.toggleZoomEvent;
    }
    return h("div", {
      class: ["vxe-modal--wrapper", "type--".concat(type3), className || "", (_ref = {}, _defineProperty$h(_ref, "size--".concat(vSize8), vSize8), _defineProperty$h(_ref, "status--".concat(status), status), _defineProperty$h(_ref, "is--animat", animat), _defineProperty$h(_ref, "lock--scroll", lockScroll), _defineProperty$h(_ref, "lock--view", lockView), _defineProperty$h(_ref, "is--resize", resize2), _defineProperty$h(_ref, "is--mask", mask), _defineProperty$h(_ref, "is--maximize", zoomLocat), _defineProperty$h(_ref, "is--visible", contentVisible), _defineProperty$h(_ref, "is--active", visible2), _defineProperty$h(_ref, "is--loading", loading), _ref)],
      style: {
        zIndex: this.modalZindex,
        top: modalTop ? "".concat(modalTop, "px") : null
      },
      on: {
        click: this.selfClickEvent
      }
    }, [h("div", {
      class: "vxe-modal--box",
      on: {
        mousedown: this.boxMousedownEvent
      },
      ref: "modalBox"
    }, [this.showHeader ? h("div", {
      class: ["vxe-modal--header", {
        "is--drag": draggable,
        "is--ellipsis": !isMsg3 && showTitleOverflow
      }],
      on: headerOns
    }, headerSlot ? !inited || destroyOnClose && !visible2 ? [] : headerSlot.call(this, {
      $modal: this
    }, h) : [titleSlot ? titleSlot.call(this, {
      $modal: this
    }, h) : h("span", {
      class: "vxe-modal--title"
    }, title ? _tools$o.UtilTools.getFuncText(title) : _conf$n.default.i18n("vxe.alert.title")), showZoom ? h("i", {
      class: ["vxe-modal--zoom-btn", "trigger--btn", zoomLocat ? _conf$n.default.icon.MODAL_ZOOM_OUT : _conf$n.default.icon.MODAL_ZOOM_IN],
      attrs: {
        title: _conf$n.default.i18n("vxe.modal.zoom".concat(zoomLocat ? "Out" : "In"))
      },
      on: {
        click: this.toggleZoomEvent
      }
    }) : _e(), showClose ? h("i", {
      class: ["vxe-modal--close-btn", "trigger--btn", _conf$n.default.icon.MODAL_CLOSE],
      attrs: {
        title: _conf$n.default.i18n("vxe.modal.close")
      },
      on: {
        click: this.closeEvent
      }
    }) : _e()]) : null, h("div", {
      class: "vxe-modal--body"
    }, [status ? h("div", {
      class: "vxe-modal--status-wrapper"
    }, [h("i", {
      class: ["vxe-modal--status-icon", iconStatus || _conf$n.default.icon["MODAL_".concat(status).toLocaleUpperCase()]]
    })]) : null, h("div", {
      class: "vxe-modal--content"
    }, defaultSlot ? !inited || destroyOnClose && !visible2 ? [] : defaultSlot.call(this, {
      $modal: this
    }, h) : _tools$o.UtilTools.getFuncText(content2)), !isMsg3 ? h("div", {
      class: ["vxe-loading", {
        "is--visible": loading
      }]
    }, [h("div", {
      class: "vxe-loading--spinner"
    })]) : null]), showFooter2 ? h("div", {
      class: "vxe-modal--footer"
    }, footerSlot ? !inited || destroyOnClose && !visible2 ? [] : footerSlot.call(this, {
      $modal: this
    }, h) : [type3 === "confirm" ? h("vxe-button", {
      ref: "cancelBtn",
      on: {
        click: this.cancelEvent
      }
    }, this.cancelButtonText || _conf$n.default.i18n("vxe.button.cancel")) : null, h("vxe-button", {
      ref: "confirmBtn",
      props: {
        status: "primary"
      },
      on: {
        click: this.confirmEvent
      }
    }, this.confirmButtonText || _conf$n.default.i18n("vxe.button.confirm"))]) : null, !isMsg3 && resize2 ? h("span", {
      class: "vxe-modal--resize"
    }, ["wl", "wr", "swst", "sest", "st", "swlb", "selb", "sb"].map(function(type4) {
      return h("span", {
        class: "".concat(type4, "-resize"),
        attrs: {
          type: type4
        },
        on: {
          mousedown: _this.dragEvent
        }
      });
    })) : null])]);
  },
  methods: {
    recalculate: function recalculate2() {
      var width2 = this.width, height3 = this.height;
      var modalBoxElem = this.getBox();
      modalBoxElem.style.width = width2 ? isNaN(width2) ? width2 : "".concat(width2, "px") : null;
      modalBoxElem.style.height = height3 ? isNaN(height3) ? height3 : "".concat(height3, "px") : null;
      return this.$nextTick();
    },
    selfClickEvent: function selfClickEvent(evnt) {
      if (this.maskClosable && evnt.target === this.$el) {
        var type3 = "mask";
        this.close(type3);
      }
    },
    updateZindex: function updateZindex2() {
      var zIndex2 = this.zIndex, modalZindex = this.modalZindex;
      if (zIndex2) {
        this.modalZindex = zIndex2;
      } else if (modalZindex < _tools$o.UtilTools.getLastZIndex()) {
        this.modalZindex = _tools$o.UtilTools.nextZIndex();
      }
    },
    closeEvent: function closeEvent(evnt) {
      var _this$events2 = this.events, events2 = _this$events2 === void 0 ? {} : _this$events2;
      var type3 = "close";
      var params = {
        type: type3,
        $modal: this,
        $event: evnt
      };
      if (events2[type3]) {
        events2[type3].call(this, params);
      } else {
        this.$emit(type3, params);
      }
      this.close(type3);
    },
    confirmEvent: function confirmEvent(evnt) {
      var _this$events3 = this.events, events2 = _this$events3 === void 0 ? {} : _this$events3;
      var type3 = "confirm";
      var params = {
        type: type3,
        $modal: this,
        $event: evnt
      };
      if (events2[type3]) {
        events2[type3].call(this, params);
      } else {
        this.$emit(type3, params);
      }
      this.close(type3);
    },
    cancelEvent: function cancelEvent(evnt) {
      var _this$events4 = this.events, events2 = _this$events4 === void 0 ? {} : _this$events4;
      var type3 = "cancel";
      var params = {
        type: type3,
        $modal: this,
        $event: evnt
      };
      if (events2[type3]) {
        events2[type3].call(this, params);
      } else {
        this.$emit(type3, params);
      }
      this.close(type3);
    },
    open: function open() {
      var _this2 = this;
      var $refs = this.$refs, _this$events5 = this.events, events2 = _this$events5 === void 0 ? {} : _this$events5, inited = this.inited, duration = this.duration, visible2 = this.visible, isMsg3 = this.isMsg, remember = this.remember, showFooter2 = this.showFooter;
      if (!inited) {
        this.inited = true;
        if (this.transfer) {
          document.body.appendChild(this.$el);
        }
      }
      if (!visible2) {
        if (!remember) {
          this.recalculate();
        }
        this.visible = true;
        this.contentVisible = false;
        this.updateZindex();
        allActivedModals.push(this);
        setTimeout(function() {
          _this2.contentVisible = true;
          _this2.$nextTick(function() {
            if (showFooter2) {
              var operBtn = $refs.confirmBtn || $refs.cancelBtn;
              if (operBtn) {
                operBtn.focus();
              }
            }
            var type3 = "";
            var params = {
              type: type3,
              $modal: _this2
            };
            if (events2.show) {
              events2.show.call(_this2, params);
            } else {
              _this2.$emit("input", true);
              _this2.$emit("show", params);
            }
          });
        }, 10);
        if (isMsg3) {
          this.addMsgQueue();
          if (duration !== -1) {
            setTimeout(function() {
              return _this2.close("close");
            }, _xeUtils$p.default.toNumber(duration));
          }
        } else {
          this.$nextTick(function() {
            var firstOpen = _this2.firstOpen, fullscreen = _this2.fullscreen;
            if (!remember || !firstOpen) {
              _this2.updatePosition().then(function() {
                setTimeout(function() {
                  return _this2.updatePosition();
                }, 20);
              });
            }
            if (!firstOpen) {
              _this2.firstOpen = true;
              if (_this2.hasPosStorage()) {
                _this2.restorePosStorage();
              } else if (fullscreen) {
                _this2.$nextTick(function() {
                  return _this2.maximize();
                });
              }
            }
          });
        }
      }
    },
    addMsgQueue: function addMsgQueue() {
      if (msgQueue.indexOf(this) === -1) {
        msgQueue.push(this);
      }
      this.updateStyle();
    },
    removeMsgQueue: function removeMsgQueue() {
      var _this3 = this;
      if (msgQueue.indexOf(this) > -1) {
        _xeUtils$p.default.remove(msgQueue, function(comp) {
          return comp === _this3;
        });
      }
      this.updateStyle();
    },
    updateStyle: function updateStyle2() {
      this.$nextTick(function() {
        var offsetTop = 0;
        msgQueue.forEach(function(comp) {
          offsetTop += _xeUtils$p.default.toNumber(comp.top);
          comp.modalTop = offsetTop;
          offsetTop += comp.$refs.modalBox.clientHeight;
        });
      });
    },
    updatePosition: function updatePosition() {
      var _this4 = this;
      return this.$nextTick().then(function() {
        var marginSize = _this4.marginSize, position = _this4.position;
        var modalBoxElem = _this4.getBox();
        var clientVisibleWidth = document.documentElement.clientWidth || document.body.clientWidth;
        var clientVisibleHeight = document.documentElement.clientHeight || document.body.clientHeight;
        var isPosCenter = position === "center";
        var _ref2 = isPosCenter ? {
          top: position,
          left: position
        } : Object.assign({}, position), top = _ref2.top, left = _ref2.left;
        var topCenter = isPosCenter || top === "center";
        var leftCenter = isPosCenter || left === "center";
        var posTop = "";
        var posLeft = "";
        if (left && !leftCenter) {
          posLeft = isNaN(left) ? left : "".concat(left, "px");
        } else {
          posLeft = "".concat(Math.max(marginSize, clientVisibleWidth / 2 - modalBoxElem.offsetWidth / 2), "px");
        }
        if (top && !topCenter) {
          posTop = isNaN(top) ? top : "".concat(top, "px");
        } else {
          posTop = "".concat(Math.max(marginSize, clientVisibleHeight / 2 - modalBoxElem.offsetHeight / 2), "px");
        }
        modalBoxElem.style.top = posTop;
        modalBoxElem.style.left = posLeft;
      });
    },
    close: function close(type3) {
      var _this5 = this;
      var _this$events6 = this.events, events2 = _this$events6 === void 0 ? {} : _this$events6, remember = this.remember, visible2 = this.visible, isMsg3 = this.isMsg, beforeHideMethod = this.beforeHideMethod;
      var params = {
        type: type3,
        $modal: this
      };
      if (visible2) {
        Promise.resolve(beforeHideMethod ? beforeHideMethod(params) : null).then(function(rest) {
          if (!_xeUtils$p.default.isError(rest)) {
            if (isMsg3) {
              _this5.removeMsgQueue();
            }
            _this5.contentVisible = false;
            if (!remember) {
              _this5.zoomLocat = null;
            }
            _xeUtils$p.default.remove(allActivedModals, function(item) {
              return item === _this5;
            });
            _this5.$emit("before-hide", params);
            setTimeout(function() {
              _this5.visible = false;
              if (events2.hide) {
                events2.hide.call(_this5, params);
              } else {
                _this5.$emit("input", false);
                _this5.$emit("hide", params);
              }
            }, 200);
          }
        }).catch(function(e) {
          return e;
        });
      }
    },
    handleGlobalKeydownEvent: function handleGlobalKeydownEvent2(evnt) {
      var _this6 = this;
      var isEsc = evnt.keyCode === 27;
      if (isEsc) {
        var lastModal = _xeUtils$p.default.max(allActivedModals, function(item) {
          return item.modalZindex;
        });
        if (lastModal) {
          setTimeout(function() {
            if (lastModal === _this6 && lastModal.escClosable) {
              _this6.close("exit");
            }
          }, 10);
        }
      }
    },
    getBox: function getBox() {
      return this.$refs.modalBox;
    },
    isMaximized: function isMaximized() {
      return !!this.zoomLocat;
    },
    maximize: function maximize() {
      var _this7 = this;
      return this.$nextTick().then(function() {
        if (!_this7.zoomLocat) {
          var marginSize = Math.max(0, _this7.marginSize);
          var modalBoxElem = _this7.getBox();
          var _DomTools$getDomNode = _tools$o.DomTools.getDomNode(), visibleHeight = _DomTools$getDomNode.visibleHeight, visibleWidth = _DomTools$getDomNode.visibleWidth;
          _this7.zoomLocat = {
            top: modalBoxElem.offsetTop,
            left: modalBoxElem.offsetLeft,
            width: modalBoxElem.offsetWidth + (modalBoxElem.style.width ? 0 : 1),
            height: modalBoxElem.offsetHeight + (modalBoxElem.style.height ? 0 : 1)
          };
          Object.assign(modalBoxElem.style, {
            top: "".concat(marginSize, "px"),
            left: "".concat(marginSize, "px"),
            width: "".concat(visibleWidth - marginSize * 2, "px"),
            height: "".concat(visibleHeight - marginSize * 2, "px")
          });
          _this7.savePosStorage();
        }
      });
    },
    revert: function revert() {
      var _this8 = this;
      return this.$nextTick().then(function() {
        var zoomLocat = _this8.zoomLocat;
        if (zoomLocat) {
          var modalBoxElem = _this8.getBox();
          _this8.zoomLocat = null;
          Object.assign(modalBoxElem.style, {
            top: "".concat(zoomLocat.top, "px"),
            left: "".concat(zoomLocat.left, "px"),
            width: "".concat(zoomLocat.width, "px"),
            height: "".concat(zoomLocat.height, "px")
          });
          _this8.savePosStorage();
        }
      });
    },
    zoom: function zoom() {
      var _this9 = this;
      return this[this.zoomLocat ? "revert" : "maximize"]().then(function() {
        return _this9.isMaximized();
      });
    },
    toggleZoomEvent: function toggleZoomEvent(evnt) {
      var _this10 = this;
      var $listeners = this.$listeners, zoomLocat = this.zoomLocat, _this$events7 = this.events, events2 = _this$events7 === void 0 ? {} : _this$events7;
      var params = {
        type: zoomLocat ? "revert" : "max",
        $modal: this,
        $event: evnt
      };
      return this.zoom().then(function() {
        if ($listeners.zoom) {
          _this10.$emit("zoom", params);
        } else if (events2.zoom) {
          events2.zoom.call(_this10, params);
        }
      });
    },
    getPosition: function getPosition() {
      if (!this.isMsg) {
        var modalBoxElem = this.getBox();
        if (modalBoxElem) {
          return {
            top: modalBoxElem.offsetTop,
            left: modalBoxElem.offsetLeft
          };
        }
      }
      return null;
    },
    setPosition: function setPosition(top, left) {
      if (!this.isMsg) {
        var modalBoxElem = this.getBox();
        if (_xeUtils$p.default.isNumber(top)) {
          modalBoxElem.style.top = "".concat(top, "px");
        }
        if (_xeUtils$p.default.isNumber(left)) {
          modalBoxElem.style.left = "".concat(left, "px");
        }
      }
      return this.$nextTick();
    },
    boxMousedownEvent: function boxMousedownEvent() {
      var modalZindex = this.modalZindex;
      if (allActivedModals.some(function(_vm) {
        return _vm.visible && _vm.modalZindex > modalZindex;
      })) {
        this.updateZindex();
      }
    },
    mousedownEvent: function mousedownEvent(evnt) {
      var _this11 = this;
      var remember = this.remember, storage = this.storage, marginSize = this.marginSize, zoomLocat = this.zoomLocat;
      var modalBoxElem = this.getBox();
      if (!zoomLocat && evnt.button === 0 && !_tools$o.DomTools.getEventTargetNode(evnt, modalBoxElem, "trigger--btn").flag) {
        evnt.preventDefault();
        var domMousemove = document.onmousemove;
        var domMouseup = document.onmouseup;
        var disX = evnt.clientX - modalBoxElem.offsetLeft;
        var disY = evnt.clientY - modalBoxElem.offsetTop;
        var _DomTools$getDomNode2 = _tools$o.DomTools.getDomNode(), visibleHeight = _DomTools$getDomNode2.visibleHeight, visibleWidth = _DomTools$getDomNode2.visibleWidth;
        document.onmousemove = function(evnt2) {
          evnt2.preventDefault();
          var offsetWidth = modalBoxElem.offsetWidth;
          var offsetHeight = modalBoxElem.offsetHeight;
          var minX = marginSize;
          var maxX = visibleWidth - offsetWidth - marginSize - 1;
          var minY = marginSize;
          var maxY = visibleHeight - offsetHeight - marginSize - 1;
          var left = evnt2.clientX - disX;
          var top = evnt2.clientY - disY;
          if (left > maxX) {
            left = maxX;
          }
          if (left < minX) {
            left = minX;
          }
          if (top > maxY) {
            top = maxY;
          }
          if (top < minY) {
            top = minY;
          }
          modalBoxElem.style.left = "".concat(left, "px");
          modalBoxElem.style.top = "".concat(top, "px");
        };
        document.onmouseup = function() {
          document.onmousemove = domMousemove;
          document.onmouseup = domMouseup;
          if (remember && storage) {
            _this11.$nextTick(function() {
              _this11.savePosStorage();
            });
          }
        };
      }
    },
    dragEvent: function dragEvent(evnt) {
      var _this12 = this;
      evnt.preventDefault();
      var $listeners = this.$listeners, marginSize = this.marginSize, _this$events8 = this.events, events2 = _this$events8 === void 0 ? {} : _this$events8, remember = this.remember, storage = this.storage;
      var _DomTools$getDomNode3 = _tools$o.DomTools.getDomNode(), visibleHeight = _DomTools$getDomNode3.visibleHeight, visibleWidth = _DomTools$getDomNode3.visibleWidth;
      var type3 = evnt.target.getAttribute("type");
      var minWidth = _xeUtils$p.default.toNumber(this.minWidth);
      var minHeight = _xeUtils$p.default.toNumber(this.minHeight);
      var maxWidth = visibleWidth;
      var maxHeight2 = visibleHeight;
      var modalBoxElem = this.getBox();
      var domMousemove = document.onmousemove;
      var domMouseup = document.onmouseup;
      var clientWidth = modalBoxElem.clientWidth;
      var clientHeight = modalBoxElem.clientHeight;
      var disX = evnt.clientX;
      var disY = evnt.clientY;
      var offsetTop = modalBoxElem.offsetTop;
      var offsetLeft = modalBoxElem.offsetLeft;
      var params = {
        type: "resize",
        $modal: this
      };
      document.onmousemove = function(evnt2) {
        evnt2.preventDefault();
        var dragLeft;
        var dragTop;
        var width2;
        var height3;
        switch (type3) {
          case "wl":
            dragLeft = disX - evnt2.clientX;
            width2 = dragLeft + clientWidth;
            if (offsetLeft - dragLeft > marginSize) {
              if (width2 > minWidth) {
                modalBoxElem.style.width = "".concat(width2 < maxWidth ? width2 : maxWidth, "px");
                modalBoxElem.style.left = "".concat(offsetLeft - dragLeft, "px");
              }
            }
            break;
          case "swst":
            dragLeft = disX - evnt2.clientX;
            dragTop = disY - evnt2.clientY;
            width2 = dragLeft + clientWidth;
            height3 = dragTop + clientHeight;
            if (offsetLeft - dragLeft > marginSize) {
              if (width2 > minWidth) {
                modalBoxElem.style.width = "".concat(width2 < maxWidth ? width2 : maxWidth, "px");
                modalBoxElem.style.left = "".concat(offsetLeft - dragLeft, "px");
              }
            }
            if (offsetTop - dragTop > marginSize) {
              if (height3 > minHeight) {
                modalBoxElem.style.height = "".concat(height3 < maxHeight2 ? height3 : maxHeight2, "px");
                modalBoxElem.style.top = "".concat(offsetTop - dragTop, "px");
              }
            }
            break;
          case "swlb":
            dragLeft = disX - evnt2.clientX;
            dragTop = evnt2.clientY - disY;
            width2 = dragLeft + clientWidth;
            height3 = dragTop + clientHeight;
            if (offsetLeft - dragLeft > marginSize) {
              if (width2 > minWidth) {
                modalBoxElem.style.width = "".concat(width2 < maxWidth ? width2 : maxWidth, "px");
                modalBoxElem.style.left = "".concat(offsetLeft - dragLeft, "px");
              }
            }
            if (offsetTop + height3 + marginSize < visibleHeight) {
              if (height3 > minHeight) {
                modalBoxElem.style.height = "".concat(height3 < maxHeight2 ? height3 : maxHeight2, "px");
              }
            }
            break;
          case "st":
            dragTop = disY - evnt2.clientY;
            height3 = clientHeight + dragTop;
            if (offsetTop - dragTop > marginSize) {
              if (height3 > minHeight) {
                modalBoxElem.style.height = "".concat(height3 < maxHeight2 ? height3 : maxHeight2, "px");
                modalBoxElem.style.top = "".concat(offsetTop - dragTop, "px");
              }
            }
            break;
          case "wr":
            dragLeft = evnt2.clientX - disX;
            width2 = dragLeft + clientWidth;
            if (offsetLeft + width2 + marginSize < visibleWidth) {
              if (width2 > minWidth) {
                modalBoxElem.style.width = "".concat(width2 < maxWidth ? width2 : maxWidth, "px");
              }
            }
            break;
          case "sest":
            dragLeft = evnt2.clientX - disX;
            dragTop = disY - evnt2.clientY;
            width2 = dragLeft + clientWidth;
            height3 = dragTop + clientHeight;
            if (offsetLeft + width2 + marginSize < visibleWidth) {
              if (width2 > minWidth) {
                modalBoxElem.style.width = "".concat(width2 < maxWidth ? width2 : maxWidth, "px");
              }
            }
            if (offsetTop - dragTop > marginSize) {
              if (height3 > minHeight) {
                modalBoxElem.style.height = "".concat(height3 < maxHeight2 ? height3 : maxHeight2, "px");
                modalBoxElem.style.top = "".concat(offsetTop - dragTop, "px");
              }
            }
            break;
          case "selb":
            dragLeft = evnt2.clientX - disX;
            dragTop = evnt2.clientY - disY;
            width2 = dragLeft + clientWidth;
            height3 = dragTop + clientHeight;
            if (offsetLeft + width2 + marginSize < visibleWidth) {
              if (width2 > minWidth) {
                modalBoxElem.style.width = "".concat(width2 < maxWidth ? width2 : maxWidth, "px");
              }
            }
            if (offsetTop + height3 + marginSize < visibleHeight) {
              if (height3 > minHeight) {
                modalBoxElem.style.height = "".concat(height3 < maxHeight2 ? height3 : maxHeight2, "px");
              }
            }
            break;
          case "sb":
            dragTop = evnt2.clientY - disY;
            height3 = dragTop + clientHeight;
            if (offsetTop + height3 + marginSize < visibleHeight) {
              if (height3 > minHeight) {
                modalBoxElem.style.height = "".concat(height3 < maxHeight2 ? height3 : maxHeight2, "px");
              }
            }
            break;
        }
        modalBoxElem.className = modalBoxElem.className.replace(/\s?is--drag/, "") + " is--drag";
        if (remember && storage) {
          _this12.savePosStorage();
        }
        if ($listeners.zoom) {
          _this12.$emit("zoom", params);
        } else if (events2.zoom) {
          events2.zoom.call(_this12, params);
        }
      };
      document.onmouseup = function() {
        _this12.zoomLocat = null;
        document.onmousemove = domMousemove;
        document.onmouseup = domMouseup;
        setTimeout(function() {
          modalBoxElem.className = modalBoxElem.className.replace(/\s?is--drag/, "");
        }, 50);
      };
    },
    getStorageMap: function getStorageMap(key) {
      var version = _conf$n.default.version;
      var rest = _xeUtils$p.default.toStringJSON(localStorage.getItem(key));
      return rest && rest._v === version ? rest : {
        _v: version
      };
    },
    hasPosStorage: function hasPosStorage() {
      var id2 = this.id, remember = this.remember, storage = this.storage, storageKey = this.storageKey;
      return !!(remember && storage && this.getStorageMap(storageKey)[id2]);
    },
    restorePosStorage: function restorePosStorage() {
      var id2 = this.id, remember = this.remember, storage = this.storage, storageKey = this.storageKey;
      if (remember && storage) {
        var posStorage = this.getStorageMap(storageKey)[id2];
        if (posStorage) {
          var modalBoxElem = this.getBox();
          var _posStorage$split = posStorage.split(","), _posStorage$split2 = _slicedToArray(_posStorage$split, 8), left = _posStorage$split2[0], top = _posStorage$split2[1], width2 = _posStorage$split2[2], height3 = _posStorage$split2[3], zoomLeft = _posStorage$split2[4], zoomTop = _posStorage$split2[5], zoomWidth = _posStorage$split2[6], zoomHeight = _posStorage$split2[7];
          if (left) {
            modalBoxElem.style.left = "".concat(left, "px");
          }
          if (top) {
            modalBoxElem.style.top = "".concat(top, "px");
          }
          if (width2) {
            modalBoxElem.style.width = "".concat(width2, "px");
          }
          if (height3) {
            modalBoxElem.style.height = "".concat(height3, "px");
          }
          if (zoomLeft && zoomTop) {
            this.zoomLocat = {
              left: zoomLeft,
              top: zoomTop,
              width: zoomWidth,
              height: zoomHeight
            };
          }
        }
      }
    },
    savePosStorage: function savePosStorage() {
      var id2 = this.id, remember = this.remember, storage = this.storage, storageKey = this.storageKey, zoomLocat = this.zoomLocat;
      if (remember && storage) {
        var modalBoxElem = this.getBox();
        var posStorageMap = this.getStorageMap(storageKey);
        posStorageMap[id2] = [modalBoxElem.style.left, modalBoxElem.style.top, modalBoxElem.style.width, modalBoxElem.style.height].concat(zoomLocat ? [zoomLocat.left, zoomLocat.top, zoomLocat.width, zoomLocat.height] : []).map(function(val) {
          return val ? _xeUtils$p.default.toNumber(val) : "";
        }).join(",");
        localStorage.setItem(storageKey, _xeUtils$p.default.toJSONString(posStorageMap));
      }
    }
  }
};
modal$2.default = _default2$h;
var input$2 = {};
var date$2 = {};
Object.defineProperty(date$2, "__esModule", {
  value: true
});
date$2.getDateQuarter = getDateQuarter;
date$2.toStringTimeDate = toStringTimeDate;
var _xeUtils$o = _interopRequireDefault$1b(xeUtils);
function _interopRequireDefault$1b(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
function toStringTimeDate(str) {
  if (str) {
    var rest = new Date();
    var h, m, s;
    if (_xeUtils$o.default.isDate(str)) {
      h = str.getHours();
      m = str.getMinutes();
      s = str.getSeconds();
    } else {
      str = _xeUtils$o.default.toValueString(str);
      var parses = str.match(/^(\d{1,2})(:(\d{1,2}))?(:(\d{1,2}))?/);
      if (parses) {
        h = parses[1];
        m = parses[3];
        s = parses[5];
      }
    }
    rest.setHours(h || 0);
    rest.setMinutes(m || 0);
    rest.setSeconds(s || 0);
    return rest;
  }
  return new Date("");
}
function getDateQuarter(date3) {
  var month = date3.getMonth();
  if (month < 3) {
    return 1;
  } else if (month < 6) {
    return 2;
  } else if (month < 9) {
    return 3;
  }
  return 4;
}
var number$1 = {};
Object.defineProperty(number$1, "__esModule", {
  value: true
});
number$1.handleNumber = handleNumber;
number$1.toFloatValueFixed = toFloatValueFixed;
var _xeUtils$n = _interopRequireDefault$1a(xeUtils);
function _interopRequireDefault$1a(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
function handleNumber(val) {
  return _xeUtils$n.default.isString(val) ? val.replace(/,/g, "") : val;
}
function toFloatValueFixed(inputValue, digitsValue2) {
  if (/^-/.test("" + inputValue)) {
    return _xeUtils$n.default.toFixed(_xeUtils$n.default.ceil(inputValue, digitsValue2), digitsValue2);
  }
  return _xeUtils$n.default.toFixed(_xeUtils$n.default.floor(inputValue, digitsValue2), digitsValue2);
}
Object.defineProperty(input$2, "__esModule", {
  value: true
});
input$2.default = void 0;
var _xeUtils$m = _interopRequireDefault$19(xeUtils);
var _conf$m = _interopRequireDefault$19(conf);
var _size$d = _interopRequireDefault$19(size);
var _tools$n = tools;
var _date$1 = date$2;
var _number = number$1;
function _interopRequireDefault$19(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
function ownKeys$3(object3, enumerableOnly) {
  var keys3 = Object.keys(object3);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object3);
    if (enumerableOnly) {
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object3, sym).enumerable;
      });
    }
    keys3.push.apply(keys3, symbols);
  }
  return keys3;
}
function _objectSpread$3(target2) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys$3(Object(source), true).forEach(function(key) {
        _defineProperty$g(target2, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target2, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys$3(Object(source)).forEach(function(key) {
        Object.defineProperty(target2, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target2;
}
function _defineProperty$g(obj, key, value6) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value: value6, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value6;
  }
  return obj;
}
var yearSize = 20;
var monthSize = 20;
var quarterSize = 8;
function getNumberValue(_vm, val) {
  var type3 = _vm.type, exponential = _vm.exponential, digitsValue2 = _vm.digitsValue, inpMaxlength2 = _vm.inpMaxlength;
  var restVal = type3 === "float" ? (0, _number.toFloatValueFixed)(val, digitsValue2) : _xeUtils$m.default.toValueString(val);
  if (exponential && (val === restVal || _xeUtils$m.default.toValueString(val).toLowerCase() === _xeUtils$m.default.toNumber(restVal).toExponential())) {
    return val;
  }
  return restVal.slice(0, inpMaxlength2);
}
function renderDateLabel(h, _vm, item, label) {
  var festivalMethod = _vm.festivalMethod;
  if (festivalMethod) {
    var festivalRest = festivalMethod(_objectSpread$3({
      $input: _vm,
      type: _vm.datePanelType,
      viewType: _vm.datePanelType
    }, item));
    var festivalItem = festivalRest ? _xeUtils$m.default.isString(festivalRest) ? {
      label: festivalRest
    } : festivalRest : {};
    var extraItem = festivalItem.extra ? _xeUtils$m.default.isString(festivalItem.extra) ? {
      label: festivalItem.extra
    } : festivalItem.extra : null;
    var labels = [h("span", {
      class: ["vxe-input--date-label", {
        "is-notice": festivalItem.notice
      }]
    }, extraItem && extraItem.label ? [h("span", label), h("span", {
      class: ["vxe-input--date-label--extra", extraItem.important ? "is-important" : "", extraItem.className],
      style: extraItem.style
    }, _xeUtils$m.default.toValueString(extraItem.label))] : label)];
    var festivalLabel = festivalItem.label;
    if (festivalLabel) {
      var festivalLabels = _xeUtils$m.default.toValueString(festivalLabel).split(",");
      labels.push(h("span", {
        class: ["vxe-input--date-festival", festivalItem.important ? "is-important" : "", festivalItem.className],
        style: festivalItem.style
      }, [festivalLabels.length > 1 ? h("span", {
        class: ["vxe-input--date-festival--overlap", "overlap--".concat(festivalLabels.length)]
      }, festivalLabels.map(function(label2) {
        return h("span", label2.substring(0, 3));
      })) : h("span", {
        class: "vxe-input--date-festival--label"
      }, festivalLabels[0].substring(0, 3))]));
    }
    return labels;
  }
  return label;
}
function isDateDisabled(_vm, item) {
  var disabledMethod = _vm.disabledMethod;
  return disabledMethod && disabledMethod({
    $input: _vm,
    type: _vm.datePanelType,
    viewType: _vm.datePanelType,
    date: item.date
  });
}
function renderDateDayTable(h, _vm) {
  var datePanelType = _vm.datePanelType, dateValue2 = _vm.dateValue, datePanelValue = _vm.datePanelValue, dateHeaders2 = _vm.dateHeaders, dayDatas2 = _vm.dayDatas;
  var matchFormat = "yyyy-MM-dd";
  return [h("table", {
    class: "vxe-input--date-".concat(datePanelType, "-view"),
    attrs: {
      cellspacing: 0,
      cellpadding: 0,
      border: 0
    }
  }, [h("thead", [h("tr", dateHeaders2.map(function(item) {
    return h("th", item.label);
  }))]), h("tbody", dayDatas2.map(function(rows) {
    return h("tr", rows.map(function(item) {
      return h("td", {
        class: {
          "is--prev": item.isPrev,
          "is--current": item.isCurrent,
          "is--now": item.isNow,
          "is--next": item.isNext,
          "is--disabled": isDateDisabled(_vm, item),
          "is--selected": _xeUtils$m.default.isDateSame(dateValue2, item.date, matchFormat),
          "is--hover": _xeUtils$m.default.isDateSame(datePanelValue, item.date, matchFormat)
        },
        on: {
          click: function click() {
            return _vm.dateSelectEvent(item);
          },
          mouseenter: function mouseenter() {
            return _vm.dateMouseenterEvent(item);
          }
        }
      }, renderDateLabel(h, _vm, item, item.label));
    }));
  }))])];
}
function renderDateWeekTable(h, _vm) {
  var datePanelType = _vm.datePanelType, dateValue2 = _vm.dateValue, datePanelValue = _vm.datePanelValue, weekHeaders2 = _vm.weekHeaders, weekDates2 = _vm.weekDates;
  var matchFormat = "yyyyMMdd";
  return [h("table", {
    class: "vxe-input--date-".concat(datePanelType, "-view"),
    attrs: {
      cellspacing: 0,
      cellpadding: 0,
      border: 0
    }
  }, [h("thead", [h("tr", weekHeaders2.map(function(item) {
    return h("th", item.label);
  }))]), h("tbody", weekDates2.map(function(rows) {
    var isSelected = rows.some(function(item) {
      return _xeUtils$m.default.isDateSame(dateValue2, item.date, matchFormat);
    });
    var isHover = rows.some(function(item) {
      return _xeUtils$m.default.isDateSame(datePanelValue, item.date, matchFormat);
    });
    return h("tr", rows.map(function(item) {
      return h("td", {
        class: {
          "is--prev": item.isPrev,
          "is--current": item.isCurrent,
          "is--now": item.isNow,
          "is--next": item.isNext,
          "is--disabled": isDateDisabled(_vm, item),
          "is--selected": isSelected,
          "is--hover": isHover
        },
        on: {
          click: function click() {
            return _vm.dateSelectEvent(item);
          },
          mouseenter: function mouseenter() {
            return _vm.dateMouseenterEvent(item);
          }
        }
      }, renderDateLabel(h, _vm, item, item.label));
    }));
  }))])];
}
function renderDateMonthTable(h, _vm) {
  var dateValue2 = _vm.dateValue, datePanelType = _vm.datePanelType, monthDatas2 = _vm.monthDatas, datePanelValue = _vm.datePanelValue;
  var matchFormat = "yyyyMM";
  return [h("table", {
    class: "vxe-input--date-".concat(datePanelType, "-view"),
    attrs: {
      cellspacing: 0,
      cellpadding: 0,
      border: 0
    }
  }, [h("tbody", monthDatas2.map(function(rows) {
    return h("tr", rows.map(function(item) {
      return h("td", {
        class: {
          "is--prev": item.isPrev,
          "is--current": item.isCurrent,
          "is--now": item.isNow,
          "is--next": item.isNext,
          "is--disabled": isDateDisabled(_vm, item),
          "is--selected": _xeUtils$m.default.isDateSame(dateValue2, item.date, matchFormat),
          "is--hover": _xeUtils$m.default.isDateSame(datePanelValue, item.date, matchFormat)
        },
        on: {
          click: function click() {
            return _vm.dateSelectEvent(item);
          },
          mouseenter: function mouseenter() {
            return _vm.dateMouseenterEvent(item);
          }
        }
      }, renderDateLabel(h, _vm, item, _conf$m.default.i18n("vxe.input.date.months.m".concat(item.month))));
    }));
  }))])];
}
function renderDateQuarterTable(h, _vm) {
  var dateValue2 = _vm.dateValue, datePanelType = _vm.datePanelType, quarterDatas2 = _vm.quarterDatas, datePanelValue = _vm.datePanelValue;
  var matchFormat = "yyyyq";
  return [h("table", {
    class: "vxe-input--date-".concat(datePanelType, "-view"),
    attrs: {
      cellspacing: 0,
      cellpadding: 0,
      border: 0
    }
  }, [h("tbody", quarterDatas2.map(function(rows) {
    return h("tr", rows.map(function(item) {
      return h("td", {
        class: {
          "is--prev": item.isPrev,
          "is--current": item.isCurrent,
          "is--now": item.isNow,
          "is--next": item.isNext,
          "is--disabled": isDateDisabled(_vm, item),
          "is--selected": _xeUtils$m.default.isDateSame(dateValue2, item.date, matchFormat),
          "is--hover": _xeUtils$m.default.isDateSame(datePanelValue, item.date, matchFormat)
        },
        on: {
          click: function click() {
            return _vm.dateSelectEvent(item);
          },
          mouseenter: function mouseenter() {
            return _vm.dateMouseenterEvent(item);
          }
        }
      }, renderDateLabel(h, _vm, item, _conf$m.default.i18n("vxe.input.date.quarters.q".concat(item.quarter))));
    }));
  }))])];
}
function renderDateYearTable(h, _vm) {
  var dateValue2 = _vm.dateValue, datePanelType = _vm.datePanelType, yearDatas2 = _vm.yearDatas, datePanelValue = _vm.datePanelValue;
  var matchFormat = "yyyy";
  return [h("table", {
    class: "vxe-input--date-".concat(datePanelType, "-view"),
    attrs: {
      cellspacing: 0,
      cellpadding: 0,
      border: 0
    }
  }, [h("tbody", yearDatas2.map(function(rows) {
    return h("tr", rows.map(function(item) {
      return h("td", {
        class: {
          "is--disabled": isDateDisabled(_vm, item),
          "is--current": item.isCurrent,
          "is--now": item.isNow,
          "is--selected": _xeUtils$m.default.isDateSame(dateValue2, item.date, matchFormat),
          "is--hover": _xeUtils$m.default.isDateSame(datePanelValue, item.date, matchFormat)
        },
        on: {
          click: function click() {
            return _vm.dateSelectEvent(item);
          },
          mouseenter: function mouseenter() {
            return _vm.dateMouseenterEvent(item);
          }
        }
      }, renderDateLabel(h, _vm, item, item.year));
    }));
  }))])];
}
function renderDateTable(h, _vm) {
  var datePanelType = _vm.datePanelType;
  switch (datePanelType) {
    case "week":
      return renderDateWeekTable(h, _vm);
    case "month":
      return renderDateMonthTable(h, _vm);
    case "quarter":
      return renderDateQuarterTable(h, _vm);
    case "year":
      return renderDateYearTable(h, _vm);
  }
  return renderDateDayTable(h, _vm);
}
function renderDatePanel(h, _vm) {
  var datePanelType = _vm.datePanelType, selectDatePanelLabel2 = _vm.selectDatePanelLabel, isDisabledPrevDateBtn2 = _vm.isDisabledPrevDateBtn, isDisabledNextDateBtn2 = _vm.isDisabledNextDateBtn;
  return [h("div", {
    class: "vxe-input--date-picker-header"
  }, [h("div", {
    class: "vxe-input--date-picker-type-wrapper"
  }, [datePanelType === "year" ? h("span", {
    class: "vxe-input--date-picker-label"
  }, selectDatePanelLabel2) : h("span", {
    class: "vxe-input--date-picker-btn",
    on: {
      click: _vm.dateToggleTypeEvent
    }
  }, selectDatePanelLabel2)]), h("div", {
    class: "vxe-input--date-picker-btn-wrapper"
  }, [h("span", {
    class: ["vxe-input--date-picker-btn vxe-input--date-picker-prev-btn", {
      "is--disabled": isDisabledPrevDateBtn2
    }],
    on: {
      click: _vm.datePrevEvent
    }
  }, [h("i", {
    class: "vxe-icon--caret-left"
  })]), h("span", {
    class: "vxe-input--date-picker-btn vxe-input--date-picker-current-btn",
    on: {
      click: _vm.dateTodayMonthEvent
    }
  }, [h("i", {
    class: "vxe-icon--dot"
  })]), h("span", {
    class: ["vxe-input--date-picker-btn vxe-input--date-picker-next-btn", {
      "is--disabled": isDisabledNextDateBtn2
    }],
    on: {
      click: _vm.dateNextEvent
    }
  }, [h("i", {
    class: "vxe-icon--caret-right"
  })])])]), h("div", {
    class: "vxe-input--date-picker-body"
  }, renderDateTable(h, _vm))];
}
function renderTimePanel(h, _vm) {
  var dateTimeLabel2 = _vm.dateTimeLabel, datetimePanelValue = _vm.datetimePanelValue, hourList2 = _vm.hourList, minuteList2 = _vm.minuteList, secondList2 = _vm.secondList;
  return [h("div", {
    class: "vxe-input--time-picker-header"
  }, [h("span", {
    class: "vxe-input--time-picker-title"
  }, dateTimeLabel2), h("button", {
    class: "vxe-input--time-picker-confirm",
    attrs: {
      type: "button"
    },
    on: {
      click: _vm.dateConfirmEvent
    }
  }, _conf$m.default.i18n("vxe.button.confirm"))]), h("div", {
    ref: "timeBody",
    class: "vxe-input--time-picker-body"
  }, [h("ul", {
    class: "vxe-input--time-picker-hour-list"
  }, hourList2.map(function(item, index2) {
    return h("li", {
      key: index2,
      class: {
        "is--selected": datetimePanelValue && datetimePanelValue.getHours() === item.value
      },
      on: {
        click: function click(evnt) {
          return _vm.dateHourEvent(evnt, item);
        }
      }
    }, item.label);
  })), h("ul", {
    class: "vxe-input--time-picker-minute-list"
  }, minuteList2.map(function(item, index2) {
    return h("li", {
      key: index2,
      class: {
        "is--selected": datetimePanelValue && datetimePanelValue.getMinutes() === item.value
      },
      on: {
        click: function click(evnt) {
          return _vm.dateMinuteEvent(evnt, item);
        }
      }
    }, item.label);
  })), h("ul", {
    class: "vxe-input--time-picker-second-list"
  }, secondList2.map(function(item, index2) {
    return h("li", {
      key: index2,
      class: {
        "is--selected": datetimePanelValue && datetimePanelValue.getSeconds() === item.value
      },
      on: {
        click: function click(evnt) {
          return _vm.dateSecondEvent(evnt, item);
        }
      }
    }, item.label);
  }))])];
}
function renderPanel(h, _vm) {
  var type3 = _vm.type, vSize8 = _vm.vSize, isDatePickerType2 = _vm.isDatePickerType, transfer = _vm.transfer, animatVisible = _vm.animatVisible, visiblePanel = _vm.visiblePanel, panelPlacement = _vm.panelPlacement, panelStyle = _vm.panelStyle;
  var renders = [];
  if (isDatePickerType2) {
    var _ref;
    if (type3 === "datetime") {
      renders.push(h("div", {
        class: "vxe-input--panel-layout-wrapper"
      }, [h("div", {
        class: "vxe-input--panel-left-wrapper"
      }, renderDatePanel(h, _vm)), h("div", {
        class: "vxe-input--panel-right-wrapper"
      }, renderTimePanel(h, _vm))]));
    } else if (type3 === "time") {
      renders.push(h("div", {
        class: "vxe-input--panel-wrapper"
      }, renderTimePanel(h, _vm)));
    } else {
      renders.push(h("div", {
        class: "vxe-input--panel-wrapper"
      }, renderDatePanel(h, _vm)));
    }
    return h("div", {
      ref: "panel",
      class: ["vxe-table--ignore-clear vxe-input--panel", "type--".concat(type3), (_ref = {}, _defineProperty$g(_ref, "size--".concat(vSize8), vSize8), _defineProperty$g(_ref, "is--transfer", transfer), _defineProperty$g(_ref, "animat--leave", animatVisible), _defineProperty$g(_ref, "animat--enter", visiblePanel), _ref)],
      attrs: {
        placement: panelPlacement
      },
      style: panelStyle
    }, renders);
  }
  return null;
}
function renderNumberIcon(h, _vm) {
  return h("span", {
    class: "vxe-input--number-suffix"
  }, [h("span", {
    class: "vxe-input--number-prev is--prev",
    on: {
      mousedown: _vm.numberMousedownEvent,
      mouseup: _vm.numberStopDown,
      mouseleave: _vm.numberStopDown
    }
  }, [h("i", {
    class: ["vxe-input--number-prev-icon", _conf$m.default.icon.INPUT_PREV_NUM]
  })]), h("span", {
    class: "vxe-input--number-next is--next",
    on: {
      mousedown: _vm.numberMousedownEvent,
      mouseup: _vm.numberStopDown,
      mouseleave: _vm.numberStopDown
    }
  }, [h("i", {
    class: ["vxe-input--number-next-icon", _conf$m.default.icon.INPUT_NEXT_NUM]
  })])]);
}
function renderDatePickerIcon(h, _vm) {
  return h("span", {
    class: "vxe-input--date-picker-suffix",
    on: {
      click: _vm.datePickerOpenEvent
    }
  }, [h("i", {
    class: ["vxe-input--date-picker-icon", _conf$m.default.icon.INPUT_DATE]
  })]);
}
function renderSearchIcon(h, _vm) {
  return h("span", {
    class: "vxe-input--search-suffix",
    on: {
      click: _vm.searchEvent
    }
  }, [h("i", {
    class: ["vxe-input--search-icon", _conf$m.default.icon.INPUT_SEARCH]
  })]);
}
function renderPasswordIcon(h, _vm) {
  var showPwd = _vm.showPwd;
  return h("span", {
    class: "vxe-input--password-suffix",
    on: {
      click: _vm.passwordToggleEvent
    }
  }, [h("i", {
    class: ["vxe-input--password-icon", showPwd ? _conf$m.default.icon.INPUT_SHOW_PWD : _conf$m.default.icon.INPUT_PWD]
  })]);
}
function rendePrefixIcon(h, _vm) {
  var $scopedSlots = _vm.$scopedSlots, prefixIcon = _vm.prefixIcon;
  var icons = [];
  if ($scopedSlots.prefix) {
    icons.push(h("span", {
      class: "vxe-input--prefix-icon"
    }, $scopedSlots.prefix.call(this, {}, h)));
  } else if (prefixIcon) {
    icons.push(h("i", {
      class: ["vxe-input--prefix-icon", prefixIcon]
    }));
  }
  return icons.length ? h("span", {
    class: "vxe-input--prefix",
    on: {
      click: _vm.clickPrefixEvent
    }
  }, icons) : null;
}
function renderSuffixIcon$1(h, _vm) {
  var $scopedSlots = _vm.$scopedSlots, inputValue = _vm.inputValue, isClearable2 = _vm.isClearable, disabled = _vm.disabled, suffixIcon = _vm.suffixIcon;
  var icons = [];
  if ($scopedSlots.suffix) {
    icons.push(h("span", {
      class: "vxe-input--suffix-icon"
    }, $scopedSlots.suffix.call(this, {}, h)));
  } else if (suffixIcon) {
    icons.push(h("i", {
      class: ["vxe-input--suffix-icon", suffixIcon]
    }));
  }
  if (isClearable2) {
    icons.push(h("i", {
      class: ["vxe-input--clear-icon", _conf$m.default.icon.INPUT_CLEAR]
    }));
  }
  return icons.length ? h("span", {
    class: ["vxe-input--suffix", {
      "is--clear": isClearable2 && !disabled && !(inputValue === "" || _xeUtils$m.default.eqNull(inputValue))
    }],
    on: {
      click: _vm.clickSuffixEvent
    }
  }, icons) : null;
}
function renderExtraSuffixIcon(h, _vm) {
  var controls = _vm.controls, isPawdType2 = _vm.isPawdType, isNumType2 = _vm.isNumType, isDatePickerType2 = _vm.isDatePickerType, isSearch2 = _vm.isSearch;
  var icons;
  if (isPawdType2) {
    icons = renderPasswordIcon(h, _vm);
  } else if (isNumType2) {
    if (controls) {
      icons = renderNumberIcon(h, _vm);
    }
  } else if (isDatePickerType2) {
    icons = renderDatePickerIcon(h, _vm);
  } else if (isSearch2) {
    icons = renderSearchIcon(h, _vm);
  }
  return icons ? h("span", {
    class: "vxe-input--extra-suffix"
  }, [icons]) : null;
}
var _default2$g = {
  name: "VxeInput",
  mixins: [_size$d.default],
  model: {
    prop: "value",
    event: "modelValue"
  },
  props: {
    value: [String, Number, Date],
    immediate: {
      type: Boolean,
      default: true
    },
    name: String,
    type: {
      type: String,
      default: "text"
    },
    clearable: {
      type: Boolean,
      default: function _default50() {
        return _conf$m.default.input.clearable;
      }
    },
    readonly: Boolean,
    disabled: Boolean,
    placeholder: String,
    maxlength: [String, Number],
    autocomplete: {
      type: String,
      default: "off"
    },
    align: String,
    form: String,
    className: String,
    size: {
      type: String,
      default: function _default51() {
        return _conf$m.default.input.size || _conf$m.default.size;
      }
    },
    min: {
      type: [String, Number],
      default: null
    },
    max: {
      type: [String, Number],
      default: null
    },
    step: [String, Number],
    exponential: {
      type: Boolean,
      default: function _default52() {
        return _conf$m.default.input.exponential;
      }
    },
    controls: {
      type: Boolean,
      default: function _default53() {
        return _conf$m.default.input.controls;
      }
    },
    digits: {
      type: [String, Number],
      default: function _default54() {
        return _conf$m.default.input.digits;
      }
    },
    dateConfig: Object,
    minDate: {
      type: [String, Number, Date],
      default: function _default55() {
        return _conf$m.default.input.minDate;
      }
    },
    maxDate: {
      type: [String, Number, Date],
      default: function _default56() {
        return _conf$m.default.input.maxDate;
      }
    },
    startWeek: Number,
    startDay: {
      type: [String, Number],
      default: function _default57() {
        return _conf$m.default.input.startDay;
      }
    },
    labelFormat: {
      type: String,
      default: function _default58() {
        return _conf$m.default.input.labelFormat;
      }
    },
    valueFormat: {
      type: String,
      default: function _default59() {
        return _conf$m.default.input.valueFormat;
      }
    },
    editable: {
      type: Boolean,
      default: true
    },
    festivalMethod: {
      type: Function,
      default: function _default60() {
        return _conf$m.default.input.festivalMethod;
      }
    },
    disabledMethod: {
      type: Function,
      default: function _default61() {
        return _conf$m.default.input.disabledMethod;
      }
    },
    selectDay: {
      type: Number,
      default: function _default62() {
        return _conf$m.default.input.selectDay;
      }
    },
    prefixIcon: String,
    suffixIcon: String,
    placement: String,
    transfer: {
      type: Boolean,
      default: function _default63() {
        return _conf$m.default.input.transfer;
      }
    }
  },
  data: function data5() {
    return {
      panelIndex: 0,
      showPwd: false,
      visiblePanel: false,
      animatVisible: false,
      panelStyle: null,
      panelPlacement: null,
      isActivated: false,
      inputValue: this.value,
      datetimePanelValue: null,
      datePanelValue: null,
      datePanelLabel: "",
      datePanelType: "day",
      selectMonth: null,
      currentDate: null
    };
  },
  computed: {
    isNumType: function isNumType() {
      return ["number", "integer", "float"].indexOf(this.type) > -1;
    },
    isDatePickerType: function isDatePickerType() {
      return this.hasTime || ["date", "week", "month", "quarter", "year"].indexOf(this.type) > -1;
    },
    hasTime: function hasTime() {
      var type3 = this.type;
      return type3 === "time" || type3 === "datetime";
    },
    isPawdType: function isPawdType() {
      return this.type === "password";
    },
    isSearch: function isSearch() {
      return this.type === "search";
    },
    stepValue: function stepValue() {
      var type3 = this.type, step2 = this.step;
      if (type3 === "integer") {
        return _xeUtils$m.default.toInteger(step2) || 1;
      } else if (type3 === "float") {
        return _xeUtils$m.default.toNumber(step2) || 1 / Math.pow(10, this.digitsValue);
      }
      return _xeUtils$m.default.toNumber(step2) || 1;
    },
    digitsValue: function digitsValue() {
      return _xeUtils$m.default.toInteger(this.digits) || 1;
    },
    isClearable: function isClearable() {
      return this.clearable && (this.isPawdType || this.isNumType || this.isDatePickerType || this.type === "text" || this.type === "search");
    },
    isDisabledPrevDateBtn: function isDisabledPrevDateBtn() {
      var selectMonth = this.selectMonth, dateMinTime2 = this.dateMinTime;
      if (selectMonth) {
        return selectMonth <= dateMinTime2;
      }
      return false;
    },
    isDisabledNextDateBtn: function isDisabledNextDateBtn() {
      var selectMonth = this.selectMonth, dateMaxTime2 = this.dateMaxTime;
      if (selectMonth) {
        return selectMonth >= dateMaxTime2;
      }
      return false;
    },
    dateMinTime: function dateMinTime() {
      return this.minDate ? _xeUtils$m.default.toStringDate(this.minDate) : null;
    },
    dateMaxTime: function dateMaxTime() {
      return this.maxDate ? _xeUtils$m.default.toStringDate(this.maxDate) : null;
    },
    dateValue: function dateValue() {
      var value6 = this.value, isDatePickerType2 = this.isDatePickerType, dateValueFormat2 = this.dateValueFormat;
      var val = null;
      if (value6 && isDatePickerType2) {
        var date3 = this.parseDate(value6, dateValueFormat2);
        if (_xeUtils$m.default.isValidDate(date3)) {
          val = date3;
        }
      }
      return val;
    },
    dateTimeLabel: function dateTimeLabel() {
      var datetimePanelValue = this.datetimePanelValue;
      if (datetimePanelValue) {
        return _xeUtils$m.default.toDateString(datetimePanelValue, "HH:mm:ss");
      }
      return "";
    },
    hmsTime: function hmsTime() {
      var dateValue2 = this.dateValue;
      return dateValue2 && this.hasTime ? (dateValue2.getHours() * 3600 + dateValue2.getMinutes() * 60 + dateValue2.getSeconds()) * 1e3 : 0;
    },
    dateLabelFormat: function dateLabelFormat() {
      if (this.isDatePickerType) {
        return this.labelFormat || _conf$m.default.i18n("vxe.input.date.labelFormat.".concat(this.type));
      }
      return null;
    },
    dateValueFormat: function dateValueFormat() {
      var type3 = this.type;
      return type3 === "time" ? "HH:mm:ss" : this.valueFormat || (type3 === "datetime" ? "yyyy-MM-dd HH:mm:ss" : "yyyy-MM-dd");
    },
    selectDatePanelLabel: function selectDatePanelLabel() {
      if (this.isDatePickerType) {
        var datePanelType = this.datePanelType, selectMonth = this.selectMonth, yearList2 = this.yearList;
        var year = "";
        var month;
        if (selectMonth) {
          year = selectMonth.getFullYear();
          month = selectMonth.getMonth() + 1;
        }
        if (datePanelType === "quarter") {
          return _conf$m.default.i18n("vxe.input.date.quarterLabel", [year]);
        } else if (datePanelType === "month") {
          return _conf$m.default.i18n("vxe.input.date.monthLabel", [year]);
        } else if (datePanelType === "year") {
          return yearList2.length ? "".concat(yearList2[0].year, " - ").concat(yearList2[yearList2.length - 1].year) : "";
        }
        return _conf$m.default.i18n("vxe.input.date.dayLabel", [year, month ? _conf$m.default.i18n("vxe.input.date.m".concat(month)) : "-"]);
      }
      return "";
    },
    firstDayOfWeek: function firstDayOfWeek() {
      var startDay = this.startDay, startWeek = this.startWeek;
      return _xeUtils$m.default.toNumber(_xeUtils$m.default.isNumber(startDay) || _xeUtils$m.default.isString(startDay) ? startDay : startWeek);
    },
    weekDatas: function weekDatas() {
      var weeks2 = [];
      if (this.isDatePickerType) {
        var sWeek = this.firstDayOfWeek;
        weeks2.push(sWeek);
        for (var index2 = 0; index2 < 6; index2++) {
          if (sWeek >= 6) {
            sWeek = 0;
          } else {
            sWeek++;
          }
          weeks2.push(sWeek);
        }
      }
      return weeks2;
    },
    dateHeaders: function dateHeaders() {
      if (this.isDatePickerType) {
        return this.weekDatas.map(function(day) {
          return {
            value: day,
            label: _conf$m.default.i18n("vxe.input.date.weeks.w".concat(day))
          };
        });
      }
      return [];
    },
    weekHeaders: function weekHeaders() {
      if (this.isDatePickerType) {
        return [{
          label: _conf$m.default.i18n("vxe.input.date.weeks.w")
        }].concat(this.dateHeaders);
      }
      return [];
    },
    yearList: function yearList() {
      var selectMonth = this.selectMonth, currentDate = this.currentDate;
      var months2 = [];
      if (selectMonth && currentDate) {
        var currFullYear = currentDate.getFullYear();
        var startYear = new Date(("" + selectMonth.getFullYear()).replace(/\d{1}$/, "0"), 0, 1);
        for (var index2 = -10; index2 < yearSize - 10; index2++) {
          var date3 = _xeUtils$m.default.getWhatYear(startYear, index2, "first");
          var itemFullYear = date3.getFullYear();
          months2.push({
            date: date3,
            isCurrent: true,
            isNow: currFullYear === itemFullYear,
            year: itemFullYear
          });
        }
      }
      return months2;
    },
    yearDatas: function yearDatas() {
      return _xeUtils$m.default.chunk(this.yearList, 4);
    },
    quarterList: function quarterList() {
      var selectMonth = this.selectMonth, currentDate = this.currentDate;
      var quarters = [];
      if (selectMonth && currentDate) {
        var currFullYear = currentDate.getFullYear();
        var currQuarter = (0, _date$1.getDateQuarter)(currentDate);
        var firstYear = _xeUtils$m.default.getWhatYear(selectMonth, 0, "first");
        var selFullYear = firstYear.getFullYear();
        for (var index2 = -2; index2 < quarterSize - 2; index2++) {
          var date3 = _xeUtils$m.default.getWhatQuarter(firstYear, index2);
          var itemFullYear = date3.getFullYear();
          var itemQuarter = (0, _date$1.getDateQuarter)(date3);
          var isPrev = itemFullYear < selFullYear;
          quarters.push({
            date: date3,
            isPrev,
            isCurrent: itemFullYear === selFullYear,
            isNow: itemFullYear === currFullYear && itemQuarter === currQuarter,
            isNext: !isPrev && itemFullYear > selFullYear,
            quarter: itemQuarter
          });
        }
      }
      return quarters;
    },
    quarterDatas: function quarterDatas() {
      return _xeUtils$m.default.chunk(this.quarterList, 2);
    },
    monthList: function monthList() {
      var selectMonth = this.selectMonth, currentDate = this.currentDate;
      var months2 = [];
      if (selectMonth && currentDate) {
        var currFullYear = currentDate.getFullYear();
        var currMonth = currentDate.getMonth();
        var selFullYear = _xeUtils$m.default.getWhatYear(selectMonth, 0, "first").getFullYear();
        for (var index2 = -4; index2 < monthSize - 4; index2++) {
          var date3 = _xeUtils$m.default.getWhatYear(selectMonth, 0, index2);
          var itemFullYear = date3.getFullYear();
          var itemMonth = date3.getMonth();
          var isPrev = itemFullYear < selFullYear;
          months2.push({
            date: date3,
            isPrev,
            isCurrent: itemFullYear === selFullYear,
            isNow: itemFullYear === currFullYear && itemMonth === currMonth,
            isNext: !isPrev && itemFullYear > selFullYear,
            month: itemMonth
          });
        }
      }
      return months2;
    },
    monthDatas: function monthDatas() {
      return _xeUtils$m.default.chunk(this.monthList, 4);
    },
    dayList: function dayList() {
      var weekDatas2 = this.weekDatas, selectMonth = this.selectMonth, currentDate = this.currentDate, hmsTime2 = this.hmsTime;
      var days = [];
      if (selectMonth && currentDate) {
        var currFullYear = currentDate.getFullYear();
        var currMonth = currentDate.getMonth();
        var currDate = currentDate.getDate();
        var selFullYear = selectMonth.getFullYear();
        var selMonth = selectMonth.getMonth();
        var selDay = selectMonth.getDay();
        var prevOffsetDate = -weekDatas2.indexOf(selDay);
        var startDate = new Date(_xeUtils$m.default.getWhatDay(selectMonth, prevOffsetDate).getTime() + hmsTime2);
        for (var index2 = 0; index2 < 42; index2++) {
          var date3 = _xeUtils$m.default.getWhatDay(startDate, index2);
          var itemFullYear = date3.getFullYear();
          var itemMonth = date3.getMonth();
          var itemDate = date3.getDate();
          var isPrev = date3 < selectMonth;
          days.push({
            date: date3,
            isPrev,
            isCurrent: itemFullYear === selFullYear && itemMonth === selMonth,
            isNow: itemFullYear === currFullYear && itemMonth === currMonth && itemDate === currDate,
            isNext: !isPrev && selMonth !== itemMonth,
            label: itemDate
          });
        }
      }
      return days;
    },
    dayDatas: function dayDatas() {
      return _xeUtils$m.default.chunk(this.dayList, 7);
    },
    weekDates: function weekDates() {
      var dayDatas2 = this.dayDatas, firstDayOfWeek2 = this.firstDayOfWeek;
      return dayDatas2.map(function(list2) {
        var firstItem = list2[0];
        var item = {
          date: firstItem.date,
          isWeekNumber: true,
          isPrev: false,
          isCurrent: false,
          isNow: false,
          isNext: false,
          label: _xeUtils$m.default.getYearWeek(firstItem.date, firstDayOfWeek2)
        };
        return [item].concat(list2);
      });
    },
    hourList: function hourList() {
      var list2 = [];
      if (this.hasTime) {
        for (var index2 = 0; index2 < 24; index2++) {
          list2.push({
            value: index2,
            label: ("" + index2).padStart(2, 0)
          });
        }
      }
      return list2;
    },
    minuteList: function minuteList() {
      var list2 = [];
      if (this.hasTime) {
        for (var index2 = 0; index2 < 60; index2++) {
          list2.push({
            value: index2,
            label: ("" + index2).padStart(2, 0)
          });
        }
      }
      return list2;
    },
    secondList: function secondList() {
      return this.minuteList;
    },
    inpImmediate: function inpImmediate() {
      var type3 = this.type, immediate = this.immediate;
      return immediate || !(type3 === "text" || type3 === "number" || type3 === "integer" || type3 === "float");
    },
    inpPlaceholder: function inpPlaceholder() {
      var placeholder2 = this.placeholder;
      if (placeholder2) {
        return _tools$n.UtilTools.getFuncText(placeholder2);
      }
      return "";
    },
    inputType: function inputType() {
      var isDatePickerType2 = this.isDatePickerType, isNumType2 = this.isNumType, isPawdType2 = this.isPawdType, type3 = this.type, showPwd = this.showPwd;
      if (isDatePickerType2 || isNumType2 || isPawdType2 && showPwd || type3 === "number") {
        return "text";
      }
      return type3;
    },
    inpMaxlength: function inpMaxlength() {
      var isNumType2 = this.isNumType, maxlength = this.maxlength;
      return isNumType2 && !_xeUtils$m.default.toNumber(maxlength) ? 16 : maxlength;
    },
    inpReadonly: function inpReadonly() {
      var type3 = this.type, readonly = this.readonly, editable = this.editable;
      return readonly || !editable || type3 === "week" || type3 === "quarter";
    }
  },
  watch: {
    value: function value2(val) {
      this.inputValue = val;
      this.changeValue();
    },
    type: function type() {
      Object.assign(this, {
        inputValue: this.value,
        datetimePanelValue: null,
        datePanelValue: null,
        datePanelLabel: "",
        datePanelType: "day",
        selectMonth: null,
        currentDate: null
      });
      this.initValue();
    },
    dateLabelFormat: function dateLabelFormat2() {
      if (this.isDatePickerType) {
        this.dateParseValue(this.datePanelValue);
        this.inputValue = this.datePanelLabel;
      }
    }
  },
  created: function created3() {
    this.initValue();
    _tools$n.GlobalEvent.on(this, "mousewheel", this.handleGlobalMousewheelEvent);
    _tools$n.GlobalEvent.on(this, "mousedown", this.handleGlobalMousedownEvent);
    _tools$n.GlobalEvent.on(this, "keydown", this.handleGlobalKeydownEvent);
    _tools$n.GlobalEvent.on(this, "blur", this.handleGlobalBlurEvent);
  },
  mounted: function mounted5() {
    if (this.dateConfig) {
      _tools$n.UtilTools.warn("vxe.error.removeProp", ["date-config"]);
    }
    if (this.isDatePickerType) {
      if (this.transfer) {
        document.body.appendChild(this.$refs.panel);
      }
    }
  },
  beforeDestroy: function beforeDestroy5() {
    var panelElem = this.$refs.panel;
    if (panelElem && panelElem.parentNode) {
      panelElem.parentNode.removeChild(panelElem);
    }
  },
  destroyed: function destroyed3() {
    this.numberStopDown();
    _tools$n.GlobalEvent.off(this, "mousewheel");
    _tools$n.GlobalEvent.off(this, "mousedown");
    _tools$n.GlobalEvent.off(this, "keydown");
    _tools$n.GlobalEvent.off(this, "blur");
  },
  render: function render6(h) {
    var _ref2;
    var name = this.name, form2 = this.form, inputType2 = this.inputType, inpPlaceholder2 = this.inpPlaceholder, inpMaxlength2 = this.inpMaxlength, inpReadonly2 = this.inpReadonly, className = this.className, controls = this.controls, inputValue = this.inputValue, isDatePickerType2 = this.isDatePickerType, visiblePanel = this.visiblePanel, isActivated = this.isActivated, vSize8 = this.vSize, type3 = this.type, align = this.align, readonly = this.readonly, disabled = this.disabled, autocomplete = this.autocomplete;
    var childs = [];
    var prefix = rendePrefixIcon(h, this);
    var suffix = renderSuffixIcon$1(h, this);
    if (prefix) {
      childs.push(prefix);
    }
    childs.push(h("input", {
      ref: "input",
      class: "vxe-input--inner",
      domProps: {
        value: inputValue
      },
      attrs: {
        name,
        form: form2,
        type: inputType2,
        placeholder: inpPlaceholder2,
        maxlength: inpMaxlength2,
        readonly: inpReadonly2,
        disabled,
        autocomplete
      },
      on: {
        keydown: this.keydownEvent,
        keyup: this.triggerEvent,
        wheel: this.wheelEvent,
        click: this.clickEvent,
        input: this.inputEvent,
        change: this.changeEvent,
        focus: this.focusEvent,
        blur: this.blurEvent
      }
    }));
    if (suffix) {
      childs.push(suffix);
    }
    childs.push(renderExtraSuffixIcon(h, this));
    if (isDatePickerType2) {
      childs.push(renderPanel(h, this));
    }
    return h("div", {
      class: ["vxe-input", "type--".concat(type3), className, (_ref2 = {}, _defineProperty$g(_ref2, "size--".concat(vSize8), vSize8), _defineProperty$g(_ref2, "is--".concat(align), align), _defineProperty$g(_ref2, "is--controls", controls), _defineProperty$g(_ref2, "is--prefix", !!prefix), _defineProperty$g(_ref2, "is--suffix", !!suffix), _defineProperty$g(_ref2, "is--readonly", readonly), _defineProperty$g(_ref2, "is--visivle", visiblePanel), _defineProperty$g(_ref2, "is--disabled", disabled), _defineProperty$g(_ref2, "is--active", isActivated), _ref2)]
    }, childs);
  },
  methods: {
    focus: function focus2() {
      this.isActivated = true;
      this.$refs.input.focus();
      return this.$nextTick();
    },
    blur: function blur2() {
      this.$refs.input.blur();
      this.isActivated = false;
      return this.$nextTick();
    },
    triggerEvent: function triggerEvent2(evnt) {
      var $refs = this.$refs, inputValue = this.inputValue;
      this.$emit(evnt.type, {
        $panel: $refs.panel,
        value: inputValue,
        $event: evnt
      });
    },
    emitModel: function emitModel(value6, evnt) {
      this.inputValue = value6;
      this.$emit("modelValue", value6);
      this.$emit("input", {
        value: value6,
        $event: evnt
      });
      if (_xeUtils$m.default.toValueString(this.value) !== value6) {
        this.$emit("change", {
          value: value6,
          $event: evnt
        });
      }
    },
    emitInputEvent: function emitInputEvent(value6, evnt) {
      var inpImmediate2 = this.inpImmediate, isDatePickerType2 = this.isDatePickerType;
      this.inputValue = value6;
      if (!isDatePickerType2) {
        if (inpImmediate2) {
          this.emitModel(value6, evnt);
        } else {
          this.$emit("input", {
            value: value6,
            $event: evnt
          });
        }
      }
    },
    inputEvent: function inputEvent(evnt) {
      var value6 = evnt.target.value;
      this.emitInputEvent(value6, evnt);
    },
    changeEvent: function changeEvent(evnt) {
      var inpImmediate2 = this.inpImmediate;
      if (!inpImmediate2) {
        this.triggerEvent(evnt);
      }
    },
    focusEvent: function focusEvent(evnt) {
      this.isActivated = true;
      this.triggerEvent(evnt);
    },
    blurEvent: function blurEvent(evnt) {
      var inputValue = this.inputValue, inpImmediate2 = this.inpImmediate;
      var value6 = inputValue;
      if (!inpImmediate2) {
        this.emitModel(value6, evnt);
      }
      this.afterCheckValue();
      if (!this.visiblePanel) {
        this.isActivated = false;
      }
      this.$emit("blur", {
        value: value6,
        $event: evnt
      });
    },
    keydownEvent: function keydownEvent2(evnt) {
      var exponential = this.exponential, controls = this.controls, isNumType2 = this.isNumType;
      if (isNumType2) {
        var isCtrlKey = evnt.ctrlKey;
        var isShiftKey = evnt.shiftKey;
        var isAltKey = evnt.altKey;
        var keyCode = evnt.keyCode;
        if (!isCtrlKey && !isShiftKey && !isAltKey && (keyCode === 32 || (!exponential || keyCode !== 69) && keyCode >= 65 && keyCode <= 90 || keyCode >= 186 && keyCode <= 188 || keyCode >= 191)) {
          evnt.preventDefault();
        }
        if (controls) {
          this.numberKeydownEvent(evnt);
        }
      }
      this.triggerEvent(evnt);
    },
    wheelEvent: function wheelEvent2(evnt) {
      if (this.isNumType && this.controls) {
        if (this.isActivated) {
          var delta = evnt.deltaY;
          if (delta > 0) {
            this.numberNextEvent(evnt);
          } else if (delta < 0) {
            this.numberPrevEvent(evnt);
          }
          evnt.preventDefault();
        }
      }
      this.triggerEvent(evnt);
    },
    clickEvent: function clickEvent(evnt) {
      var isDatePickerType2 = this.isDatePickerType;
      if (isDatePickerType2) {
        this.datePickerOpenEvent(evnt);
      }
      this.triggerEvent(evnt);
    },
    clickPrefixEvent: function clickPrefixEvent(evnt) {
      var $refs = this.$refs, disabled = this.disabled, inputValue = this.inputValue;
      if (!disabled) {
        this.$emit("prefix-click", {
          $panel: $refs.panel,
          value: inputValue,
          $event: evnt
        });
      }
    },
    clickSuffixEvent: function clickSuffixEvent(evnt) {
      var $refs = this.$refs, disabled = this.disabled, inputValue = this.inputValue;
      if (!disabled) {
        if (_tools$n.DomTools.hasClass(evnt.currentTarget, "is--clear")) {
          this.emitModel("", evnt);
          this.clearValueEvent(evnt, "");
        } else {
          this.$emit("suffix-click", {
            $panel: $refs.panel,
            value: inputValue,
            $event: evnt
          });
        }
      }
    },
    clearValueEvent: function clearValueEvent(evnt, value6) {
      var $refs = this.$refs, type3 = this.type, isNumType2 = this.isNumType;
      if (this.isDatePickerType) {
        this.hidePanel();
      }
      if (isNumType2 || ["text", "search", "password"].indexOf(type3) > -1) {
        this.focus();
      }
      this.$emit("clear", {
        $panel: $refs.panel,
        value: value6,
        $event: evnt
      });
    },
    parseDate: function parseDate(value6, format2) {
      var type3 = this.type;
      if (type3 === "time") {
        return (0, _date$1.toStringTimeDate)(value6);
      }
      return _xeUtils$m.default.toStringDate(value6, format2);
    },
    initValue: function initValue() {
      var type3 = this.type, isDatePickerType2 = this.isDatePickerType, inputValue = this.inputValue, digitsValue2 = this.digitsValue;
      if (isDatePickerType2) {
        this.changeValue();
      } else if (type3 === "float") {
        if (inputValue) {
          var validValue = (0, _number.toFloatValueFixed)(inputValue, digitsValue2);
          if (inputValue !== validValue) {
            this.emitModel(validValue, {
              type: "init"
            });
          }
        }
      }
    },
    changeValue: function changeValue() {
      if (this.isDatePickerType) {
        this.dateParseValue(this.inputValue);
        this.inputValue = this.datePanelLabel;
      }
    },
    afterCheckValue: function afterCheckValue() {
      var type3 = this.type, exponential = this.exponential, inpReadonly2 = this.inpReadonly, inputValue = this.inputValue, isDatePickerType2 = this.isDatePickerType, isNumType2 = this.isNumType, datetimePanelValue = this.datetimePanelValue, dateLabelFormat3 = this.dateLabelFormat, min2 = this.min, max2 = this.max, firstDayOfWeek2 = this.firstDayOfWeek;
      if (!inpReadonly2) {
        if (isNumType2) {
          if (inputValue) {
            var inpNumVal = type3 === "integer" ? _xeUtils$m.default.toInteger((0, _number.handleNumber)(inputValue)) : _xeUtils$m.default.toNumber((0, _number.handleNumber)(inputValue));
            if (!this.vaildMinNum(inpNumVal)) {
              inpNumVal = min2;
            } else if (!this.vaildMaxNum(inpNumVal)) {
              inpNumVal = max2;
            }
            if (exponential) {
              var inpStringVal = _xeUtils$m.default.toValueString(inputValue).toLowerCase();
              if (inpStringVal === _xeUtils$m.default.toNumber(inpNumVal).toExponential()) {
                inpNumVal = inpStringVal;
              }
            }
            this.emitModel(getNumberValue(this, inpNumVal), {
              type: "check"
            });
          }
        } else if (isDatePickerType2) {
          if (inputValue) {
            if (type3 === "week" || type3 === "quarter")
              ;
            else {
              var inpDateVal = this.parseDate(inputValue, dateLabelFormat3);
              if (_xeUtils$m.default.isValidDate(inpDateVal)) {
                if (type3 === "time") {
                  inpDateVal = (0, _date$1.toStringTimeDate)(inpDateVal);
                  if (inputValue !== inpDateVal) {
                    this.emitModel(inpDateVal, {
                      type: "check"
                    });
                  }
                  this.inputValue = inpDateVal;
                } else {
                  var isChange = false;
                  if (type3 === "datetime") {
                    if (inputValue !== _xeUtils$m.default.toDateString(this.dateValue, dateLabelFormat3) || inputValue !== _xeUtils$m.default.toDateString(inpDateVal, dateLabelFormat3)) {
                      isChange = true;
                      datetimePanelValue.setHours(inpDateVal.getHours());
                      datetimePanelValue.setMinutes(inpDateVal.getMinutes());
                      datetimePanelValue.setSeconds(inpDateVal.getSeconds());
                    }
                  } else {
                    isChange = true;
                  }
                  this.inputValue = _xeUtils$m.default.toDateString(inpDateVal, dateLabelFormat3, {
                    firstDay: firstDayOfWeek2
                  });
                  if (isChange) {
                    this.dateChange(inpDateVal);
                  }
                }
              } else {
                this.dateRevert();
              }
            }
          } else {
            this.emitModel("", {
              type: "check"
            });
          }
        }
      }
    },
    passwordToggleEvent: function passwordToggleEvent(evnt) {
      var disabled = this.disabled, readonly = this.readonly, showPwd = this.showPwd;
      if (!disabled && !readonly) {
        this.showPwd = !showPwd;
      }
      this.$emit("toggle-visible", {
        visible: this.showPwd,
        $event: evnt
      });
    },
    searchEvent: function searchEvent(evnt) {
      this.$emit("search-click", {
        $event: evnt
      });
    },
    vaildMinNum: function vaildMinNum(num) {
      return this.min === null || num >= _xeUtils$m.default.toNumber(this.min);
    },
    vaildMaxNum: function vaildMaxNum(num) {
      return this.max === null || num <= _xeUtils$m.default.toNumber(this.max);
    },
    numberStopDown: function numberStopDown() {
      clearTimeout(this.downbumTimeout);
    },
    numberDownPrevEvent: function numberDownPrevEvent(evnt) {
      var _this = this;
      this.downbumTimeout = setTimeout(function() {
        _this.numberPrevEvent(evnt);
        _this.numberDownPrevEvent(evnt);
      }, 60);
    },
    numberDownNextEvent: function numberDownNextEvent(evnt) {
      var _this2 = this;
      this.downbumTimeout = setTimeout(function() {
        _this2.numberNextEvent(evnt);
        _this2.numberDownNextEvent(evnt);
      }, 60);
    },
    numberKeydownEvent: function numberKeydownEvent(evnt) {
      var keyCode = evnt.keyCode;
      var isUpArrow = keyCode === 38;
      var isDwArrow = keyCode === 40;
      if (isUpArrow || isDwArrow) {
        evnt.preventDefault();
        if (isUpArrow) {
          this.numberPrevEvent(evnt);
        } else {
          this.numberNextEvent(evnt);
        }
      }
    },
    numberMousedownEvent: function numberMousedownEvent(evnt) {
      var _this3 = this;
      this.numberStopDown();
      if (evnt.button === 0) {
        var isPrevNumber = _tools$n.DomTools.hasClass(evnt.currentTarget, "is--prev");
        if (isPrevNumber) {
          this.numberPrevEvent(evnt);
        } else {
          this.numberNextEvent(evnt);
        }
        this.downbumTimeout = setTimeout(function() {
          if (isPrevNumber) {
            _this3.numberDownPrevEvent(evnt);
          } else {
            _this3.numberDownNextEvent(evnt);
          }
        }, 500);
      }
    },
    numberPrevEvent: function numberPrevEvent(evnt) {
      var disabled = this.disabled, readonly = this.readonly;
      clearTimeout(this.downbumTimeout);
      if (!disabled && !readonly) {
        this.numberChange(true, evnt);
      }
      this.$emit("prev-number", {
        $event: evnt
      });
    },
    numberNextEvent: function numberNextEvent(evnt) {
      var disabled = this.disabled, readonly = this.readonly;
      clearTimeout(this.downbumTimeout);
      if (!disabled && !readonly) {
        this.numberChange(false, evnt);
      }
      this.$emit("next-number", {
        $event: evnt
      });
    },
    numberChange: function numberChange(isPlus, evnt) {
      var min2 = this.min, max2 = this.max, type3 = this.type, inputValue = this.inputValue, stepValue2 = this.stepValue;
      var numValue = type3 === "integer" ? _xeUtils$m.default.toInteger((0, _number.handleNumber)(inputValue)) : _xeUtils$m.default.toNumber((0, _number.handleNumber)(inputValue));
      var newValue = isPlus ? _xeUtils$m.default.add(numValue, stepValue2) : _xeUtils$m.default.subtract(numValue, stepValue2);
      var restNum;
      if (!this.vaildMinNum(newValue)) {
        restNum = min2;
      } else if (!this.vaildMaxNum(newValue)) {
        restNum = max2;
      } else {
        restNum = newValue;
      }
      this.emitInputEvent(getNumberValue(this, restNum), evnt);
    },
    datePickerOpenEvent: function datePickerOpenEvent(evnt) {
      var readonly = this.readonly;
      if (!readonly) {
        evnt.preventDefault();
        this.showPanel();
      }
    },
    dateMonthHandle: function dateMonthHandle(date3, offsetMonth) {
      this.selectMonth = _xeUtils$m.default.getWhatMonth(date3, offsetMonth, "first");
    },
    dateNowHandle: function dateNowHandle() {
      var currentDate = _xeUtils$m.default.getWhatDay(Date.now(), 0, "first");
      this.currentDate = currentDate;
      this.dateMonthHandle(currentDate, 0);
    },
    dateToggleTypeEvent: function dateToggleTypeEvent() {
      var datePanelType = this.datePanelType;
      if (datePanelType === "month" || datePanelType === "quarter") {
        datePanelType = "year";
      } else {
        datePanelType = "month";
      }
      this.datePanelType = datePanelType;
    },
    datePrevEvent: function datePrevEvent(evnt) {
      var isDisabledPrevDateBtn2 = this.isDisabledPrevDateBtn, type3 = this.type, datePanelType = this.datePanelType;
      if (!isDisabledPrevDateBtn2) {
        if (type3 === "year") {
          this.selectMonth = _xeUtils$m.default.getWhatYear(this.selectMonth, -yearSize, "first");
        } else if (type3 === "month" || type3 === "quarter") {
          if (datePanelType === "year") {
            this.selectMonth = _xeUtils$m.default.getWhatYear(this.selectMonth, -yearSize, "first");
          } else {
            this.selectMonth = _xeUtils$m.default.getWhatYear(this.selectMonth, -1, "first");
          }
        } else {
          if (datePanelType === "year") {
            this.selectMonth = _xeUtils$m.default.getWhatYear(this.selectMonth, -yearSize, "first");
          } else if (datePanelType === "month") {
            this.selectMonth = _xeUtils$m.default.getWhatYear(this.selectMonth, -1, "first");
          } else {
            this.selectMonth = _xeUtils$m.default.getWhatMonth(this.selectMonth, -1, "first");
          }
        }
        this.$emit("date-prev", {
          type: type3,
          $event: evnt
        });
      }
    },
    dateTodayMonthEvent: function dateTodayMonthEvent(evnt) {
      this.dateNowHandle();
      this.dateChange(this.currentDate);
      this.hidePanel();
      this.$emit("date-today", {
        type: this.type,
        $event: evnt
      });
    },
    dateNextEvent: function dateNextEvent(evnt) {
      var isDisabledNextDateBtn2 = this.isDisabledNextDateBtn, type3 = this.type, datePanelType = this.datePanelType;
      if (!isDisabledNextDateBtn2) {
        if (type3 === "year") {
          this.selectMonth = _xeUtils$m.default.getWhatYear(this.selectMonth, yearSize, "first");
        } else if (type3 === "month" || type3 === "quarter") {
          if (datePanelType === "year") {
            this.selectMonth = _xeUtils$m.default.getWhatYear(this.selectMonth, yearSize, "first");
          } else {
            this.selectMonth = _xeUtils$m.default.getWhatYear(this.selectMonth, 1, "first");
          }
        } else {
          if (datePanelType === "year") {
            this.selectMonth = _xeUtils$m.default.getWhatYear(this.selectMonth, yearSize, "first");
          } else if (datePanelType === "month") {
            this.selectMonth = _xeUtils$m.default.getWhatYear(this.selectMonth, 1, "first");
          } else {
            this.selectMonth = _xeUtils$m.default.getWhatMonth(this.selectMonth, 1, "first");
          }
        }
        this.$emit("date-next", {
          type: type3,
          $event: evnt
        });
      }
    },
    dateSelectEvent: function dateSelectEvent(item) {
      if (!isDateDisabled(this, item)) {
        this.dateSelectItem(item.date);
      }
    },
    dateSelectItem: function dateSelectItem(date3) {
      var type3 = this.type, datePanelType = this.datePanelType;
      var isWeekType = type3 === "week";
      if (type3 === "month") {
        if (datePanelType === "year") {
          this.datePanelType = "month";
          this.dateCheckMonth(date3);
        } else {
          this.dateChange(date3);
          this.hidePanel();
        }
      } else if (type3 === "year") {
        this.hidePanel();
        this.dateChange(date3);
      } else if (type3 === "quarter") {
        if (datePanelType === "year") {
          this.datePanelType = "quarter";
          this.dateCheckMonth(date3);
        } else {
          this.dateChange(date3);
          this.hidePanel();
        }
      } else {
        if (datePanelType === "month") {
          this.datePanelType = type3 === "week" ? type3 : "day";
          this.dateCheckMonth(date3);
        } else if (datePanelType === "year") {
          this.datePanelType = "month";
          this.dateCheckMonth(date3);
        } else {
          this.dateChange(date3);
          this.hidePanel();
        }
      }
      if (isWeekType) {
        this.changeValue();
      }
    },
    dateMouseenterEvent: function dateMouseenterEvent(item) {
      if (!isDateDisabled(this, item)) {
        var datePanelType = this.datePanelType;
        if (datePanelType === "month") {
          this.dateMoveMonth(item.date);
        } else if (datePanelType === "quarter") {
          this.dateMoveQuarter(item.date);
        } else if (datePanelType === "year") {
          this.dateMoveYear(item.date);
        } else {
          this.dateMoveDay(item.date);
        }
      }
    },
    dateHourEvent: function dateHourEvent(evnt, item) {
      this.datetimePanelValue.setHours(item.value);
      this.dateTimeChangeEvent(evnt);
    },
    dateConfirmEvent: function dateConfirmEvent() {
      this.dateChange(this.dateValue || this.currentDate);
      this.hidePanel();
    },
    dateMinuteEvent: function dateMinuteEvent(evnt, item) {
      this.datetimePanelValue.setMinutes(item.value);
      this.dateTimeChangeEvent(evnt);
    },
    dateSecondEvent: function dateSecondEvent(evnt, item) {
      this.datetimePanelValue.setSeconds(item.value);
      this.dateTimeChangeEvent(evnt);
    },
    dateTimeChangeEvent: function dateTimeChangeEvent(evnt) {
      this.datetimePanelValue = new Date(this.datetimePanelValue.getTime());
      this.updateTimePos(evnt.currentTarget);
    },
    updateTimePos: function updateTimePos(liElem) {
      if (liElem) {
        var height3 = liElem.offsetHeight;
        liElem.parentNode.scrollTop = liElem.offsetTop - height3 * 4;
      }
    },
    dateMoveDay: function dateMoveDay(offsetDay) {
      if (!isDateDisabled(this, {
        date: offsetDay
      })) {
        if (!this.dayList.some(function(item) {
          return _xeUtils$m.default.isDateSame(item.date, offsetDay, "yyyyMMdd");
        })) {
          this.dateCheckMonth(offsetDay);
        }
        this.dateParseValue(offsetDay);
      }
    },
    dateMoveMonth: function dateMoveMonth(offsetMonth) {
      if (!isDateDisabled(this, {
        date: offsetMonth
      })) {
        if (!this.monthList.some(function(item) {
          return _xeUtils$m.default.isDateSame(item.date, offsetMonth, "yyyyMM");
        })) {
          this.dateCheckMonth(offsetMonth);
        }
        this.dateParseValue(offsetMonth);
      }
    },
    dateMoveQuarter: function dateMoveQuarter(offsetQuarter) {
      if (!isDateDisabled(this, {
        date: offsetQuarter
      })) {
        if (!this.quarterList.some(function(item) {
          return _xeUtils$m.default.isDateSame(item.date, offsetQuarter, "yyyyq");
        })) {
          this.dateCheckMonth(offsetQuarter);
        }
        this.dateParseValue(offsetQuarter);
      }
    },
    dateMoveYear: function dateMoveYear(offsetYear) {
      if (!isDateDisabled(this, {
        date: offsetYear
      })) {
        if (!this.yearList.some(function(item) {
          return _xeUtils$m.default.isDateSame(item.date, offsetYear, "yyyy");
        })) {
          this.dateCheckMonth(offsetYear);
        }
        this.dateParseValue(offsetYear);
      }
    },
    dateParseValue: function dateParseValue(date3) {
      var type3 = this.type, dateLabelFormat3 = this.dateLabelFormat, valueFormat = this.valueFormat, firstDayOfWeek2 = this.firstDayOfWeek;
      var dValue = null;
      var dLabel = "";
      if (date3) {
        dValue = this.parseDate(date3, valueFormat);
      }
      if (_xeUtils$m.default.isValidDate(dValue)) {
        dLabel = _xeUtils$m.default.toDateString(dValue, dateLabelFormat3, {
          firstDay: firstDayOfWeek2
        });
        if (dateLabelFormat3 && type3 === "week") {
          var firstWeekDate = _xeUtils$m.default.getWhatWeek(dValue, 0, firstDayOfWeek2, firstDayOfWeek2);
          if (firstWeekDate.getFullYear() < dValue.getFullYear()) {
            var yyIndex = dateLabelFormat3.indexOf("yyyy");
            if (yyIndex > -1) {
              var yyNum = Number(dLabel.substring(yyIndex, yyIndex + 4));
              if (yyNum && !isNaN(yyNum)) {
                dLabel = dLabel.replace("".concat(yyNum), "".concat(yyNum - 1));
              }
            }
          }
        }
      } else {
        dValue = null;
      }
      this.datePanelValue = dValue;
      this.datePanelLabel = dLabel;
    },
    dateOffsetEvent: function dateOffsetEvent(evnt) {
      var isActivated = this.isActivated, datePanelValue = this.datePanelValue, datePanelType = this.datePanelType, firstDayOfWeek2 = this.firstDayOfWeek;
      if (isActivated) {
        evnt.preventDefault();
        var keyCode = evnt.keyCode;
        var isLeftArrow = keyCode === 37;
        var isUpArrow = keyCode === 38;
        var isRightArrow = keyCode === 39;
        var isDwArrow = keyCode === 40;
        if (datePanelType === "year") {
          var offsetYear = _xeUtils$m.default.getWhatYear(datePanelValue || Date.now(), 0, "first");
          if (isLeftArrow) {
            offsetYear = _xeUtils$m.default.getWhatYear(offsetYear, -1);
          } else if (isUpArrow) {
            offsetYear = _xeUtils$m.default.getWhatYear(offsetYear, -4);
          } else if (isRightArrow) {
            offsetYear = _xeUtils$m.default.getWhatYear(offsetYear, 1);
          } else if (isDwArrow) {
            offsetYear = _xeUtils$m.default.getWhatYear(offsetYear, 4);
          }
          this.dateMoveYear(offsetYear);
        } else if (datePanelType === "quarter") {
          var offsetQuarter = _xeUtils$m.default.getWhatQuarter(datePanelValue || Date.now(), 0, "first");
          if (isLeftArrow) {
            offsetQuarter = _xeUtils$m.default.getWhatQuarter(offsetQuarter, -1);
          } else if (isUpArrow) {
            offsetQuarter = _xeUtils$m.default.getWhatQuarter(offsetQuarter, -2);
          } else if (isRightArrow) {
            offsetQuarter = _xeUtils$m.default.getWhatQuarter(offsetQuarter, 1);
          } else if (isDwArrow) {
            offsetQuarter = _xeUtils$m.default.getWhatQuarter(offsetQuarter, 2);
          }
          this.dateMoveQuarter(offsetQuarter);
        } else if (datePanelType === "month") {
          var offsetMonth = _xeUtils$m.default.getWhatMonth(datePanelValue || Date.now(), 0, "first");
          if (isLeftArrow) {
            offsetMonth = _xeUtils$m.default.getWhatMonth(offsetMonth, -1);
          } else if (isUpArrow) {
            offsetMonth = _xeUtils$m.default.getWhatMonth(offsetMonth, -4);
          } else if (isRightArrow) {
            offsetMonth = _xeUtils$m.default.getWhatMonth(offsetMonth, 1);
          } else if (isDwArrow) {
            offsetMonth = _xeUtils$m.default.getWhatMonth(offsetMonth, 4);
          }
          this.dateMoveMonth(offsetMonth);
        } else {
          var offsetDay = datePanelValue || _xeUtils$m.default.getWhatDay(Date.now(), 0, "first");
          if (isLeftArrow) {
            offsetDay = _xeUtils$m.default.getWhatDay(offsetDay, -1);
          } else if (isUpArrow) {
            offsetDay = _xeUtils$m.default.getWhatWeek(offsetDay, -1, firstDayOfWeek2);
          } else if (isRightArrow) {
            offsetDay = _xeUtils$m.default.getWhatDay(offsetDay, 1);
          } else if (isDwArrow) {
            offsetDay = _xeUtils$m.default.getWhatWeek(offsetDay, 1, firstDayOfWeek2);
          }
          this.dateMoveDay(offsetDay);
        }
      }
    },
    datePgOffsetEvent: function datePgOffsetEvent(evnt) {
      var isActivated = this.isActivated;
      if (isActivated) {
        var isPgUp = evnt.keyCode === 33;
        evnt.preventDefault();
        if (isPgUp) {
          this.datePrevEvent(evnt);
        } else {
          this.dateNextEvent(evnt);
        }
      }
    },
    dateChange: function dateChange(date3) {
      var value6 = this.value, datetimePanelValue = this.datetimePanelValue, dateValueFormat2 = this.dateValueFormat, firstDayOfWeek2 = this.firstDayOfWeek;
      if (this.type === "week") {
        var sWeek = _xeUtils$m.default.toNumber(this.selectDay);
        date3 = _xeUtils$m.default.getWhatWeek(date3, 0, sWeek, firstDayOfWeek2);
      } else if (this.hasTime) {
        date3.setHours(datetimePanelValue.getHours());
        date3.setMinutes(datetimePanelValue.getMinutes());
        date3.setSeconds(datetimePanelValue.getSeconds());
      }
      var inpVal = _xeUtils$m.default.toDateString(date3, dateValueFormat2, {
        firstDay: firstDayOfWeek2
      });
      this.dateCheckMonth(date3);
      if (!_xeUtils$m.default.isEqual(value6, inpVal)) {
        this.emitModel(inpVal, {
          type: "update"
        });
      }
    },
    dateCheckMonth: function dateCheckMonth(date3) {
      var month = _xeUtils$m.default.getWhatMonth(date3, 0, "first");
      if (!_xeUtils$m.default.isEqual(month, this.selectMonth)) {
        this.selectMonth = month;
      }
    },
    dateOpenPanel: function dateOpenPanel() {
      var _this4 = this;
      var type3 = this.type, dateValue2 = this.dateValue;
      if (["year", "quarter", "month", "week"].indexOf(type3) > -1) {
        this.datePanelType = type3;
      } else {
        this.datePanelType = "day";
      }
      this.currentDate = _xeUtils$m.default.getWhatDay(Date.now(), 0, "first");
      if (dateValue2) {
        this.dateMonthHandle(dateValue2, 0);
        this.dateParseValue(dateValue2);
      } else {
        this.dateNowHandle();
      }
      if (this.hasTime) {
        this.datetimePanelValue = this.datePanelValue || _xeUtils$m.default.getWhatDay(Date.now(), 0, "first");
        this.$nextTick(function() {
          _xeUtils$m.default.arrayEach(_this4.$refs.timeBody.querySelectorAll("li.is--selected"), _this4.updateTimePos);
        });
      }
    },
    dateRevert: function dateRevert() {
      this.inputValue = this.datePanelLabel;
    },
    updateZindex: function updateZindex3() {
      if (this.panelIndex < _tools$n.UtilTools.getLastZIndex()) {
        this.panelIndex = _tools$n.UtilTools.nextZIndex();
      }
    },
    showPanel: function showPanel() {
      var _this5 = this;
      var disabled = this.disabled, visiblePanel = this.visiblePanel, isDatePickerType2 = this.isDatePickerType;
      if (!disabled && !visiblePanel) {
        clearTimeout(this.hidePanelTimeout);
        this.isActivated = true;
        this.animatVisible = true;
        if (isDatePickerType2) {
          this.dateOpenPanel();
        }
        setTimeout(function() {
          _this5.visiblePanel = true;
        }, 10);
        this.updateZindex();
        this.updatePlacement();
      }
    },
    hidePanel: function hidePanel() {
      var _this6 = this;
      this.visiblePanel = false;
      this.hidePanelTimeout = setTimeout(function() {
        _this6.animatVisible = false;
      }, 350);
    },
    updatePlacement: function updatePlacement() {
      var _this7 = this;
      return this.$nextTick().then(function() {
        var $refs = _this7.$refs, transfer = _this7.transfer, placement = _this7.placement, panelIndex = _this7.panelIndex;
        var targetElem = $refs.input;
        var panelElem = $refs.panel;
        if (targetElem && panelElem) {
          var targetHeight = targetElem.offsetHeight;
          var targetWidth = targetElem.offsetWidth;
          var panelHeight = panelElem.offsetHeight;
          var panelWidth = panelElem.offsetWidth;
          var marginSize = 5;
          var panelStyle = {
            zIndex: panelIndex
          };
          var _DomTools$getAbsolute = _tools$n.DomTools.getAbsolutePos(targetElem), boundingTop = _DomTools$getAbsolute.boundingTop, boundingLeft = _DomTools$getAbsolute.boundingLeft, visibleHeight = _DomTools$getAbsolute.visibleHeight, visibleWidth = _DomTools$getAbsolute.visibleWidth;
          var panelPlacement = "bottom";
          if (transfer) {
            var left = boundingLeft;
            var top = boundingTop + targetHeight;
            if (placement === "top") {
              panelPlacement = "top";
              top = boundingTop - panelHeight;
            } else if (!placement) {
              if (top + panelHeight + marginSize > visibleHeight) {
                panelPlacement = "top";
                top = boundingTop - panelHeight;
              }
              if (top < marginSize) {
                panelPlacement = "bottom";
                top = boundingTop + targetHeight;
              }
            }
            if (left + panelWidth + marginSize > visibleWidth) {
              left -= left + panelWidth + marginSize - visibleWidth;
            }
            if (left < marginSize) {
              left = marginSize;
            }
            Object.assign(panelStyle, {
              left: "".concat(left, "px"),
              top: "".concat(top, "px"),
              minWidth: "".concat(targetWidth, "px")
            });
          } else {
            if (placement === "top") {
              panelPlacement = "top";
              panelStyle.bottom = "".concat(targetHeight, "px");
            } else if (!placement) {
              if (boundingTop + targetHeight + panelHeight > visibleHeight) {
                if (boundingTop - targetHeight - panelHeight > marginSize) {
                  panelPlacement = "top";
                  panelStyle.bottom = "".concat(targetHeight, "px");
                }
              }
            }
          }
          _this7.panelStyle = panelStyle;
          _this7.panelPlacement = panelPlacement;
          return _this7.$nextTick();
        }
      });
    },
    handleGlobalMousedownEvent: function handleGlobalMousedownEvent2(evnt) {
      var $refs = this.$refs, $el = this.$el, disabled = this.disabled, visiblePanel = this.visiblePanel, isActivated = this.isActivated;
      if (!disabled && isActivated) {
        this.isActivated = _tools$n.DomTools.getEventTargetNode(evnt, $el).flag || _tools$n.DomTools.getEventTargetNode(evnt, $refs.panel).flag;
        if (!this.isActivated) {
          if (this.isDatePickerType) {
            if (visiblePanel) {
              this.hidePanel();
              this.afterCheckValue();
            }
          } else {
            this.afterCheckValue();
          }
        }
      }
    },
    handleGlobalKeydownEvent: function handleGlobalKeydownEvent3(evnt) {
      var isDatePickerType2 = this.isDatePickerType, visiblePanel = this.visiblePanel, clearable = this.clearable, disabled = this.disabled;
      if (!disabled) {
        var keyCode = evnt.keyCode;
        var isTab = keyCode === 9;
        var isDel = keyCode === 46;
        var isEsc = keyCode === 27;
        var isEnter = keyCode === 13;
        var isLeftArrow = keyCode === 37;
        var isUpArrow = keyCode === 38;
        var isRightArrow = keyCode === 39;
        var isDwArrow = keyCode === 40;
        var isPgUp = keyCode === 33;
        var isPgDn = keyCode === 34;
        var operArrow = isLeftArrow || isUpArrow || isRightArrow || isDwArrow;
        var isActivated = this.isActivated;
        if (isTab) {
          if (isActivated) {
            this.afterCheckValue();
          }
          isActivated = false;
          this.isActivated = isActivated;
        } else if (operArrow) {
          if (isDatePickerType2) {
            if (isActivated) {
              if (visiblePanel) {
                this.dateOffsetEvent(evnt);
              } else if (isUpArrow || isDwArrow) {
                this.datePickerOpenEvent(evnt);
              }
            }
          }
        } else if (isEnter) {
          if (isDatePickerType2) {
            if (visiblePanel) {
              if (this.datePanelValue) {
                this.dateSelectItem(this.datePanelValue);
              } else {
                this.hidePanel();
              }
            } else if (isActivated) {
              this.datePickerOpenEvent(evnt);
            }
          }
        } else if (isPgUp || isPgDn) {
          if (isDatePickerType2) {
            if (isActivated) {
              this.datePgOffsetEvent(evnt);
            }
          }
        }
        if (isTab || isEsc) {
          if (visiblePanel) {
            this.hidePanel();
          }
        } else if (isDel && clearable) {
          if (isActivated) {
            this.clearValueEvent(evnt, null);
          }
        }
      }
    },
    handleGlobalMousewheelEvent: function handleGlobalMousewheelEvent2(evnt) {
      var $refs = this.$refs, disabled = this.disabled, visiblePanel = this.visiblePanel;
      if (!disabled) {
        if (visiblePanel) {
          if (_tools$n.DomTools.getEventTargetNode(evnt, $refs.panel).flag) {
            this.updatePlacement();
          } else {
            this.hidePanel();
            this.afterCheckValue();
          }
        }
      }
    },
    handleGlobalBlurEvent: function handleGlobalBlurEvent2() {
      var isActivated = this.isActivated, visiblePanel = this.visiblePanel;
      if (visiblePanel) {
        this.hidePanel();
        this.afterCheckValue();
      } else if (isActivated) {
        this.afterCheckValue();
      }
    }
  }
};
input$2.default = _default2$g;
var checkbox$2 = {};
Object.defineProperty(checkbox$2, "__esModule", {
  value: true
});
checkbox$2.default = void 0;
var _tools$m = tools;
var _xeUtils$l = _interopRequireDefault$18(xeUtils);
var _conf$l = _interopRequireDefault$18(conf);
var _size$c = _interopRequireDefault$18(size);
function _interopRequireDefault$18(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
function _defineProperty$f(obj, key, value6) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value: value6, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value6;
  }
  return obj;
}
var _default2$f = {
  name: "VxeCheckbox",
  mixins: [_size$c.default],
  props: {
    value: [String, Number, Boolean],
    label: [String, Number],
    indeterminate: Boolean,
    title: [String, Number],
    content: [String, Number],
    checkedValue: {
      type: [String, Number, Boolean],
      default: true
    },
    uncheckedValue: {
      type: [String, Number, Boolean],
      default: false
    },
    disabled: Boolean,
    size: {
      type: String,
      default: function _default64() {
        return _conf$l.default.checkbox.size || _conf$l.default.size;
      }
    }
  },
  inject: {
    $xecheckboxgroup: {
      default: null
    }
  },
  computed: {
    isGroup: function isGroup() {
      return this.$xecheckboxgroup;
    },
    isDisabled: function isDisabled() {
      return this.disabled || this.isGroup && this.$xecheckboxgroup.disabled;
    }
  },
  render: function render7(h) {
    var _ref;
    var $scopedSlots = this.$scopedSlots, $xecheckboxgroup = this.$xecheckboxgroup, isGroup3 = this.isGroup, isDisabled4 = this.isDisabled, title = this.title, vSize8 = this.vSize, indeterminate = this.indeterminate, value6 = this.value, label = this.label, content2 = this.content, checkedValue = this.checkedValue;
    var attrs2 = {};
    if (title) {
      attrs2.title = title;
    }
    return h("label", {
      class: ["vxe-checkbox", (_ref = {}, _defineProperty$f(_ref, "size--".concat(vSize8), vSize8), _defineProperty$f(_ref, "is--indeterminate", indeterminate), _defineProperty$f(_ref, "is--disabled", isDisabled4), _ref)],
      attrs: attrs2
    }, [h("input", {
      class: "vxe-checkbox--input",
      attrs: {
        type: "checkbox",
        disabled: isDisabled4
      },
      domProps: {
        checked: isGroup3 ? _xeUtils$l.default.includes($xecheckboxgroup.value, label) : value6 === checkedValue
      },
      on: {
        change: this.changeEvent
      }
    }), h("span", {
      class: "vxe-checkbox--icon"
    }), h("span", {
      class: "vxe-checkbox--label"
    }, $scopedSlots.default ? $scopedSlots.default.call(this, {}) : [_tools$m.UtilTools.getFuncText(content2)])]);
  },
  methods: {
    changeEvent: function changeEvent2(evnt) {
      var $xecheckboxgroup = this.$xecheckboxgroup, isGroup3 = this.isGroup, isDisabled4 = this.isDisabled, label = this.label, checkedValue = this.checkedValue, uncheckedValue = this.uncheckedValue;
      if (!isDisabled4) {
        var checked = evnt.target.checked;
        var value6 = checked ? checkedValue : uncheckedValue;
        var params = {
          checked,
          value: value6,
          label,
          $event: evnt
        };
        if (isGroup3) {
          $xecheckboxgroup.handleChecked(params);
        } else {
          this.$emit("input", value6);
          this.$emit("change", params);
        }
      }
    }
  }
};
checkbox$2.default = _default2$f;
var select$2 = {};
Object.defineProperty(select$2, "__esModule", {
  value: true
});
select$2.default = void 0;
select$2.renderOptgroup = renderOptgroup;
select$2.renderOption = renderOption;
var _xeUtils$k = _interopRequireDefault$17(xeUtils);
var _input$2 = _interopRequireDefault$17(input$2);
var _conf$k = _interopRequireDefault$17(conf);
var _size$b = _interopRequireDefault$17(size);
var _tools$l = tools;
function _interopRequireDefault$17(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
function _defineProperty$e(obj, key, value6) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value: value6, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value6;
  }
  return obj;
}
function isOptionVisible(option2) {
  return option2.visible !== false;
}
function getOptUniqueId() {
  return _xeUtils$k.default.uniqueId("opt_");
}
function getOptkey(_vm) {
  return _vm.optionId || "_X_ID";
}
function getOptid(_vm, option2) {
  var optid = option2[getOptkey(_vm)];
  return optid ? encodeURIComponent(optid) : "";
}
function findOffsetOption(_vm, optionValue, isUpArrow) {
  var isGroup3 = _vm.isGroup, visibleOptionList = _vm.visibleOptionList, visibleGroupList = _vm.visibleGroupList, valueField2 = _vm.valueField, groupOptionsField2 = _vm.groupOptionsField;
  var firstOption;
  var prevOption;
  var nextOption;
  var currOption;
  if (isGroup3) {
    for (var gIndex = 0; gIndex < visibleGroupList.length; gIndex++) {
      var group2 = visibleGroupList[gIndex];
      var groupOptionList = group2[groupOptionsField2];
      var isGroupDisabled = group2.disabled;
      if (groupOptionList) {
        for (var index2 = 0; index2 < groupOptionList.length; index2++) {
          var option2 = groupOptionList[index2];
          var isVisible = isOptionVisible(option2);
          var isDisabled4 = isGroupDisabled || option2.disabled;
          if (!firstOption && !isDisabled4) {
            firstOption = option2;
          }
          if (currOption) {
            if (isVisible && !isDisabled4) {
              nextOption = option2;
              if (!isUpArrow) {
                return {
                  offsetOption: nextOption
                };
              }
            }
          }
          if (optionValue === option2[valueField2]) {
            currOption = option2;
            if (isUpArrow) {
              return {
                offsetOption: prevOption
              };
            }
          } else {
            if (isVisible && !isDisabled4) {
              prevOption = option2;
            }
          }
        }
      }
    }
  } else {
    for (var _index = 0; _index < visibleOptionList.length; _index++) {
      var _option2 = visibleOptionList[_index];
      var _isDisabled = _option2.disabled;
      if (!firstOption && !_isDisabled) {
        firstOption = _option2;
      }
      if (currOption) {
        if (!_isDisabled) {
          nextOption = _option2;
          if (!isUpArrow) {
            return {
              offsetOption: nextOption
            };
          }
        }
      }
      if (optionValue === _option2[valueField2]) {
        currOption = _option2;
        if (isUpArrow) {
          return {
            offsetOption: prevOption
          };
        }
      } else {
        if (!_isDisabled) {
          prevOption = _option2;
        }
      }
    }
  }
  return {
    firstOption
  };
}
function findOption(_vm, optionValue) {
  var isGroup3 = _vm.isGroup, fullOptionList = _vm.fullOptionList, fullGroupList = _vm.fullGroupList, valueField2 = _vm.valueField;
  if (isGroup3) {
    for (var gIndex = 0; gIndex < fullGroupList.length; gIndex++) {
      var group2 = fullGroupList[gIndex];
      if (group2.options) {
        for (var index2 = 0; index2 < group2.options.length; index2++) {
          var option2 = group2.options[index2];
          if (optionValue === option2[valueField2]) {
            return option2;
          }
        }
      }
    }
  }
  return fullOptionList.find(function(item) {
    return optionValue === item[valueField2];
  });
}
function getSelectLabel(_vm, value6) {
  var item = findOption(_vm, value6);
  return _xeUtils$k.default.toValueString(item ? item[_vm.labelField] : value6);
}
function renderOption(h, _vm, list2, group2) {
  var isGroup3 = _vm.isGroup, labelField2 = _vm.labelField, valueField2 = _vm.valueField, optionKey = _vm.optionKey, value6 = _vm.value, multiple = _vm.multiple, currentValue = _vm.currentValue;
  return list2.map(function(option2, cIndex) {
    var slots = option2.slots;
    var isVisible = !isGroup3 || isOptionVisible(option2);
    var isDisabled4 = group2 && group2.disabled || option2.disabled;
    var optionValue = option2[valueField2];
    var optid = getOptid(_vm, option2);
    var defaultSlot = slots ? slots.default : null;
    return isVisible ? h("div", {
      key: optionKey ? optid : cIndex,
      class: ["vxe-select-option", option2.className, {
        "is--disabled": isDisabled4,
        "is--selected": multiple ? value6 && value6.indexOf(optionValue) > -1 : value6 === optionValue,
        "is--hover": currentValue === optionValue
      }],
      attrs: {
        optid
      },
      on: {
        mousedown: _vm.mousedownOptionEvent,
        click: function click(evnt) {
          if (!isDisabled4) {
            _vm.changeOptionEvent(evnt, optionValue);
          }
        },
        mouseenter: function mouseenter() {
          if (!isDisabled4) {
            _vm.setCurrentOption(option2);
          }
        }
      }
    }, defaultSlot ? _vm.callSlot(defaultSlot, {
      option: option2,
      $select: _vm
    }, h) : _tools$l.UtilTools.formatText(_tools$l.UtilTools.getFuncText(option2[labelField2]))) : null;
  });
}
function renderOptgroup(h, _vm) {
  var optionKey = _vm.optionKey, visibleGroupList = _vm.visibleGroupList, groupLabelField2 = _vm.groupLabelField, groupOptionsField2 = _vm.groupOptionsField;
  return visibleGroupList.map(function(group2, gIndex) {
    var slots = group2.slots;
    var optid = getOptid(_vm, group2);
    var isGroupDisabled = group2.disabled;
    var defaultSlot = slots ? slots.default : null;
    return h("div", {
      key: optionKey ? optid : gIndex,
      class: ["vxe-optgroup", group2.className, {
        "is--disabled": isGroupDisabled
      }],
      attrs: {
        optid
      }
    }, [h("div", {
      class: "vxe-optgroup--title"
    }, defaultSlot ? _vm.callSlot(defaultSlot, {
      option: group2,
      $select: _vm
    }, h) : _tools$l.UtilTools.getFuncText(group2[groupLabelField2])), h("div", {
      class: "vxe-optgroup--wrapper"
    }, renderOption(h, _vm, group2[groupOptionsField2], group2))]);
  });
}
function renderOpts(h, _vm) {
  var isGroup3 = _vm.isGroup, visibleGroupList = _vm.visibleGroupList, visibleOptionList = _vm.visibleOptionList;
  if (isGroup3) {
    if (visibleGroupList.length) {
      return renderOptgroup(h, _vm);
    }
  } else {
    if (visibleOptionList.length) {
      return renderOption(h, _vm, visibleOptionList);
    }
  }
  return [h("div", {
    class: "vxe-select--empty-placeholder"
  }, _vm.emptyText || _conf$k.default.i18n("vxe.select.emptyText"))];
}
var _default2$e = {
  name: "VxeSelect",
  mixins: [_size$b.default],
  props: {
    value: null,
    clearable: Boolean,
    placeholder: String,
    loading: Boolean,
    disabled: Boolean,
    multiple: Boolean,
    multiCharOverflow: {
      type: [Number, String],
      default: function _default65() {
        return _conf$k.default.select.multiCharOverflow;
      }
    },
    prefixIcon: String,
    placement: String,
    options: Array,
    optionProps: Object,
    optionGroups: Array,
    optionGroupProps: Object,
    className: [String, Function],
    size: {
      type: String,
      default: function _default66() {
        return _conf$k.default.select.size || _conf$k.default.size;
      }
    },
    emptyText: String,
    optionId: {
      type: String,
      default: function _default67() {
        return _conf$k.default.select.optionId;
      }
    },
    optionKey: Boolean,
    transfer: {
      type: Boolean,
      default: function _default68() {
        return _conf$k.default.select.transfer;
      }
    }
  },
  components: {
    VxeInput: _input$2.default
  },
  provide: function provide2() {
    return {
      $xeselect: this
    };
  },
  data: function data6() {
    return {
      inited: false,
      collectOption: [],
      fullGroupList: [],
      fullOptionList: [],
      visibleGroupList: [],
      visibleOptionList: [],
      panelIndex: 0,
      panelStyle: null,
      panelPlacement: null,
      currentValue: null,
      visiblePanel: false,
      animatVisible: false,
      isActivated: false
    };
  },
  computed: {
    propsOpts: function propsOpts() {
      return this.optionProps || {};
    },
    groupPropsOpts: function groupPropsOpts() {
      return this.optionGroupProps || {};
    },
    labelField: function labelField() {
      return this.propsOpts.label || "label";
    },
    valueField: function valueField() {
      return this.propsOpts.value || "value";
    },
    groupLabelField: function groupLabelField() {
      return this.groupPropsOpts.label || "label";
    },
    groupOptionsField: function groupOptionsField() {
      return this.groupPropsOpts.options || "options";
    },
    isGroup: function isGroup2() {
      return this.fullGroupList.some(function(item) {
        return item.options && item.options.length;
      });
    },
    multiMaxCharNum: function multiMaxCharNum() {
      return _xeUtils$k.default.toNumber(this.multiCharOverflow);
    },
    selectLabel: function selectLabel() {
      var _this = this;
      var value6 = this.value, multiple = this.multiple, multiMaxCharNum2 = this.multiMaxCharNum;
      if (value6 && multiple) {
        return (_xeUtils$k.default.isArray(value6) ? value6 : [value6]).map(function(val) {
          var label = getSelectLabel(_this, val);
          if (multiMaxCharNum2 > 0 && label.length > multiMaxCharNum2) {
            return "".concat(label.substring(0, multiMaxCharNum2), "...");
          }
          return label;
        }).join(", ");
      }
      return getSelectLabel(this, value6);
    }
  },
  watch: {
    collectOption: function collectOption(value6) {
      if (value6.some(function(item) {
        return item.options && item.options.length;
      })) {
        this.fullOptionList = [];
        this.fullGroupList = value6;
      } else {
        this.fullGroupList = [];
        this.fullOptionList = value6;
      }
      this.cacheItemMap();
    },
    options: function options(value6) {
      this.fullGroupList = [];
      this.fullOptionList = value6;
      this.cacheItemMap();
    },
    optionGroups: function optionGroups(value6) {
      this.fullOptionList = [];
      this.fullGroupList = value6;
      this.cacheItemMap();
    }
  },
  created: function created4() {
    var options2 = this.options, optionGroups2 = this.optionGroups;
    if (optionGroups2) {
      this.fullGroupList = optionGroups2;
    } else if (options2) {
      this.fullOptionList = options2;
    }
    this.cacheItemMap();
    _tools$l.GlobalEvent.on(this, "mousewheel", this.handleGlobalMousewheelEvent);
    _tools$l.GlobalEvent.on(this, "mousedown", this.handleGlobalMousedownEvent);
    _tools$l.GlobalEvent.on(this, "keydown", this.handleGlobalKeydownEvent);
    _tools$l.GlobalEvent.on(this, "blur", this.handleGlobalBlurEvent);
  },
  beforeDestroy: function beforeDestroy6() {
    var panelElem = this.$refs.panel;
    if (panelElem && panelElem.parentNode) {
      panelElem.parentNode.removeChild(panelElem);
    }
  },
  destroyed: function destroyed4() {
    _tools$l.GlobalEvent.off(this, "mousewheel");
    _tools$l.GlobalEvent.off(this, "mousedown");
    _tools$l.GlobalEvent.off(this, "keydown");
    _tools$l.GlobalEvent.off(this, "blur");
  },
  render: function render8(h) {
    var _ref, _ref2;
    var $scopedSlots = this.$scopedSlots, vSize8 = this.vSize, className = this.className, inited = this.inited, isActivated = this.isActivated, loading = this.loading, disabled = this.disabled, visiblePanel = this.visiblePanel;
    var prefixSlot = $scopedSlots.prefix;
    return h("div", {
      class: ["vxe-select", className ? _xeUtils$k.default.isFunction(className) ? className({
        $select: this
      }) : className : "", (_ref = {}, _defineProperty$e(_ref, "size--".concat(vSize8), vSize8), _defineProperty$e(_ref, "is--visivle", visiblePanel), _defineProperty$e(_ref, "is--disabled", disabled), _defineProperty$e(_ref, "is--loading", loading), _defineProperty$e(_ref, "is--active", isActivated), _ref)]
    }, [h("div", {
      class: "vxe-select-slots",
      ref: "hideOption"
    }, this.$slots.default), h("vxe-input", {
      ref: "input",
      props: {
        clearable: this.clearable,
        placeholder: this.placeholder,
        readonly: true,
        disabled,
        type: "text",
        prefixIcon: this.prefixIcon,
        suffixIcon: loading ? _conf$k.default.icon.SELECT_LOADED : visiblePanel ? _conf$k.default.icon.SELECT_OPEN : _conf$k.default.icon.SELECT_CLOSE,
        value: this.selectLabel
      },
      on: {
        clear: this.clearEvent,
        click: this.togglePanelEvent,
        focus: this.focusEvent,
        blur: this.blurEvent,
        "suffix-click": this.togglePanelEvent
      },
      scopedSlots: prefixSlot ? {
        prefix: function prefix() {
          return prefixSlot({});
        }
      } : {}
    }), h("div", {
      ref: "panel",
      class: ["vxe-table--ignore-clear vxe-select--panel", (_ref2 = {}, _defineProperty$e(_ref2, "size--".concat(vSize8), vSize8), _defineProperty$e(_ref2, "is--transfer", this.transfer), _defineProperty$e(_ref2, "animat--leave", !loading && this.animatVisible), _defineProperty$e(_ref2, "animat--enter", !loading && visiblePanel), _ref2)],
      attrs: {
        placement: this.panelPlacement
      },
      style: this.panelStyle
    }, inited ? [h("div", {
      ref: "optWrapper",
      class: "vxe-select-option--wrapper"
    }, renderOpts(h, this))] : null)]);
  },
  methods: {
    callSlot: function callSlot2(slotFunc, params, h) {
      if (slotFunc) {
        var $scopedSlots = this.$scopedSlots;
        if (_xeUtils$k.default.isString(slotFunc)) {
          slotFunc = $scopedSlots[slotFunc] || null;
        }
        if (_xeUtils$k.default.isFunction(slotFunc)) {
          return slotFunc.call(this, params, h);
        }
      }
      return [];
    },
    cacheItemMap: function cacheItemMap() {
      var _this2 = this;
      var fullOptionList = this.fullOptionList, fullGroupList = this.fullGroupList, groupOptionsField2 = this.groupOptionsField;
      var optkey = getOptkey(this);
      var handleOptis = function handleOptis2(item) {
        if (!getOptid(_this2, item)) {
          item[optkey] = getOptUniqueId();
        }
      };
      if (fullGroupList.length) {
        fullGroupList.forEach(function(group2) {
          handleOptis(group2);
          if (group2[groupOptionsField2]) {
            group2[groupOptionsField2].forEach(handleOptis);
          }
        });
      } else if (fullOptionList.length) {
        fullOptionList.forEach(handleOptis);
      }
      this.refreshOption();
    },
    refreshOption: function refreshOption() {
      var isGroup3 = this.isGroup, fullOptionList = this.fullOptionList, fullGroupList = this.fullGroupList;
      if (isGroup3) {
        this.visibleGroupList = fullGroupList.filter(isOptionVisible);
      } else {
        this.visibleOptionList = fullOptionList.filter(isOptionVisible);
      }
      return this.$nextTick();
    },
    setCurrentOption: function setCurrentOption(option2) {
      if (option2) {
        this.currentValue = option2[this.valueField];
      }
    },
    scrollToOption: function scrollToOption(option2, isAlignBottom) {
      var _this3 = this;
      return this.$nextTick().then(function() {
        if (option2) {
          var $refs = _this3.$refs;
          var optWrapperElem = $refs.optWrapper;
          var optElem = $refs.panel.querySelector("[optid='".concat(getOptid(_this3, option2), "']"));
          if (optWrapperElem && optElem) {
            var wrapperHeight = optWrapperElem.offsetHeight;
            var offsetPadding = 5;
            if (isAlignBottom) {
              if (optElem.offsetTop + optElem.offsetHeight - optWrapperElem.scrollTop > wrapperHeight) {
                optWrapperElem.scrollTop = optElem.offsetTop + optElem.offsetHeight - wrapperHeight;
              }
            } else {
              if (optElem.offsetTop + offsetPadding < optWrapperElem.scrollTop || optElem.offsetTop + offsetPadding > optWrapperElem.scrollTop + optWrapperElem.clientHeight) {
                optWrapperElem.scrollTop = optElem.offsetTop - offsetPadding;
              }
            }
          }
        }
      });
    },
    clearEvent: function clearEvent(params, evnt) {
      this.clearValueEvent(evnt, null);
      this.hideOptionPanel();
    },
    clearValueEvent: function clearValueEvent2(evnt, selectValue) {
      this.changeEvent(evnt, selectValue);
      this.$emit("clear", {
        value: selectValue,
        $event: evnt
      });
    },
    changeEvent: function changeEvent3(evnt, selectValue) {
      if (selectValue !== this.value) {
        this.$emit("input", selectValue);
        this.$emit("change", {
          value: selectValue,
          $event: evnt
        });
      }
    },
    mousedownOptionEvent: function mousedownOptionEvent(evnt) {
      var isLeftBtn = evnt.button === 0;
      if (isLeftBtn) {
        evnt.stopPropagation();
      }
    },
    changeOptionEvent: function changeOptionEvent(evnt, selectValue) {
      var value6 = this.value, multiple = this.multiple;
      if (multiple) {
        var multipleValue;
        if (value6) {
          if (value6.indexOf(selectValue) === -1) {
            multipleValue = value6.concat([selectValue]);
          } else {
            multipleValue = value6.filter(function(val) {
              return val !== selectValue;
            });
          }
        } else {
          multipleValue = [selectValue];
        }
        this.changeEvent(evnt, multipleValue);
      } else {
        this.changeEvent(evnt, selectValue);
        this.hideOptionPanel();
      }
    },
    handleGlobalMousewheelEvent: function handleGlobalMousewheelEvent3(evnt) {
      var $refs = this.$refs, disabled = this.disabled, visiblePanel = this.visiblePanel;
      if (!disabled) {
        if (visiblePanel) {
          if (_tools$l.DomTools.getEventTargetNode(evnt, $refs.panel).flag) {
            this.updatePlacement();
          } else {
            this.hideOptionPanel();
          }
        }
      }
    },
    handleGlobalMousedownEvent: function handleGlobalMousedownEvent3(evnt) {
      var $refs = this.$refs, $el = this.$el, disabled = this.disabled, visiblePanel = this.visiblePanel;
      if (!disabled) {
        this.isActivated = _tools$l.DomTools.getEventTargetNode(evnt, $el).flag || _tools$l.DomTools.getEventTargetNode(evnt, $refs.panel).flag;
        if (visiblePanel && !this.isActivated) {
          this.hideOptionPanel();
        }
      }
    },
    handleGlobalKeydownEvent: function handleGlobalKeydownEvent4(evnt) {
      var visiblePanel = this.visiblePanel, currentValue = this.currentValue, clearable = this.clearable, disabled = this.disabled;
      if (!disabled) {
        var keyCode = evnt.keyCode;
        var isTab = keyCode === 9;
        var isEnter = keyCode === 13;
        var isEsc = keyCode === 27;
        var isUpArrow = keyCode === 38;
        var isDwArrow = keyCode === 40;
        var isDel = keyCode === 46;
        var isSpacebar = keyCode === 32;
        if (isTab) {
          this.isActivated = false;
        }
        if (visiblePanel) {
          if (isEsc || isTab) {
            this.hideOptionPanel();
          } else if (isEnter) {
            evnt.preventDefault();
            evnt.stopPropagation();
            this.changeOptionEvent(evnt, currentValue);
          } else if (isUpArrow || isDwArrow) {
            evnt.preventDefault();
            var _findOffsetOption = findOffsetOption(this, currentValue, isUpArrow), firstOption = _findOffsetOption.firstOption, offsetOption = _findOffsetOption.offsetOption;
            if (!offsetOption && !findOption(this, currentValue)) {
              offsetOption = firstOption;
            }
            this.setCurrentOption(offsetOption);
            this.scrollToOption(offsetOption, isDwArrow);
          } else if (isSpacebar) {
            evnt.preventDefault();
          }
        } else if ((isUpArrow || isDwArrow || isEnter || isSpacebar) && this.isActivated) {
          evnt.preventDefault();
          this.showOptionPanel();
        }
        if (this.isActivated) {
          if (isDel && clearable) {
            this.clearValueEvent(evnt, null);
          }
        }
      }
    },
    handleGlobalBlurEvent: function handleGlobalBlurEvent3() {
      this.hideOptionPanel();
    },
    updateZindex: function updateZindex4() {
      if (this.panelIndex < _tools$l.UtilTools.getLastZIndex()) {
        this.panelIndex = _tools$l.UtilTools.nextZIndex();
      }
    },
    focusEvent: function focusEvent2() {
      if (!this.disabled) {
        this.isActivated = true;
      }
    },
    blurEvent: function blurEvent2() {
      this.isActivated = false;
    },
    isPanelVisible: function isPanelVisible() {
      return this.visiblePanel;
    },
    togglePanel: function togglePanel() {
      if (this.visiblePanel) {
        this.hideOptionPanel();
      } else {
        this.showOptionPanel();
      }
      this.$nextTick();
    },
    hidePanel: function hidePanel2() {
      if (this.visiblePanel) {
        this.hideOptionPanel();
      }
      this.$nextTick();
    },
    showPanel: function showPanel2() {
      if (!this.visiblePanel) {
        this.showOptionPanel();
      }
      this.$nextTick();
    },
    togglePanelEvent: function togglePanelEvent(params) {
      var $event = params.$event;
      $event.preventDefault();
      if (this.visiblePanel) {
        this.hideOptionPanel();
      } else {
        this.showOptionPanel();
      }
    },
    showOptionPanel: function showOptionPanel() {
      var _this4 = this;
      var loading = this.loading, disabled = this.disabled;
      if (!loading && !disabled) {
        clearTimeout(this.hidePanelTimeout);
        if (!this.inited) {
          this.inited = true;
          if (this.transfer) {
            document.body.appendChild(this.$refs.panel);
          }
        }
        this.isActivated = true;
        this.animatVisible = true;
        setTimeout(function() {
          var value6 = _this4.value, multiple = _this4.multiple;
          var currOption = findOption(_this4, multiple && value6 ? value6[0] : value6);
          _this4.visiblePanel = true;
          if (currOption) {
            _this4.setCurrentOption(currOption);
            _this4.scrollToOption(currOption);
          }
        }, 10);
        this.updateZindex();
        this.updatePlacement();
      }
    },
    hideOptionPanel: function hideOptionPanel() {
      var _this5 = this;
      this.visiblePanel = false;
      this.hidePanelTimeout = setTimeout(function() {
        _this5.animatVisible = false;
      }, 350);
    },
    updatePlacement: function updatePlacement2() {
      var _this6 = this;
      return this.$nextTick().then(function() {
        var $refs = _this6.$refs, transfer = _this6.transfer, placement = _this6.placement, panelIndex = _this6.panelIndex;
        var targetElem = $refs.input.$el;
        var panelElem = $refs.panel;
        if (panelElem && targetElem) {
          var targetHeight = targetElem.offsetHeight;
          var targetWidth = targetElem.offsetWidth;
          var panelHeight = panelElem.offsetHeight;
          var panelWidth = panelElem.offsetWidth;
          var marginSize = 5;
          var panelStyle = {
            zIndex: panelIndex
          };
          var _DomTools$getAbsolute = _tools$l.DomTools.getAbsolutePos(targetElem), boundingTop = _DomTools$getAbsolute.boundingTop, boundingLeft = _DomTools$getAbsolute.boundingLeft, visibleHeight = _DomTools$getAbsolute.visibleHeight, visibleWidth = _DomTools$getAbsolute.visibleWidth;
          var panelPlacement = "bottom";
          if (transfer) {
            var left = boundingLeft;
            var top = boundingTop + targetHeight;
            if (placement === "top") {
              panelPlacement = "top";
              top = boundingTop - panelHeight;
            } else if (!placement) {
              if (top + panelHeight + marginSize > visibleHeight) {
                panelPlacement = "top";
                top = boundingTop - panelHeight;
              }
              if (top < marginSize) {
                panelPlacement = "bottom";
                top = boundingTop + targetHeight;
              }
            }
            if (left + panelWidth + marginSize > visibleWidth) {
              left -= left + panelWidth + marginSize - visibleWidth;
            }
            if (left < marginSize) {
              left = marginSize;
            }
            Object.assign(panelStyle, {
              left: "".concat(left, "px"),
              top: "".concat(top, "px"),
              minWidth: "".concat(targetWidth, "px")
            });
          } else {
            if (placement === "top") {
              panelPlacement = "top";
              panelStyle.bottom = "".concat(targetHeight, "px");
            } else if (!placement) {
              if (boundingTop + targetHeight + panelHeight > visibleHeight) {
                if (boundingTop - targetHeight - panelHeight > marginSize) {
                  panelPlacement = "top";
                  panelStyle.bottom = "".concat(targetHeight, "px");
                }
              }
            }
          }
          _this6.panelStyle = panelStyle;
          _this6.panelPlacement = panelPlacement;
          return _this6.$nextTick();
        }
      });
    },
    focus: function focus3() {
      this.isActivated = true;
      this.$refs.input.focus();
      return this.$nextTick();
    },
    blur: function blur3() {
      this.hideOptionPanel();
      this.$refs.input.blur();
      return this.$nextTick();
    }
  }
};
select$2.default = _default2$e;
var option$2 = {};
var util$3 = {};
Object.defineProperty(util$3, "__esModule", {
  value: true
});
util$3.assemOption = assemOption;
util$3.createOption = createOption;
util$3.destroyOption = destroyOption;
util$3.getOptionConfig = getOptionConfig;
util$3.isOption = isOption;
var _xeUtils$j = _interopRequireDefault$16(xeUtils);
function _interopRequireDefault$16(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
function _classCallCheck$4(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$3(target2, props2) {
  for (var i = 0; i < props2.length; i++) {
    var descriptor2 = props2[i];
    descriptor2.enumerable = descriptor2.enumerable || false;
    descriptor2.configurable = true;
    if ("value" in descriptor2)
      descriptor2.writable = true;
    Object.defineProperty(target2, descriptor2.key, descriptor2);
  }
}
function _createClass$3(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$3(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$3(Constructor, staticProps);
  return Constructor;
}
var OptionConfig = /* @__PURE__ */ function() {
  function OptionConfig2($xeselect, _vm) {
    _classCallCheck$4(this, OptionConfig2);
    Object.assign(this, {
      value: _vm.value,
      label: _vm.label,
      visible: _vm.visible,
      className: _vm.className,
      disabled: _vm.disabled
    });
  }
  _createClass$3(OptionConfig2, [{
    key: "update",
    value: function update5(name, value6) {
      this[name] = value6;
    }
  }]);
  return OptionConfig2;
}();
function isOption(option2) {
  return option2 instanceof OptionConfig;
}
function getOptionConfig($xeselect, _vm, options2) {
  return isOption(_vm) ? _vm : new OptionConfig($xeselect, _vm, options2);
}
function createOption($xeselect, _vm) {
  return getOptionConfig($xeselect, _vm);
}
function destroyOption(_vm) {
  var $xeselect = _vm.$xeselect, optionConfig = _vm.optionConfig;
  var matchObj = _xeUtils$j.default.findTree($xeselect.collectOption, function(option2) {
    return option2 === optionConfig;
  }, {
    children: "options"
  });
  if (matchObj) {
    matchObj.items.splice(matchObj.index, 1);
  }
}
function assemOption(_vm) {
  var $el = _vm.$el, $xeselect = _vm.$xeselect, $xeoptgroup = _vm.$xeoptgroup, optionConfig = _vm.optionConfig;
  var groupConfig = $xeoptgroup ? $xeoptgroup.optionConfig : null;
  if (groupConfig) {
    optionConfig.slots = _vm.$slots;
    if (!groupConfig.options) {
      groupConfig.options = [];
    }
    groupConfig.options.splice([].indexOf.call($xeoptgroup.$el.children, $el), 0, optionConfig);
  } else {
    $xeselect.collectOption.splice([].indexOf.call($xeselect.$refs.hideOption.children, $el), 0, optionConfig);
  }
}
Object.defineProperty(option$2, "__esModule", {
  value: true
});
option$2.default = void 0;
var _util$7 = util$3;
var props$4 = {
  value: null,
  label: {
    type: [String, Number, Boolean],
    default: ""
  },
  visible: {
    type: Boolean,
    default: null
  },
  className: [String, Function],
  disabled: Boolean
};
var watch$3 = {};
Object.keys(props$4).forEach(function(name) {
  watch$3[name] = function(value6) {
    this.optionConfig.update(name, value6);
  };
});
var _default$J = {
  name: "VxeOption",
  props: props$4,
  inject: {
    $xeselect: {
      default: null
    },
    $xeoptgroup: {
      default: null
    }
  },
  watch: watch$3,
  mounted: function mounted6() {
    (0, _util$7.assemOption)(this);
  },
  created: function created5() {
    this.optionConfig = (0, _util$7.createOption)(this.$xeselect, this);
  },
  destroyed: function destroyed5() {
    (0, _util$7.destroyOption)(this);
  },
  render: function render9(h) {
    return h("div");
  }
};
option$2.default = _default$J;
Object.defineProperty(exportPanel, "__esModule", {
  value: true
});
exportPanel.default = void 0;
var _xeUtils$i = _interopRequireDefault$15(xeUtils);
var _conf$j = _interopRequireDefault$15(conf);
var _modal$2 = _interopRequireDefault$15(modal$2);
var _input$1 = _interopRequireDefault$15(input$2);
var _checkbox$1 = _interopRequireDefault$15(checkbox$2);
var _select$1 = _interopRequireDefault$15(select$2);
var _option$2 = _interopRequireDefault$15(option$2);
var _tools$k = tools;
function _interopRequireDefault$15(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var _default$I = {
  name: "VxeExportPanel",
  props: {
    defaultOptions: Object,
    storeData: Object
  },
  components: {
    VxeModal: _modal$2.default,
    VxeInput: _input$1.default,
    VxeCheckbox: _checkbox$1.default,
    VxeSelect: _select$1.default,
    VxeOption: _option$2.default
  },
  data: function data7() {
    return {
      isAll: false,
      isIndeterminate: false,
      loading: false
    };
  },
  computed: {
    vSize: function vSize2() {
      return this.size || this.$parent.size || this.$parent.vSize;
    },
    checkedAll: function checkedAll() {
      return this.storeData.columns.every(function(column2) {
        return column2.checked;
      });
    },
    showSheet: function showSheet() {
      return ["html", "xml", "xlsx", "pdf"].indexOf(this.defaultOptions.type) > -1;
    },
    supportMerge: function supportMerge() {
      var storeData = this.storeData, defaultOptions = this.defaultOptions;
      return !defaultOptions.original && defaultOptions.mode === "current" && (storeData.isPrint || ["html", "xlsx"].indexOf(defaultOptions.type) > -1);
    },
    supportStyle: function supportStyle() {
      var defaultOptions = this.defaultOptions;
      return !defaultOptions.original && ["xlsx"].indexOf(defaultOptions.type) > -1;
    }
  },
  render: function render10(h) {
    var _this = this;
    var _e = this._e, checkedAll2 = this.checkedAll, isAll = this.isAll, isIndeterminate = this.isIndeterminate, showSheet2 = this.showSheet, supportMerge2 = this.supportMerge, supportStyle2 = this.supportStyle, defaultOptions = this.defaultOptions, storeData = this.storeData;
    var hasTree = storeData.hasTree, hasMerge = storeData.hasMerge, isPrint = storeData.isPrint, hasColgroup = storeData.hasColgroup;
    var isHeader = defaultOptions.isHeader;
    var cols = [];
    _xeUtils$i.default.eachTree(storeData.columns, function(column2) {
      var colTitle = _tools$k.UtilTools.formatText(column2.getTitle(), 1);
      var isColGroup = column2.children && column2.children.length;
      cols.push(h("li", {
        class: ["vxe-export--panel-column-option", "level--".concat(column2.level), {
          "is--group": isColGroup,
          "is--checked": column2.checked,
          "is--indeterminate": column2.halfChecked,
          "is--disabled": column2.disabled
        }],
        attrs: {
          title: colTitle
        },
        on: {
          click: function click() {
            if (!column2.disabled) {
              _this.changeOption(column2);
            }
          }
        }
      }, [h("span", {
        class: "vxe-checkbox--icon vxe-checkbox--checked-icon"
      }), h("span", {
        class: "vxe-checkbox--icon vxe-checkbox--unchecked-icon"
      }), h("span", {
        class: "vxe-checkbox--icon vxe-checkbox--indeterminate-icon"
      }), h("span", {
        class: "vxe-checkbox--label"
      }, colTitle)]));
    });
    return h("vxe-modal", {
      res: "modal",
      props: {
        value: storeData.visible,
        title: _conf$j.default.i18n(isPrint ? "vxe.export.printTitle" : "vxe.export.expTitle"),
        width: 660,
        mask: true,
        lockView: true,
        showFooter: false,
        escClosable: true,
        maskClosable: true,
        loading: this.loading
      },
      on: {
        input: function input2(value6) {
          storeData.visible = value6;
        },
        show: this.showEvent
      }
    }, [h("div", {
      class: "vxe-export--panel"
    }, [h("table", {
      attrs: {
        cellspacing: 0,
        cellpadding: 0,
        border: 0
      }
    }, [h("tbody", [[isPrint ? _e() : h("tr", [h("td", _conf$j.default.i18n("vxe.export.expName")), h("td", [h("vxe-input", {
      ref: "filename",
      props: {
        value: defaultOptions.filename,
        type: "text",
        clearable: true,
        placeholder: _conf$j.default.i18n("vxe.export.expNamePlaceholder")
      },
      on: {
        modelValue: function modelValue(value6) {
          defaultOptions.filename = value6;
        }
      }
    })])]), isPrint ? _e() : h("tr", [h("td", _conf$j.default.i18n("vxe.export.expType")), h("td", [h("vxe-select", {
      props: {
        value: defaultOptions.type
      },
      on: {
        input: function input2(value6) {
          defaultOptions.type = value6;
        }
      }
    }, storeData.typeList.map(function(item) {
      return h("vxe-option", {
        props: {
          value: item.value,
          label: _conf$j.default.i18n(item.label)
        }
      });
    }))])]), isPrint || showSheet2 ? h("tr", [h("td", _conf$j.default.i18n("vxe.export.expSheetName")), h("td", [h("vxe-input", {
      ref: "sheetname",
      props: {
        value: defaultOptions.sheetName,
        type: "text",
        clearable: true,
        placeholder: _conf$j.default.i18n("vxe.export.expSheetNamePlaceholder")
      },
      on: {
        modelValue: function modelValue(value6) {
          defaultOptions.sheetName = value6;
        }
      }
    })])]) : _e(), h("tr", [h("td", _conf$j.default.i18n("vxe.export.expMode")), h("td", [h("vxe-select", {
      props: {
        value: defaultOptions.mode
      },
      on: {
        input: function input2(value6) {
          defaultOptions.mode = value6;
        }
      }
    }, storeData.modeList.map(function(item) {
      return h("vxe-option", {
        props: {
          value: item.value,
          label: _conf$j.default.i18n(item.label)
        }
      });
    }))])]), h("tr", [h("td", [_conf$j.default.i18n("vxe.export.expColumn")]), h("td", [h("div", {
      class: "vxe-export--panel-column"
    }, [h("ul", {
      class: "vxe-export--panel-column-header"
    }, [h("li", {
      class: ["vxe-export--panel-column-option", {
        "is--checked": isAll,
        "is--indeterminate": isIndeterminate
      }],
      attrs: {
        title: _conf$j.default.i18n("vxe.table.allTitle")
      },
      on: {
        click: this.allColumnEvent
      }
    }, [h("span", {
      class: "vxe-checkbox--icon vxe-checkbox--checked-icon"
    }), h("span", {
      class: "vxe-checkbox--icon vxe-checkbox--unchecked-icon"
    }), h("span", {
      class: "vxe-checkbox--icon vxe-checkbox--indeterminate-icon"
    }), h("span", {
      class: "vxe-checkbox--label"
    }, _conf$j.default.i18n("vxe.export.expCurrentColumn"))])]), h("ul", {
      class: "vxe-export--panel-column-body"
    }, cols)])])]), h("tr", [h("td", _conf$j.default.i18n("vxe.export.expOpts")), h("td", [h("div", {
      class: "vxe-export--panel-option-row"
    }, [h("vxe-checkbox", {
      props: {
        value: isHeader,
        title: _conf$j.default.i18n("vxe.export.expHeaderTitle"),
        content: _conf$j.default.i18n("vxe.export.expOptHeader")
      },
      on: {
        input: function input2(value6) {
          defaultOptions.isHeader = value6;
        }
      }
    }), h("vxe-checkbox", {
      props: {
        value: defaultOptions.isFooter,
        disabled: !storeData.hasFooter,
        title: _conf$j.default.i18n("vxe.export.expFooterTitle"),
        content: _conf$j.default.i18n("vxe.export.expOptFooter")
      },
      on: {
        input: function input2(value6) {
          defaultOptions.isFooter = value6;
        }
      }
    }), h("vxe-checkbox", {
      props: {
        value: defaultOptions.original,
        title: _conf$j.default.i18n("vxe.export.expOriginalTitle"),
        content: _conf$j.default.i18n("vxe.export.expOptOriginal")
      },
      on: {
        input: function input2(value6) {
          defaultOptions.original = value6;
        }
      }
    })]), h("div", {
      class: "vxe-export--panel-option-row"
    }, [h("vxe-checkbox", {
      props: {
        value: isHeader && hasColgroup && supportMerge2 ? defaultOptions.isColgroup : false,
        disabled: !isHeader || !hasColgroup || !supportMerge2,
        title: _conf$j.default.i18n("vxe.export.expColgroupTitle"),
        content: _conf$j.default.i18n("vxe.export.expOptColgroup")
      },
      on: {
        input: function input2(value6) {
          defaultOptions.isColgroup = value6;
        }
      }
    }), h("vxe-checkbox", {
      props: {
        value: hasMerge && supportMerge2 && checkedAll2 ? defaultOptions.isMerge : false,
        disabled: !hasMerge || !supportMerge2 || !checkedAll2,
        title: _conf$j.default.i18n("vxe.export.expMergeTitle"),
        content: _conf$j.default.i18n("vxe.export.expOptMerge")
      },
      on: {
        input: function input2(value6) {
          defaultOptions.isMerge = value6;
        }
      }
    }), isPrint ? _e() : h("vxe-checkbox", {
      props: {
        value: supportStyle2 ? defaultOptions.useStyle : false,
        disabled: !supportStyle2,
        title: _conf$j.default.i18n("vxe.export.expUseStyleTitle"),
        content: _conf$j.default.i18n("vxe.export.expOptUseStyle")
      },
      on: {
        input: function input2(value6) {
          defaultOptions.useStyle = value6;
        }
      }
    }), h("vxe-checkbox", {
      props: {
        value: hasTree ? defaultOptions.isAllExpand : false,
        disabled: !hasTree,
        title: _conf$j.default.i18n("vxe.export.expAllExpandTitle"),
        content: _conf$j.default.i18n("vxe.export.expOptAllExpand")
      },
      on: {
        input: function input2(value6) {
          defaultOptions.isAllExpand = value6;
        }
      }
    })])])])]])]), h("div", {
      class: "vxe-export--panel-btns"
    }, [h("vxe-button", {
      props: {
        content: _conf$j.default.i18n("vxe.export.expCancel")
      },
      on: {
        click: this.cancelEvent
      }
    }), h("vxe-button", {
      ref: "confirmBtn",
      props: {
        status: "primary",
        content: _conf$j.default.i18n(isPrint ? "vxe.export.expPrint" : "vxe.export.expConfirm")
      },
      on: {
        click: this.confirmEvent
      }
    })])])]);
  },
  methods: {
    changeOption: function changeOption2(column2) {
      var isChecked2 = !column2.checked;
      _xeUtils$i.default.eachTree([column2], function(item) {
        item.checked = isChecked2;
        item.halfChecked = false;
      });
      this.handleOptionCheck(column2);
      this.checkStatus();
    },
    handleOptionCheck: function handleOptionCheck(column2) {
      var matchObj = _xeUtils$i.default.findTree(this.storeData.columns, function(item) {
        return item === column2;
      });
      if (matchObj && matchObj.parent) {
        var parent2 = matchObj.parent;
        if (parent2.children && parent2.children.length) {
          parent2.checked = parent2.children.every(function(column3) {
            return column3.checked;
          });
          parent2.halfChecked = !parent2.checked && parent2.children.some(function(column3) {
            return column3.checked || column3.halfChecked;
          });
          this.handleOptionCheck(parent2);
        }
      }
    },
    checkStatus: function checkStatus() {
      var columns2 = this.storeData.columns;
      this.isAll = columns2.every(function(column2) {
        return column2.disabled || column2.checked;
      });
      this.isIndeterminate = !this.isAll && columns2.some(function(column2) {
        return !column2.disabled && (column2.checked || column2.halfChecked);
      });
    },
    allColumnEvent: function allColumnEvent() {
      var isAll = !this.isAll;
      _xeUtils$i.default.eachTree(this.storeData.columns, function(column2) {
        if (!column2.disabled) {
          column2.checked = isAll;
          column2.halfChecked = false;
        }
      });
      this.isAll = isAll;
      this.checkStatus();
    },
    showEvent: function showEvent() {
      var _this2 = this;
      this.$nextTick(function() {
        var $refs = _this2.$refs;
        var targetElem = $refs.filename || $refs.sheetname || $refs.confirmBtn;
        if (targetElem) {
          targetElem.focus();
        }
      });
      this.checkStatus();
    },
    getExportOption: function getExportOption() {
      var checkedAll2 = this.checkedAll, storeData = this.storeData, defaultOptions = this.defaultOptions, supportMerge2 = this.supportMerge;
      var hasMerge = storeData.hasMerge, columns2 = storeData.columns;
      var expColumns = _xeUtils$i.default.searchTree(columns2, function(column2) {
        return column2.checked;
      }, {
        children: "children",
        mapChildren: "childNodes",
        original: true
      });
      return Object.assign({}, defaultOptions, {
        columns: expColumns,
        isMerge: hasMerge && supportMerge2 && checkedAll2 ? defaultOptions.isMerge : false
      });
    },
    cancelEvent: function cancelEvent2() {
      this.storeData.visible = false;
    },
    confirmEvent: function confirmEvent2(evnt) {
      if (this.storeData.isPrint) {
        this.printEvent(evnt);
      } else {
        this.exportEvent(evnt);
      }
    },
    printEvent: function printEvent() {
      var $xetable = this.$parent;
      this.storeData.visible = false;
      $xetable.print(Object.assign({}, $xetable.printOpts, this.getExportOption()));
    },
    exportEvent: function exportEvent() {
      var _this3 = this;
      var $xetable = this.$parent;
      this.loading = true;
      $xetable.exportData(Object.assign({}, $xetable.exportOpts, this.getExportOption())).then(function() {
        _this3.loading = false;
        _this3.storeData.visible = false;
      }).catch(function() {
        _this3.loading = false;
      });
    }
  }
};
exportPanel.default = _default$I;
var importPanel = {};
var radio$2 = {};
Object.defineProperty(radio$2, "__esModule", {
  value: true
});
radio$2.default = void 0;
var _tools$j = tools;
var _conf$i = _interopRequireDefault$14(conf);
var _size$a = _interopRequireDefault$14(size);
function _interopRequireDefault$14(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
function _defineProperty$d(obj, key, value6) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value: value6, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value6;
  }
  return obj;
}
var _default2$d = {
  name: "VxeRadio",
  mixins: [_size$a.default],
  props: {
    value: [String, Number, Boolean],
    label: [String, Number, Boolean],
    title: [String, Number],
    content: [String, Number],
    disabled: Boolean,
    name: String,
    strict: {
      type: Boolean,
      default: function _default69() {
        return _conf$i.default.radio.strict;
      }
    },
    size: {
      type: String,
      default: function _default70() {
        return _conf$i.default.radio.size || _conf$i.default.size;
      }
    }
  },
  inject: {
    $xeradiogroup: {
      default: null
    }
  },
  computed: {
    isDisabled: function isDisabled2() {
      var $xeradiogroup = this.$xeradiogroup;
      return this.disabled || $xeradiogroup && $xeradiogroup.disabled;
    },
    isStrict: function isStrict() {
      var $xeradiogroup = this.$xeradiogroup;
      return $xeradiogroup ? $xeradiogroup.strict : this.strict;
    }
  },
  render: function render11(h) {
    var _ref;
    var $scopedSlots = this.$scopedSlots, $xeradiogroup = this.$xeradiogroup, isDisabled4 = this.isDisabled, title = this.title, vSize8 = this.vSize, value6 = this.value, label = this.label, name = this.name, content2 = this.content;
    var attrs2 = {};
    if (title) {
      attrs2.title = title;
    }
    return h("label", {
      class: ["vxe-radio", (_ref = {}, _defineProperty$d(_ref, "size--".concat(vSize8), vSize8), _defineProperty$d(_ref, "is--disabled", isDisabled4), _ref)],
      attrs: attrs2
    }, [h("input", {
      class: "vxe-radio--input",
      attrs: {
        type: "radio",
        name: $xeradiogroup ? $xeradiogroup.name : name,
        disabled: isDisabled4
      },
      domProps: {
        checked: $xeradiogroup ? $xeradiogroup.value === label : value6 === label
      },
      on: {
        change: this.changeEvent,
        click: this.clickEvent
      }
    }), h("span", {
      class: "vxe-radio--icon"
    }), h("span", {
      class: "vxe-radio--label"
    }, $scopedSlots.default ? $scopedSlots.default.call(this, {}) : [_tools$j.UtilTools.getFuncText(content2)])]);
  },
  methods: {
    handleValue: function handleValue(label, evnt) {
      var $xeradiogroup = this.$xeradiogroup;
      var params = {
        label,
        $event: evnt
      };
      if ($xeradiogroup) {
        $xeradiogroup.handleChecked(params);
      } else {
        this.$emit("input", label);
        this.$emit("change", params);
      }
    },
    changeEvent: function changeEvent4(evnt) {
      var isDisabled4 = this.isDisabled;
      if (!isDisabled4) {
        this.handleValue(this.label, evnt);
      }
    },
    clickEvent: function clickEvent2(evnt) {
      var $xeradiogroup = this.$xeradiogroup, isDisabled4 = this.isDisabled, isStrict3 = this.isStrict;
      if (!isDisabled4 && !isStrict3) {
        if (this.label === ($xeradiogroup ? $xeradiogroup.value : this.value)) {
          this.handleValue(null, evnt);
        }
      }
    }
  }
};
radio$2.default = _default2$d;
Object.defineProperty(importPanel, "__esModule", {
  value: true
});
importPanel.default = void 0;
var _xeUtils$h = _interopRequireDefault$13(xeUtils);
var _conf$h = _interopRequireDefault$13(conf);
var _modal$1 = _interopRequireDefault$13(modal$2);
var _radio$1 = _interopRequireDefault$13(radio$2);
var _tools$i = tools;
function _interopRequireDefault$13(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var _default$H = {
  name: "VxeImportPanel",
  props: {
    defaultOptions: Object,
    storeData: Object
  },
  components: {
    VxeModal: _modal$1.default,
    VxeRadio: _radio$1.default
  },
  data: function data8() {
    return {
      loading: false
    };
  },
  computed: {
    vSize: function vSize3() {
      return this.size || this.$parent.size || this.$parent.vSize;
    },
    selectName: function selectName() {
      return "".concat(this.storeData.filename, ".").concat(this.storeData.type);
    },
    hasFile: function hasFile() {
      return this.storeData.file && this.storeData.type;
    },
    parseTypeLabel: function parseTypeLabel() {
      var storeData = this.storeData;
      var type3 = storeData.type, typeList = storeData.typeList;
      if (type3) {
        var selectItem = _xeUtils$h.default.find(typeList, function(item) {
          return type3 === item.value;
        });
        return selectItem ? _conf$h.default.i18n(selectItem.label) : "*.*";
      }
      return "*.".concat(typeList.map(function(item) {
        return item.value;
      }).join(", *."));
    }
  },
  render: function render12(h) {
    var hasFile2 = this.hasFile, parseTypeLabel2 = this.parseTypeLabel, defaultOptions = this.defaultOptions, storeData = this.storeData, selectName2 = this.selectName;
    return h("vxe-modal", {
      res: "modal",
      props: {
        value: storeData.visible,
        title: _conf$h.default.i18n("vxe.import.impTitle"),
        width: 440,
        mask: true,
        lockView: true,
        showFooter: false,
        escClosable: true,
        maskClosable: true,
        loading: this.loading
      },
      on: {
        input: function input2(value6) {
          storeData.visible = value6;
        },
        show: this.showEvent
      }
    }, [h("div", {
      class: "vxe-export--panel"
    }, [h("table", {
      attrs: {
        cellspacing: 0,
        cellpadding: 0,
        border: 0
      }
    }, [h("tbody", [h("tr", [h("td", _conf$h.default.i18n("vxe.import.impFile")), h("td", [hasFile2 ? h("div", {
      class: "vxe-import-selected--file",
      attrs: {
        title: selectName2
      }
    }, [h("span", selectName2), h("i", {
      class: _conf$h.default.icon.INPUT_CLEAR,
      on: {
        click: this.clearFileEvent
      }
    })]) : h("button", {
      ref: "fileBtn",
      class: "vxe-import-select--file",
      attrs: {
        type: "button"
      },
      on: {
        click: this.selectFileEvent
      }
    }, _conf$h.default.i18n("vxe.import.impSelect"))])]), h("tr", [h("td", _conf$h.default.i18n("vxe.import.impType")), h("td", parseTypeLabel2)]), h("tr", [h("td", _conf$h.default.i18n("vxe.import.impOpts")), h("td", [h("vxe-radio-group", {
      props: {
        value: defaultOptions.mode
      },
      on: {
        input: function input2(value6) {
          defaultOptions.mode = value6;
        }
      }
    }, storeData.modeList.map(function(item) {
      return h("vxe-radio", {
        props: {
          label: item.value
        }
      }, _conf$h.default.i18n(item.label));
    }))])])])]), h("div", {
      class: "vxe-export--panel-btns"
    }, [h("vxe-button", {
      on: {
        click: this.cancelEvent
      }
    }, _conf$h.default.i18n("vxe.import.impCancel")), h("vxe-button", {
      props: {
        status: "primary",
        disabled: !hasFile2
      },
      on: {
        click: this.importEvent
      }
    }, _conf$h.default.i18n("vxe.import.impConfirm"))])])]);
  },
  methods: {
    clearFileEvent: function clearFileEvent() {
      Object.assign(this.storeData, {
        filename: "",
        sheetName: "",
        type: ""
      });
    },
    selectFileEvent: function selectFileEvent() {
      var _this = this;
      var $xetable = this.$parent;
      $xetable.readFile(this.defaultOptions).then(function(params) {
        var file = params.file;
        Object.assign(_this.storeData, _tools$i.UtilTools.parseFile(file), {
          file
        });
      }).catch(function(e) {
        return e;
      });
    },
    showEvent: function showEvent2() {
      var _this2 = this;
      this.$nextTick(function() {
        var $refs = _this2.$refs;
        var targetElem = $refs.fileBtn;
        if (targetElem) {
          targetElem.focus();
        }
      });
    },
    cancelEvent: function cancelEvent3() {
      this.storeData.visible = false;
    },
    importEvent: function importEvent() {
      var _this3 = this;
      var $xetable = this.$parent;
      this.loading = true;
      $xetable.importByFile(this.storeData.file, Object.assign({}, $xetable.importOpts, this.defaultOptions)).then(function() {
        _this3.loading = false;
        _this3.storeData.visible = false;
      }).catch(function() {
        _this3.loading = false;
      });
    }
  }
};
importPanel.default = _default$H;
var mixin$2 = {};
Object.defineProperty(mixin$2, "__esModule", {
  value: true
});
mixin$2.default = void 0;
mixin$2.handlePrint = handlePrint;
mixin$2.readLocalFile = readLocalFile;
mixin$2.saveLocalFile = saveLocalFile;
var _xeUtils$g = _interopRequireDefault$12(xeUtils);
var _conf$g = _interopRequireDefault$12(conf);
var _vXETable$a = _interopRequireDefault$12(vXETable);
var _tools$h = tools;
var _util$6 = util$4;
var _dom$9 = dom$1;
function _interopRequireDefault$12(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
function _toConsumableArray$3(arr) {
  return _arrayWithoutHoles$3(arr) || _iterableToArray$3(arr) || _unsupportedIterableToArray$2(arr) || _nonIterableSpread$3();
}
function _nonIterableSpread$3() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$2(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$2(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$2(o, minLen);
}
function _iterableToArray$3(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _arrayWithoutHoles$3(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray$2(arr);
}
function _arrayLikeToArray$2(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
var formatText2 = _tools$h.UtilTools.formatText;
var defaultHtmlStyle = 'body{margin:0;color:#333333;font-size:14px;font-family:"Microsoft YaHei",\u5FAE\u8F6F\u96C5\u9ED1,"MicrosoftJhengHei",\u534E\u6587\u7EC6\u9ED1,STHeiti,MingLiu}body *{-webkit-box-sizing:border-box;box-sizing:border-box}.vxe-table{border-collapse:collapse;text-align:left;border-spacing:0}.vxe-table:not(.is--print){table-layout:fixed}.vxe-table,.vxe-table th,.vxe-table td,.vxe-table td{border-color:#D0D0D0;border-style:solid;border-width:0}.vxe-table.is--print{width:100%}.border--default,.border--full,.border--outer{border-top-width:1px}.border--default,.border--full,.border--outer{border-left-width:1px}.border--outer,.border--default th,.border--default td,.border--full th,.border--full td,.border--outer th,.border--inner th,.border--inner td{border-bottom-width:1px}.border--default,.border--outer,.border--full th,.border--full td{border-right-width:1px}.border--default th,.border--full th,.border--outer th{background-color:#f8f8f9}.vxe-table td>div,.vxe-table th>div{padding:.5em .4em}.col--center{text-align:center}.col--right{text-align:right}.vxe-table:not(.is--print) .col--ellipsis>div{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;word-break:break-all}.vxe-table--tree-node{text-align:left}.vxe-table--tree-node-wrapper{position:relative}.vxe-table--tree-icon-wrapper{position:absolute;top:50%;width:1em;height:1em;text-align:center;-webkit-transform:translateY(-50%);transform:translateY(-50%);-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer}.vxe-table--tree-unfold-icon,.vxe-table--tree-fold-icon{position:absolute;width:0;height:0;border-style:solid;border-width:.5em;border-right-color:transparent;border-bottom-color:transparent}.vxe-table--tree-unfold-icon{left:.3em;top:0;border-left-color:#939599;border-top-color:transparent}.vxe-table--tree-fold-icon{left:0;top:.3em;border-left-color:transparent;border-top-color:#939599}.vxe-table--tree-cell{display:block;padding-left:1.5em}.vxe-table input[type="checkbox"]{margin:0}.vxe-table input[type="checkbox"],.vxe-table input[type="radio"],.vxe-table input[type="checkbox"]+span,.vxe-table input[type="radio"]+span{vertical-align:middle;padding-left:0.4em}';
var htmlCellElem;
var fileForm;
var fileInput;
var printFrame;
var csvBOM = "\uFEFF";
var enterSymbol = "\r\n";
function createFrame() {
  var frame = document.createElement("iframe");
  frame.className = "vxe-table--print-frame";
  return frame;
}
function getExportBlobByContent(content2, options2) {
  if (window.Blob) {
    return new Blob([content2], {
      type: "text/".concat(options2.type, ";charset=utf-8;")
    });
  }
  return null;
}
function hasTreeChildren($xetable, row) {
  var treeOpts2 = $xetable.treeOpts;
  return row[treeOpts2.children] && row[treeOpts2.children].length > 0;
}
function getSeq($xetable, row, $rowIndex, column2, $columnIndex) {
  var seqOpts2 = $xetable.seqOpts;
  var seqMethod = seqOpts2.seqMethod || column2.seqMethod;
  if (seqMethod) {
    return seqMethod({
      row,
      rowIndex: $xetable.getRowIndex(row),
      $rowIndex,
      column: column2,
      columnIndex: $xetable.getColumnIndex(column2),
      $columnIndex
    });
  }
  return $xetable.getRowSeq(row);
}
function defaultFilterExportColumn(column2) {
  return column2.property || ["seq", "checkbox", "radio"].indexOf(column2.type) > -1;
}
function toTableBorder(border) {
  if (border === true) {
    return "full";
  }
  if (border) {
    return border;
  }
  return "default";
}
function toBooleanValue(cellValue) {
  return _xeUtils$g.default.isBoolean(cellValue) ? cellValue ? "TRUE" : "FALSE" : cellValue;
}
function getLabelData($xetable, opts, columns2, datas) {
  var isAllExpand = opts.isAllExpand, mode = opts.mode;
  var treeConfig = $xetable.treeConfig, treeOpts2 = $xetable.treeOpts, radioOpts2 = $xetable.radioOpts, checkboxOpts2 = $xetable.checkboxOpts;
  if (!htmlCellElem) {
    htmlCellElem = document.createElement("div");
  }
  if (treeConfig) {
    var rest = [];
    var expandMaps = /* @__PURE__ */ new Map();
    _xeUtils$g.default.eachTree(datas, function(item, $rowIndex, items2, path, parent2, nodes) {
      var row = item._row || item;
      var parentRow = parent2 && parent2._row ? parent2._row : parent2;
      if (isAllExpand || !parentRow || expandMaps.has(parentRow) && $xetable.isTreeExpandByRow(parentRow)) {
        var hasRowChild = hasTreeChildren($xetable, row);
        var _item = {
          _row: row,
          _level: nodes.length - 1,
          _hasChild: hasRowChild,
          _expand: hasRowChild && $xetable.isTreeExpandByRow(row)
        };
        columns2.forEach(function(column2, $columnIndex) {
          var cellValue = "";
          var renderOpts2 = column2.editRender || column2.cellRender;
          var exportLabelMethod = column2.exportMethod;
          if (!exportLabelMethod && renderOpts2 && renderOpts2.name) {
            var compConf = _vXETable$a.default.renderer.get(renderOpts2.name);
            if (compConf) {
              exportLabelMethod = compConf.exportMethod || compConf.cellExportMethod;
            }
          }
          if (exportLabelMethod) {
            cellValue = exportLabelMethod({
              $table: $xetable,
              row,
              column: column2,
              options: opts
            });
          } else {
            switch (column2.type) {
              case "seq":
                cellValue = mode === "all" ? path.map(function(num, i) {
                  return i % 2 === 0 ? Number(num) + 1 : ".";
                }).join("") : getSeq($xetable, row, $rowIndex, column2, $columnIndex);
                break;
              case "checkbox":
                cellValue = toBooleanValue($xetable.isCheckedByCheckboxRow(row));
                _item._checkboxLabel = checkboxOpts2.labelField ? _xeUtils$g.default.get(row, checkboxOpts2.labelField) : "";
                _item._checkboxDisabled = checkboxOpts2.checkMethod && !checkboxOpts2.checkMethod({
                  row
                });
                break;
              case "radio":
                cellValue = toBooleanValue($xetable.isCheckedByRadioRow(row));
                _item._radioLabel = radioOpts2.labelField ? _xeUtils$g.default.get(row, radioOpts2.labelField) : "";
                _item._radioDisabled = radioOpts2.checkMethod && !radioOpts2.checkMethod({
                  row
                });
                break;
              default:
                if (opts.original) {
                  cellValue = _tools$h.UtilTools.getCellValue(row, column2);
                } else {
                  cellValue = $xetable.getCellLabel(row, column2);
                  if (column2.type === "html") {
                    htmlCellElem.innerHTML = cellValue;
                    cellValue = htmlCellElem.innerText.trim();
                  } else {
                    var cell2 = $xetable.getCell(row, column2);
                    if (cell2) {
                      cellValue = cell2.innerText.trim();
                    }
                  }
                }
            }
          }
          _item[column2.id] = _xeUtils$g.default.toValueString(cellValue);
        });
        expandMaps.set(row, 1);
        rest.push(Object.assign(_item, row));
      }
    }, treeOpts2);
    return rest;
  }
  return datas.map(function(row, $rowIndex) {
    var item = {
      _row: row
    };
    columns2.forEach(function(column2, $columnIndex) {
      var cellValue = "";
      var renderOpts2 = column2.editRender || column2.cellRender;
      var exportLabelMethod = column2.exportMethod;
      if (!exportLabelMethod && renderOpts2 && renderOpts2.name) {
        var compConf = _vXETable$a.default.renderer.get(renderOpts2.name);
        if (compConf) {
          exportLabelMethod = compConf.exportMethod || compConf.cellExportMethod;
        }
      }
      if (exportLabelMethod) {
        cellValue = exportLabelMethod({
          $table: $xetable,
          row,
          column: column2,
          options: opts
        });
      } else {
        switch (column2.type) {
          case "seq":
            cellValue = mode === "all" ? $rowIndex + 1 : getSeq($xetable, row, $rowIndex, column2, $columnIndex);
            break;
          case "checkbox":
            cellValue = toBooleanValue($xetable.isCheckedByCheckboxRow(row));
            item._checkboxLabel = checkboxOpts2.labelField ? _xeUtils$g.default.get(row, checkboxOpts2.labelField) : "";
            item._checkboxDisabled = checkboxOpts2.checkMethod && !checkboxOpts2.checkMethod({
              row
            });
            break;
          case "radio":
            cellValue = toBooleanValue($xetable.isCheckedByRadioRow(row));
            item._radioLabel = radioOpts2.labelField ? _xeUtils$g.default.get(row, radioOpts2.labelField) : "";
            item._radioDisabled = radioOpts2.checkMethod && !radioOpts2.checkMethod({
              row
            });
            break;
          default:
            if (opts.original) {
              cellValue = _tools$h.UtilTools.getCellValue(row, column2);
            } else {
              cellValue = $xetable.getCellLabel(row, column2);
              if (column2.type === "html") {
                htmlCellElem.innerHTML = cellValue;
                cellValue = htmlCellElem.innerText.trim();
              } else {
                var cell2 = $xetable.getCell(row, column2);
                if (cell2) {
                  cellValue = cell2.innerText.trim();
                }
              }
            }
        }
      }
      item[column2.id] = _xeUtils$g.default.toValueString(cellValue);
    });
    return item;
  });
}
function getExportData($xetable, opts) {
  var columns2 = opts.columns, dataFilterMethod = opts.dataFilterMethod;
  var datas = opts.data;
  if (dataFilterMethod) {
    datas = datas.filter(function(row, index2) {
      return dataFilterMethod({
        row,
        $rowIndex: index2
      });
    });
  }
  return getLabelData($xetable, opts, columns2, datas);
}
function getBooleanValue(cellValue) {
  return cellValue === "TRUE" || cellValue === "true" || cellValue === true;
}
function getHeaderTitle(opts, column2) {
  return (opts.original ? column2.property : column2.getTitle()) || "";
}
function getFooterCellValue($xetable, opts, items2, column2) {
  var renderOpts2 = column2.editRender || column2.cellRender;
  var exportLabelMethod = column2.footerExportMethod;
  if (!exportLabelMethod && renderOpts2 && renderOpts2.name) {
    var compConf = _vXETable$a.default.renderer.get(renderOpts2.name);
    if (compConf) {
      exportLabelMethod = compConf.footerExportMethod || compConf.footerCellExportMethod;
    }
  }
  var _columnIndex = $xetable.getVTColumnIndex(column2);
  var cellValue = exportLabelMethod ? exportLabelMethod({
    $table: $xetable,
    items: items2,
    itemIndex: _columnIndex,
    _columnIndex,
    column: column2,
    options: opts
  }) : _xeUtils$g.default.toValueString(items2[_columnIndex]);
  return cellValue;
}
function getFooterData(opts, footerTableData) {
  var footerFilterMethod = opts.footerFilterMethod;
  return footerFilterMethod ? footerTableData.filter(function(items2, index2) {
    return footerFilterMethod({
      items: items2,
      $rowIndex: index2
    });
  }) : footerTableData;
}
function getCsvCellTypeLabel(column2, cellValue) {
  if (cellValue) {
    if (column2.type === "seq") {
      return "	".concat(cellValue);
    }
    switch (column2.cellType) {
      case "string":
        if (!isNaN(cellValue)) {
          return "	".concat(cellValue);
        }
        break;
      case "number":
        break;
      default:
        if (cellValue.length >= 12 && !isNaN(cellValue)) {
          return "	".concat(cellValue);
        }
        break;
    }
  }
  return cellValue;
}
function toTxtCellLabel(val) {
  if (/[",\s\n]/.test(val)) {
    return '"'.concat(val.replace(/"/g, '""'), '"');
  }
  return val;
}
function toCsv($xetable, opts, columns2, datas) {
  var content2 = csvBOM;
  if (opts.isHeader) {
    content2 += columns2.map(function(column2) {
      return toTxtCellLabel(getHeaderTitle(opts, column2));
    }).join(",") + enterSymbol;
  }
  datas.forEach(function(row) {
    content2 += columns2.map(function(column2) {
      return toTxtCellLabel(getCsvCellTypeLabel(column2, row[column2.id]));
    }).join(",") + enterSymbol;
  });
  if (opts.isFooter) {
    var footerTableData = $xetable.footerTableData;
    var footers = getFooterData(opts, footerTableData);
    footers.forEach(function(rows) {
      content2 += columns2.map(function(column2) {
        return toTxtCellLabel(getFooterCellValue($xetable, opts, rows, column2));
      }).join(",") + enterSymbol;
    });
  }
  return content2;
}
function toTxt($xetable, opts, columns2, datas) {
  var content2 = "";
  if (opts.isHeader) {
    content2 += columns2.map(function(column2) {
      return toTxtCellLabel(getHeaderTitle(opts, column2));
    }).join("	") + enterSymbol;
  }
  datas.forEach(function(row) {
    content2 += columns2.map(function(column2) {
      return toTxtCellLabel(row[column2.id]);
    }).join("	") + enterSymbol;
  });
  if (opts.isFooter) {
    var footerTableData = $xetable.footerTableData;
    var footers = getFooterData(opts, footerTableData);
    footers.forEach(function(rows) {
      content2 += columns2.map(function(column2) {
        return toTxtCellLabel(getFooterCellValue($xetable, opts, rows, column2));
      }).join(",") + enterSymbol;
    });
  }
  return content2;
}
function hasEllipsis($xetable, column2, property2, allColumnOverflow) {
  var columnOverflow = column2[property2];
  var headOverflow = _xeUtils$g.default.isUndefined(columnOverflow) || _xeUtils$g.default.isNull(columnOverflow) ? allColumnOverflow : columnOverflow;
  var showEllipsis = headOverflow === "ellipsis";
  var showTitle = headOverflow === "title";
  var showTooltip = headOverflow === true || headOverflow === "tooltip";
  var isEllipsis = showTitle || showTooltip || showEllipsis;
  if (($xetable.scrollXLoad || $xetable.scrollYLoad) && !isEllipsis) {
    isEllipsis = true;
  }
  return isEllipsis;
}
function createHtmlPage(opts, content2) {
  var style2 = opts.style;
  return ["<!DOCTYPE html><html>", "<head>", '<meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no,minimal-ui">', "<title>".concat(opts.sheetName, "</title>"), "<style>".concat(defaultHtmlStyle, "</style>"), style2 ? "<style>".concat(style2, "</style>") : "", "</head>", "<body>".concat(content2, "</body>"), "</html>"].join("");
}
function toHtml($xetable, opts, columns2, datas) {
  var id2 = $xetable.id, border = $xetable.border, treeConfig = $xetable.treeConfig, treeOpts2 = $xetable.treeOpts, isAllSelected = $xetable.isAllSelected, isIndeterminate = $xetable.isIndeterminate, allHeaderAlign = $xetable.headerAlign, allAlign = $xetable.align, allFooterAlign = $xetable.footerAlign, allColumnOverflow = $xetable.showOverflow, allColumnHeaderOverflow = $xetable.showHeaderOverflow, mergeList = $xetable.mergeList;
  var isPrint = opts.print, isHeader = opts.isHeader, isFooter = opts.isFooter, isColgroup = opts.isColgroup, isMerge = opts.isMerge, colgroups = opts.colgroups, original = opts.original;
  var allCls = "check-all";
  var clss = ["vxe-table", "border--".concat(toTableBorder(border)), isPrint ? "is--print" : "", isHeader ? "is--header" : ""].filter(function(cls) {
    return cls;
  });
  var tables = ['<table class="'.concat(clss.join(" "), '" border="0" cellspacing="0" cellpadding="0">'), "<colgroup>".concat(columns2.map(function(column2) {
    return '<col style="width:'.concat(column2.renderWidth, 'px">');
  }).join(""), "</colgroup>")];
  if (isHeader) {
    tables.push("<thead>");
    if (isColgroup && !original) {
      colgroups.forEach(function(cols) {
        tables.push("<tr>".concat(cols.map(function(column2) {
          var headAlign = column2.headerAlign || column2.align || allHeaderAlign || allAlign;
          var classNames = hasEllipsis($xetable, column2, "showHeaderOverflow", allColumnHeaderOverflow) ? ["col--ellipsis"] : [];
          var cellTitle = getHeaderTitle(opts, column2);
          var childWidth = 0;
          var countChild = 0;
          _xeUtils$g.default.eachTree([column2], function(item) {
            if (!item.childNodes || !column2.childNodes.length) {
              countChild++;
            }
            childWidth += item.renderWidth;
          }, {
            children: "childNodes"
          });
          var cellWidth = childWidth - countChild;
          if (headAlign) {
            classNames.push("col--".concat(headAlign));
          }
          if (column2.type === "checkbox") {
            return '<th class="'.concat(classNames.join(" "), '" colspan="').concat(column2._colSpan, '" rowspan="').concat(column2._rowSpan, '"><div ').concat(isPrint ? "" : 'style="width: '.concat(cellWidth, 'px"'), '><input type="checkbox" class="').concat(allCls, '" ').concat(isAllSelected ? "checked" : "", "><span>").concat(cellTitle, "</span></div></th>");
          }
          return '<th class="'.concat(classNames.join(" "), '" colspan="').concat(column2._colSpan, '" rowspan="').concat(column2._rowSpan, '" title="').concat(cellTitle, '"><div ').concat(isPrint ? "" : 'style="width: '.concat(cellWidth, 'px"'), "><span>").concat(formatText2(cellTitle, true), "</span></div></th>");
        }).join(""), "</tr>"));
      });
    } else {
      tables.push("<tr>".concat(columns2.map(function(column2) {
        var headAlign = column2.headerAlign || column2.align || allHeaderAlign || allAlign;
        var classNames = hasEllipsis($xetable, column2, "showHeaderOverflow", allColumnHeaderOverflow) ? ["col--ellipsis"] : [];
        var cellTitle = getHeaderTitle(opts, column2);
        if (headAlign) {
          classNames.push("col--".concat(headAlign));
        }
        if (column2.type === "checkbox") {
          return '<th class="'.concat(classNames.join(" "), '"><div ').concat(isPrint ? "" : 'style="width: '.concat(column2.renderWidth, 'px"'), '><input type="checkbox" class="').concat(allCls, '" ').concat(isAllSelected ? "checked" : "", "><span>").concat(cellTitle, "</span></div></th>");
        }
        return '<th class="'.concat(classNames.join(" "), '" title="').concat(cellTitle, '"><div ').concat(isPrint ? "" : 'style="width: '.concat(column2.renderWidth, 'px"'), "><span>").concat(formatText2(cellTitle, true), "</span></div></th>");
      }).join(""), "</tr>"));
    }
    tables.push("</thead>");
  }
  if (datas.length) {
    tables.push("<tbody>");
    if (treeConfig) {
      datas.forEach(function(item) {
        tables.push("<tr>" + columns2.map(function(column2) {
          var cellAlign = column2.align || allAlign;
          var classNames = hasEllipsis($xetable, column2, "showOverflow", allColumnOverflow) ? ["col--ellipsis"] : [];
          var cellValue = item[column2.id];
          if (cellAlign) {
            classNames.push("col--".concat(cellAlign));
          }
          if (column2.treeNode) {
            var treeIcon = "";
            if (item._hasChild) {
              treeIcon = '<i class="'.concat(item._expand ? "vxe-table--tree-fold-icon" : "vxe-table--tree-unfold-icon", '"></i>');
            }
            classNames.push("vxe-table--tree-node");
            if (column2.type === "radio") {
              return '<td class="'.concat(classNames.join(" "), '" title="').concat(cellValue, '"><div ').concat(isPrint ? "" : 'style="width: '.concat(column2.renderWidth, 'px"'), '><div class="vxe-table--tree-node-wrapper" style="padding-left: ').concat(item._level * treeOpts2.indent, 'px"><div class="vxe-table--tree-icon-wrapper">').concat(treeIcon, '</div><div class="vxe-table--tree-cell"><input type="radio" name="radio_').concat(id2, '" ').concat(item._radioDisabled ? "disabled " : "").concat(getBooleanValue(cellValue) ? "checked" : "", "><span>").concat(item._radioLabel, "</span></div></div></div></td>");
            } else if (column2.type === "checkbox") {
              return '<td class="'.concat(classNames.join(" "), '" title="').concat(cellValue, '"><div ').concat(isPrint ? "" : 'style="width: '.concat(column2.renderWidth, 'px"'), '><div class="vxe-table--tree-node-wrapper" style="padding-left: ').concat(item._level * treeOpts2.indent, 'px"><div class="vxe-table--tree-icon-wrapper">').concat(treeIcon, '</div><div class="vxe-table--tree-cell"><input type="checkbox" ').concat(item._checkboxDisabled ? "disabled " : "").concat(getBooleanValue(cellValue) ? "checked" : "", "><span>").concat(item._checkboxLabel, "</span></div></div></div></td>");
            }
            return '<td class="'.concat(classNames.join(" "), '" title="').concat(cellValue, '"><div ').concat(isPrint ? "" : 'style="width: '.concat(column2.renderWidth, 'px"'), '><div class="vxe-table--tree-node-wrapper" style="padding-left: ').concat(item._level * treeOpts2.indent, 'px"><div class="vxe-table--tree-icon-wrapper">').concat(treeIcon, '</div><div class="vxe-table--tree-cell">').concat(cellValue, "</div></div></div></td>");
          }
          if (column2.type === "radio") {
            return '<td class="'.concat(classNames.join(" "), '"><div ').concat(isPrint ? "" : 'style="width: '.concat(column2.renderWidth, 'px"'), '><input type="radio" name="radio_').concat(id2, '" ').concat(item._radioDisabled ? "disabled " : "").concat(getBooleanValue(cellValue) ? "checked" : "", "><span>").concat(item._radioLabel, "</span></div></td>");
          } else if (column2.type === "checkbox") {
            return '<td class="'.concat(classNames.join(" "), '"><div ').concat(isPrint ? "" : 'style="width: '.concat(column2.renderWidth, 'px"'), '><input type="checkbox" ').concat(item._checkboxDisabled ? "disabled " : "").concat(getBooleanValue(cellValue) ? "checked" : "", "><span>").concat(item._checkboxLabel, "</span></div></td>");
          }
          return '<td class="'.concat(classNames.join(" "), '" title="').concat(cellValue, '"><div ').concat(isPrint ? "" : 'style="width: '.concat(column2.renderWidth, 'px"'), ">").concat(formatText2(cellValue, true), "</div></td>");
        }).join("") + "</tr>");
      });
    } else {
      datas.forEach(function(item) {
        tables.push("<tr>" + columns2.map(function(column2) {
          var cellAlign = column2.align || allAlign;
          var classNames = hasEllipsis($xetable, column2, "showOverflow", allColumnOverflow) ? ["col--ellipsis"] : [];
          var cellValue = item[column2.id];
          var rowSpan = 1;
          var colSpan = 1;
          if (isMerge && mergeList.length) {
            var _rowIndex = $xetable.getVTRowIndex(item._row);
            var _columnIndex = $xetable.getVTColumnIndex(column2);
            var spanRest = (0, _util$6.mergeBodyMethod)(mergeList, _rowIndex, _columnIndex);
            if (spanRest) {
              var rowspan = spanRest.rowspan, colspan = spanRest.colspan;
              if (!rowspan || !colspan) {
                return "";
              }
              if (rowspan > 1) {
                rowSpan = rowspan;
              }
              if (colspan > 1) {
                colSpan = colspan;
              }
            }
          }
          if (cellAlign) {
            classNames.push("col--".concat(cellAlign));
          }
          if (column2.type === "radio") {
            return '<td class="'.concat(classNames.join(" "), '" rowspan="').concat(rowSpan, '" colspan="').concat(colSpan, '"><div ').concat(isPrint ? "" : 'style="width: '.concat(column2.renderWidth, 'px"'), '><input type="radio" name="radio_').concat(id2, '" ').concat(item._radioDisabled ? "disabled " : "").concat(getBooleanValue(cellValue) ? "checked" : "", "><span>").concat(item._radioLabel, "</span></div></td>");
          } else if (column2.type === "checkbox") {
            return '<td class="'.concat(classNames.join(" "), '" rowspan="').concat(rowSpan, '" colspan="').concat(colSpan, '"><div ').concat(isPrint ? "" : 'style="width: '.concat(column2.renderWidth, 'px"'), '><input type="checkbox" ').concat(item._checkboxDisabled ? "disabled " : "").concat(getBooleanValue(cellValue) ? "checked" : "", "><span>").concat(item._checkboxLabel, "</span></div></td>");
          }
          return '<td class="'.concat(classNames.join(" "), '" rowspan="').concat(rowSpan, '" colspan="').concat(colSpan, '" title="').concat(cellValue, '"><div ').concat(isPrint ? "" : 'style="width: '.concat(column2.renderWidth, 'px"'), ">").concat(formatText2(cellValue, true), "</div></td>");
        }).join("") + "</tr>");
      });
    }
    tables.push("</tbody>");
  }
  if (isFooter) {
    var footerTableData = $xetable.footerTableData;
    var footers = getFooterData(opts, footerTableData);
    if (footers.length) {
      tables.push("<tfoot>");
      footers.forEach(function(rows) {
        tables.push("<tr>".concat(columns2.map(function(column2) {
          var footAlign = column2.footerAlign || column2.align || allFooterAlign || allAlign;
          var classNames = hasEllipsis($xetable, column2, "showOverflow", allColumnOverflow) ? ["col--ellipsis"] : [];
          var cellValue = getFooterCellValue($xetable, opts, rows, column2);
          if (footAlign) {
            classNames.push("col--".concat(footAlign));
          }
          return '<td class="'.concat(classNames.join(" "), '" title="').concat(cellValue, '"><div ').concat(isPrint ? "" : 'style="width: '.concat(column2.renderWidth, 'px"'), ">").concat(formatText2(cellValue, true), "</div></td>");
        }).join(""), "</tr>"));
      });
      tables.push("</tfoot>");
    }
  }
  var script = !isAllSelected && isIndeterminate ? '<script>(function(){var a=document.querySelector(".'.concat(allCls, '");if(a){a.indeterminate=true}})()<\/script>') : "";
  tables.push("</table>", script);
  return isPrint ? tables.join("") : createHtmlPage(opts, tables.join(""));
}
function toXML($xetable, opts, columns2, datas) {
  var xml = ['<?xml version="1.0"?>', '<?mso-application progid="Excel.Sheet"?>', '<Workbook xmlns="urn:schemas-microsoft-com:office:spreadsheet" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:x="urn:schemas-microsoft-com:office:excel" xmlns:ss="urn:schemas-microsoft-com:office:spreadsheet" xmlns:html="http://www.w3.org/TR/REC-html40">', '<DocumentProperties xmlns="urn:schemas-microsoft-com:office:office">', "<Version>16.00</Version>", "</DocumentProperties>", '<ExcelWorkbook xmlns="urn:schemas-microsoft-com:office:excel">', "<WindowHeight>7920</WindowHeight>", "<WindowWidth>21570</WindowWidth>", "<WindowTopX>32767</WindowTopX>", "<WindowTopY>32767</WindowTopY>", "<ProtectStructure>False</ProtectStructure>", "<ProtectWindows>False</ProtectWindows>", "</ExcelWorkbook>", '<Worksheet ss:Name="'.concat(opts.sheetName, '">'), "<Table>", columns2.map(function(column2) {
    return '<Column ss:Width="'.concat(column2.renderWidth, '"/>');
  }).join("")].join("");
  if (opts.isHeader) {
    xml += "<Row>".concat(columns2.map(function(column2) {
      return '<Cell><Data ss:Type="String">'.concat(getHeaderTitle(opts, column2), "</Data></Cell>");
    }).join(""), "</Row>");
  }
  datas.forEach(function(row) {
    xml += "<Row>" + columns2.map(function(column2) {
      return '<Cell><Data ss:Type="String">'.concat(row[column2.id], "</Data></Cell>");
    }).join("") + "</Row>";
  });
  if (opts.isFooter) {
    var footerTableData = $xetable.footerTableData;
    var footers = getFooterData(opts, footerTableData);
    footers.forEach(function(rows) {
      xml += "<Row>".concat(columns2.map(function(column2) {
        return '<Cell><Data ss:Type="String">'.concat(getFooterCellValue($xetable, opts, rows, column2), "</Data></Cell>");
      }).join(""), "</Row>");
    });
  }
  return "".concat(xml, "</Table></Worksheet></Workbook>");
}
function getContent($xetable, opts, columns2, datas) {
  if (columns2.length) {
    switch (opts.type) {
      case "csv":
        return toCsv($xetable, opts, columns2, datas);
      case "txt":
        return toTxt($xetable, opts, columns2, datas);
      case "html":
        return toHtml($xetable, opts, columns2, datas);
      case "xml":
        return toXML($xetable, opts, columns2, datas);
    }
  }
  return "";
}
function saveLocalFile(options2) {
  var filename = options2.filename, type3 = options2.type, content2 = options2.content;
  var name = "".concat(filename, ".").concat(type3);
  if (window.Blob) {
    var blob = content2 instanceof Blob ? content2 : getExportBlobByContent(_xeUtils$g.default.toValueString(content2), options2);
    if (navigator.msSaveBlob) {
      navigator.msSaveBlob(blob, name);
    } else {
      var url2 = URL.createObjectURL(blob);
      var linkElem = document.createElement("a");
      linkElem.target = "_blank";
      linkElem.download = name;
      linkElem.href = url2;
      document.body.appendChild(linkElem);
      linkElem.click();
      document.body.removeChild(linkElem);
      requestAnimationFrame(function() {
        if (linkElem.parentNode) {
          linkElem.parentNode.removeChild(linkElem);
        }
        URL.revokeObjectURL(url2);
      });
    }
    return Promise.resolve();
  }
  return Promise.reject(new Error(_tools$h.UtilTools.getLog("vxe.error.notExp")));
}
function downloadFile($xetable, opts, content2) {
  var filename = opts.filename, type3 = opts.type, download = opts.download;
  if (!download) {
    var blob = getExportBlobByContent(content2, opts);
    return Promise.resolve({
      type: type3,
      content: content2,
      blob
    });
  }
  saveLocalFile({
    filename,
    type: type3,
    content: content2
  }).then(function() {
    if (opts.message !== false) {
      _vXETable$a.default.modal.message({
        content: _conf$g.default.i18n("vxe.table.expSuccess"),
        status: "success"
      });
    }
  });
}
function clearColumnConvert(columns2) {
  _xeUtils$g.default.eachTree(columns2, function(column2) {
    delete column2._level;
    delete column2._colSpan;
    delete column2._rowSpan;
    delete column2._children;
    delete column2.childNodes;
  }, {
    children: "children"
  });
}
function handleExport($xetable, opts) {
  var remote = opts.remote, columns2 = opts.columns, colgroups = opts.colgroups, exportMethod = opts.exportMethod, afterExportMethod = opts.afterExportMethod;
  return new Promise(function(resolve) {
    if (remote) {
      var params = {
        options: opts,
        $table: $xetable,
        $grid: $xetable.$xegrid
      };
      resolve(exportMethod ? exportMethod(params) : params);
    } else {
      var datas = getExportData($xetable, opts);
      resolve($xetable.preventEvent(null, "event.export", {
        options: opts,
        columns: columns2,
        colgroups,
        datas
      }, function() {
        return downloadFile($xetable, opts, getContent($xetable, opts, columns2, datas));
      }));
    }
  }).then(function(params) {
    clearColumnConvert(columns2);
    if (!opts.print) {
      if (afterExportMethod) {
        afterExportMethod({
          status: true,
          options: opts,
          $table: $xetable,
          $grid: $xetable.$xegrid
        });
      }
    }
    return Object.assign({
      status: true
    }, params);
  }).catch(function() {
    clearColumnConvert(columns2);
    if (!opts.print) {
      if (afterExportMethod) {
        afterExportMethod({
          status: false,
          options: opts,
          $table: $xetable,
          $grid: $xetable.$xegrid
        });
      }
    }
    var params = {
      status: false
    };
    return Promise.reject(params);
  });
}
function getElementsByTagName(elem, qualifiedName) {
  return elem.getElementsByTagName(qualifiedName);
}
function getTxtCellKey(now2) {
  return "#".concat(now2, "@").concat(_xeUtils$g.default.uniqueId());
}
function replaceTxtCell(cell2, vMaps) {
  return cell2.replace(/#\d+@\d+/g, function(key) {
    return _xeUtils$g.default.hasOwnProp(vMaps, key) ? vMaps[key] : key;
  });
}
function getTxtCellValue(val, vMaps) {
  var rest = replaceTxtCell(val, vMaps);
  return rest.replace(/^"+$/g, function(qVal) {
    return '"'.repeat(Math.ceil(qVal.length / 2));
  });
}
function parseCsvAndTxt(columns2, content2, cellSeparator) {
  var list2 = content2.split(enterSymbol);
  var rows = [];
  var fields = [];
  if (list2.length) {
    var vMaps = {};
    var now2 = Date.now();
    list2.forEach(function(rVal) {
      if (rVal) {
        var item = {};
        rVal = rVal.replace(/("")|(\n)/g, function(text, dVal) {
          var key = getTxtCellKey(now2);
          vMaps[key] = dVal ? '"' : "\n";
          return key;
        }).replace(/"(.*?)"/g, function(text, cVal) {
          var key = getTxtCellKey(now2);
          vMaps[key] = replaceTxtCell(cVal, vMaps);
          return key;
        });
        var cells = rVal.split(cellSeparator);
        if (!fields.length) {
          fields = cells.map(function(val) {
            return getTxtCellValue(val.trim(), vMaps);
          });
        } else {
          cells.forEach(function(val, colIndex) {
            if (colIndex < fields.length) {
              item[fields[colIndex]] = getTxtCellValue(val, vMaps);
            }
          });
          rows.push(item);
        }
      }
    });
  }
  return {
    fields,
    rows
  };
}
function parseCsv(columns2, content2) {
  return parseCsvAndTxt(columns2, content2, ",");
}
function parseTxt(columns2, content2) {
  return parseCsvAndTxt(columns2, content2, "	");
}
function parseHTML(columns2, content2) {
  var domParser = new DOMParser();
  var xmlDoc = domParser.parseFromString(content2, "text/html");
  var bodyNodes = getElementsByTagName(xmlDoc, "body");
  var rows = [];
  var fields = [];
  if (bodyNodes.length) {
    var tableNodes = getElementsByTagName(bodyNodes[0], "table");
    if (tableNodes.length) {
      var theadNodes = getElementsByTagName(tableNodes[0], "thead");
      if (theadNodes.length) {
        _xeUtils$g.default.arrayEach(getElementsByTagName(theadNodes[0], "tr"), function(rowNode) {
          _xeUtils$g.default.arrayEach(getElementsByTagName(rowNode, "th"), function(cellNode) {
            fields.push(cellNode.textContent);
          });
        });
        var tbodyNodes = getElementsByTagName(tableNodes[0], "tbody");
        if (tbodyNodes.length) {
          _xeUtils$g.default.arrayEach(getElementsByTagName(tbodyNodes[0], "tr"), function(rowNode) {
            var item = {};
            _xeUtils$g.default.arrayEach(getElementsByTagName(rowNode, "td"), function(cellNode, colIndex) {
              if (fields[colIndex]) {
                item[fields[colIndex]] = cellNode.textContent || "";
              }
            });
            rows.push(item);
          });
        }
      }
    }
  }
  return {
    fields,
    rows
  };
}
function parseXML(columns2, content2) {
  var domParser = new DOMParser();
  var xmlDoc = domParser.parseFromString(content2, "application/xml");
  var sheetNodes = getElementsByTagName(xmlDoc, "Worksheet");
  var rows = [];
  var fields = [];
  if (sheetNodes.length) {
    var tableNodes = getElementsByTagName(sheetNodes[0], "Table");
    if (tableNodes.length) {
      var rowNodes = getElementsByTagName(tableNodes[0], "Row");
      if (rowNodes.length) {
        _xeUtils$g.default.arrayEach(getElementsByTagName(rowNodes[0], "Cell"), function(cellNode) {
          fields.push(cellNode.textContent);
        });
        _xeUtils$g.default.arrayEach(rowNodes, function(rowNode, index2) {
          if (index2) {
            var item = {};
            var cellNodes = getElementsByTagName(rowNode, "Cell");
            _xeUtils$g.default.arrayEach(cellNodes, function(cellNode, colIndex) {
              if (fields[colIndex]) {
                item[fields[colIndex]] = cellNode.textContent;
              }
            });
            rows.push(item);
          }
        });
      }
    }
  }
  return {
    fields,
    rows
  };
}
function checkImportData(columns2, fields) {
  var tableFields = [];
  columns2.forEach(function(column2) {
    var field = column2.property;
    if (field) {
      tableFields.push(field);
    }
  });
  return fields.some(function(field) {
    return tableFields.indexOf(field) > -1;
  });
}
function handleImport($xetable, content2, opts) {
  var tableFullColumn = $xetable.tableFullColumn, _importResolve = $xetable._importResolve, _importReject = $xetable._importReject;
  var rest = {
    fields: [],
    rows: []
  };
  switch (opts.type) {
    case "csv":
      rest = parseCsv(tableFullColumn, content2);
      break;
    case "txt":
      rest = parseTxt(tableFullColumn, content2);
      break;
    case "html":
      rest = parseHTML(tableFullColumn, content2);
      break;
    case "xml":
      rest = parseXML(tableFullColumn, content2);
      break;
  }
  var _rest = rest, fields = _rest.fields, rows = _rest.rows;
  var status = checkImportData(tableFullColumn, fields);
  if (status) {
    $xetable.createData(rows).then(function(data25) {
      var loadRest;
      if (opts.mode === "insert") {
        loadRest = $xetable.insert(data25);
      } else {
        loadRest = $xetable.reloadData(data25);
      }
      if (opts.message !== false) {
        _vXETable$a.default.modal.message({
          content: _conf$g.default.i18n("vxe.table.impSuccess", [rows.length]),
          status: "success"
        });
      }
      return loadRest.then(function() {
        if (_importResolve) {
          _importResolve({
            status: true
          });
        }
      });
    });
  } else if (opts.message !== false) {
    _vXETable$a.default.modal.message({
      content: _conf$g.default.i18n("vxe.error.impFields"),
      status: "error"
    });
    if (_importReject) {
      _importReject({
        status: false
      });
    }
  }
}
function handleFileImport($xetable, file, opts) {
  var importMethod = opts.importMethod, afterImportMethod = opts.afterImportMethod;
  var _UtilTools$parseFile = _tools$h.UtilTools.parseFile(file), type3 = _UtilTools$parseFile.type, filename = _UtilTools$parseFile.filename;
  if (!importMethod && !_xeUtils$g.default.includes(_vXETable$a.default.config.importTypes, type3)) {
    if (opts.message !== false) {
      _vXETable$a.default.modal.message({
        content: _conf$g.default.i18n("vxe.error.notType", [type3]),
        status: "error"
      });
    }
    var params = {
      status: false
    };
    return Promise.reject(params);
  }
  var rest = new Promise(function(resolve, reject) {
    var _importResolve = function _importResolve2(params2) {
      resolve(params2);
      $xetable._importResolve = null;
      $xetable._importReject = null;
    };
    var _importReject = function _importReject2(params2) {
      reject(params2);
      $xetable._importResolve = null;
      $xetable._importReject = null;
    };
    $xetable._importResolve = _importResolve;
    $xetable._importReject = _importReject;
    if (window.FileReader) {
      var options2 = Object.assign({
        mode: "insert"
      }, opts, {
        type: type3,
        filename
      });
      if (options2.remote) {
        if (importMethod) {
          Promise.resolve(importMethod({
            file,
            options: options2,
            $table: $xetable
          })).then(function() {
            _importResolve({
              status: true
            });
          }).catch(function() {
            _importResolve({
              status: true
            });
          });
        } else {
          _importResolve({
            status: true
          });
        }
      } else {
        $xetable.preventEvent(null, "event.import", {
          file,
          options: options2,
          columns: $xetable.tableFullColumn
        }, function() {
          var reader = new FileReader();
          reader.onerror = function() {
            _tools$h.UtilTools.error("vxe.error.notType", [type3]);
            _importReject({
              status: false
            });
          };
          reader.onload = function(e) {
            handleImport($xetable, e.target.result, options2);
          };
          reader.readAsText(file, "UTF-8");
        });
      }
    } else {
      _importResolve({
        status: true
      });
    }
  });
  return rest.then(function() {
    if (afterImportMethod) {
      afterImportMethod({
        status: true,
        options: opts,
        $table: $xetable
      });
    }
  }).catch(function(e) {
    if (afterImportMethod) {
      afterImportMethod({
        status: false,
        options: opts,
        $table: $xetable
      });
    }
    return Promise.reject(e);
  });
}
function readLocalFile() {
  var options2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  if (!fileForm) {
    fileForm = document.createElement("form");
    fileInput = document.createElement("input");
    fileForm.className = "vxe-table--file-form";
    fileInput.name = "file";
    fileInput.type = "file";
    fileForm.appendChild(fileInput);
    document.body.appendChild(fileForm);
  }
  return new Promise(function(resolve, reject) {
    var types2 = options2.types || [];
    var isAllType = !types2.length || types2.some(function(type3) {
      return type3 === "*";
    });
    fileInput.multiple = !!options2.multiple;
    fileInput.accept = isAllType ? "" : ".".concat(types2.join(", ."));
    fileInput.onchange = function(evnt) {
      var files = evnt.target.files;
      var file = files[0];
      var errType;
      if (!isAllType) {
        for (var fIndex = 0; fIndex < files.length; fIndex++) {
          var _UtilTools$parseFile2 = _tools$h.UtilTools.parseFile(files[fIndex]), type3 = _UtilTools$parseFile2.type;
          if (!_xeUtils$g.default.includes(types2, type3)) {
            errType = type3;
            break;
          }
        }
      }
      if (!errType) {
        resolve({
          status: true,
          files,
          file
        });
      } else {
        if (options2.message !== false) {
          _vXETable$a.default.modal.message({
            content: _conf$g.default.i18n("vxe.error.notType", [errType]),
            status: "error"
          });
        }
        var params = {
          status: false,
          files,
          file
        };
        reject(params);
      }
    };
    fileForm.reset();
    fileInput.click();
  });
}
function removePrintFrame() {
  if (printFrame) {
    if (printFrame.parentNode) {
      try {
        printFrame.contentDocument.write("");
      } catch (e) {
      }
      printFrame.parentNode.removeChild(printFrame);
    }
    printFrame = null;
  }
}
function appendPrintFrame() {
  if (!printFrame.parentNode) {
    document.body.appendChild(printFrame);
  }
}
function afterPrintEvent() {
  requestAnimationFrame(removePrintFrame);
}
function handlePrint($xetable, opts, content2) {
  var beforePrintMethod = opts.beforePrintMethod;
  if (beforePrintMethod) {
    content2 = beforePrintMethod({
      content: content2,
      options: opts,
      $table: $xetable
    }) || "";
  }
  content2 = createHtmlPage(opts, content2);
  var blob = getExportBlobByContent(content2, opts);
  if (_dom$9.browse.msie) {
    removePrintFrame();
    printFrame = createFrame();
    appendPrintFrame();
    printFrame.contentDocument.write(content2);
    printFrame.contentDocument.execCommand("print");
  } else {
    if (!printFrame) {
      printFrame = createFrame();
      printFrame.onload = function(evnt) {
        if (evnt.target.src) {
          evnt.target.contentWindow.onafterprint = afterPrintEvent;
          evnt.target.contentWindow.print();
        }
      };
    }
    appendPrintFrame();
    printFrame.src = URL.createObjectURL(blob);
  }
}
function handleExportAndPrint($xetable, options2, isPrint) {
  var initStore = $xetable.initStore, customOpts3 = $xetable.customOpts, collectColumn = $xetable.collectColumn, footerTableData = $xetable.footerTableData, treeConfig = $xetable.treeConfig, mergeList = $xetable.mergeList, isGroup3 = $xetable.isGroup, exportParams = $xetable.exportParams;
  var selectRecords = $xetable.getCheckboxRecords();
  var hasFooter = !!footerTableData.length;
  var hasTree = treeConfig;
  var hasMerge = !hasTree && mergeList.length;
  var defOpts = Object.assign({
    message: true,
    isHeader: true
  }, options2);
  var types2 = defOpts.types || _vXETable$a.default.config.exportTypes;
  var modes = defOpts.modes;
  var checkMethod = customOpts3.checkMethod;
  var exportColumns = collectColumn.slice(0);
  var columns2 = defOpts.columns;
  var typeList = types2.map(function(value6) {
    return {
      value: value6,
      label: "vxe.export.types.".concat(value6)
    };
  });
  var modeList = modes.map(function(value6) {
    return {
      value: value6,
      label: "vxe.export.modes.".concat(value6)
    };
  });
  _xeUtils$g.default.eachTree(exportColumns, function(column2, index2, items2, path, parent2) {
    var isColGroup = column2.children && column2.children.length;
    if (isColGroup || defaultFilterExportColumn(column2)) {
      column2.checked = columns2 ? columns2.some(function(item) {
        if (_tools$h.UtilTools.isColumn(item)) {
          return column2 === item;
        } else if (_xeUtils$g.default.isString(item)) {
          return column2.field === item;
        } else {
          var colid = item.id || item.colId;
          var type3 = item.type;
          var field = item.property || item.field;
          if (colid) {
            return column2.id === colid;
          } else if (field && type3) {
            return column2.property === field && column2.type === type3;
          } else if (field) {
            return column2.property === field;
          } else if (type3) {
            return column2.type === type3;
          }
        }
      }) : column2.visible;
      column2.halfChecked = false;
      column2.disabled = parent2 && parent2.disabled || (checkMethod ? !checkMethod({
        column: column2
      }) : false);
    }
  });
  Object.assign($xetable.exportStore, {
    columns: exportColumns,
    typeList,
    modeList,
    hasFooter,
    hasMerge,
    hasTree,
    isPrint,
    hasColgroup: isGroup3,
    visible: true
  });
  if (!initStore.export) {
    Object.assign(exportParams, {
      mode: selectRecords.length ? "selected" : "current"
    }, defOpts);
  }
  if (modes.indexOf(exportParams.mode) === -1) {
    exportParams.mode = modes[0];
  }
  if (types2.indexOf(exportParams.type) === -1) {
    exportParams.type = types2[0];
  }
  initStore.export = true;
  return $xetable.$nextTick();
}
var getConvertColumns = function getConvertColumns2(columns2) {
  var result = [];
  columns2.forEach(function(column2) {
    if (column2.childNodes && column2.childNodes.length) {
      result.push(column2);
      result.push.apply(result, _toConsumableArray$3(getConvertColumns2(column2.childNodes)));
    } else {
      result.push(column2);
    }
  });
  return result;
};
var convertToRows$1 = function convertToRows(originColumns) {
  var maxLevel = 1;
  var traverse2 = function traverse3(column2, parent2) {
    if (parent2) {
      column2._level = parent2._level + 1;
      if (maxLevel < column2._level) {
        maxLevel = column2._level;
      }
    }
    if (column2.childNodes && column2.childNodes.length) {
      var colSpan = 0;
      column2.childNodes.forEach(function(subColumn) {
        traverse3(subColumn, column2);
        colSpan += subColumn._colSpan;
      });
      column2._colSpan = colSpan;
    } else {
      column2._colSpan = 1;
    }
  };
  originColumns.forEach(function(column2) {
    column2._level = 1;
    traverse2(column2);
  });
  var rows = [];
  for (var i = 0; i < maxLevel; i++) {
    rows.push([]);
  }
  var allColumns = getConvertColumns(originColumns);
  allColumns.forEach(function(column2) {
    if (column2.childNodes && column2.childNodes.length) {
      column2._rowSpan = 1;
    } else {
      column2._rowSpan = maxLevel - column2._level + 1;
    }
    rows[column2._level - 1].push(column2);
  });
  return rows;
};
var _default$G = {
  methods: {
    _exportData: function _exportData(options2) {
      var _this = this;
      var $xegrid = this.$xegrid, isGroup3 = this.isGroup, tableGroupColumn = this.tableGroupColumn, tableFullColumn = this.tableFullColumn, afterFullData = this.afterFullData, treeConfig = this.treeConfig, treeOpts2 = this.treeOpts, exportOpts3 = this.exportOpts;
      var opts = Object.assign({
        isHeader: true,
        isFooter: true,
        isColgroup: true,
        isMerge: false,
        isAllExpand: false,
        download: true,
        type: "csv",
        mode: "current"
      }, exportOpts3, {
        print: false
      }, options2);
      var type3 = opts.type, mode = opts.mode, columns2 = opts.columns, original = opts.original, beforeExportMethod = opts.beforeExportMethod;
      var groups = [];
      var customCols = columns2 && columns2.length ? columns2 : null;
      var columnFilterMethod = opts.columnFilterMethod;
      if (!customCols && !columnFilterMethod) {
        columnFilterMethod = original ? function(_ref) {
          var column2 = _ref.column;
          return column2.property;
        } : function(_ref2) {
          var column2 = _ref2.column;
          return defaultFilterExportColumn(column2);
        };
      }
      if (customCols) {
        groups = _xeUtils$g.default.searchTree(_xeUtils$g.default.mapTree(customCols, function(item) {
          var targetColumn;
          if (item) {
            if (_tools$h.UtilTools.isColumn(item)) {
              targetColumn = item;
            } else if (_xeUtils$g.default.isString(item)) {
              targetColumn = _this.getColumnByField(item);
            } else {
              var colid = item.id || item.colId;
              var _type = item.type;
              var field = item.property || item.field;
              if (colid) {
                targetColumn = _this.getColumnById(colid);
              } else if (field && _type) {
                targetColumn = tableFullColumn.find(function(column2) {
                  return column2.property === field && column2.type === _type;
                });
              } else if (field) {
                targetColumn = _this.getColumnByField(field);
              } else if (_type) {
                targetColumn = tableFullColumn.find(function(column2) {
                  return column2.type === _type;
                });
              }
            }
            return targetColumn || {};
          }
        }, {
          children: "childNodes",
          mapChildren: "_children"
        }), function(column2, index2) {
          return _tools$h.UtilTools.isColumn(column2) && (!columnFilterMethod || columnFilterMethod({
            column: column2,
            $columnIndex: index2
          }));
        }, {
          children: "_children",
          mapChildren: "childNodes",
          original: true
        });
      } else {
        groups = _xeUtils$g.default.searchTree(isGroup3 ? tableGroupColumn : tableFullColumn, function(column2, index2) {
          return column2.visible && (!columnFilterMethod || columnFilterMethod({
            column: column2,
            $columnIndex: index2
          }));
        }, {
          children: "children",
          mapChildren: "childNodes",
          original: true
        });
      }
      var cols = [];
      _xeUtils$g.default.eachTree(groups, function(column2) {
        var isColGroup = column2.children && column2.children.length;
        if (!isColGroup) {
          cols.push(column2);
        }
      }, {
        children: "childNodes"
      });
      opts.columns = cols;
      opts.colgroups = convertToRows$1(groups);
      if (!opts.filename) {
        opts.filename = _conf$g.default.i18n(opts.original ? "vxe.table.expOriginFilename" : "vxe.table.expFilename", [_xeUtils$g.default.toDateString(Date.now(), "yyyyMMddHHmmss")]);
      }
      if (!opts.sheetName) {
        opts.sheetName = document.title;
      }
      if (!opts.exportMethod && !_xeUtils$g.default.includes(_vXETable$a.default.config.exportTypes, type3)) {
        var params = {
          status: false
        };
        return Promise.reject(params);
      }
      if (!opts.print) {
        if (beforeExportMethod) {
          beforeExportMethod({
            options: opts,
            $table: this,
            $grid: $xegrid
          });
        }
      }
      if (!opts.data) {
        opts.data = afterFullData;
        if (mode === "selected") {
          var selectRecords = this.getCheckboxRecords();
          if (["html", "pdf"].indexOf(type3) > -1 && treeConfig) {
            opts.data = _xeUtils$g.default.searchTree(this.getTableData().fullData, function(item) {
              return selectRecords.indexOf(item) > -1;
            }, Object.assign({}, treeOpts2, {
              data: "_row"
            }));
          } else {
            opts.data = selectRecords;
          }
        } else if (mode === "all") {
          if ($xegrid && !opts.remote) {
            var _$xegrid$proxyOpts = $xegrid.proxyOpts, beforeQueryAll = _$xegrid$proxyOpts.beforeQueryAll, afterQueryAll = _$xegrid$proxyOpts.afterQueryAll, _$xegrid$proxyOpts$aj = _$xegrid$proxyOpts.ajax, ajax = _$xegrid$proxyOpts$aj === void 0 ? {} : _$xegrid$proxyOpts$aj, _$xegrid$proxyOpts$pr = _$xegrid$proxyOpts.props, props2 = _$xegrid$proxyOpts$pr === void 0 ? {} : _$xegrid$proxyOpts$pr;
            var ajaxMethods = ajax.queryAll;
            if (ajaxMethods) {
              var _params = {
                $table: this,
                $grid: $xegrid,
                sort: $xegrid.sortData,
                filters: $xegrid.filterData,
                form: $xegrid.formData,
                target: ajaxMethods,
                options: opts
              };
              return Promise.resolve((beforeQueryAll || ajaxMethods)(_params)).catch(function(e) {
                return e;
              }).then(function(rest) {
                opts.data = (props2.list ? _xeUtils$g.default.get(rest, props2.list) : rest) || [];
                if (afterQueryAll) {
                  afterQueryAll(_params);
                }
                return handleExport(_this, opts);
              });
            }
          }
        }
      }
      return handleExport(this, opts);
    },
    _importByFile: function _importByFile(file, options2) {
      var opts = Object.assign({}, options2);
      var beforeImportMethod = opts.beforeImportMethod;
      if (beforeImportMethod) {
        beforeImportMethod({
          options: opts,
          $table: this
        });
      }
      return handleFileImport(this, file, opts);
    },
    _importData: function _importData(options2) {
      var _this2 = this;
      var opts = Object.assign({
        types: _vXETable$a.default.config.importTypes
      }, this.importOpts, options2);
      var beforeImportMethod = opts.beforeImportMethod, afterImportMethod = opts.afterImportMethod;
      if (beforeImportMethod) {
        beforeImportMethod({
          options: opts,
          $table: this
        });
      }
      return readLocalFile(opts).catch(function(e) {
        if (afterImportMethod) {
          afterImportMethod({
            status: false,
            options: opts,
            $table: _this2
          });
        }
        return Promise.reject(e);
      }).then(function(params) {
        var file = params.file;
        return handleFileImport(_this2, file, opts);
      });
    },
    _saveFile: function _saveFile(options2) {
      return saveLocalFile(options2);
    },
    _readFile: function _readFile(options2) {
      return readLocalFile(options2);
    },
    _print: function _print(options2) {
      var _this3 = this;
      var opts = Object.assign({
        original: false
      }, this.printOpts, options2, {
        type: "html",
        download: false,
        remote: false,
        print: true
      });
      if (!opts.sheetName) {
        opts.sheetName = document.title;
      }
      return new Promise(function(resolve) {
        if (opts.content) {
          resolve(handlePrint(_this3, opts, opts.content));
        } else {
          resolve(_this3.exportData(opts).then(function(_ref3) {
            var content2 = _ref3.content;
            return handlePrint(_this3, opts, content2);
          }));
        }
      });
    },
    _openImport: function _openImport(options2) {
      var defOpts = Object.assign({
        mode: "insert",
        message: true,
        types: _vXETable$a.default.config.importTypes
      }, options2, this.importOpts);
      var types2 = defOpts.types;
      var isTree = !!this.getTreeStatus();
      if (isTree) {
        if (defOpts.message) {
          _vXETable$a.default.modal.message({
            content: _conf$g.default.i18n("vxe.error.treeNotImp"),
            status: "error"
          });
        }
        return;
      }
      if (!this.importConfig) {
        _tools$h.UtilTools.error("vxe.error.reqProp", ["import-config"]);
      }
      var typeList = types2.map(function(value6) {
        return {
          value: value6,
          label: "vxe.export.types.".concat(value6)
        };
      });
      var modeList = defOpts.modes.map(function(value6) {
        return {
          value: value6,
          label: "vxe.import.modes.".concat(value6)
        };
      });
      Object.assign(this.importStore, {
        file: null,
        type: "",
        filename: "",
        modeList,
        typeList,
        visible: true
      });
      Object.assign(this.importParams, defOpts);
      this.initStore.import = true;
    },
    _openExport: function _openExport(options2) {
      var exportOpts3 = this.exportOpts;
      return handleExportAndPrint(this, Object.assign({}, exportOpts3, options2));
    },
    _openPrint: function _openPrint(options2) {
      var printOpts3 = this.printOpts;
      return handleExportAndPrint(this, Object.assign({}, printOpts3, options2), true);
    }
  }
};
mixin$2.default = _default$G;
(function(exports2) {
  function _typeof2(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof2 = function _typeof3(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof2 = function _typeof3(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof2(obj);
  }
  Object.defineProperty(exports2, "__esModule", {
    value: true
  });
  exports2.default = exports2.Export = void 0;
  exports2.print = print;
  Object.defineProperty(exports2, "readFile", {
    enumerable: true,
    get: function get7() {
      return _mixin2.readLocalFile;
    }
  });
  Object.defineProperty(exports2, "saveFile", {
    enumerable: true,
    get: function get7() {
      return _mixin2.saveLocalFile;
    }
  });
  var _table2 = _interopRequireDefault2(table$1);
  var _vXETable2 = _interopRequireDefault2(vXETable);
  var _exportPanel = _interopRequireDefault2(exportPanel);
  var _importPanel = _interopRequireDefault2(importPanel);
  var _mixin2 = _interopRequireWildcard2(mixin$2);
  function _getRequireWildcardCache2(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
    var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache2 = function _getRequireWildcardCache3(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard2(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache2(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function print(options2) {
    var opts = Object.assign({}, options2, {
      type: "html"
    });
    (0, _mixin2.handlePrint)(null, opts, opts.content);
  }
  var Export = {
    ExportPanel: _exportPanel.default,
    ImportPanel: _importPanel.default,
    install: function install34(Vue2) {
      _vXETable2.default.reg("export");
      _vXETable2.default.saveFile = _mixin2.saveLocalFile;
      _vXETable2.default.readFile = _mixin2.readLocalFile;
      _vXETable2.default.print = print;
      _vXETable2.default.setup({
        export: {
          types: {
            csv: 0,
            html: 0,
            xml: 0,
            txt: 0
          }
        }
      });
      _table2.default.mixins.push(_mixin2.default);
      Vue2.component(_exportPanel.default.name, _exportPanel.default);
      Vue2.component(_importPanel.default.name, _importPanel.default);
    }
  };
  exports2.Export = Export;
  var _default116 = Export;
  exports2.default = _default116;
})(_export$1);
var keyboard = {};
var mixin$1 = {};
Object.defineProperty(mixin$1, "__esModule", {
  value: true
});
mixin$1.default = void 0;
var _xeUtils$f = _interopRequireDefault$11(xeUtils);
var _tools$g = tools;
var _dom$8 = dom$1;
function _interopRequireDefault$11(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
function getTargetOffset(target2, container) {
  var offsetTop = 0;
  var offsetLeft = 0;
  var triggerCheckboxLabel = !_dom$8.browse.firefox && _tools$g.DomTools.hasClass(target2, "vxe-checkbox--label");
  if (triggerCheckboxLabel) {
    var checkboxLabelStyle = getComputedStyle(target2);
    offsetTop -= _xeUtils$f.default.toNumber(checkboxLabelStyle.paddingTop);
    offsetLeft -= _xeUtils$f.default.toNumber(checkboxLabelStyle.paddingLeft);
  }
  while (target2 && target2 !== container) {
    offsetTop += target2.offsetTop;
    offsetLeft += target2.offsetLeft;
    target2 = target2.offsetParent;
    if (triggerCheckboxLabel) {
      var checkboxStyle = getComputedStyle(target2);
      offsetTop -= _xeUtils$f.default.toNumber(checkboxStyle.paddingTop);
      offsetLeft -= _xeUtils$f.default.toNumber(checkboxStyle.paddingLeft);
    }
  }
  return {
    offsetTop,
    offsetLeft
  };
}
function getCheckboxRangeRows(_vm, params, targetTrElem, moveRange) {
  var countHeight = 0;
  var rangeRows = [];
  var isDown = moveRange > 0;
  var moveSize = moveRange > 0 ? moveRange : Math.abs(moveRange) + targetTrElem.offsetHeight;
  var afterFullData = _vm.afterFullData, scrollYStore = _vm.scrollYStore, scrollYLoad = _vm.scrollYLoad;
  if (scrollYLoad) {
    var _rowIndex = _vm.getVTRowIndex(params.row);
    if (isDown) {
      rangeRows = afterFullData.slice(_rowIndex, _rowIndex + Math.ceil(moveSize / scrollYStore.rowHeight));
    } else {
      rangeRows = afterFullData.slice(_rowIndex - Math.floor(moveSize / scrollYStore.rowHeight) + 1, _rowIndex + 1);
    }
  } else {
    var siblingProp = isDown ? "next" : "previous";
    while (targetTrElem && countHeight < moveSize) {
      rangeRows.push(_vm.getRowNode(targetTrElem).item);
      countHeight += targetTrElem.offsetHeight;
      targetTrElem = targetTrElem["".concat(siblingProp, "ElementSibling")];
    }
  }
  return rangeRows;
}
var _default$F = {
  methods: {
    moveTabSelected: function moveTabSelected(args, isLeft, evnt) {
      var _this = this;
      var afterFullData = this.afterFullData, visibleColumn = this.visibleColumn, editConfig = this.editConfig, editOpts2 = this.editOpts;
      var targetRow;
      var targetRowIndex;
      var targetColumnIndex;
      var params = Object.assign({}, args);
      var _rowIndex = this.getVTRowIndex(params.row);
      var _columnIndex = this.getVTColumnIndex(params.column);
      evnt.preventDefault();
      if (isLeft) {
        if (_columnIndex <= 0) {
          if (_rowIndex > 0) {
            targetRowIndex = _rowIndex - 1;
            targetRow = afterFullData[targetRowIndex];
            targetColumnIndex = visibleColumn.length - 1;
          }
        } else {
          targetColumnIndex = _columnIndex - 1;
        }
      } else {
        if (_columnIndex >= visibleColumn.length - 1) {
          if (_rowIndex < afterFullData.length - 1) {
            targetRowIndex = _rowIndex + 1;
            targetRow = afterFullData[targetRowIndex];
            targetColumnIndex = 0;
          }
        } else {
          targetColumnIndex = _columnIndex + 1;
        }
      }
      var targetColumn = visibleColumn[targetColumnIndex];
      if (targetColumn) {
        if (targetRow) {
          params.rowIndex = targetRowIndex;
          params.row = targetRow;
        } else {
          params.rowIndex = _rowIndex;
        }
        params.columnIndex = targetColumnIndex;
        params.column = targetColumn;
        params.cell = this.getCell(params.row, params.column);
        if (editConfig) {
          if (editOpts2.trigger === "click" || editOpts2.trigger === "dblclick") {
            if (editOpts2.mode === "row") {
              this.handleActived(params, evnt);
            } else {
              this.scrollToRow(params.row, params.column).then(function() {
                return _this.handleSelected(params, evnt);
              });
            }
          }
        } else {
          this.scrollToRow(params.row, params.column).then(function() {
            return _this.handleSelected(params, evnt);
          });
        }
      }
    },
    moveCurrentRow: function moveCurrentRow(isUpArrow, isDwArrow, evnt) {
      var _this2 = this;
      var currentRow = this.currentRow, treeConfig = this.treeConfig, treeOpts2 = this.treeOpts, afterFullData = this.afterFullData;
      var targetRow;
      evnt.preventDefault();
      if (currentRow) {
        if (treeConfig) {
          var _XEUtils$findTree = _xeUtils$f.default.findTree(afterFullData, function(item) {
            return item === currentRow;
          }, treeOpts2), index2 = _XEUtils$findTree.index, items2 = _XEUtils$findTree.items;
          if (isUpArrow && index2 > 0) {
            targetRow = items2[index2 - 1];
          } else if (isDwArrow && index2 < items2.length - 1) {
            targetRow = items2[index2 + 1];
          }
        } else {
          var _rowIndex = this.getVTRowIndex(currentRow);
          if (isUpArrow && _rowIndex > 0) {
            targetRow = afterFullData[_rowIndex - 1];
          } else if (isDwArrow && _rowIndex < afterFullData.length - 1) {
            targetRow = afterFullData[_rowIndex + 1];
          }
        }
      } else {
        targetRow = afterFullData[0];
      }
      if (targetRow) {
        var params = {
          $table: this,
          row: targetRow
        };
        this.scrollToRow(targetRow).then(function() {
          return _this2.triggerCurrentRowEvent(evnt, params);
        });
      }
    },
    moveSelected: function moveSelected(args, isLeftArrow, isUpArrow, isRightArrow, isDwArrow, evnt) {
      var _this3 = this;
      var afterFullData = this.afterFullData, visibleColumn = this.visibleColumn;
      var params = Object.assign({}, args);
      var _rowIndex = this.getVTRowIndex(params.row);
      var _columnIndex = this.getVTColumnIndex(params.column);
      evnt.preventDefault();
      if (isUpArrow && _rowIndex > 0) {
        params.rowIndex = _rowIndex - 1;
        params.row = afterFullData[params.rowIndex];
      } else if (isDwArrow && _rowIndex < afterFullData.length - 1) {
        params.rowIndex = _rowIndex + 1;
        params.row = afterFullData[params.rowIndex];
      } else if (isLeftArrow && _columnIndex) {
        params.columnIndex = _columnIndex - 1;
        params.column = visibleColumn[params.columnIndex];
      } else if (isRightArrow && _columnIndex < visibleColumn.length - 1) {
        params.columnIndex = _columnIndex + 1;
        params.column = visibleColumn[params.columnIndex];
      }
      this.scrollToRow(params.row, params.column).then(function() {
        params.cell = _this3.getCell(params.row, params.column);
        _this3.handleSelected(params, evnt);
      });
    },
    triggerHeaderCellMousedownEvent: function triggerHeaderCellMousedownEvent(evnt, params) {
      var mouseConfig = this.mouseConfig, mouseOpts2 = this.mouseOpts;
      if (mouseConfig && mouseOpts2.area && this.handleHeaderCellAreaEvent) {
        var cell2 = evnt.currentTarget;
        var triggerSort = _tools$g.DomTools.getEventTargetNode(evnt, cell2, "vxe-cell--sort").flag;
        var triggerFilter = _tools$g.DomTools.getEventTargetNode(evnt, cell2, "vxe-cell--filter").flag;
        this.handleHeaderCellAreaEvent(evnt, Object.assign({
          cell: cell2,
          triggerSort,
          triggerFilter
        }, params));
      }
      this.focus();
      this.closeMenu();
    },
    triggerCellMousedownEvent: function triggerCellMousedownEvent(evnt, params) {
      var cell2 = evnt.currentTarget;
      params.cell = cell2;
      this.handleCellMousedownEvent(evnt, params);
      this.focus();
      this.closeFilter();
      this.closeMenu();
    },
    handleCellMousedownEvent: function handleCellMousedownEvent(evnt, params) {
      var editConfig = this.editConfig, editOpts2 = this.editOpts, handleSelected2 = this.handleSelected, checkboxConfig = this.checkboxConfig, checkboxOpts2 = this.checkboxOpts, mouseConfig = this.mouseConfig, mouseOpts2 = this.mouseOpts;
      if (mouseConfig && mouseOpts2.area && this.handleCellAreaEvent) {
        return this.handleCellAreaEvent(evnt, params);
      } else {
        if (checkboxConfig && checkboxOpts2.range) {
          this.handleCheckboxRangeEvent(evnt, params);
        }
        if (mouseConfig && mouseOpts2.selected) {
          if (!editConfig || editOpts2.mode === "cell") {
            handleSelected2(params, evnt);
          }
        }
      }
    },
    handleCheckboxRangeEvent: function handleCheckboxRangeEvent(evnt, params) {
      var _this4 = this;
      var column2 = params.column, cell2 = params.cell;
      if (column2.type === "checkbox") {
        var $el = this.$el, elemStore = this.elemStore;
        var disX = evnt.clientX;
        var disY = evnt.clientY;
        var bodyWrapperElem = elemStore["".concat(column2.fixed || "main", "-body-wrapper")] || elemStore["main-body-wrapper"];
        var checkboxRangeElem = bodyWrapperElem.querySelector(".vxe-table--checkbox-range");
        var domMousemove = document.onmousemove;
        var domMouseup = document.onmouseup;
        var trElem = cell2.parentNode;
        var selectRecords = this.getCheckboxRecords();
        var lastRangeRows = [];
        var marginSize = 1;
        var offsetRest = getTargetOffset(evnt.target, bodyWrapperElem);
        var startTop = offsetRest.offsetTop + evnt.offsetY;
        var startLeft = offsetRest.offsetLeft + evnt.offsetX;
        var startScrollTop = bodyWrapperElem.scrollTop;
        var rowHeight = trElem.offsetHeight;
        var mouseScrollTimeout = null;
        var isMouseScrollDown = false;
        var mouseScrollSpaceSize = 1;
        var triggerEvent4 = function triggerEvent5(type3, evnt2) {
          _this4.emitEvent("checkbox-range-".concat(type3), {
            records: _this4.getCheckboxRecords(),
            reserves: _this4.getCheckboxReserveRecords()
          }, evnt2);
        };
        var handleChecked3 = function handleChecked4(evnt2) {
          var clientX = evnt2.clientX, clientY = evnt2.clientY;
          var offsetLeft = clientX - disX;
          var offsetTop = clientY - disY + (bodyWrapperElem.scrollTop - startScrollTop);
          var rangeHeight = Math.abs(offsetTop);
          var rangeWidth = Math.abs(offsetLeft);
          var rangeTop = startTop;
          var rangeLeft = startLeft;
          if (offsetTop < marginSize) {
            rangeTop += offsetTop;
            if (rangeTop < marginSize) {
              rangeTop = marginSize;
              rangeHeight = startTop;
            }
          } else {
            rangeHeight = Math.min(rangeHeight, bodyWrapperElem.scrollHeight - startTop - marginSize);
          }
          if (offsetLeft < marginSize) {
            rangeLeft += offsetLeft;
            if (rangeWidth > startLeft) {
              rangeLeft = marginSize;
              rangeWidth = startLeft;
            }
          } else {
            rangeWidth = Math.min(rangeWidth, bodyWrapperElem.clientWidth - startLeft - marginSize);
          }
          checkboxRangeElem.style.height = "".concat(rangeHeight, "px");
          checkboxRangeElem.style.width = "".concat(rangeWidth, "px");
          checkboxRangeElem.style.left = "".concat(rangeLeft, "px");
          checkboxRangeElem.style.top = "".concat(rangeTop, "px");
          checkboxRangeElem.style.display = "block";
          var rangeRows = getCheckboxRangeRows(_this4, params, trElem, offsetTop < marginSize ? -rangeHeight : rangeHeight);
          if (rangeHeight > 10 && rangeRows.length !== lastRangeRows.length) {
            lastRangeRows = rangeRows;
            if (evnt2.ctrlKey) {
              rangeRows.forEach(function(row) {
                _this4.handleSelectRow({
                  row
                }, selectRecords.indexOf(row) === -1);
              });
            } else {
              _this4.setAllCheckboxRow(false);
              _this4.setCheckboxRow(rangeRows, true);
            }
            triggerEvent4("change", evnt2);
          }
        };
        var stopMouseScroll = function stopMouseScroll2() {
          clearTimeout(mouseScrollTimeout);
          mouseScrollTimeout = null;
        };
        var startMouseScroll = function startMouseScroll2(evnt2) {
          stopMouseScroll();
          mouseScrollTimeout = setTimeout(function() {
            if (mouseScrollTimeout) {
              var scrollLeft = bodyWrapperElem.scrollLeft, scrollTop = bodyWrapperElem.scrollTop, clientHeight = bodyWrapperElem.clientHeight, scrollHeight = bodyWrapperElem.scrollHeight;
              var topSize = Math.ceil(mouseScrollSpaceSize * 50 / rowHeight);
              if (isMouseScrollDown) {
                if (scrollTop + clientHeight < scrollHeight) {
                  _this4.scrollTo(scrollLeft, scrollTop + topSize);
                  startMouseScroll2(evnt2);
                  handleChecked3(evnt2);
                } else {
                  stopMouseScroll();
                }
              } else {
                if (scrollTop) {
                  _this4.scrollTo(scrollLeft, scrollTop - topSize);
                  startMouseScroll2(evnt2);
                  handleChecked3(evnt2);
                } else {
                  stopMouseScroll();
                }
              }
            }
          }, 50);
        };
        _tools$g.DomTools.addClass($el, "drag--range");
        document.onmousemove = function(evnt2) {
          evnt2.preventDefault();
          evnt2.stopPropagation();
          var clientY = evnt2.clientY;
          var _DomTools$getAbsolute = _tools$g.DomTools.getAbsolutePos(bodyWrapperElem), boundingTop = _DomTools$getAbsolute.boundingTop;
          if (clientY < boundingTop) {
            isMouseScrollDown = false;
            mouseScrollSpaceSize = boundingTop - clientY;
            if (!mouseScrollTimeout) {
              startMouseScroll(evnt2);
            }
          } else if (clientY > boundingTop + bodyWrapperElem.clientHeight) {
            isMouseScrollDown = true;
            mouseScrollSpaceSize = clientY - boundingTop - bodyWrapperElem.clientHeight;
            if (!mouseScrollTimeout) {
              startMouseScroll(evnt2);
            }
          } else if (mouseScrollTimeout) {
            stopMouseScroll();
          }
          handleChecked3(evnt2);
        };
        document.onmouseup = function(evnt2) {
          stopMouseScroll();
          _tools$g.DomTools.removeClass($el, "drag--range");
          checkboxRangeElem.removeAttribute("style");
          document.onmousemove = domMousemove;
          document.onmouseup = domMouseup;
          triggerEvent4("end", evnt2);
        };
        triggerEvent4("start", evnt);
      }
    }
  }
};
mixin$1.default = _default$F;
Object.defineProperty(keyboard, "__esModule", {
  value: true
});
keyboard.default = keyboard.Keyboard = void 0;
var _table$2 = _interopRequireDefault$10(table$1);
var _mixin$1 = _interopRequireDefault$10(mixin$1);
var _vXETable$9 = _interopRequireDefault$10(vXETable);
function _interopRequireDefault$10(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var Keyboard = {
  install: function install6() {
    _vXETable$9.default.reg("keyboard");
    _table$2.default.mixins.push(_mixin$1.default);
  }
};
keyboard.Keyboard = Keyboard;
var _default$E = Keyboard;
keyboard.default = _default$E;
var validator = {};
var mixin3 = {};
Object.defineProperty(mixin3, "__esModule", {
  value: true
});
mixin3.default = void 0;
var _xeUtils$e = _interopRequireDefault$$(xeUtils);
var _conf$f = _interopRequireDefault$$(conf);
var _tools$f = tools;
var _utils$1 = utils;
function _interopRequireDefault$$(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
function _classCallCheck$3(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$2(target2, props2) {
  for (var i = 0; i < props2.length; i++) {
    var descriptor2 = props2[i];
    descriptor2.enumerable = descriptor2.enumerable || false;
    descriptor2.configurable = true;
    if ("value" in descriptor2)
      descriptor2.writable = true;
    Object.defineProperty(target2, descriptor2.key, descriptor2);
  }
}
function _createClass$2(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$2(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$2(Constructor, staticProps);
  return Constructor;
}
var Rule$1 = /* @__PURE__ */ function() {
  function Rule2(rule) {
    _classCallCheck$3(this, Rule2);
    Object.assign(this, {
      $options: rule,
      required: rule.required,
      min: rule.min,
      max: rule.max,
      type: rule.type,
      pattern: rule.pattern,
      validator: rule.validator,
      trigger: rule.trigger,
      maxWidth: rule.maxWidth
    });
  }
  _createClass$2(Rule2, [{
    key: "content",
    get: function get7() {
      return _tools$f.UtilTools.getFuncText(this.$options.content || this.$options.message);
    }
  }, {
    key: "message",
    get: function get7() {
      return this.content;
    }
  }]);
  return Rule2;
}();
function validErrorRuleValue$1(rule, val) {
  var type3 = rule.type, min2 = rule.min, max2 = rule.max, pattern2 = rule.pattern;
  var isNumType2 = type3 === "number";
  var numVal = isNumType2 ? _xeUtils$e.default.toNumber(val) : _xeUtils$e.default.getSize(val);
  if (isNumType2 && isNaN(val)) {
    return true;
  }
  if (!_xeUtils$e.default.eqNull(min2) && numVal < _xeUtils$e.default.toNumber(min2)) {
    return true;
  }
  if (!_xeUtils$e.default.eqNull(max2) && numVal > _xeUtils$e.default.toNumber(max2)) {
    return true;
  }
  if (pattern2 && !(_xeUtils$e.default.isRegExp(pattern2) ? pattern2 : new RegExp(pattern2)).test(val)) {
    return true;
  }
  return false;
}
var _default$D = {
  methods: {
    _fullValidate: function _fullValidate(rows, cb) {
      return this.beginValidate(rows, cb, true);
    },
    _validate: function _validate(rows, cb) {
      return this.beginValidate(rows, cb);
    },
    handleValidError: function handleValidError(params) {
      var _this = this;
      return new Promise(function(resolve) {
        if (_this.validOpts.autoPos === false) {
          _this.emitEvent("valid-error", params);
          resolve();
        } else {
          _this.handleActived(params, {
            type: "valid-error",
            trigger: "call"
          }).then(function() {
            setTimeout(function() {
              resolve(_this.showValidTooltip(params));
            }, 10);
          });
        }
      });
    },
    beginValidate: function beginValidate(rows, cb, isFull) {
      var _this2 = this;
      var validRest = {};
      var editRules = this.editRules, afterFullData = this.afterFullData, treeConfig = this.treeConfig, treeOpts2 = this.treeOpts;
      var vaildDatas;
      if (rows === true) {
        vaildDatas = afterFullData;
      } else if (rows) {
        if (_xeUtils$e.default.isFunction(rows)) {
          cb = rows;
        } else {
          vaildDatas = _xeUtils$e.default.isArray(rows) ? rows : [rows];
        }
      }
      if (!vaildDatas) {
        vaildDatas = this.getInsertRecords().concat(this.getUpdateRecords());
      }
      var rowValids = [];
      this.lastCallTime = Date.now();
      this.validRuleErr = false;
      this.clearValidate();
      if (editRules) {
        var columns2 = this.getColumns();
        var handleVaild = function handleVaild2(row) {
          if (isFull || !_this2.validRuleErr) {
            var colVailds = [];
            columns2.forEach(function(column2) {
              if ((isFull || !_this2.validRuleErr) && _xeUtils$e.default.has(editRules, column2.property)) {
                colVailds.push(_this2.validCellRules("all", row, column2).catch(function(_ref) {
                  var rule = _ref.rule, rules2 = _ref.rules;
                  var rest = {
                    rule,
                    rules: rules2,
                    rowIndex: _this2.getRowIndex(row),
                    row,
                    columnIndex: _this2.getColumnIndex(column2),
                    column: column2,
                    field: column2.property,
                    $table: _this2
                  };
                  if (!validRest[column2.property]) {
                    validRest[column2.property] = [];
                  }
                  validRest[column2.property].push(rest);
                  if (!isFull) {
                    _this2.validRuleErr = true;
                    return Promise.reject(rest);
                  }
                }));
              }
            });
            rowValids.push(Promise.all(colVailds));
          }
        };
        if (treeConfig) {
          _xeUtils$e.default.eachTree(vaildDatas, handleVaild, treeOpts2);
        } else {
          vaildDatas.forEach(handleVaild);
        }
        return Promise.all(rowValids).then(function() {
          var ruleProps = Object.keys(validRest);
          return _this2.$nextTick().then(function() {
            if (ruleProps.length) {
              return Promise.reject(validRest[ruleProps[0]][0]);
            }
            if (cb) {
              cb();
            }
          });
        }).catch(function(firstErrParams) {
          return new Promise(function(resolve, reject) {
            var finish = function finish2() {
              _this2.$nextTick(function() {
                if (cb) {
                  cb(validRest);
                  resolve();
                } else {
                  if (_conf$f.default.validToReject === "obsolete") {
                    reject(validRest);
                  } else {
                    resolve(validRest);
                  }
                }
              });
            };
            var posAndFinish = function posAndFinish2() {
              firstErrParams.cell = _this2.getCell(firstErrParams.row, firstErrParams.column);
              _tools$f.DomTools.scrollToView(firstErrParams.cell);
              _this2.handleValidError(firstErrParams).then(finish);
            };
            var row = firstErrParams.row;
            var rowIndex = afterFullData.indexOf(row);
            var locatRow = rowIndex > 0 ? afterFullData[rowIndex - 1] : row;
            if (_this2.validOpts.autoPos === false) {
              finish();
            } else {
              if (treeConfig) {
                _this2.scrollToTreeRow(locatRow).then(posAndFinish);
              } else {
                _this2.scrollToRow(locatRow).then(posAndFinish);
              }
            }
          });
        });
      }
      return this.$nextTick().then(function() {
        if (cb) {
          cb();
        }
      });
    },
    hasCellRules: function hasCellRules(type3, row, column2) {
      var editRules = this.editRules;
      var property2 = column2.property;
      if (property2 && editRules) {
        var rules2 = _xeUtils$e.default.get(editRules, property2);
        return rules2 && _xeUtils$e.default.find(rules2, function(rule) {
          return type3 === "all" || !rule.trigger || type3 === rule.trigger;
        });
      }
      return false;
    },
    validCellRules: function validCellRules(validType, row, column2, val) {
      var _this3 = this;
      var editRules = this.editRules;
      var property2 = column2.property;
      var errorRules = [];
      var syncVailds = [];
      if (property2 && editRules) {
        var rules2 = _xeUtils$e.default.get(editRules, property2);
        if (rules2) {
          var cellValue = _xeUtils$e.default.isUndefined(val) ? _xeUtils$e.default.get(row, property2) : val;
          rules2.forEach(function(rule) {
            var type3 = rule.type, trigger3 = rule.trigger, required2 = rule.required;
            if (validType === "all" || !trigger3 || validType === trigger3) {
              if (_xeUtils$e.default.isFunction(rule.validator)) {
                var customValid = rule.validator({
                  cellValue,
                  rule,
                  rules: rules2,
                  row,
                  rowIndex: _this3.getRowIndex(row),
                  column: column2,
                  columnIndex: _this3.getColumnIndex(column2),
                  field: column2.property,
                  $table: _this3
                });
                if (customValid) {
                  if (_xeUtils$e.default.isError(customValid)) {
                    _this3.validRuleErr = true;
                    errorRules.push(new Rule$1({
                      type: "custom",
                      trigger: trigger3,
                      content: customValid.message,
                      rule: new Rule$1(rule)
                    }));
                  } else if (customValid.catch) {
                    syncVailds.push(customValid.catch(function(e) {
                      _this3.validRuleErr = true;
                      errorRules.push(new Rule$1({
                        type: "custom",
                        trigger: trigger3,
                        content: e && e.message ? e.message : rule.content || rule.message,
                        rule: new Rule$1(rule)
                      }));
                    }));
                  }
                }
              } else {
                var isArrType = type3 === "array";
                var hasEmpty = isArrType ? !_xeUtils$e.default.isArray(cellValue) || !cellValue.length : (0, _utils$1.eqEmptyValue)(cellValue);
                if (required2 ? hasEmpty || validErrorRuleValue$1(rule, cellValue) : !hasEmpty && validErrorRuleValue$1(rule, cellValue)) {
                  _this3.validRuleErr = true;
                  errorRules.push(new Rule$1(rule));
                }
              }
            }
          });
        }
      }
      return Promise.all(syncVailds).then(function() {
        if (errorRules.length) {
          var rest = {
            rules: errorRules,
            rule: errorRules[0]
          };
          return Promise.reject(rest);
        }
      });
    },
    _clearValidate: function _clearValidate() {
      var validTip = this.$refs.validTip;
      Object.assign(this.validStore, {
        visible: false,
        row: null,
        column: null,
        content: "",
        rule: null
      });
      if (validTip && validTip.visible) {
        validTip.close();
      }
      return this.$nextTick();
    },
    triggerValidate: function triggerValidate(type3) {
      var _this4 = this;
      var editConfig = this.editConfig, editStore = this.editStore, editRules = this.editRules, validStore = this.validStore;
      var actived = editStore.actived;
      if (actived.row && editRules) {
        var _actived$args = actived.args, row = _actived$args.row, column2 = _actived$args.column, cell2 = _actived$args.cell;
        if (this.hasCellRules(type3, row, column2)) {
          return this.validCellRules(type3, row, column2).then(function() {
            if (editConfig.mode === "row") {
              if (validStore.visible && validStore.row === row && validStore.column === column2) {
                _this4.clearValidate();
              }
            }
          }).catch(function(_ref2) {
            var rule = _ref2.rule;
            if (!rule.trigger || type3 === rule.trigger) {
              var rest = {
                rule,
                row,
                column: column2,
                cell: cell2
              };
              _this4.showValidTooltip(rest);
              return Promise.reject(rest);
            }
            return Promise.resolve();
          });
        }
      }
      return Promise.resolve();
    },
    showValidTooltip: function showValidTooltip(params) {
      var _this5 = this;
      var $refs = this.$refs, height3 = this.height, tableData = this.tableData, validOpts3 = this.validOpts;
      var rule = params.rule, row = params.row, column2 = params.column, cell2 = params.cell;
      var validTip = $refs.validTip;
      var content2 = rule.content;
      return this.$nextTick(function() {
        Object.assign(_this5.validStore, {
          row,
          column: column2,
          rule,
          content: content2,
          visible: true
        });
        _this5.emitEvent("valid-error", params);
        if (validTip && (validOpts3.message === "tooltip" || validOpts3.message === "default" && !height3 && tableData.length < 2)) {
          return validTip.open(cell2, content2);
        }
      });
    }
  }
};
mixin3.default = _default$D;
Object.defineProperty(validator, "__esModule", {
  value: true
});
validator.default = validator.Validator = void 0;
var _table$1 = _interopRequireDefault$_(table$1);
var _mixin = _interopRequireDefault$_(mixin3);
var _vXETable$8 = _interopRequireDefault$_(vXETable);
function _interopRequireDefault$_(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var Validator = {
  install: function install7() {
    _vXETable$8.default.reg("valid");
    _table$1.default.mixins.push(_mixin.default);
  }
};
validator.Validator = Validator;
var _default$C = Validator;
validator.default = _default$C;
var header$1 = {};
var header = {};
var util$2 = {};
Object.defineProperty(util$2, "__esModule", {
  value: true
});
util$2.convertToRows = void 0;
function _toConsumableArray$2(arr) {
  return _arrayWithoutHoles$2(arr) || _iterableToArray$2(arr) || _unsupportedIterableToArray$1(arr) || _nonIterableSpread$2();
}
function _nonIterableSpread$2() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$1(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$1(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$1(o, minLen);
}
function _iterableToArray$2(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _arrayWithoutHoles$2(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray$1(arr);
}
function _arrayLikeToArray$1(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
var getAllColumns = function getAllColumns2(columns2, parentColumn) {
  var result = [];
  columns2.forEach(function(column2) {
    column2.parentId = parentColumn ? parentColumn.id : null;
    if (column2.visible) {
      if (column2.children && column2.children.length && column2.children.some(function(column3) {
        return column3.visible;
      })) {
        result.push(column2);
        result.push.apply(result, _toConsumableArray$2(getAllColumns2(column2.children, column2)));
      } else {
        result.push(column2);
      }
    }
  });
  return result;
};
var convertToRows2 = function convertToRows3(originColumns) {
  var maxLevel = 1;
  var traverse2 = function traverse3(column2, parent2) {
    if (parent2) {
      column2.level = parent2.level + 1;
      if (maxLevel < column2.level) {
        maxLevel = column2.level;
      }
    }
    if (column2.children && column2.children.length && column2.children.some(function(column3) {
      return column3.visible;
    })) {
      var colSpan = 0;
      column2.children.forEach(function(subColumn) {
        if (subColumn.visible) {
          traverse3(subColumn, column2);
          colSpan += subColumn.colSpan;
        }
      });
      column2.colSpan = colSpan;
    } else {
      column2.colSpan = 1;
    }
  };
  originColumns.forEach(function(column2) {
    column2.level = 1;
    traverse2(column2);
  });
  var rows = [];
  for (var i = 0; i < maxLevel; i++) {
    rows.push([]);
  }
  var allColumns = getAllColumns(originColumns);
  allColumns.forEach(function(column2) {
    if (column2.children && column2.children.length && column2.children.some(function(column3) {
      return column3.visible;
    })) {
      column2.rowSpan = 1;
    } else {
      column2.rowSpan = maxLevel - column2.level + 1;
    }
    rows[column2.level - 1].push(column2);
  });
  return rows;
};
util$2.convertToRows = convertToRows2;
Object.defineProperty(header, "__esModule", {
  value: true
});
header.default = void 0;
var _xeUtils$d = _interopRequireDefault$Z(xeUtils);
var _tools$e = tools;
var _util$5 = util$2;
var _util2 = util$4;
function _interopRequireDefault$Z(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
function _defineProperty$c(obj, key, value6) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value: value6, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value6;
  }
  return obj;
}
var cellType$1 = "header";
var _default$B = {
  name: "VxeTableHeader",
  props: {
    tableData: Array,
    tableColumn: Array,
    tableGroupColumn: Array,
    fixedColumn: Array,
    size: String,
    fixedType: String
  },
  data: function data9() {
    return {
      headerColumn: []
    };
  },
  watch: {
    tableColumn: function tableColumn2() {
      this.uploadColumn();
    }
  },
  created: function created6() {
    this.uploadColumn();
  },
  mounted: function mounted7() {
    var $xetable = this.$parent, $el = this.$el, $refs = this.$refs, fixedType = this.fixedType;
    var elemStore = $xetable.elemStore;
    var prefix = "".concat(fixedType || "main", "-header-");
    elemStore["".concat(prefix, "wrapper")] = $el;
    elemStore["".concat(prefix, "table")] = $refs.table;
    elemStore["".concat(prefix, "colgroup")] = $refs.colgroup;
    elemStore["".concat(prefix, "list")] = $refs.thead;
    elemStore["".concat(prefix, "xSpace")] = $refs.xSpace;
    elemStore["".concat(prefix, "repair")] = $refs.repair;
  },
  destroyed: function destroyed6() {
    var $xetable = this.$parent, fixedType = this.fixedType;
    var elemStore = $xetable.elemStore;
    var prefix = "".concat(fixedType || "main", "-header-");
    elemStore["".concat(prefix, "wrapper")] = null;
    elemStore["".concat(prefix, "table")] = null;
    elemStore["".concat(prefix, "colgroup")] = null;
    elemStore["".concat(prefix, "list")] = null;
    elemStore["".concat(prefix, "xSpace")] = null;
    elemStore["".concat(prefix, "repair")] = null;
  },
  render: function render13(h) {
    var _this = this;
    var _e = this._e, $xetable = this.$parent, fixedType = this.fixedType, headerColumn = this.headerColumn, fixedColumn = this.fixedColumn;
    var tableListeners = $xetable.$listeners, tId = $xetable.tId, isGroup3 = $xetable.isGroup, resizable = $xetable.resizable, border = $xetable.border, columnKey = $xetable.columnKey, headerRowClassName = $xetable.headerRowClassName, headerCellClassName = $xetable.headerCellClassName, headerRowStyle = $xetable.headerRowStyle, headerCellStyle = $xetable.headerCellStyle, allColumnHeaderOverflow = $xetable.showHeaderOverflow, allHeaderAlign = $xetable.headerAlign, allAlign = $xetable.align, highlightCurrentColumn = $xetable.highlightCurrentColumn, currentColumn = $xetable.currentColumn, scrollXLoad = $xetable.scrollXLoad, overflowX = $xetable.overflowX, scrollbarWidth2 = $xetable.scrollbarWidth, sortOpts2 = $xetable.sortOpts, mouseConfig = $xetable.mouseConfig, columnOpts2 = $xetable.columnOpts;
    var tableColumn3 = this.tableColumn;
    var headerGroups = headerColumn;
    if (!isGroup3) {
      if (fixedType) {
        if (scrollXLoad || allColumnHeaderOverflow) {
          tableColumn3 = fixedColumn;
        }
      }
      headerGroups = [tableColumn3];
    }
    return h("div", {
      class: ["vxe-table--header-wrapper", fixedType ? "fixed-".concat(fixedType, "--wrapper") : "body--wrapper"],
      attrs: {
        xid: tId
      }
    }, [
      fixedType ? _e() : h("div", {
        class: "vxe-body--x-space",
        ref: "xSpace"
      }),
      h("table", {
        class: "vxe-table--header",
        attrs: {
          xid: tId,
          cellspacing: 0,
          cellpadding: 0,
          border: 0
        },
        ref: "table"
      }, [
        h("colgroup", {
          ref: "colgroup"
        }, tableColumn3.map(function(column2, $columnIndex) {
          return h("col", {
            attrs: {
              name: column2.id
            },
            key: $columnIndex
          });
        }).concat(scrollbarWidth2 ? [h("col", {
          attrs: {
            name: "col_gutter"
          }
        })] : [])),
        h("thead", {
          ref: "thead"
        }, headerGroups.map(function(cols, $rowIndex) {
          return h("tr", {
            class: ["vxe-header--row", headerRowClassName ? _xeUtils$d.default.isFunction(headerRowClassName) ? headerRowClassName({
              $table: $xetable,
              $rowIndex,
              fixed: fixedType,
              type: cellType$1
            }) : headerRowClassName : ""],
            style: headerRowStyle ? _xeUtils$d.default.isFunction(headerRowStyle) ? headerRowStyle({
              $table: $xetable,
              $rowIndex,
              fixed: fixedType,
              type: cellType$1
            }) : headerRowStyle : null
          }, cols.map(function(column2, $columnIndex) {
            var _ref;
            var type3 = column2.type, showHeaderOverflow = column2.showHeaderOverflow, headerAlign = column2.headerAlign, align = column2.align, headerClassName = column2.headerClassName;
            var isColGroup = column2.children && column2.children.length;
            var fixedHiddenColumn = fixedType ? column2.fixed !== fixedType && !isColGroup : column2.fixed && overflowX;
            var headOverflow = _xeUtils$d.default.isUndefined(showHeaderOverflow) || _xeUtils$d.default.isNull(showHeaderOverflow) ? allColumnHeaderOverflow : showHeaderOverflow;
            var headAlign = headerAlign || align || allHeaderAlign || allAlign;
            var showEllipsis = headOverflow === "ellipsis";
            var showTitle = headOverflow === "title";
            var showTooltip = headOverflow === true || headOverflow === "tooltip";
            var hasEllipsis2 = showTitle || showTooltip || showEllipsis;
            var thOns = {};
            var hasFilter = column2.filters && column2.filters.some(function(item) {
              return item.checked;
            });
            var columnIndex = $xetable.getColumnIndex(column2);
            var _columnIndex = $xetable.getVTColumnIndex(column2);
            var params = {
              $table: $xetable,
              $rowIndex,
              column: column2,
              columnIndex,
              $columnIndex,
              _columnIndex,
              fixed: fixedType,
              type: cellType$1,
              isHidden: fixedHiddenColumn,
              hasFilter
            };
            if (scrollXLoad && !hasEllipsis2) {
              showEllipsis = hasEllipsis2 = true;
            }
            if (columnOpts2.isCurrent || highlightCurrentColumn || tableListeners["header-cell-click"] || sortOpts2.trigger === "cell") {
              thOns.click = function(evnt) {
                return $xetable.triggerHeaderCellClickEvent(evnt, params);
              };
            }
            if (tableListeners["header-cell-dblclick"]) {
              thOns.dblclick = function(evnt) {
                return $xetable.triggerHeaderCellDblclickEvent(evnt, params);
              };
            }
            if (mouseConfig) {
              thOns.mousedown = function(evnt) {
                return $xetable.triggerHeaderCellMousedownEvent(evnt, params);
              };
            }
            return h("th", {
              class: ["vxe-header--column", column2.id, (_ref = {}, _defineProperty$c(_ref, "col--".concat(headAlign), headAlign), _defineProperty$c(_ref, "col--".concat(type3), type3), _defineProperty$c(_ref, "col--last", $columnIndex === cols.length - 1), _defineProperty$c(_ref, "col--fixed", column2.fixed), _defineProperty$c(_ref, "col--group", isColGroup), _defineProperty$c(_ref, "col--ellipsis", hasEllipsis2), _defineProperty$c(_ref, "fixed--hidden", fixedHiddenColumn), _defineProperty$c(_ref, "is--sortable", column2.sortable), _defineProperty$c(_ref, "col--filter", !!column2.filters), _defineProperty$c(_ref, "is--filter-active", hasFilter), _defineProperty$c(_ref, "col--current", currentColumn === column2), _ref), _tools$e.UtilTools.getClass(headerClassName, params), _tools$e.UtilTools.getClass(headerCellClassName, params)],
              attrs: {
                colid: column2.id,
                colspan: column2.colSpan > 1 ? column2.colSpan : null,
                rowspan: column2.rowSpan > 1 ? column2.rowSpan : null
              },
              style: headerCellStyle ? _xeUtils$d.default.isFunction(headerCellStyle) ? headerCellStyle(params) : headerCellStyle : null,
              on: thOns,
              key: columnKey || isColGroup ? column2.id : $columnIndex
            }, [
              h("div", {
                class: ["vxe-cell", {
                  "c--title": showTitle,
                  "c--tooltip": showTooltip,
                  "c--ellipsis": showEllipsis
                }]
              }, column2.renderHeader(h, params)),
              !fixedHiddenColumn && !isColGroup && (_xeUtils$d.default.isBoolean(column2.resizable) ? column2.resizable : columnOpts2.resizable || resizable) ? h("div", {
                class: ["vxe-resizable", {
                  "is--line": !border || border === "none"
                }],
                on: {
                  mousedown: function mousedown(evnt) {
                    return _this.resizeMousedown(evnt, params);
                  }
                }
              }) : null
            ]);
          }).concat(scrollbarWidth2 ? [h("th", {
            class: "vxe-header--gutter col--gutter"
          })] : []));
        }))
      ]),
      h("div", {
        class: "vxe-table--header-border-line",
        ref: "repair"
      })
    ]);
  },
  methods: {
    uploadColumn: function uploadColumn() {
      var $xetable = this.$parent;
      this.headerColumn = $xetable.isGroup ? (0, _util$5.convertToRows)(this.tableGroupColumn) : [];
    },
    resizeMousedown: function resizeMousedown(evnt, params) {
      var column2 = params.column;
      var $xetable = this.$parent, $el = this.$el, fixedType = this.fixedType;
      var _$xetable$$refs = $xetable.$refs, tableBody = _$xetable$$refs.tableBody, leftContainer = _$xetable$$refs.leftContainer, rightContainer = _$xetable$$refs.rightContainer, resizeBarElem = _$xetable$$refs.resizeBar;
      var dragBtnElem = evnt.target, dragClientX = evnt.clientX;
      var cell2 = params.cell = dragBtnElem.parentNode;
      var dragLeft = 0;
      var tableBodyElem = tableBody.$el;
      var pos = _tools$e.DomTools.getOffsetPos(dragBtnElem, $el);
      var dragBtnWidth = dragBtnElem.clientWidth;
      var dragBtnOffsetWidth = Math.floor(dragBtnWidth / 2);
      var minInterval = (0, _util2.getColMinWidth)(params) - dragBtnOffsetWidth;
      var dragMinLeft = pos.left - cell2.clientWidth + dragBtnWidth + minInterval;
      var dragPosLeft = pos.left + dragBtnOffsetWidth;
      var domMousemove = document.onmousemove;
      var domMouseup = document.onmouseup;
      var isLeftFixed = fixedType === "left";
      var isRightFixed = fixedType === "right";
      var fixedOffsetWidth = 0;
      if (isLeftFixed || isRightFixed) {
        var siblingProp = isLeftFixed ? "nextElementSibling" : "previousElementSibling";
        var tempCellElem = cell2[siblingProp];
        while (tempCellElem) {
          if (_tools$e.DomTools.hasClass(tempCellElem, "fixed--hidden")) {
            break;
          } else if (!_tools$e.DomTools.hasClass(tempCellElem, "col--group")) {
            fixedOffsetWidth += tempCellElem.offsetWidth;
          }
          tempCellElem = tempCellElem[siblingProp];
        }
        if (isRightFixed && rightContainer) {
          dragPosLeft = rightContainer.offsetLeft + fixedOffsetWidth;
        }
      }
      var updateEvent = function updateEvent2(evnt2) {
        evnt2.stopPropagation();
        evnt2.preventDefault();
        var offsetX = evnt2.clientX - dragClientX;
        var left = dragPosLeft + offsetX;
        var scrollLeft = fixedType ? 0 : tableBodyElem.scrollLeft;
        if (isLeftFixed) {
          left = Math.min(left, (rightContainer ? rightContainer.offsetLeft : tableBodyElem.clientWidth) - fixedOffsetWidth - minInterval);
        } else if (isRightFixed) {
          dragMinLeft = (leftContainer ? leftContainer.clientWidth : 0) + fixedOffsetWidth + minInterval;
          left = Math.min(left, dragPosLeft + cell2.clientWidth - minInterval);
        } else {
          dragMinLeft = Math.max(tableBodyElem.scrollLeft, dragMinLeft);
        }
        dragLeft = Math.max(left, dragMinLeft);
        resizeBarElem.style.left = "".concat(dragLeft - scrollLeft, "px");
      };
      $xetable._isResize = true;
      _tools$e.DomTools.addClass($xetable.$el, "drag--resize");
      resizeBarElem.style.display = "block";
      document.onmousemove = updateEvent;
      document.onmouseup = function(evnt2) {
        document.onmousemove = domMousemove;
        document.onmouseup = domMouseup;
        column2.resizeWidth = column2.renderWidth + (isRightFixed ? dragPosLeft - dragLeft : dragLeft - dragPosLeft);
        resizeBarElem.style.display = "none";
        $xetable._isResize = false;
        $xetable._lastResizeTime = Date.now();
        $xetable.analyColumnWidth();
        $xetable.recalculate(true).then(function() {
          $xetable.saveCustomResizable();
          $xetable.updateCellAreas();
          $xetable.emitEvent("resizable-change", params, evnt2);
        });
        _tools$e.DomTools.removeClass($xetable.$el, "drag--resize");
      };
      updateEvent(evnt);
      $xetable.closeMenu();
    }
  }
};
header.default = _default$B;
Object.defineProperty(header$1, "__esModule", {
  value: true
});
header$1.default = header$1.Header = void 0;
var _header = _interopRequireDefault$Y(header);
function _interopRequireDefault$Y(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var Header = Object.assign(_header.default, {
  install: function install8(Vue2) {
    Vue2.component(_header.default.name, _header.default);
  }
});
header$1.Header = Header;
var _default$A = Header;
header$1.default = _default$A;
var footer$1 = {};
var footer = {};
Object.defineProperty(footer, "__esModule", {
  value: true
});
footer.default = void 0;
var _xeUtils$c = _interopRequireDefault$X(xeUtils);
var _tools$d = tools;
function _interopRequireDefault$X(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
function _defineProperty$b(obj, key, value6) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value: value6, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value6;
  }
  return obj;
}
var cellType = "footer";
function mergeFooterMethod(mergeFooterList, _rowIndex, _columnIndex) {
  for (var mIndex = 0; mIndex < mergeFooterList.length; mIndex++) {
    var _mergeFooterList$mInd = mergeFooterList[mIndex], mergeRowIndex = _mergeFooterList$mInd.row, mergeColIndex = _mergeFooterList$mInd.col, mergeRowspan = _mergeFooterList$mInd.rowspan, mergeColspan = _mergeFooterList$mInd.colspan;
    if (mergeColIndex > -1 && mergeRowIndex > -1 && mergeRowspan && mergeColspan) {
      if (mergeRowIndex === _rowIndex && mergeColIndex === _columnIndex) {
        return {
          rowspan: mergeRowspan,
          colspan: mergeColspan
        };
      }
      if (_rowIndex >= mergeRowIndex && _rowIndex < mergeRowIndex + mergeRowspan && _columnIndex >= mergeColIndex && _columnIndex < mergeColIndex + mergeColspan) {
        return {
          rowspan: 0,
          colspan: 0
        };
      }
    }
  }
}
var _default$z = {
  name: "VxeTableFooter",
  props: {
    footerTableData: Array,
    tableColumn: Array,
    fixedColumn: Array,
    fixedType: String,
    size: String
  },
  mounted: function mounted8() {
    var $xetable = this.$parent, $el = this.$el, $refs = this.$refs, fixedType = this.fixedType;
    var elemStore = $xetable.elemStore;
    var prefix = "".concat(fixedType || "main", "-footer-");
    elemStore["".concat(prefix, "wrapper")] = $el;
    elemStore["".concat(prefix, "table")] = $refs.table;
    elemStore["".concat(prefix, "colgroup")] = $refs.colgroup;
    elemStore["".concat(prefix, "list")] = $refs.tfoot;
    elemStore["".concat(prefix, "xSpace")] = $refs.xSpace;
  },
  destroyed: function destroyed7() {
    var $xetable = this.$parent, fixedType = this.fixedType;
    var elemStore = $xetable.elemStore;
    var prefix = "".concat(fixedType || "main", "-footer-");
    elemStore["".concat(prefix, "wrapper")] = null;
    elemStore["".concat(prefix, "table")] = null;
    elemStore["".concat(prefix, "colgroup")] = null;
    elemStore["".concat(prefix, "list")] = null;
    elemStore["".concat(prefix, "xSpace")] = null;
  },
  render: function render14(h) {
    var _e = this._e, $xetable = this.$parent, fixedType = this.fixedType, fixedColumn = this.fixedColumn, tableColumn3 = this.tableColumn, footerTableData = this.footerTableData;
    var tableListeners = $xetable.$listeners, tId = $xetable.tId, footerRowClassName = $xetable.footerRowClassName, footerCellClassName = $xetable.footerCellClassName, footerRowStyle = $xetable.footerRowStyle, footerCellStyle = $xetable.footerCellStyle, allFooterAlign = $xetable.footerAlign, mergeFooterList = $xetable.mergeFooterList, footerSpanMethod = $xetable.footerSpanMethod, allAlign = $xetable.align, scrollXLoad = $xetable.scrollXLoad, columnKey = $xetable.columnKey, allColumnFooterOverflow = $xetable.showFooterOverflow, currentColumn = $xetable.currentColumn, overflowX = $xetable.overflowX, scrollbarWidth2 = $xetable.scrollbarWidth, tooltipOpts3 = $xetable.tooltipOpts, visibleColumn = $xetable.visibleColumn;
    if (fixedType) {
      if (scrollXLoad || allColumnFooterOverflow) {
        if (!mergeFooterList.length || !footerSpanMethod) {
          tableColumn3 = fixedColumn;
        } else {
          tableColumn3 = visibleColumn;
        }
      } else {
        tableColumn3 = visibleColumn;
      }
    }
    return h("div", {
      class: ["vxe-table--footer-wrapper", fixedType ? "fixed-".concat(fixedType, "--wrapper") : "body--wrapper"],
      attrs: {
        xid: tId
      },
      on: {
        scroll: this.scrollEvent
      }
    }, [fixedType ? _e() : h("div", {
      class: "vxe-body--x-space",
      ref: "xSpace"
    }), h("table", {
      class: "vxe-table--footer",
      attrs: {
        xid: tId,
        cellspacing: 0,
        cellpadding: 0,
        border: 0
      },
      ref: "table"
    }, [
      h("colgroup", {
        ref: "colgroup"
      }, tableColumn3.map(function(column2, $columnIndex) {
        return h("col", {
          attrs: {
            name: column2.id
          },
          key: $columnIndex
        });
      }).concat(scrollbarWidth2 ? [h("col", {
        attrs: {
          name: "col_gutter"
        }
      })] : [])),
      h("tfoot", {
        ref: "tfoot"
      }, footerTableData.map(function(list2, _rowIndex) {
        var $rowIndex = _rowIndex;
        return h("tr", {
          class: ["vxe-footer--row", footerRowClassName ? _xeUtils$c.default.isFunction(footerRowClassName) ? footerRowClassName({
            $table: $xetable,
            _rowIndex,
            $rowIndex,
            fixed: fixedType,
            type: cellType
          }) : footerRowClassName : ""],
          style: footerRowStyle ? _xeUtils$c.default.isFunction(footerRowStyle) ? footerRowStyle({
            $table: $xetable,
            _rowIndex,
            $rowIndex,
            fixed: fixedType,
            type: cellType
          }) : footerRowStyle : null
        }, tableColumn3.map(function(column2, $columnIndex) {
          var _ref2;
          var type3 = column2.type, showFooterOverflow = column2.showFooterOverflow, footerAlign = column2.footerAlign, align = column2.align, footerClassName = column2.footerClassName;
          var showAllTip = tooltipOpts3.showAll || tooltipOpts3.enabled;
          var isColGroup = column2.children && column2.children.length;
          var fixedHiddenColumn = fixedType ? column2.fixed !== fixedType && !isColGroup : column2.fixed && overflowX;
          var footOverflow = _xeUtils$c.default.isUndefined(showFooterOverflow) || _xeUtils$c.default.isNull(showFooterOverflow) ? allColumnFooterOverflow : showFooterOverflow;
          var footAlign = footerAlign || align || allFooterAlign || allAlign;
          var showEllipsis = footOverflow === "ellipsis";
          var showTitle = footOverflow === "title";
          var showTooltip = footOverflow === true || footOverflow === "tooltip";
          var hasEllipsis2 = showTitle || showTooltip || showEllipsis;
          var attrs2 = {
            colid: column2.id
          };
          var tfOns = {};
          var columnIndex = $xetable.getColumnIndex(column2);
          var _columnIndex = $xetable.getVTColumnIndex(column2);
          var itemIndex = _columnIndex;
          var params = {
            $table: $xetable,
            _rowIndex,
            $rowIndex,
            column: column2,
            columnIndex,
            $columnIndex,
            _columnIndex,
            itemIndex,
            items: list2,
            fixed: fixedType,
            type: cellType,
            data: footerTableData
          };
          if (scrollXLoad && !hasEllipsis2) {
            showEllipsis = hasEllipsis2 = true;
          }
          if (showTitle || showTooltip || showAllTip) {
            tfOns.mouseenter = function(evnt) {
              if (showTitle) {
                _tools$d.DomTools.updateCellTitle(evnt.currentTarget, column2);
              } else if (showTooltip || showAllTip) {
                $xetable.triggerFooterTooltipEvent(evnt, params);
              }
            };
          }
          if (showTooltip || showAllTip) {
            tfOns.mouseleave = function(evnt) {
              if (showTooltip || showAllTip) {
                $xetable.handleTargetLeaveEvent(evnt);
              }
            };
          }
          if (tableListeners["footer-cell-click"]) {
            tfOns.click = function(evnt) {
              $xetable.emitEvent("footer-cell-click", Object.assign({
                cell: evnt.currentTarget
              }, params), evnt);
            };
          }
          if (tableListeners["footer-cell-dblclick"]) {
            tfOns.dblclick = function(evnt) {
              $xetable.emitEvent("footer-cell-dblclick", Object.assign({
                cell: evnt.currentTarget
              }, params), evnt);
            };
          }
          if (mergeFooterList.length) {
            var spanRest = mergeFooterMethod(mergeFooterList, _rowIndex, _columnIndex);
            if (spanRest) {
              var rowspan = spanRest.rowspan, colspan = spanRest.colspan;
              if (!rowspan || !colspan) {
                return null;
              }
              if (rowspan > 1) {
                attrs2.rowspan = rowspan;
              }
              if (colspan > 1) {
                attrs2.colspan = colspan;
              }
            }
          } else if (footerSpanMethod) {
            var _ref = footerSpanMethod(params) || {}, _ref$rowspan = _ref.rowspan, _rowspan = _ref$rowspan === void 0 ? 1 : _ref$rowspan, _ref$colspan = _ref.colspan, _colspan = _ref$colspan === void 0 ? 1 : _ref$colspan;
            if (!_rowspan || !_colspan) {
              return null;
            }
            if (_rowspan > 1) {
              attrs2.rowspan = _rowspan;
            }
            if (_colspan > 1) {
              attrs2.colspan = _colspan;
            }
          }
          return h("td", {
            class: ["vxe-footer--column", column2.id, (_ref2 = {}, _defineProperty$b(_ref2, "col--".concat(footAlign), footAlign), _defineProperty$b(_ref2, "col--".concat(type3), type3), _defineProperty$b(_ref2, "col--last", $columnIndex === tableColumn3.length - 1), _defineProperty$b(_ref2, "fixed--hidden", fixedHiddenColumn), _defineProperty$b(_ref2, "col--ellipsis", hasEllipsis2), _defineProperty$b(_ref2, "col--current", currentColumn === column2), _ref2), _tools$d.UtilTools.getClass(footerClassName, params), _tools$d.UtilTools.getClass(footerCellClassName, params)],
            attrs: attrs2,
            style: footerCellStyle ? _xeUtils$c.default.isFunction(footerCellStyle) ? footerCellStyle(params) : footerCellStyle : null,
            on: tfOns,
            key: columnKey ? column2.id : $columnIndex
          }, [h("div", {
            class: ["vxe-cell", {
              "c--title": showTitle,
              "c--tooltip": showTooltip,
              "c--ellipsis": showEllipsis
            }]
          }, column2.renderFooter(h, params))]);
        }).concat(scrollbarWidth2 ? [h("td", {
          class: "vxe-footer--gutter col--gutter"
        })] : []));
      }))
    ])]);
  },
  methods: {
    scrollEvent: function scrollEvent2(evnt) {
      var $xetable = this.$parent, fixedType = this.fixedType;
      var $refs = $xetable.$refs, scrollXLoad = $xetable.scrollXLoad, triggerScrollXEvent2 = $xetable.triggerScrollXEvent, lastScrollLeft = $xetable.lastScrollLeft;
      var tableHeader = $refs.tableHeader, tableBody = $refs.tableBody, tableFooter = $refs.tableFooter, validTip = $refs.validTip;
      var headerElem = tableHeader ? tableHeader.$el : null;
      var footerElem = tableFooter ? tableFooter.$el : null;
      var bodyElem = tableBody.$el;
      var scrollLeft = footerElem ? footerElem.scrollLeft : 0;
      var isX = scrollLeft !== lastScrollLeft;
      $xetable.lastScrollLeft = scrollLeft;
      $xetable.lastScrollTime = Date.now();
      if (headerElem) {
        headerElem.scrollLeft = scrollLeft;
      }
      if (bodyElem) {
        bodyElem.scrollLeft = scrollLeft;
      }
      if (scrollXLoad && isX) {
        triggerScrollXEvent2(evnt);
      }
      if (isX && validTip && validTip.visible) {
        validTip.updatePlacement();
      }
      $xetable.emitEvent("scroll", {
        type: cellType,
        fixed: fixedType,
        scrollTop: bodyElem.scrollTop,
        scrollLeft,
        isX,
        isY: false
      }, evnt);
    }
  }
};
footer.default = _default$z;
Object.defineProperty(footer$1, "__esModule", {
  value: true
});
footer$1.default = footer$1.Footer = void 0;
var _footer = _interopRequireDefault$W(footer);
function _interopRequireDefault$W(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var Footer = Object.assign(_footer.default, {
  install: function install9(Vue2) {
    Vue2.component(_footer.default.name, _footer.default);
  }
});
footer$1.Footer = Footer;
var _default$y = Footer;
footer$1.default = _default$y;
var column$1 = {};
var column = {};
Object.defineProperty(column, "__esModule", {
  value: true
});
column.default = void 0;
var _cell = _interopRequireDefault$V(cell);
var _tools$c = tools;
function _interopRequireDefault$V(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var props$3 = {
  colId: [String, Number],
  type: String,
  field: String,
  title: String,
  width: [Number, String],
  minWidth: [Number, String],
  resizable: {
    type: Boolean,
    default: null
  },
  fixed: String,
  align: String,
  headerAlign: String,
  footerAlign: String,
  showOverflow: {
    type: [Boolean, String],
    default: null
  },
  showHeaderOverflow: {
    type: [Boolean, String],
    default: null
  },
  showFooterOverflow: {
    type: [Boolean, String],
    default: null
  },
  className: [String, Function],
  headerClassName: [String, Function],
  footerClassName: [String, Function],
  formatter: [Function, Array, String],
  sortable: Boolean,
  remoteSort: {
    type: Boolean,
    default: null
  },
  sortBy: [String, Function],
  sortType: String,
  sortMethod: Function,
  filters: {
    type: Array,
    default: null
  },
  filterMultiple: {
    type: Boolean,
    default: true
  },
  filterMethod: Function,
  filterResetMethod: Function,
  filterRecoverMethod: Function,
  filterRender: Object,
  treeNode: Boolean,
  visible: {
    type: Boolean,
    default: null
  },
  exportMethod: Function,
  footerExportMethod: Function,
  titleHelp: Object,
  cellType: String,
  cellRender: Object,
  editRender: Object,
  contentRender: Object,
  params: Object
};
var watch$2 = {};
Object.keys(props$3).forEach(function(name) {
  watch$2[name] = function(value6) {
    this.columnConfig.update(name, value6);
  };
});
var _default$x = {
  name: "VxeColumn",
  props: props$3,
  provide: function provide3() {
    return {
      $xecolumn: this,
      $xegrid: null
    };
  },
  inject: {
    $xetable: {
      default: null
    },
    $xecolumn: {
      default: null
    }
  },
  watch: watch$2,
  created: function created7() {
    this.columnConfig = this.createColumn(this.$xetable, this);
  },
  mounted: function mounted9() {
    _tools$c.UtilTools.assemColumn(this);
  },
  destroyed: function destroyed8() {
    _tools$c.UtilTools.destroyColumn(this);
  },
  render: function render15(h) {
    return h("div", this.$slots.default);
  },
  methods: _cell.default
};
column.default = _default$x;
Object.defineProperty(column$1, "__esModule", {
  value: true
});
column$1.default = column$1.Column = void 0;
var _column$1 = _interopRequireDefault$U(column);
function _interopRequireDefault$U(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var Column = Object.assign(_column$1.default, {
  install: function install10(Vue2) {
    Vue2.component(_column$1.default.name, _column$1.default);
    Vue2.component("VxeTableColumn", _column$1.default);
  }
});
column$1.Column = Column;
var _default$w = Column;
column$1.default = _default$w;
var colgroup = {};
var group$2 = {};
Object.defineProperty(group$2, "__esModule", {
  value: true
});
group$2.default = void 0;
var _column = _interopRequireDefault$T(column);
function _interopRequireDefault$T(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var _default$v = {
  name: "VxeColgroup",
  extends: _column.default,
  provide: function provide4() {
    return {
      xecolgroup: this,
      $xegrid: null
    };
  }
};
group$2.default = _default$v;
Object.defineProperty(colgroup, "__esModule", {
  value: true
});
colgroup.default = colgroup.Colgroup = void 0;
var _group$2 = _interopRequireDefault$S(group$2);
function _interopRequireDefault$S(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var Colgroup = Object.assign(_group$2.default, {
  install: function install11(Vue2) {
    Vue2.component(_group$2.default.name, _group$2.default);
    Vue2.component("VxeTableColgroup", _group$2.default);
  }
});
colgroup.Colgroup = Colgroup;
var _default$u = Colgroup;
colgroup.default = _default$u;
var grid$1 = {};
var grid = {};
Object.defineProperty(grid, "__esModule", {
  value: true
});
grid.default = void 0;
var _table = _interopRequireDefault$R(table$1);
var _xeUtils$b = _interopRequireDefault$R(xeUtils);
var _conf$e = _interopRequireDefault$R(conf);
var _size$9 = _interopRequireDefault$R(size);
var _vXETable$7 = _interopRequireDefault$R(vXETable);
var _tools$b = tools;
var _dom$7 = dom$1;
function _interopRequireDefault$R(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
function _toConsumableArray$1(arr) {
  return _arrayWithoutHoles$1(arr) || _iterableToArray$1(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread$1();
}
function _nonIterableSpread$1() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _iterableToArray$1(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _arrayWithoutHoles$1(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray(arr);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function ownKeys$2(object3, enumerableOnly) {
  var keys3 = Object.keys(object3);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object3);
    if (enumerableOnly) {
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object3, sym).enumerable;
      });
    }
    keys3.push.apply(keys3, symbols);
  }
  return keys3;
}
function _objectSpread$2(target2) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys$2(Object(source), true).forEach(function(key) {
        _defineProperty$a(target2, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target2, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys$2(Object(source)).forEach(function(key) {
        Object.defineProperty(target2, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target2;
}
function _defineProperty$a(obj, key, value6) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value: value6, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value6;
  }
  return obj;
}
var methods = {};
var propKeys = Object.keys(_table.default.props);
function renderDefaultForm(h, _vm) {
  var $scopedSlots = _vm.$scopedSlots, proxyConfig2 = _vm.proxyConfig, proxyOpts2 = _vm.proxyOpts, formData = _vm.formData, formConfig = _vm.formConfig, formOpts2 = _vm.formOpts;
  if ((0, _tools$b.isEnableConf)(formConfig) && formOpts2.items && formOpts2.items.length) {
    var formSlots = {};
    if (!formOpts2.inited) {
      formOpts2.inited = true;
      var beforeItem = proxyOpts2.beforeItem;
      if (proxyOpts2 && beforeItem) {
        formOpts2.items.forEach(function(item) {
          beforeItem.call(_vm, {
            $grid: _vm,
            item
          });
        });
      }
    }
    formOpts2.items.forEach(function(item) {
      _xeUtils$b.default.each(item.slots, function(func) {
        if (!_xeUtils$b.default.isFunction(func)) {
          if ($scopedSlots[func]) {
            formSlots[func] = $scopedSlots[func];
          }
        }
      });
    });
    return [h("vxe-form", {
      props: Object.assign({}, formOpts2, {
        data: proxyConfig2 && proxyOpts2.form ? formData : formOpts2.data
      }),
      on: {
        submit: _vm.submitEvent,
        reset: _vm.resetEvent,
        collapse: _vm.collapseEvent,
        "submit-invalid": _vm.submitInvalidEvent
      },
      scopedSlots: formSlots
    })];
  }
  return [];
}
function getFuncSlot(_vm, optSlots, slotKey) {
  var $scopedSlots = _vm.$scopedSlots;
  var funcSlot = optSlots[slotKey];
  if (funcSlot) {
    if (_xeUtils$b.default.isString(funcSlot)) {
      if ($scopedSlots[funcSlot]) {
        return $scopedSlots[funcSlot];
      }
    } else {
      return funcSlot;
    }
  }
  return null;
}
function getToolbarSlots(_vm) {
  _vm.$scopedSlots;
  var toolbarOpts2 = _vm.toolbarOpts;
  var toolbarOptSlots = toolbarOpts2.slots;
  var buttonsSlot;
  var toolsSlot;
  var slots = {};
  if (toolbarOptSlots) {
    buttonsSlot = getFuncSlot(_vm, toolbarOptSlots, "buttons");
    toolsSlot = getFuncSlot(_vm, toolbarOptSlots, "tools");
    if (buttonsSlot) {
      slots.buttons = buttonsSlot;
    }
    if (toolsSlot) {
      slots.tools = toolsSlot;
    }
  }
  return slots;
}
function getPagerSlots(_vm) {
  var pagerOpts2 = _vm.pagerOpts;
  var pagerOptSlots = pagerOpts2.slots;
  var slots = {};
  var leftSlot;
  var rightSlot;
  if (pagerOptSlots) {
    leftSlot = getFuncSlot(_vm, pagerOptSlots, "left");
    rightSlot = getFuncSlot(_vm, pagerOptSlots, "right");
    if (leftSlot) {
      slots.left = leftSlot;
    }
    if (rightSlot) {
      slots.right = rightSlot;
    }
  }
  return slots;
}
function getTableOns(_vm) {
  var $listeners = _vm.$listeners, proxyConfig2 = _vm.proxyConfig, proxyOpts2 = _vm.proxyOpts;
  var ons = {};
  _xeUtils$b.default.each($listeners, function(cb, type3) {
    ons[type3] = function() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _vm.$emit.apply(_vm, [type3].concat(args));
    };
  });
  if (proxyConfig2) {
    if (proxyOpts2.sort) {
      ons["sort-change"] = _vm.sortChangeEvent;
    }
    if (proxyOpts2.filter) {
      ons["filter-change"] = _vm.filterChangeEvent;
    }
  }
  return ons;
}
Object.keys(_table.default.methods).forEach(function(name) {
  methods[name] = function() {
    var _this$$refs$xTable;
    return this.$refs.xTable && (_this$$refs$xTable = this.$refs.xTable)[name].apply(_this$$refs$xTable, arguments);
  };
});
var _default2$c = {
  name: "VxeGrid",
  mixins: [_size$9.default],
  props: _objectSpread$2(_objectSpread$2({}, _table.default.props), {}, {
    columns: Array,
    pagerConfig: [Boolean, Object],
    proxyConfig: Object,
    toolbar: [Boolean, Object],
    toolbarConfig: [Boolean, Object],
    formConfig: [Boolean, Object],
    zoomConfig: Object,
    size: {
      type: String,
      default: function _default71() {
        return _conf$e.default.grid.size || _conf$e.default.size;
      }
    }
  }),
  provide: function provide5() {
    return {
      $xegrid: this
    };
  },
  data: function data10() {
    return {
      tableLoading: false,
      isZMax: false,
      tableData: [],
      pendingRecords: [],
      filterData: [],
      formData: {},
      sortData: [],
      tZindex: 0,
      tablePage: {
        total: 0,
        pageSize: 10,
        currentPage: 1
      }
    };
  },
  computed: {
    isMsg: function isMsg2() {
      return this.proxyOpts.message !== false;
    },
    proxyOpts: function proxyOpts() {
      return Object.assign({}, _conf$e.default.grid.proxyConfig, this.proxyConfig);
    },
    pagerOpts: function pagerOpts() {
      return Object.assign({}, _conf$e.default.grid.pagerConfig, this.pagerConfig);
    },
    formOpts: function formOpts() {
      return Object.assign({}, _conf$e.default.grid.formConfig, this.formConfig);
    },
    toolbarOpts: function toolbarOpts() {
      return Object.assign({}, _conf$e.default.grid.toolbarConfig, this.toolbarConfig || this.toolbar);
    },
    zoomOpts: function zoomOpts() {
      return Object.assign({}, _conf$e.default.grid.zoomConfig, this.zoomConfig);
    },
    renderStyle: function renderStyle() {
      return this.isZMax ? {
        zIndex: this.tZindex
      } : null;
    },
    tableExtendProps: function tableExtendProps() {
      var _this = this;
      var rest = {};
      propKeys.forEach(function(key) {
        rest[key] = _this[key];
      });
      return rest;
    },
    tableProps: function tableProps() {
      var isZMax = this.isZMax, seqConfig = this.seqConfig, pagerConfig2 = this.pagerConfig, loading = this.loading, editConfig = this.editConfig, proxyConfig2 = this.proxyConfig, proxyOpts2 = this.proxyOpts, tableExtendProps2 = this.tableExtendProps, tableLoading = this.tableLoading, tablePage = this.tablePage, tableData = this.tableData;
      var tableProps2 = Object.assign({}, tableExtendProps2);
      if (isZMax) {
        if (tableExtendProps2.maxHeight) {
          tableProps2.maxHeight = "auto";
        } else {
          tableProps2.height = "auto";
        }
      }
      if (proxyConfig2) {
        tableProps2.loading = loading || tableLoading;
        tableProps2.data = tableData;
        tableProps2.rowClassName = this.handleRowClassName;
        if (proxyOpts2.seq && (0, _tools$b.isEnableConf)(pagerConfig2)) {
          tableProps2.seqConfig = Object.assign({}, seqConfig, {
            startIndex: (tablePage.currentPage - 1) * tablePage.pageSize
          });
        }
      }
      if (editConfig) {
        tableProps2.editConfig = Object.assign({}, editConfig, {
          activeMethod: this.handleActiveMethod
        });
      }
      return tableProps2;
    }
  },
  watch: {
    columns: function columns(value6) {
      var _this2 = this;
      this.$nextTick(function() {
        return _this2.loadColumn(value6);
      });
    },
    toolbar: function toolbar(value6) {
      if (value6) {
        this.initToolbar();
      }
    },
    toolbarConfig: function toolbarConfig(value6) {
      if (value6) {
        this.initToolbar();
      }
    },
    proxyConfig: function proxyConfig() {
      this.initProxy();
    },
    pagerConfig: function pagerConfig() {
      this.initPages();
    }
  },
  created: function created8() {
    var data25 = this.data, formOpts2 = this.formOpts, proxyOpts2 = this.proxyOpts, proxyConfig2 = this.proxyConfig;
    if (proxyConfig2 && (data25 || proxyOpts2.form && formOpts2.data)) {
      _tools$b.UtilTools.error("vxe.error.errConflicts", ["grid.data", "grid.proxy-config"]);
    }
    _tools$b.GlobalEvent.on(this, "keydown", this.handleGlobalKeydownEvent);
  },
  mounted: function mounted10() {
    if (this.columns && this.columns.length) {
      this.loadColumn(this.columns);
    }
    this.initToolbar();
    this.initPages();
    this.initProxy();
  },
  destroyed: function destroyed9() {
    _tools$b.GlobalEvent.off(this, "keydown");
  },
  render: function render16(h) {
    var _ref;
    var $scopedSlots = this.$scopedSlots, vSize8 = this.vSize, isZMax = this.isZMax;
    var hasForm = !!($scopedSlots.form || (0, _tools$b.isEnableConf)(this.formConfig));
    var hasToolbar = !!($scopedSlots.toolbar || (0, _tools$b.isEnableConf)(this.toolbarConfig) || this.toolbar);
    var hasPager = !!($scopedSlots.pager || (0, _tools$b.isEnableConf)(this.pagerConfig));
    return h("div", {
      class: ["vxe-grid", (_ref = {}, _defineProperty$a(_ref, "size--".concat(vSize8), vSize8), _defineProperty$a(_ref, "is--animat", !!this.animat), _defineProperty$a(_ref, "is--round", this.round), _defineProperty$a(_ref, "is--maximize", isZMax), _defineProperty$a(_ref, "is--loading", this.loading || this.tableLoading), _ref)],
      style: this.renderStyle
    }, [
      hasForm ? h("div", {
        ref: "formWrapper",
        class: "vxe-grid--form-wrapper"
      }, $scopedSlots.form ? $scopedSlots.form.call(this, {
        $grid: this
      }, h) : renderDefaultForm(h, this)) : null,
      hasToolbar ? h("div", {
        ref: "toolbarWrapper",
        class: "vxe-grid--toolbar-wrapper"
      }, $scopedSlots.toolbar ? $scopedSlots.toolbar.call(this, {
        $grid: this
      }, h) : [h("vxe-toolbar", {
        props: this.toolbarOpts,
        ref: "xToolbar",
        scopedSlots: getToolbarSlots(this)
      })]) : null,
      $scopedSlots.top ? h("div", {
        ref: "topWrapper",
        class: "vxe-grid--top-wrapper"
      }, $scopedSlots.top.call(this, {
        $grid: this
      }, h)) : null,
      h("vxe-table", {
        props: this.tableProps,
        on: getTableOns(this),
        scopedSlots: $scopedSlots,
        ref: "xTable"
      }),
      $scopedSlots.bottom ? h("div", {
        ref: "bottomWrapper",
        class: "vxe-grid--bottom-wrapper"
      }, $scopedSlots.bottom.call(this, {
        $grid: this
      }, h)) : null,
      hasPager ? h("div", {
        ref: "pagerWrapper",
        class: "vxe-grid--pager-wrapper"
      }, $scopedSlots.pager ? $scopedSlots.pager.call(this, {
        $grid: this
      }, h) : [h("vxe-pager", {
        props: _objectSpread$2(_objectSpread$2({}, this.pagerOpts), this.proxyConfig ? this.tablePage : {}),
        on: {
          "page-change": this.pageChangeEvent
        },
        scopedSlots: getPagerSlots(this)
      })]) : null
    ]);
  },
  methods: _objectSpread$2(_objectSpread$2({}, methods), {}, {
    callSlot: function callSlot3(slotFunc, params, h, vNodes) {
      if (slotFunc) {
        var $scopedSlots = this.$scopedSlots;
        if (_xeUtils$b.default.isString(slotFunc)) {
          slotFunc = $scopedSlots[slotFunc] || null;
        }
        if (_xeUtils$b.default.isFunction(slotFunc)) {
          return slotFunc.call(this, params, h, vNodes);
        }
      }
      return [];
    },
    getParentHeight: function getParentHeight2() {
      var $el = this.$el, isZMax = this.isZMax;
      return (isZMax ? _tools$b.DomTools.getDomNode().visibleHeight : _xeUtils$b.default.toNumber(getComputedStyle($el.parentNode).height)) - this.getExcludeHeight();
    },
    getExcludeHeight: function getExcludeHeight2() {
      var $refs = this.$refs, $el = this.$el, isZMax = this.isZMax, height3 = this.height;
      var formWrapper = $refs.formWrapper, toolbarWrapper = $refs.toolbarWrapper, topWrapper = $refs.topWrapper, bottomWrapper = $refs.bottomWrapper, pagerWrapper = $refs.pagerWrapper;
      var parentPaddingSize = isZMax || height3 !== "auto" ? 0 : (0, _dom$7.getPaddingTopBottomSize)($el.parentNode);
      return parentPaddingSize + (0, _dom$7.getPaddingTopBottomSize)($el) + (0, _dom$7.getOffsetHeight)(formWrapper) + (0, _dom$7.getOffsetHeight)(toolbarWrapper) + (0, _dom$7.getOffsetHeight)(topWrapper) + (0, _dom$7.getOffsetHeight)(bottomWrapper) + (0, _dom$7.getOffsetHeight)(pagerWrapper);
    },
    handleRowClassName: function handleRowClassName(params) {
      var rowClassName = this.rowClassName;
      var clss = [];
      if (this.pendingRecords.some(function(item) {
        return item === params.row;
      })) {
        clss.push("row--pending");
      }
      clss.push(rowClassName ? _xeUtils$b.default.isFunction(rowClassName) ? rowClassName(params) : rowClassName : "");
      return clss;
    },
    handleActiveMethod: function handleActiveMethod(params) {
      var editConfig = this.editConfig;
      var activeMethod = editConfig ? editConfig.activeMethod : null;
      return this.pendingRecords.indexOf(params.row) === -1 && (!activeMethod || activeMethod(_objectSpread$2(_objectSpread$2({}, params), {}, {
        $grid: this
      })));
    },
    initToolbar: function initToolbar() {
      var _this3 = this;
      this.$nextTick(function() {
        var _this3$$refs = _this3.$refs, xTable = _this3$$refs.xTable, xToolbar = _this3$$refs.xToolbar;
        if (xTable && xToolbar) {
          xTable.connect(xToolbar);
        }
      });
    },
    initPages: function initPages() {
      var tablePage = this.tablePage, pagerConfig2 = this.pagerConfig, pagerOpts2 = this.pagerOpts;
      var currentPage2 = pagerOpts2.currentPage, pageSize = pagerOpts2.pageSize;
      if (pagerConfig2) {
        if (currentPage2) {
          tablePage.currentPage = currentPage2;
        }
        if (pageSize) {
          tablePage.pageSize = pageSize;
        }
      }
    },
    initProxy: function initProxy() {
      var _this4 = this;
      var proxyInited = this.proxyInited, proxyConfig2 = this.proxyConfig, proxyOpts2 = this.proxyOpts, formConfig = this.formConfig, formOpts2 = this.formOpts;
      if (proxyConfig2) {
        if ((0, _tools$b.isEnableConf)(formConfig) && proxyOpts2.form && formOpts2.items) {
          var formData = {};
          formOpts2.items.forEach(function(item) {
            var field = item.field, itemRender = item.itemRender;
            if (field) {
              var itemValue = null;
              if (itemRender) {
                var defaultValue = itemRender.defaultValue;
                if (_xeUtils$b.default.isFunction(defaultValue)) {
                  itemValue = defaultValue({
                    item
                  });
                } else if (!_xeUtils$b.default.isUndefined(defaultValue)) {
                  itemValue = defaultValue;
                }
              }
              formData[field] = itemValue;
            }
          });
          this.formData = formData;
        }
        if (!proxyInited && proxyOpts2.autoLoad !== false) {
          this.proxyInited = true;
          this.$nextTick(function() {
            return _this4.commitProxy("_init");
          });
        }
      }
    },
    handleGlobalKeydownEvent: function handleGlobalKeydownEvent5(evnt) {
      var isEsc = evnt.keyCode === 27;
      if (isEsc && this.isZMax && this.zoomOpts.escRestore !== false) {
        this.triggerZoomEvent(evnt);
      }
    },
    commitProxy: function commitProxy(proxyTarget) {
      var _this5 = this;
      var $refs = this.$refs, toolbar3 = this.toolbar, toolbarConfig2 = this.toolbarConfig, toolbarOpts2 = this.toolbarOpts, proxyOpts2 = this.proxyOpts, tablePage = this.tablePage, pagerConfig2 = this.pagerConfig, editRules = this.editRules, formData = this.formData, isMsg3 = this.isMsg;
      var beforeQuery = proxyOpts2.beforeQuery, afterQuery = proxyOpts2.afterQuery, beforeDelete = proxyOpts2.beforeDelete, afterDelete = proxyOpts2.afterDelete, beforeSave = proxyOpts2.beforeSave, afterSave = proxyOpts2.afterSave, _proxyOpts$ajax = proxyOpts2.ajax, ajax = _proxyOpts$ajax === void 0 ? {} : _proxyOpts$ajax, _proxyOpts$props = proxyOpts2.props, proxyProps = _proxyOpts$props === void 0 ? {} : _proxyOpts$props;
      var $xetable = $refs.xTable;
      var button2;
      var code;
      if (_xeUtils$b.default.isString(proxyTarget)) {
        var matchObj = toolbarConfig2 || toolbar3 ? _xeUtils$b.default.findTree(toolbarOpts2.buttons, function(item) {
          return item.code === proxyTarget;
        }, {
          children: "dropdowns"
        }) : null;
        code = proxyTarget;
        button2 = matchObj ? matchObj.item : null;
      } else {
        button2 = proxyTarget;
        code = button2.code;
      }
      var btnParams = button2 ? button2.params : null;
      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }
      switch (code) {
        case "insert":
          this.insert();
          break;
        case "insert_actived":
          this.insert().then(function(_ref2) {
            var row = _ref2.row;
            return _this5.setActiveRow(row);
          });
          break;
        case "mark_cancel":
          this.triggerPendingEvent(code);
          break;
        case "remove":
          return this.handleDeleteRow(code, "vxe.grid.removeSelectRecord", function() {
            return _this5.removeCheckboxRow();
          });
        case "import":
          this.importData(btnParams);
          break;
        case "open_import":
          this.openImport(btnParams);
          break;
        case "export":
          this.exportData(btnParams);
          break;
        case "open_export":
          this.openExport(btnParams);
          break;
        case "reset_custom":
          this.resetColumn(true);
          break;
        case "_init":
        case "reload":
        case "query": {
          var ajaxMethods = ajax.query;
          if (ajaxMethods) {
            var isInited = code === "_init";
            var isReload = code === "reload";
            var sortList = [];
            var filterList = [];
            var pageParams = {};
            if (pagerConfig2) {
              if (isInited || isReload) {
                tablePage.currentPage = 1;
              }
              if ((0, _tools$b.isEnableConf)(pagerConfig2)) {
                pageParams = _objectSpread$2({}, tablePage);
              }
            }
            if (isInited) {
              var sortOpts2 = $xetable.sortOpts;
              var defaultSort = sortOpts2.defaultSort;
              if (defaultSort) {
                if (!_xeUtils$b.default.isArray(defaultSort)) {
                  defaultSort = [defaultSort];
                }
                sortList = defaultSort.map(function(item) {
                  return {
                    field: item.field,
                    property: item.field,
                    order: item.order
                  };
                });
              }
              filterList = $xetable.getCheckedFilters();
            } else {
              if (isReload) {
                this.pendingRecords = [];
                $xetable.clearAll();
              } else {
                sortList = $xetable.getSortColumns();
                filterList = $xetable.getCheckedFilters();
              }
            }
            var params = {
              code,
              button: button2,
              $grid: this,
              page: pageParams,
              sort: sortList.length ? sortList[0] : {},
              sorts: sortList,
              filters: filterList,
              form: formData,
              options: ajaxMethods
            };
            this.sortData = sortList;
            this.filterData = filterList;
            this.tableLoading = true;
            var applyArgs = [params].concat(args);
            return Promise.resolve((beforeQuery || ajaxMethods).apply(void 0, _toConsumableArray$1(applyArgs))).catch(function(e) {
              return e;
            }).then(function(rest) {
              _this5.tableLoading = false;
              if (rest) {
                if ((0, _tools$b.isEnableConf)(pagerConfig2)) {
                  var total = _xeUtils$b.default.get(rest, proxyProps.total || "page.total") || 0;
                  tablePage.total = total;
                  _this5.tableData = _xeUtils$b.default.get(rest, proxyProps.result || "result") || [];
                  var pageCount2 = Math.max(Math.ceil(total / tablePage.pageSize), 1);
                  if (tablePage.currentPage > pageCount2) {
                    tablePage.currentPage = pageCount2;
                  }
                } else {
                  _this5.tableData = (proxyProps.list ? _xeUtils$b.default.get(rest, proxyProps.list) : rest) || [];
                }
              } else {
                _this5.tableData = [];
              }
              if (afterQuery) {
                afterQuery.apply(void 0, _toConsumableArray$1(applyArgs));
              }
            });
          }
          break;
        }
        case "delete": {
          var _ajaxMethods = ajax.delete;
          if (_ajaxMethods) {
            var selectRecords = $xetable.getCheckboxRecords();
            var removeRecords = selectRecords.filter(function(row) {
              return !$xetable.isInsertByRow(row);
            });
            var body2 = {
              removeRecords
            };
            var _applyArgs = [{
              $grid: this,
              code,
              button: button2,
              body: body2,
              options: _ajaxMethods
            }].concat(args);
            if (selectRecords.length) {
              return this.handleDeleteRow(code, "vxe.grid.deleteSelectRecord", function() {
                if (!removeRecords.length) {
                  return $xetable.remove(selectRecords);
                }
                _this5.tableLoading = true;
                return Promise.resolve((beforeDelete || _ajaxMethods).apply(void 0, _toConsumableArray$1(_applyArgs))).then(function(rest) {
                  _this5.tableLoading = false;
                  _this5.pendingRecords = _this5.pendingRecords.filter(function(row) {
                    return removeRecords.indexOf(row) === -1;
                  });
                  if (isMsg3) {
                    _vXETable$7.default.modal.message({
                      content: _this5.getRespMsg(rest, "vxe.grid.delSuccess"),
                      status: "success"
                    });
                  }
                  if (afterDelete) {
                    afterDelete.apply(void 0, _toConsumableArray$1(_applyArgs));
                  } else {
                    _this5.commitProxy("query");
                  }
                }).catch(function(rest) {
                  _this5.tableLoading = false;
                  if (isMsg3) {
                    _vXETable$7.default.modal.message({
                      id: code,
                      content: _this5.getRespMsg(rest, "vxe.grid.operError"),
                      status: "error"
                    });
                  }
                });
              });
            } else {
              if (isMsg3) {
                _vXETable$7.default.modal.message({
                  id: code,
                  content: _conf$e.default.i18n("vxe.grid.selectOneRecord"),
                  status: "warning"
                });
              }
            }
          }
          break;
        }
        case "save": {
          var _ajaxMethods2 = ajax.save;
          if (_ajaxMethods2) {
            var _body2 = Object.assign({
              pendingRecords: this.pendingRecords
            }, this.getRecordset());
            var insertRecords = _body2.insertRecords, _removeRecords = _body2.removeRecords, updateRecords = _body2.updateRecords, pendingRecords = _body2.pendingRecords;
            var _applyArgs2 = [{
              $grid: this,
              code,
              button: button2,
              body: _body2,
              options: _ajaxMethods2
            }].concat(args);
            if (insertRecords.length) {
              _body2.pendingRecords = pendingRecords.filter(function(row) {
                return insertRecords.indexOf(row) === -1;
              });
            }
            if (pendingRecords.length) {
              _body2.insertRecords = insertRecords.filter(function(row) {
                return pendingRecords.indexOf(row) === -1;
              });
            }
            var restPromise = Promise.resolve();
            if (editRules) {
              restPromise = this.validate(_body2.insertRecords.concat(updateRecords));
            }
            return restPromise.then(function(errMap) {
              if (errMap) {
                return;
              }
              if (_body2.insertRecords.length || _removeRecords.length || updateRecords.length || _body2.pendingRecords.length) {
                _this5.tableLoading = true;
                return Promise.resolve((beforeSave || _ajaxMethods2).apply(void 0, _toConsumableArray$1(_applyArgs2))).then(function(rest) {
                  _this5.tableLoading = false;
                  _this5.pendingRecords = [];
                  if (isMsg3) {
                    _vXETable$7.default.modal.message({
                      content: _this5.getRespMsg(rest, "vxe.grid.saveSuccess"),
                      status: "success"
                    });
                  }
                  if (afterSave) {
                    afterSave.apply(void 0, _toConsumableArray$1(_applyArgs2));
                  } else {
                    _this5.commitProxy("query");
                  }
                }).catch(function(rest) {
                  _this5.tableLoading = false;
                  if (isMsg3) {
                    _vXETable$7.default.modal.message({
                      id: code,
                      content: _this5.getRespMsg(rest, "vxe.grid.operError"),
                      status: "error"
                    });
                  }
                });
              } else {
                if (isMsg3) {
                  _vXETable$7.default.modal.message({
                    id: code,
                    content: _conf$e.default.i18n("vxe.grid.dataUnchanged"),
                    status: "info"
                  });
                }
              }
            });
          }
          break;
        }
        default: {
          var btnMethod = _vXETable$7.default.commands.get(code);
          if (btnMethod) {
            btnMethod.apply(void 0, [{
              code,
              button: button2,
              $grid: this,
              $table: $xetable
            }].concat(args));
          }
        }
      }
      return this.$nextTick();
    },
    getRespMsg: function getRespMsg(rest, defaultMsg) {
      var _this$proxyOpts$props = this.proxyOpts.props, proxyProps = _this$proxyOpts$props === void 0 ? {} : _this$proxyOpts$props;
      var msg;
      if (rest && proxyProps.message) {
        msg = _xeUtils$b.default.get(rest, proxyProps.message);
      }
      return msg || _conf$e.default.i18n(defaultMsg);
    },
    handleDeleteRow: function handleDeleteRow(code, alertKey, callback) {
      var selectRecords = this.getCheckboxRecords();
      if (this.isMsg) {
        if (selectRecords.length) {
          return _vXETable$7.default.modal.confirm({
            id: "cfm_".concat(code),
            content: _conf$e.default.i18n(alertKey),
            escClosable: true
          }).then(function(type3) {
            if (type3 === "confirm") {
              callback();
            }
          });
        } else {
          _vXETable$7.default.modal.message({
            id: "msg_".concat(code),
            content: _conf$e.default.i18n("vxe.grid.selectOneRecord"),
            status: "warning"
          });
        }
      } else {
        if (selectRecords.length) {
          callback();
        }
      }
      return Promise.resolve();
    },
    getFormItems: function getFormItems(itemIndex) {
      var formConfig = this.formConfig, formOpts2 = this.formOpts;
      var itemList = [];
      _xeUtils$b.default.eachTree((0, _tools$b.isEnableConf)(formConfig) && formOpts2.items ? formOpts2.items : [], function(item) {
        itemList.push(item);
      }, {
        children: "children"
      });
      return _xeUtils$b.default.isUndefined(itemIndex) ? itemList : itemList[itemIndex];
    },
    getPendingRecords: function getPendingRecords() {
      return this.pendingRecords;
    },
    triggerToolbarBtnEvent: function triggerToolbarBtnEvent(button2, evnt) {
      this.commitProxy(button2, evnt);
      this.$emit("toolbar-button-click", {
        code: button2.code,
        button: button2,
        $grid: this,
        $event: evnt
      });
    },
    triggerToolbarTolEvent: function triggerToolbarTolEvent(tool, evnt) {
      this.commitProxy(tool, evnt);
      this.$emit("toolbar-tool-click", {
        code: tool.code,
        tool,
        $grid: this,
        $event: evnt
      });
    },
    triggerPendingEvent: function triggerPendingEvent(code) {
      var pendingRecords = this.pendingRecords, isMsg3 = this.isMsg;
      var selectRecords = this.getCheckboxRecords();
      if (selectRecords.length) {
        var plus = [];
        var minus = [];
        selectRecords.forEach(function(data25) {
          if (pendingRecords.some(function(item) {
            return data25 === item;
          })) {
            minus.push(data25);
          } else {
            plus.push(data25);
          }
        });
        if (minus.length) {
          this.pendingRecords = pendingRecords.filter(function(item) {
            return minus.indexOf(item) === -1;
          }).concat(plus);
        } else if (plus.length) {
          this.pendingRecords = pendingRecords.concat(plus);
        }
        this.clearCheckboxRow();
      } else {
        if (isMsg3) {
          _vXETable$7.default.modal.message({
            id: code,
            content: _conf$e.default.i18n("vxe.grid.selectOneRecord"),
            status: "warning"
          });
        }
      }
    },
    pageChangeEvent: function pageChangeEvent(params) {
      var proxyConfig2 = this.proxyConfig, tablePage = this.tablePage;
      var currentPage2 = params.currentPage, pageSize = params.pageSize;
      tablePage.currentPage = currentPage2;
      tablePage.pageSize = pageSize;
      this.$emit("page-change", Object.assign({
        $grid: this
      }, params));
      if (proxyConfig2) {
        this.commitProxy("query");
      }
    },
    sortChangeEvent: function sortChangeEvent(params) {
      var $table = params.$table, column2 = params.column, sortList = params.sortList;
      var isRemote = _xeUtils$b.default.isBoolean(column2.remoteSort) ? column2.remoteSort : $table.sortOpts.remote;
      if (isRemote) {
        this.sortData = sortList;
        if (this.proxyConfig) {
          this.tablePage.currentPage = 1;
          this.commitProxy("query");
        }
      }
      this.$emit("sort-change", Object.assign({
        $grid: this
      }, params));
    },
    filterChangeEvent: function filterChangeEvent(params) {
      var $table = params.$table, filterList = params.filterList;
      if ($table.filterOpts.remote) {
        this.filterData = filterList;
        if (this.proxyConfig) {
          this.tablePage.currentPage = 1;
          this.commitProxy("query");
        }
      }
      this.$emit("filter-change", Object.assign({
        $grid: this
      }, params));
    },
    submitEvent: function submitEvent(params) {
      var proxyConfig2 = this.proxyConfig;
      if (proxyConfig2) {
        this.commitProxy("reload");
      }
      this.$emit("form-submit", Object.assign({
        $grid: this
      }, params));
    },
    resetEvent: function resetEvent(params) {
      var proxyConfig2 = this.proxyConfig;
      if (proxyConfig2) {
        this.commitProxy("reload");
      }
      this.$emit("form-reset", Object.assign({
        $grid: this
      }, params));
    },
    submitInvalidEvent: function submitInvalidEvent(params) {
      this.$emit("form-submit-invalid", Object.assign({
        $grid: this
      }, params));
    },
    collapseEvent: function collapseEvent(params) {
      var _this6 = this;
      this.$nextTick(function() {
        return _this6.recalculate(true);
      });
      this.$emit("form-toggle-collapse", Object.assign({
        $grid: this
      }, params));
      this.$emit("form-collapse", Object.assign({
        $grid: this
      }, params));
    },
    triggerZoomEvent: function triggerZoomEvent(evnt) {
      this.zoom();
      this.$emit("zoom", {
        $grid: this,
        type: this.isZMax ? "max" : "revert",
        $event: evnt
      });
    },
    zoom: function zoom2() {
      return this[this.isZMax ? "revert" : "maximize"]();
    },
    isMaximized: function isMaximized2() {
      return this.isZMax;
    },
    maximize: function maximize2() {
      return this.handleZoom(true);
    },
    revert: function revert2() {
      return this.handleZoom();
    },
    handleZoom: function handleZoom(isMax) {
      var _this7 = this;
      var isZMax = this.isZMax;
      if (isMax ? !isZMax : isZMax) {
        this.isZMax = !isZMax;
        if (this.tZindex < _tools$b.UtilTools.getLastZIndex()) {
          this.tZindex = _tools$b.UtilTools.nextZIndex();
        }
      }
      return this.$nextTick().then(function() {
        return _this7.recalculate(true);
      }).then(function() {
        return _this7.isZMax;
      });
    },
    getProxyInfo: function getProxyInfo() {
      var sortData = this.sortData, proxyConfig2 = this.proxyConfig;
      if (proxyConfig2) {
        return {
          data: this.tableData,
          filter: this.filterData,
          form: this.formData,
          sort: sortData.length ? sortData[0] : {},
          sorts: sortData,
          pager: this.tablePage,
          pendingRecords: this.pendingRecords
        };
      }
      return null;
    }
  }, null)
};
grid.default = _default2$c;
Object.defineProperty(grid$1, "__esModule", {
  value: true
});
grid$1.default = grid$1.Grid = void 0;
var _grid = _interopRequireDefault$Q(grid);
var _vXETable$6 = _interopRequireDefault$Q(vXETable);
function _interopRequireDefault$Q(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var Grid = Object.assign(_grid.default, {
  install: function install12(Vue2) {
    _vXETable$6.default.Grid = _grid.default;
    _vXETable$6.default.GridComponent = _grid.default;
    Vue2.component(_grid.default.name, _grid.default);
  }
});
grid$1.Grid = Grid;
var _default$t = Grid;
grid$1.default = _default$t;
var toolbar$1 = {};
var toolbar2 = {};
Object.defineProperty(toolbar2, "__esModule", {
  value: true
});
toolbar2.default = void 0;
var _xeUtils$a = _interopRequireDefault$P(xeUtils);
var _conf$d = _interopRequireDefault$P(conf);
var _vXETable$5 = _interopRequireDefault$P(vXETable);
var _size$8 = _interopRequireDefault$P(size);
var _tools$a = tools;
function _interopRequireDefault$P(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
function _defineProperty$9(obj, key, value6) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value: value6, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value6;
  }
  return obj;
}
var renderDropdowns = function renderDropdowns2(h, _vm, item, isBtn) {
  var _e = _vm._e;
  var dropdowns = item.dropdowns;
  if (dropdowns) {
    return dropdowns.map(function(child) {
      return child.visible === false ? _e() : h("vxe-button", {
        on: {
          click: function click(evnt) {
            return isBtn ? _vm.btnEvent(evnt, child) : _vm.tolEvent(evnt, child);
          }
        },
        props: {
          disabled: child.disabled,
          loading: child.loading,
          type: child.type,
          icon: child.icon,
          circle: child.circle,
          round: child.round,
          status: child.status,
          content: child.name
        }
      });
    });
  }
  return [];
};
function renderBtns(h, _vm) {
  var _e = _vm._e, $scopedSlots = _vm.$scopedSlots, $xegrid = _vm.$xegrid, $xetable = _vm.$xetable, _vm$buttons = _vm.buttons, buttons = _vm$buttons === void 0 ? [] : _vm$buttons;
  var buttonsSlot = $scopedSlots.buttons;
  if (buttonsSlot) {
    return buttonsSlot.call(_vm, {
      $grid: $xegrid,
      $table: $xetable
    }, h);
  }
  return buttons.map(function(item) {
    var dropdowns = item.dropdowns, buttonRender = item.buttonRender;
    var compConf = buttonRender ? _vXETable$5.default.renderer.get(buttonRender.name) : null;
    if (item.visible === false) {
      return _e();
    }
    if (compConf) {
      var renderToolbarButton = compConf.renderToolbarButton || compConf.renderButton;
      if (renderToolbarButton) {
        return h("span", {
          class: "vxe-button--item"
        }, renderToolbarButton.call(_vm, h, buttonRender, {
          $grid: $xegrid,
          $table: $xetable,
          button: item
        }));
      }
    }
    return h("vxe-button", {
      on: {
        click: function click(evnt) {
          return _vm.btnEvent(evnt, item);
        }
      },
      props: {
        disabled: item.disabled,
        loading: item.loading,
        type: item.type,
        icon: item.icon,
        circle: item.circle,
        round: item.round,
        status: item.status,
        content: item.name,
        destroyOnClose: item.destroyOnClose,
        placement: item.placement,
        transfer: item.transfer
      },
      scopedSlots: dropdowns && dropdowns.length ? {
        dropdowns: function dropdowns2() {
          return renderDropdowns(h, _vm, item, true);
        }
      } : null
    });
  });
}
function renderRightTools(h, _vm) {
  var _e = _vm._e, $scopedSlots = _vm.$scopedSlots, $xegrid = _vm.$xegrid, $xetable = _vm.$xetable, _vm$tools = _vm.tools, tools2 = _vm$tools === void 0 ? [] : _vm$tools;
  var toolsSlot = $scopedSlots.tools;
  if (toolsSlot) {
    return toolsSlot.call(_vm, {
      $grid: $xegrid,
      $table: $xetable
    }, h);
  }
  return tools2.map(function(item) {
    var dropdowns = item.dropdowns, toolRender = item.toolRender;
    var compConf = toolRender ? _vXETable$5.default.renderer.get(toolRender.name) : null;
    if (item.visible === false) {
      return _e();
    }
    if (compConf) {
      var renderToolbarTool = compConf.renderToolbarTool;
      if (renderToolbarTool) {
        return h("span", {
          class: "vxe-tool--item"
        }, renderToolbarTool.call(_vm, h, toolRender, {
          $grid: $xegrid,
          $table: $xetable,
          tool: item
        }));
      }
    }
    return h("vxe-button", {
      on: {
        click: function click(evnt) {
          return _vm.tolEvent(evnt, item);
        }
      },
      props: {
        disabled: item.disabled,
        loading: item.loading,
        type: item.type,
        icon: item.icon,
        circle: item.circle,
        round: item.round,
        status: item.status,
        content: item.name,
        destroyOnClose: item.destroyOnClose,
        placement: item.placement,
        transfer: item.transfer
      },
      scopedSlots: dropdowns && dropdowns.length ? {
        dropdowns: function dropdowns2() {
          return renderDropdowns(h, _vm, item, false);
        }
      } : null
    });
  });
}
function renderCustoms(h, _vm) {
  var $xetable = _vm.$xetable, customStore = _vm.customStore, customOpts3 = _vm.customOpts, columns2 = _vm.columns;
  var cols = [];
  var customBtnOns = {};
  var customWrapperOns = {};
  var checkMethod = $xetable ? $xetable.customOpts.checkMethod : null;
  if (customOpts3.trigger === "manual")
    ;
  else if (customOpts3.trigger === "hover") {
    customBtnOns.mouseenter = _vm.handleMouseenterSettingEvent;
    customBtnOns.mouseleave = _vm.handleMouseleaveSettingEvent;
    customWrapperOns.mouseenter = _vm.handleWrapperMouseenterEvent;
    customWrapperOns.mouseleave = _vm.handleWrapperMouseleaveEvent;
  } else {
    customBtnOns.click = _vm.handleClickSettingEvent;
  }
  _xeUtils$a.default.eachTree(columns2, function(column2) {
    var colTitle = _tools$a.UtilTools.formatText(column2.getTitle(), 1);
    var colKey = column2.getKey();
    var isColGroup = column2.children && column2.children.length;
    var isDisabled4 = checkMethod ? !checkMethod({
      column: column2
    }) : false;
    if (isColGroup || colKey) {
      cols.push(h("li", {
        class: ["vxe-custom--option", "level--".concat(column2.level), {
          "is--group": isColGroup,
          "is--checked": column2.visible,
          "is--indeterminate": column2.halfVisible,
          "is--disabled": isDisabled4
        }],
        attrs: {
          title: colTitle
        },
        on: {
          click: function click() {
            if (!isDisabled4) {
              _vm.changeCustomOption(column2);
            }
          }
        }
      }, [h("span", {
        class: "vxe-checkbox--icon vxe-checkbox--checked-icon"
      }), h("span", {
        class: "vxe-checkbox--icon vxe-checkbox--unchecked-icon"
      }), h("span", {
        class: "vxe-checkbox--icon vxe-checkbox--indeterminate-icon"
      }), h("span", {
        class: "vxe-checkbox--label"
      }, colTitle)]));
    }
  });
  return h("div", {
    class: ["vxe-custom--wrapper", {
      "is--active": customStore.visible
    }],
    ref: "customWrapper"
  }, [h("vxe-button", {
    props: {
      circle: true,
      icon: customOpts3.icon || _conf$d.default.icon.TOOLBAR_TOOLS_CUSTOM
    },
    attrs: {
      title: _conf$d.default.i18n("vxe.toolbar.custom")
    },
    on: customBtnOns
  }), h("div", {
    class: "vxe-custom--option-wrapper"
  }, [h("ul", {
    class: "vxe-custom--header"
  }, [h("li", {
    class: ["vxe-custom--option", {
      "is--checked": customStore.isAll,
      "is--indeterminate": customStore.isIndeterminate
    }],
    attrs: {
      title: _conf$d.default.i18n("vxe.table.allTitle")
    },
    on: {
      click: _vm.allCustomEvent
    }
  }, [h("span", {
    class: "vxe-checkbox--icon vxe-checkbox--checked-icon"
  }), h("span", {
    class: "vxe-checkbox--icon vxe-checkbox--unchecked-icon"
  }), h("span", {
    class: "vxe-checkbox--icon vxe-checkbox--indeterminate-icon"
  }), h("span", {
    class: "vxe-checkbox--label"
  }, _conf$d.default.i18n("vxe.toolbar.customAll"))])]), h("ul", {
    class: "vxe-custom--body",
    on: customWrapperOns
  }, cols), customOpts3.isFooter === false ? null : h("div", {
    class: "vxe-custom--footer"
  }, [h("button", {
    class: "btn--confirm",
    on: {
      click: _vm.confirmCustomEvent
    }
  }, _conf$d.default.i18n("vxe.toolbar.customConfirm")), h("button", {
    class: "btn--reset",
    on: {
      click: _vm.resetCustomEvent
    }
  }, _conf$d.default.i18n("vxe.toolbar.customRestore"))])])]);
}
var _default2$b = {
  name: "VxeToolbar",
  mixins: [_size$8.default],
  props: {
    loading: Boolean,
    refresh: [Boolean, Object],
    import: [Boolean, Object],
    export: [Boolean, Object],
    print: [Boolean, Object],
    zoom: [Boolean, Object],
    custom: [Boolean, Object],
    buttons: {
      type: Array,
      default: function _default72() {
        return _conf$d.default.toolbar.buttons;
      }
    },
    tools: {
      type: Array,
      default: function _default73() {
        return _conf$d.default.toolbar.tools;
      }
    },
    perfect: {
      type: Boolean,
      default: function _default74() {
        return _conf$d.default.toolbar.perfect;
      }
    },
    size: {
      type: String,
      default: function _default75() {
        return _conf$d.default.toolbar.size || _conf$d.default.size;
      }
    },
    className: [String, Function]
  },
  inject: {
    $xegrid: {
      default: null
    }
  },
  data: function data11() {
    return {
      $xetable: null,
      isRefresh: false,
      columns: [],
      customStore: {
        isAll: false,
        isIndeterminate: false,
        visible: false
      }
    };
  },
  computed: {
    refreshOpts: function refreshOpts() {
      return Object.assign({}, _conf$d.default.toolbar.refresh, this.refresh);
    },
    importOpts: function importOpts2() {
      return Object.assign({}, _conf$d.default.toolbar.import, this.import);
    },
    exportOpts: function exportOpts2() {
      return Object.assign({}, _conf$d.default.toolbar.export, this.export);
    },
    printOpts: function printOpts2() {
      return Object.assign({}, _conf$d.default.toolbar.print, this.print);
    },
    zoomOpts: function zoomOpts2() {
      return Object.assign({}, _conf$d.default.toolbar.zoom, this.zoom);
    },
    customOpts: function customOpts2() {
      return Object.assign({}, _conf$d.default.toolbar.custom, this.custom);
    }
  },
  created: function created9() {
    var _this = this;
    var refresh = this.refresh, refreshOpts2 = this.refreshOpts;
    this.$nextTick(function() {
      var $xetable = _this.fintTable();
      if (refresh && !_this.$xegrid && !refreshOpts2.query) {
        _tools$a.UtilTools.warn("vxe.error.notFunc", ["query"]);
      }
      if ($xetable) {
        $xetable.connect(_this);
      }
    });
    _tools$a.GlobalEvent.on(this, "mousedown", this.handleGlobalMousedownEvent);
    _tools$a.GlobalEvent.on(this, "blur", this.handleGlobalBlurEvent);
  },
  destroyed: function destroyed10() {
    _tools$a.GlobalEvent.off(this, "mousedown");
    _tools$a.GlobalEvent.off(this, "blur");
  },
  render: function render17(h) {
    var _ref;
    var _e = this._e, $xegrid = this.$xegrid, perfect = this.perfect, loading = this.loading, importOpts3 = this.importOpts, exportOpts3 = this.exportOpts, refresh = this.refresh, refreshOpts2 = this.refreshOpts, zoom3 = this.zoom, zoomOpts3 = this.zoomOpts, custom = this.custom, vSize8 = this.vSize, className = this.className;
    return h("div", {
      class: ["vxe-toolbar", className ? _xeUtils$a.default.isFunction(className) ? className({
        $toolbar: this
      }) : className : "", (_ref = {}, _defineProperty$9(_ref, "size--".concat(vSize8), vSize8), _defineProperty$9(_ref, "is--perfect", perfect), _defineProperty$9(_ref, "is--loading", loading), _ref)]
    }, [h("div", {
      class: "vxe-buttons--wrapper"
    }, renderBtns(h, this)), h("div", {
      class: "vxe-tools--wrapper"
    }, renderRightTools(h, this)), h("div", {
      class: "vxe-tools--operate"
    }, [this.import ? h("vxe-button", {
      props: {
        circle: true,
        icon: importOpts3.icon || _conf$d.default.icon.TOOLBAR_TOOLS_IMPORT
      },
      attrs: {
        title: _conf$d.default.i18n("vxe.toolbar.import")
      },
      on: {
        click: this.importEvent
      }
    }) : _e(), this.export ? h("vxe-button", {
      props: {
        circle: true,
        icon: exportOpts3.icon || _conf$d.default.icon.TOOLBAR_TOOLS_EXPORT
      },
      attrs: {
        title: _conf$d.default.i18n("vxe.toolbar.export")
      },
      on: {
        click: this.exportEvent
      }
    }) : _e(), this.print ? h("vxe-button", {
      props: {
        circle: true,
        icon: this.printOpts.icon || _conf$d.default.icon.TOOLBAR_TOOLS_PRINT
      },
      attrs: {
        title: _conf$d.default.i18n("vxe.toolbar.print")
      },
      on: {
        click: this.printEvent
      }
    }) : _e(), refresh ? h("vxe-button", {
      props: {
        circle: true,
        icon: this.isRefresh ? refreshOpts2.iconLoading || _conf$d.default.icon.TOOLBAR_TOOLS_REFRESH_LOADING : refreshOpts2.icon || _conf$d.default.icon.TOOLBAR_TOOLS_REFRESH
      },
      attrs: {
        title: _conf$d.default.i18n("vxe.toolbar.refresh")
      },
      on: {
        click: this.refreshEvent
      }
    }) : _e(), zoom3 && $xegrid ? h("vxe-button", {
      props: {
        circle: true,
        icon: $xegrid.isMaximized() ? zoomOpts3.iconOut || _conf$d.default.icon.TOOLBAR_TOOLS_ZOOM_OUT : zoomOpts3.iconIn || _conf$d.default.icon.TOOLBAR_TOOLS_ZOOM_IN
      },
      attrs: {
        title: _conf$d.default.i18n("vxe.toolbar.zoom".concat($xegrid.isMaximized() ? "Out" : "In"))
      },
      on: {
        click: $xegrid.triggerZoomEvent
      }
    }) : _e(), custom ? renderCustoms(h, this) : _e()])]);
  },
  methods: {
    syncUpdate: function syncUpdate(params) {
      var collectColumn = params.collectColumn, $table = params.$table;
      this.$xetable = $table;
      this.columns = collectColumn;
    },
    fintTable: function fintTable() {
      var $children = this.$parent.$children;
      var selfIndex = $children.indexOf(this);
      return _xeUtils$a.default.find($children, function(comp, index2) {
        return comp && comp.loadData && index2 > selfIndex && comp.$vnode.componentOptions.tag === "vxe-table";
      });
    },
    checkTable: function checkTable() {
      if (this.$xetable) {
        return true;
      }
      _tools$a.UtilTools.error("vxe.error.barUnableLink");
    },
    showCustom: function showCustom() {
      this.customStore.visible = true;
      this.checkCustomStatus();
    },
    closeCustom: function closeCustom() {
      var custom = this.custom, customStore = this.customStore;
      if (customStore.visible) {
        customStore.visible = false;
        if (custom && !customStore.immediate) {
          this.handleTableCustom();
        }
      }
    },
    confirmCustomEvent: function confirmCustomEvent(evnt) {
      this.closeCustom();
      this.emitCustomEvent("confirm", evnt);
    },
    customOpenEvent: function customOpenEvent(evnt) {
      var customStore = this.customStore;
      if (this.checkTable()) {
        if (!customStore.visible) {
          this.showCustom();
          this.emitCustomEvent("open", evnt);
        }
      }
    },
    customColseEvent: function customColseEvent(evnt) {
      var customStore = this.customStore;
      if (customStore.visible) {
        this.closeCustom();
        this.emitCustomEvent("close", evnt);
      }
    },
    resetCustomEvent: function resetCustomEvent(evnt) {
      var $xetable = this.$xetable, columns2 = this.columns;
      var checkMethod = $xetable.customOpts.checkMethod;
      _xeUtils$a.default.eachTree(columns2, function(column2) {
        if (!checkMethod || checkMethod({
          column: column2
        })) {
          column2.visible = column2.defaultVisible;
          column2.halfVisible = false;
        }
        column2.resizeWidth = 0;
      });
      $xetable.saveCustomResizable(true);
      this.closeCustom();
      this.emitCustomEvent("reset", evnt);
    },
    emitCustomEvent: function emitCustomEvent(type3, evnt) {
      var $xetable = this.$xetable, $xegrid = this.$xegrid;
      var comp = $xegrid || $xetable;
      comp.$emit("custom", {
        type: type3,
        $table: $xetable,
        $grid: $xegrid,
        $event: evnt
      });
    },
    changeCustomOption: function changeCustomOption(column2) {
      var isChecked2 = !column2.visible;
      _xeUtils$a.default.eachTree([column2], function(item) {
        item.visible = isChecked2;
        item.halfVisible = false;
      });
      this.handleOptionCheck(column2);
      if (this.custom && this.customOpts.immediate) {
        this.handleTableCustom();
      }
      this.checkCustomStatus();
    },
    handleOptionCheck: function handleOptionCheck2(column2) {
      var matchObj = _xeUtils$a.default.findTree(this.columns, function(item) {
        return item === column2;
      });
      if (matchObj && matchObj.parent) {
        var parent2 = matchObj.parent;
        if (parent2.children && parent2.children.length) {
          parent2.visible = parent2.children.every(function(column3) {
            return column3.visible;
          });
          parent2.halfVisible = !parent2.visible && parent2.children.some(function(column3) {
            return column3.visible || column3.halfVisible;
          });
          this.handleOptionCheck(parent2);
        }
      }
    },
    handleTableCustom: function handleTableCustom() {
      var $xetable = this.$xetable;
      $xetable.handleCustom();
    },
    checkCustomStatus: function checkCustomStatus() {
      var $xetable = this.$xetable, columns2 = this.columns;
      var checkMethod = $xetable.customOpts.checkMethod;
      this.customStore.isAll = columns2.every(function(column2) {
        return (checkMethod ? !checkMethod({
          column: column2
        }) : false) || column2.visible;
      });
      this.customStore.isIndeterminate = !this.customStore.isAll && columns2.some(function(column2) {
        return (!checkMethod || checkMethod({
          column: column2
        })) && (column2.visible || column2.halfVisible);
      });
    },
    allCustomEvent: function allCustomEvent() {
      var $xetable = this.$xetable, columns2 = this.columns, customStore = this.customStore;
      var checkMethod = $xetable.customOpts.checkMethod;
      var isAll = !customStore.isAll;
      _xeUtils$a.default.eachTree(columns2, function(column2) {
        if (!checkMethod || checkMethod({
          column: column2
        })) {
          column2.visible = isAll;
          column2.halfVisible = false;
        }
      });
      customStore.isAll = isAll;
      this.checkCustomStatus();
    },
    handleGlobalMousedownEvent: function handleGlobalMousedownEvent4(evnt) {
      if (!_tools$a.DomTools.getEventTargetNode(evnt, this.$refs.customWrapper).flag) {
        this.customColseEvent(evnt);
      }
    },
    handleGlobalBlurEvent: function handleGlobalBlurEvent4(evnt) {
      this.customColseEvent(evnt);
    },
    handleClickSettingEvent: function handleClickSettingEvent(evnt) {
      if (this.customStore.visible) {
        this.customColseEvent(evnt);
      } else {
        this.customOpenEvent(evnt);
      }
    },
    handleMouseenterSettingEvent: function handleMouseenterSettingEvent(evnt) {
      this.customStore.activeBtn = true;
      this.customOpenEvent(evnt);
    },
    handleMouseleaveSettingEvent: function handleMouseleaveSettingEvent(evnt) {
      var _this2 = this;
      var customStore = this.customStore;
      customStore.activeBtn = false;
      setTimeout(function() {
        if (!customStore.activeBtn && !customStore.activeWrapper) {
          _this2.customColseEvent(evnt);
        }
      }, 300);
    },
    handleWrapperMouseenterEvent: function handleWrapperMouseenterEvent(evnt) {
      this.customStore.activeWrapper = true;
      this.customOpenEvent(evnt);
    },
    handleWrapperMouseleaveEvent: function handleWrapperMouseleaveEvent(evnt) {
      var _this3 = this;
      var customStore = this.customStore;
      customStore.activeWrapper = false;
      setTimeout(function() {
        if (!customStore.activeBtn && !customStore.activeWrapper) {
          _this3.customColseEvent(evnt);
        }
      }, 300);
    },
    refreshEvent: function refreshEvent() {
      var _this4 = this;
      var $xegrid = this.$xegrid, refreshOpts2 = this.refreshOpts, isRefresh = this.isRefresh;
      if (!isRefresh) {
        if (refreshOpts2.query) {
          this.isRefresh = true;
          try {
            Promise.resolve(refreshOpts2.query()).catch(function(e) {
              return e;
            }).then(function() {
              _this4.isRefresh = false;
            });
          } catch (e) {
            this.isRefresh = false;
          }
        } else if ($xegrid) {
          this.isRefresh = true;
          $xegrid.commitProxy("reload").catch(function(e) {
            return e;
          }).then(function() {
            _this4.isRefresh = false;
          });
        }
      }
    },
    btnEvent: function btnEvent(evnt, item) {
      var $xegrid = this.$xegrid, $xetable = this.$xetable;
      var code = item.code;
      if (code) {
        if ($xegrid) {
          $xegrid.triggerToolbarBtnEvent(item, evnt);
        } else {
          var commandMethod = _vXETable$5.default.commands.get(code);
          var params = {
            code,
            button: item,
            $xegrid,
            $table: $xetable,
            $event: evnt
          };
          if (commandMethod) {
            commandMethod.call(this, params, evnt);
          }
          this.$emit("button-click", params);
        }
      }
    },
    tolEvent: function tolEvent(evnt, item) {
      var $xegrid = this.$xegrid, $xetable = this.$xetable;
      var code = item.code;
      if (code) {
        if ($xegrid) {
          $xegrid.triggerToolbarTolEvent(item, evnt);
        } else {
          var commandMethod = _vXETable$5.default.commands.get(code);
          var params = {
            code,
            tool: item,
            $xegrid,
            $table: $xetable,
            $event: evnt
          };
          if (commandMethod) {
            commandMethod.call(this, params, evnt);
          }
          this.$emit("tool-click", params);
        }
      }
    },
    importEvent: function importEvent2() {
      if (this.checkTable()) {
        this.$xetable.openImport(this.importOpts);
      }
    },
    exportEvent: function exportEvent2() {
      if (this.checkTable()) {
        this.$xetable.openExport(this.exportOpts);
      }
    },
    printEvent: function printEvent2() {
      if (this.checkTable()) {
        this.$xetable.openPrint(this.printOpts);
      }
    }
  }
};
toolbar2.default = _default2$b;
Object.defineProperty(toolbar$1, "__esModule", {
  value: true
});
toolbar$1.default = toolbar$1.Toolbar = void 0;
var _toolbar = _interopRequireDefault$O(toolbar2);
function _interopRequireDefault$O(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var Toolbar = Object.assign(_toolbar.default, {
  install: function install13(Vue2) {
    Vue2.component(_toolbar.default.name, _toolbar.default);
  }
});
toolbar$1.Toolbar = Toolbar;
var _default$s = Toolbar;
toolbar$1.default = _default$s;
var pager$1 = {};
var pager = {};
Object.defineProperty(pager, "__esModule", {
  value: true
});
pager.default = void 0;
var _xeUtils$9 = _interopRequireDefault$N(xeUtils);
var _conf$c = _interopRequireDefault$N(conf);
var _size$7 = _interopRequireDefault$N(size);
function _interopRequireDefault$N(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
function ownKeys$1(object3, enumerableOnly) {
  var keys3 = Object.keys(object3);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object3);
    if (enumerableOnly) {
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object3, sym).enumerable;
      });
    }
    keys3.push.apply(keys3, symbols);
  }
  return keys3;
}
function _objectSpread$1(target2) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys$1(Object(source), true).forEach(function(key) {
        _defineProperty$8(target2, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target2, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys$1(Object(source)).forEach(function(key) {
        Object.defineProperty(target2, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target2;
}
function _defineProperty$8(obj, key, value6) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value: value6, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value6;
  }
  return obj;
}
var _default2$a = {
  name: "VxePager",
  mixins: [_size$7.default],
  props: {
    size: {
      type: String,
      default: function _default76() {
        return _conf$c.default.pager.size || _conf$c.default.size;
      }
    },
    layouts: {
      type: Array,
      default: function _default77() {
        return _conf$c.default.pager.layouts || ["PrevJump", "PrevPage", "Jump", "PageCount", "NextPage", "NextJump", "Sizes", "Total"];
      }
    },
    currentPage: {
      type: Number,
      default: 1
    },
    loading: Boolean,
    pageSize: {
      type: Number,
      default: function _default78() {
        return _conf$c.default.pager.pageSize || 10;
      }
    },
    total: {
      type: Number,
      default: 0
    },
    pagerCount: {
      type: Number,
      default: function _default79() {
        return _conf$c.default.pager.pagerCount || 7;
      }
    },
    pageSizes: {
      type: Array,
      default: function _default80() {
        return _conf$c.default.pager.pageSizes || [10, 15, 20, 50, 100];
      }
    },
    align: {
      type: String,
      default: function _default81() {
        return _conf$c.default.pager.align;
      }
    },
    border: {
      type: Boolean,
      default: function _default82() {
        return _conf$c.default.pager.border;
      }
    },
    background: {
      type: Boolean,
      default: function _default83() {
        return _conf$c.default.pager.background;
      }
    },
    perfect: {
      type: Boolean,
      default: function _default84() {
        return _conf$c.default.pager.perfect;
      }
    },
    autoHidden: {
      type: Boolean,
      default: function _default85() {
        return _conf$c.default.pager.autoHidden;
      }
    },
    transfer: {
      type: Boolean,
      default: function _default86() {
        return _conf$c.default.pager.transfer;
      }
    },
    className: [String, Function],
    iconPrevPage: String,
    iconJumpPrev: String,
    iconJumpNext: String,
    iconNextPage: String,
    iconJumpMore: String
  },
  inject: {
    $xegrid: {
      default: null
    }
  },
  data: function data12() {
    return {
      inpCurrPage: this.currentPage
    };
  },
  computed: {
    isSizes: function isSizes() {
      return this.layouts.some(function(name) {
        return name === "Sizes";
      });
    },
    pageCount: function pageCount() {
      return this.getPageCount(this.total, this.pageSize);
    },
    numList: function numList() {
      var len = this.pageCount > this.pagerCount ? this.pagerCount - 2 : this.pagerCount;
      var rest = [];
      for (var index2 = 0; index2 < len; index2++) {
        rest.push(index2);
      }
      return rest;
    },
    offsetNumber: function offsetNumber() {
      return Math.floor((this.pagerCount - 2) / 2);
    },
    sizeList: function sizeList() {
      return this.pageSizes.map(function(item) {
        if (_xeUtils$9.default.isNumber(item)) {
          return {
            value: item,
            label: "".concat(_conf$c.default.i18n("vxe.pager.pagesize", [item]))
          };
        }
        return _objectSpread$1({
          value: "",
          label: ""
        }, item);
      });
    }
  },
  watch: {
    currentPage: function currentPage(value6) {
      this.inpCurrPage = value6;
    }
  },
  render: function render18(h) {
    var _this = this, _ref;
    var $scopedSlots = this.$scopedSlots, $xegrid = this.$xegrid, vSize8 = this.vSize, align = this.align, className = this.className;
    var childNodes = [];
    if ($scopedSlots.left) {
      childNodes.push(h("span", {
        class: "vxe-pager--left-wrapper"
      }, $scopedSlots.left.call(this, {
        $grid: $xegrid
      })));
    }
    this.layouts.forEach(function(name) {
      childNodes.push(_this["render".concat(name)](h));
    });
    if ($scopedSlots.right) {
      childNodes.push(h("span", {
        class: "vxe-pager--right-wrapper"
      }, $scopedSlots.right.call(this, {
        $grid: $xegrid
      })));
    }
    return h("div", {
      class: ["vxe-pager", className ? _xeUtils$9.default.isFunction(className) ? className({
        $pager: this
      }) : className : "", (_ref = {}, _defineProperty$8(_ref, "size--".concat(vSize8), vSize8), _defineProperty$8(_ref, "align--".concat(align), align), _defineProperty$8(_ref, "is--border", this.border), _defineProperty$8(_ref, "is--background", this.background), _defineProperty$8(_ref, "is--perfect", this.perfect), _defineProperty$8(_ref, "is--hidden", this.autoHidden && this.pageCount === 1), _defineProperty$8(_ref, "is--loading", this.loading), _ref)]
    }, [h("div", {
      class: "vxe-pager--wrapper"
    }, childNodes)]);
  },
  methods: {
    renderPrevPage: function renderPrevPage(h) {
      return h("button", {
        class: ["vxe-pager--prev-btn", {
          "is--disabled": this.currentPage <= 1
        }],
        attrs: {
          type: "button",
          title: _conf$c.default.i18n("vxe.pager.prevPage")
        },
        on: {
          click: this.prevPage
        }
      }, [h("i", {
        class: ["vxe-pager--btn-icon", this.iconPrevPage || _conf$c.default.icon.PAGER_PREV_PAGE]
      })]);
    },
    renderPrevJump: function renderPrevJump(h, tagName2) {
      return h(tagName2 || "button", {
        class: ["vxe-pager--jump-prev", {
          "is--fixed": !tagName2,
          "is--disabled": this.currentPage <= 1
        }],
        attrs: {
          type: "button",
          title: _conf$c.default.i18n("vxe.pager.prevJump")
        },
        on: {
          click: this.prevJump
        }
      }, [tagName2 ? h("i", {
        class: ["vxe-pager--jump-more-icon", this.iconJumpMore || _conf$c.default.icon.PAGER_JUMP_MORE]
      }) : null, h("i", {
        class: ["vxe-pager--jump-icon", this.iconJumpPrev || _conf$c.default.icon.PAGER_JUMP_PREV]
      })]);
    },
    renderNumber: function renderNumber(h) {
      return h("span", {
        class: "vxe-pager--btn-wrapper"
      }, this.renderPageBtn(h));
    },
    renderJumpNumber: function renderJumpNumber(h) {
      return h("span", {
        class: "vxe-pager--btn-wrapper"
      }, this.renderPageBtn(h, true));
    },
    renderNextJump: function renderNextJump(h, tagName2) {
      return h(tagName2 || "button", {
        class: ["vxe-pager--jump-next", {
          "is--fixed": !tagName2,
          "is--disabled": this.currentPage >= this.pageCount
        }],
        attrs: {
          type: "button",
          title: _conf$c.default.i18n("vxe.pager.nextJump")
        },
        on: {
          click: this.nextJump
        }
      }, [tagName2 ? h("i", {
        class: ["vxe-pager--jump-more-icon", this.iconJumpMore || _conf$c.default.icon.PAGER_JUMP_MORE]
      }) : null, h("i", {
        class: ["vxe-pager--jump-icon", this.iconJumpNext || _conf$c.default.icon.PAGER_JUMP_NEXT]
      })]);
    },
    renderNextPage: function renderNextPage(h) {
      return h("button", {
        class: ["vxe-pager--next-btn", {
          "is--disabled": this.currentPage >= this.pageCount
        }],
        attrs: {
          type: "button",
          title: _conf$c.default.i18n("vxe.pager.nextPage")
        },
        on: {
          click: this.nextPage
        }
      }, [h("i", {
        class: ["vxe-pager--btn-icon", this.iconNextPage || _conf$c.default.icon.PAGER_NEXT_PAGE]
      })]);
    },
    renderSizes: function renderSizes(h) {
      var _this2 = this;
      return h("vxe-select", {
        class: "vxe-pager--sizes",
        props: {
          value: this.pageSize,
          placement: "top",
          transfer: this.transfer,
          options: this.sizeList
        },
        on: {
          change: function change(_ref2) {
            var value6 = _ref2.value;
            _this2.pageSizeEvent(value6);
          }
        }
      });
    },
    renderFullJump: function renderFullJump(h) {
      return this.renderJump(h, true);
    },
    renderJump: function renderJump(h, isFull) {
      return h("span", {
        class: "vxe-pager--jump"
      }, [isFull ? h("span", {
        class: "vxe-pager--goto-text"
      }, _conf$c.default.i18n("vxe.pager.goto")) : null, h("input", {
        class: "vxe-pager--goto",
        domProps: {
          value: this.inpCurrPage
        },
        attrs: {
          type: "text",
          autocomplete: "off"
        },
        on: {
          input: this.jumpInputEvent,
          keydown: this.jumpKeydownEvent,
          blur: this.triggerJumpEvent
        }
      }), isFull ? h("span", {
        class: "vxe-pager--classifier-text"
      }, _conf$c.default.i18n("vxe.pager.pageClassifier")) : null]);
    },
    renderPageCount: function renderPageCount(h) {
      return h("span", {
        class: "vxe-pager--count"
      }, [h("span", {
        class: "vxe-pager--separator"
      }), h("span", this.pageCount)]);
    },
    renderTotal: function renderTotal(h) {
      return h("span", {
        class: "vxe-pager--total"
      }, _conf$c.default.i18n("vxe.pager.total", [this.total]));
    },
    renderPageBtn: function renderPageBtn(h, showJump) {
      var _this3 = this;
      var numList2 = this.numList, currentPage2 = this.currentPage, pageCount2 = this.pageCount, pagerCount = this.pagerCount, offsetNumber2 = this.offsetNumber;
      var nums = [];
      var isOv = pageCount2 > pagerCount;
      var isLt = isOv && currentPage2 > offsetNumber2 + 1;
      var isGt = isOv && currentPage2 < pageCount2 - offsetNumber2;
      var startNumber = 1;
      if (isOv) {
        if (currentPage2 >= pageCount2 - offsetNumber2) {
          startNumber = Math.max(pageCount2 - numList2.length + 1, 1);
        } else {
          startNumber = Math.max(currentPage2 - offsetNumber2, 1);
        }
      }
      if (showJump && isLt) {
        nums.push(h("button", {
          class: "vxe-pager--num-btn",
          attrs: {
            type: "button"
          },
          on: {
            click: function click() {
              return _this3.jumpPage(1);
            }
          }
        }, 1), this.renderPrevJump(h, "span"));
      }
      numList2.forEach(function(item, index2) {
        var number3 = startNumber + index2;
        if (number3 <= pageCount2) {
          nums.push(h("button", {
            class: ["vxe-pager--num-btn", {
              "is--active": currentPage2 === number3
            }],
            attrs: {
              type: "button"
            },
            on: {
              click: function click() {
                return _this3.jumpPage(number3);
              }
            },
            key: number3
          }, number3));
        }
      });
      if (showJump && isGt) {
        nums.push(this.renderNextJump(h, "button"), h("button", {
          class: "vxe-pager--num-btn",
          attrs: {
            type: "button"
          },
          on: {
            click: function click() {
              return _this3.jumpPage(pageCount2);
            }
          }
        }, pageCount2));
      }
      return nums;
    },
    getPageCount: function getPageCount(total, size2) {
      return Math.max(Math.ceil(total / size2), 1);
    },
    prevPage: function prevPage() {
      var currentPage2 = this.currentPage, pageCount2 = this.pageCount;
      if (currentPage2 > 1) {
        this.jumpPage(Math.min(pageCount2, Math.max(currentPage2 - 1, 1)));
      }
    },
    nextPage: function nextPage() {
      var currentPage2 = this.currentPage, pageCount2 = this.pageCount;
      if (currentPage2 < pageCount2) {
        this.jumpPage(Math.min(pageCount2, currentPage2 + 1));
      }
    },
    prevJump: function prevJump() {
      this.jumpPage(Math.max(this.currentPage - this.numList.length, 1));
    },
    nextJump: function nextJump() {
      this.jumpPage(Math.min(this.currentPage + this.numList.length, this.pageCount));
    },
    jumpPage: function jumpPage(currentPage2) {
      if (currentPage2 !== this.currentPage) {
        this.$emit("update:currentPage", currentPage2);
        this.$emit("page-change", {
          type: "current",
          pageSize: this.pageSize,
          currentPage: currentPage2
        });
      }
    },
    pageSizeEvent: function pageSizeEvent(pageSize) {
      this.changePageSize(pageSize);
    },
    changePageSize: function changePageSize(pageSize) {
      if (pageSize !== this.pageSize) {
        this.$emit("update:pageSize", pageSize);
        this.$emit("page-change", {
          type: "size",
          pageSize,
          currentPage: Math.min(this.currentPage, this.getPageCount(this.total, pageSize))
        });
      }
    },
    jumpInputEvent: function jumpInputEvent(evnt) {
      this.inpCurrPage = evnt.target.value;
    },
    jumpKeydownEvent: function jumpKeydownEvent(evnt) {
      if (evnt.keyCode === 13) {
        this.triggerJumpEvent(evnt);
      } else if (evnt.keyCode === 38) {
        evnt.preventDefault();
        this.nextPage();
      } else if (evnt.keyCode === 40) {
        evnt.preventDefault();
        this.prevPage();
      }
    },
    triggerJumpEvent: function triggerJumpEvent(evnt) {
      var value6 = _xeUtils$9.default.toNumber(evnt.target.value);
      var current = value6 <= 0 ? 1 : value6 >= this.pageCount ? this.pageCount : value6;
      evnt.target.value = current;
      this.jumpPage(current);
    }
  }
};
pager.default = _default2$a;
Object.defineProperty(pager$1, "__esModule", {
  value: true
});
pager$1.default = pager$1.Pager = void 0;
var _pager = _interopRequireDefault$M(pager);
function _interopRequireDefault$M(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var Pager = Object.assign(_pager.default, {
  install: function install14(Vue2) {
    Vue2.component(_pager.default.name, _pager.default);
  }
});
pager$1.Pager = Pager;
var _default$r = Pager;
pager$1.default = _default$r;
var checkbox$1 = {};
Object.defineProperty(checkbox$1, "__esModule", {
  value: true
});
checkbox$1.default = checkbox$1.Checkbox = void 0;
var _checkbox = _interopRequireDefault$L(checkbox$2);
function _interopRequireDefault$L(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var Checkbox = Object.assign(_checkbox.default, {
  install: function install15(Vue2) {
    Vue2.component(_checkbox.default.name, _checkbox.default);
  }
});
checkbox$1.Checkbox = Checkbox;
var _default$q = Checkbox;
checkbox$1.default = _default$q;
var checkboxGroup$1 = {};
var group$1 = {};
Object.defineProperty(group$1, "__esModule", {
  value: true
});
group$1.default = void 0;
var _conf$b = _interopRequireDefault$K(conf);
function _interopRequireDefault$K(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var _default2$9 = {
  name: "VxeCheckboxGroup",
  props: {
    value: Array,
    disabled: Boolean,
    size: {
      type: String,
      default: function _default87() {
        return _conf$b.default.checkbox.size || _conf$b.default.size;
      }
    }
  },
  provide: function provide6() {
    return {
      $xecheckboxgroup: this
    };
  },
  computed: {
    vSize: function vSize4() {
      return this.size || this.$parent.size || this.$parent.vSize;
    }
  },
  render: function render19(h) {
    var $scopedSlots = this.$scopedSlots;
    return h("div", {
      class: "vxe-checkbox-group"
    }, $scopedSlots.default ? $scopedSlots.default.call(this, {}) : []);
  },
  methods: {
    handleChecked: function handleChecked(params) {
      var checked = params.checked, label = params.label;
      var checklist = this.value || [];
      var checkIndex = checklist.indexOf(label);
      if (checked) {
        if (checkIndex === -1) {
          checklist.push(label);
        }
      } else {
        checklist.splice(checkIndex, 1);
      }
      this.$emit("input", checklist);
      this.$emit("change", Object.assign({
        checklist
      }, params));
    }
  }
};
group$1.default = _default2$9;
Object.defineProperty(checkboxGroup$1, "__esModule", {
  value: true
});
checkboxGroup$1.default = checkboxGroup$1.CheckboxGroup = void 0;
var _group$1 = _interopRequireDefault$J(group$1);
function _interopRequireDefault$J(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var CheckboxGroup = Object.assign(_group$1.default, {
  install: function install16(Vue2) {
    Vue2.component(_group$1.default.name, _group$1.default);
  }
});
checkboxGroup$1.CheckboxGroup = CheckboxGroup;
var _default$p = CheckboxGroup;
checkboxGroup$1.default = _default$p;
var radio$1 = {};
Object.defineProperty(radio$1, "__esModule", {
  value: true
});
radio$1.default = radio$1.Radio = void 0;
var _radio = _interopRequireDefault$I(radio$2);
function _interopRequireDefault$I(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var Radio = Object.assign(_radio.default, {
  install: function install17(Vue2) {
    Vue2.component(_radio.default.name, _radio.default);
  }
});
radio$1.Radio = Radio;
var _default$o = Radio;
radio$1.default = _default$o;
var radioGroup = {};
var group = {};
Object.defineProperty(group, "__esModule", {
  value: true
});
group.default = void 0;
var _xeUtils$8 = _interopRequireDefault$H(xeUtils);
var _conf$a = _interopRequireDefault$H(conf);
function _interopRequireDefault$H(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var _default2$8 = {
  name: "VxeRadioGroup",
  props: {
    value: [String, Number, Boolean],
    disabled: Boolean,
    strict: {
      type: Boolean,
      default: function _default88() {
        return _conf$a.default.radioGroup.strict;
      }
    },
    size: {
      type: String,
      default: function _default89() {
        return _conf$a.default.radioGroup.size || _conf$a.default.size;
      }
    }
  },
  provide: function provide7() {
    return {
      $xeradiogroup: this
    };
  },
  computed: {
    vSize: function vSize5() {
      return this.size || this.$parent.size || this.$parent.vSize;
    }
  },
  data: function data13() {
    return {
      name: _xeUtils$8.default.uniqueId("xegroup_")
    };
  },
  render: function render20(h) {
    var $scopedSlots = this.$scopedSlots;
    return h("div", {
      class: "vxe-radio-group"
    }, $scopedSlots.default ? $scopedSlots.default.call(this, {}) : []);
  },
  methods: {
    handleChecked: function handleChecked2(params) {
      this.$emit("input", params.label);
      this.$emit("change", params);
    }
  }
};
group.default = _default2$8;
Object.defineProperty(radioGroup, "__esModule", {
  value: true
});
radioGroup.default = radioGroup.RadioGroup = void 0;
var _group = _interopRequireDefault$G(group);
function _interopRequireDefault$G(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var RadioGroup = Object.assign(_group.default, {
  install: function install18(Vue2) {
    Vue2.component(_group.default.name, _group.default);
  }
});
radioGroup.RadioGroup = RadioGroup;
var _default$n = RadioGroup;
radioGroup.default = _default$n;
var radioButton = {};
var button$3 = {};
Object.defineProperty(button$3, "__esModule", {
  value: true
});
button$3.default = void 0;
var _tools$9 = tools;
var _conf$9 = _interopRequireDefault$F(conf);
function _interopRequireDefault$F(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
function _defineProperty$7(obj, key, value6) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value: value6, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value6;
  }
  return obj;
}
var _default2$7 = {
  name: "VxeRadioButton",
  props: {
    value: [String, Number, Boolean],
    label: [String, Number, Boolean],
    title: [String, Number],
    content: [String, Number],
    disabled: Boolean,
    strict: {
      type: Boolean,
      default: function _default90() {
        return _conf$9.default.radioButton.strict;
      }
    },
    size: {
      type: String,
      default: function _default91() {
        return _conf$9.default.radioButton.size || _conf$9.default.size;
      }
    }
  },
  inject: {
    $xeradiogroup: {
      default: null
    }
  },
  computed: {
    vSize: function vSize6() {
      return this.size || this.$parent.size || this.$parent.vSize;
    },
    isDisabled: function isDisabled3() {
      var $xeradiogroup = this.$xeradiogroup;
      return this.disabled || $xeradiogroup && $xeradiogroup.disabled;
    },
    isStrict: function isStrict2() {
      var $xeradiogroup = this.$xeradiogroup;
      return $xeradiogroup ? $xeradiogroup.strict : this.strict;
    }
  },
  render: function render21(h) {
    var _ref;
    var $scopedSlots = this.$scopedSlots, $xeradiogroup = this.$xeradiogroup, isDisabled4 = this.isDisabled, title = this.title, vSize8 = this.vSize, value6 = this.value, label = this.label, content2 = this.content;
    var attrs2 = {};
    if (title) {
      attrs2.title = title;
    }
    return h("label", {
      class: ["vxe-radio", "vxe-radio-button", (_ref = {}, _defineProperty$7(_ref, "size--".concat(vSize8), vSize8), _defineProperty$7(_ref, "is--disabled", isDisabled4), _ref)],
      attrs: attrs2
    }, [h("input", {
      class: "vxe-radio--input",
      attrs: {
        type: "radio",
        name: $xeradiogroup ? $xeradiogroup.name : null,
        disabled: isDisabled4
      },
      domProps: {
        checked: $xeradiogroup ? $xeradiogroup.value === label : value6 === label
      },
      on: {
        change: this.changeEvent,
        click: this.clickEvent
      }
    }), h("span", {
      class: "vxe-radio--label"
    }, $scopedSlots.default ? $scopedSlots.default.call(this, {}) : [_tools$9.UtilTools.getFuncText(content2)])]);
  },
  methods: {
    handleValue: function handleValue2(label, evnt) {
      var $xeradiogroup = this.$xeradiogroup;
      var params = {
        label,
        $event: evnt
      };
      if ($xeradiogroup) {
        $xeradiogroup.handleChecked(params);
      } else {
        this.$emit("input", label);
        this.$emit("change", params);
      }
    },
    changeEvent: function changeEvent5(evnt) {
      var isDisabled4 = this.isDisabled;
      if (!isDisabled4) {
        this.handleValue(this.label, evnt);
      }
    },
    clickEvent: function clickEvent3(evnt) {
      var $xeradiogroup = this.$xeradiogroup, isDisabled4 = this.isDisabled, isStrict3 = this.isStrict;
      if (!isDisabled4 && !isStrict3) {
        if (this.label === ($xeradiogroup ? $xeradiogroup.value : this.value)) {
          this.handleValue(null, evnt);
        }
      }
    }
  }
};
button$3.default = _default2$7;
Object.defineProperty(radioButton, "__esModule", {
  value: true
});
radioButton.default = radioButton.RadioButton = void 0;
var _button$1 = _interopRequireDefault$E(button$3);
function _interopRequireDefault$E(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var RadioButton = Object.assign(_button$1.default, {
  install: function install19(Vue2) {
    Vue2.component(_button$1.default.name, _button$1.default);
  }
});
radioButton.RadioButton = RadioButton;
var _default$m = RadioButton;
radioButton.default = _default$m;
var input$1 = {};
Object.defineProperty(input$1, "__esModule", {
  value: true
});
input$1.default = input$1.Input = void 0;
var _input = _interopRequireDefault$D(input$2);
function _interopRequireDefault$D(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var Input = Object.assign(_input.default, {
  install: function install20(Vue2) {
    Vue2.component(_input.default.name, _input.default);
  }
});
input$1.Input = Input;
var _default$l = Input;
input$1.default = _default$l;
var textarea$1 = {};
var textarea = {};
Object.defineProperty(textarea, "__esModule", {
  value: true
});
textarea.default = void 0;
var _xeUtils$7 = _interopRequireDefault$C(xeUtils);
var _conf$8 = _interopRequireDefault$C(conf);
var _size$6 = _interopRequireDefault$C(size);
var _tools$8 = tools;
function _interopRequireDefault$C(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
function _defineProperty$6(obj, key, value6) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value: value6, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value6;
  }
  return obj;
}
var autoTxtElem;
var _default2$6 = {
  name: "VxeTextarea",
  mixins: [_size$6.default],
  model: {
    prop: "value",
    event: "modelValue"
  },
  props: {
    value: [String, Number],
    immediate: {
      type: Boolean,
      default: true
    },
    name: String,
    readonly: Boolean,
    disabled: Boolean,
    placeholder: String,
    maxlength: [String, Number],
    rows: {
      type: [String, Number],
      default: 2
    },
    cols: {
      type: [String, Number],
      default: null
    },
    showWordCount: Boolean,
    countMethod: Function,
    autosize: [Boolean, Object],
    form: String,
    resize: {
      type: String,
      default: function _default92() {
        return _conf$8.default.textarea.resize;
      }
    },
    className: String,
    size: {
      type: String,
      default: function _default93() {
        return _conf$8.default.textarea.size || _conf$8.default.size;
      }
    }
  },
  data: function data14() {
    return {
      inputValue: this.value
    };
  },
  computed: {
    inputCount: function inputCount() {
      return _xeUtils$7.default.getSize(this.inputValue);
    },
    isCountError: function isCountError() {
      return this.maxlength && this.inputCount > _xeUtils$7.default.toNumber(this.maxlength);
    },
    defaultEvents: function defaultEvents() {
      var _this = this;
      var evnts = {};
      _xeUtils$7.default.each(this.$listeners, function(cb, name) {
        if (["input", "change", "blur"].indexOf(name) === -1) {
          evnts[name] = _this.triggerEvent;
        }
      });
      evnts.input = this.inputEvent;
      evnts.change = this.changeEvent;
      evnts.blur = this.blurEvent;
      return evnts;
    },
    sizeOpts: function sizeOpts() {
      return Object.assign({
        minRows: 1,
        maxRows: 10
      }, _conf$8.default.textarea.autosize, this.autosize);
    }
  },
  watch: {
    value: function value3(val) {
      this.inputValue = val;
      this.updateAutoTxt();
    }
  },
  mounted: function mounted11() {
    var autosize = this.autosize;
    if (autosize) {
      this.updateAutoTxt();
      this.handleResize();
    }
  },
  render: function render22(h) {
    var _ref;
    var className = this.className, defaultEvents2 = this.defaultEvents, inputValue = this.inputValue, vSize8 = this.vSize, name = this.name, form2 = this.form, resize2 = this.resize, placeholder2 = this.placeholder, readonly = this.readonly, disabled = this.disabled, maxlength = this.maxlength, autosize = this.autosize, showWordCount = this.showWordCount, countMethod = this.countMethod, rows = this.rows, cols = this.cols;
    var attrs2 = {
      name,
      form: form2,
      placeholder: placeholder2,
      maxlength,
      readonly,
      disabled,
      rows,
      cols
    };
    if (placeholder2) {
      attrs2.placeholder = _tools$8.UtilTools.getFuncText(placeholder2);
    }
    return h("div", {
      class: ["vxe-textarea", className, (_ref = {}, _defineProperty$6(_ref, "size--".concat(vSize8), vSize8), _defineProperty$6(_ref, "is--autosize", autosize), _defineProperty$6(_ref, "is--disabled", disabled), _defineProperty$6(_ref, "def--rows", !_xeUtils$7.default.eqNull(rows)), _defineProperty$6(_ref, "def--cols", !_xeUtils$7.default.eqNull(cols)), _ref)]
    }, [h("textarea", {
      ref: "textarea",
      class: "vxe-textarea--inner",
      domProps: {
        value: inputValue
      },
      attrs: attrs2,
      style: resize2 ? {
        resize: resize2
      } : null,
      on: defaultEvents2
    }), showWordCount ? h("span", {
      class: ["vxe-textarea--count", {
        "is--error": this.isCountError
      }]
    }, countMethod ? "".concat(countMethod({
      value: inputValue
    })) : "".concat(this.inputCount).concat(maxlength ? "/".concat(maxlength) : "")) : null]);
  },
  methods: {
    focus: function focus4() {
      this.$refs.textarea.focus();
      return this.$nextTick();
    },
    blur: function blur4() {
      this.$refs.textarea.blur();
      return this.$nextTick();
    },
    triggerEvent: function triggerEvent3(evnt) {
      var inputValue = this.inputValue;
      this.$emit(evnt.type, {
        value: inputValue,
        $event: evnt
      });
    },
    emitUpdate: function emitUpdate(value6, evnt) {
      this.inputValue = value6;
      this.$emit("modelValue", value6);
      if (this.value !== value6) {
        this.$emit("change", {
          value: value6,
          $event: evnt
        });
      }
    },
    inputEvent: function inputEvent2(evnt) {
      var immediate = this.immediate;
      var value6 = evnt.target.value;
      this.inputValue = value6;
      if (immediate) {
        this.emitUpdate(value6, evnt);
      }
      this.handleResize();
      this.triggerEvent(evnt);
    },
    changeEvent: function changeEvent6(evnt) {
      var immediate = this.immediate;
      if (immediate) {
        this.triggerEvent(evnt);
      } else {
        this.emitUpdate(this.inputValue, evnt);
      }
    },
    blurEvent: function blurEvent3(evnt) {
      var inputValue = this.inputValue, immediate = this.immediate;
      if (!immediate) {
        this.emitUpdate(inputValue, evnt);
      }
      this.$emit("blur", {
        value: inputValue,
        $event: evnt
      });
    },
    updateAutoTxt: function updateAutoTxt() {
      var $refs = this.$refs, inputValue = this.inputValue, size2 = this.size, autosize = this.autosize;
      if (autosize) {
        if (!autoTxtElem) {
          autoTxtElem = document.createElement("div");
        }
        if (!autoTxtElem.parentNode) {
          document.body.appendChild(autoTxtElem);
        }
        var textElem = $refs.textarea;
        var textStyle = getComputedStyle(textElem);
        autoTxtElem.className = ["vxe-textarea--autosize", size2 ? "size--".concat(size2) : ""].join(" ");
        autoTxtElem.style.width = "".concat(textElem.clientWidth, "px");
        autoTxtElem.style.padding = textStyle.padding;
        autoTxtElem.innerHTML = ("" + (inputValue || "\u3000")).replace(/\n$/, "\n\u3000");
      }
    },
    handleResize: function handleResize() {
      var _this2 = this;
      if (this.autosize) {
        this.$nextTick(function() {
          var $refs = _this2.$refs, sizeOpts2 = _this2.sizeOpts;
          var minRows = sizeOpts2.minRows, maxRows = sizeOpts2.maxRows;
          var textElem = $refs.textarea;
          var sizeHeight = autoTxtElem.clientHeight;
          var textStyle = getComputedStyle(textElem);
          var lineHeight = _xeUtils$7.default.toNumber(textStyle.lineHeight);
          var paddingTop = _xeUtils$7.default.toNumber(textStyle.paddingTop);
          var paddingBottom = _xeUtils$7.default.toNumber(textStyle.paddingBottom);
          var borderTopWidth = _xeUtils$7.default.toNumber(textStyle.borderTopWidth);
          var borderBottomWidth = _xeUtils$7.default.toNumber(textStyle.borderBottomWidth);
          var intervalHeight = paddingTop + paddingBottom + borderTopWidth + borderBottomWidth;
          var rowNum = (sizeHeight - intervalHeight) / lineHeight;
          var textRows = rowNum && /[0-9]/.test(rowNum) ? rowNum : Math.floor(rowNum) + 1;
          var vaildRows = textRows;
          if (textRows < minRows) {
            vaildRows = minRows;
          } else if (textRows > maxRows) {
            vaildRows = maxRows;
          }
          textElem.style.height = "".concat(vaildRows * lineHeight + intervalHeight, "px");
        });
      }
    }
  }
};
textarea.default = _default2$6;
Object.defineProperty(textarea$1, "__esModule", {
  value: true
});
textarea$1.default = textarea$1.Textarea = void 0;
var _textarea = _interopRequireDefault$B(textarea);
function _interopRequireDefault$B(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var Textarea = Object.assign(_textarea.default, {
  install: function install21(Vue2) {
    Vue2.component(_textarea.default.name, _textarea.default);
  }
});
textarea$1.Textarea = Textarea;
var _default$k = Textarea;
textarea$1.default = _default$k;
var button$2 = {};
var button$1 = {};
Object.defineProperty(button$1, "__esModule", {
  value: true
});
button$1.default = void 0;
var _xeUtils$6 = _interopRequireDefault$A(xeUtils);
var _conf$7 = _interopRequireDefault$A(conf);
var _size$5 = _interopRequireDefault$A(size);
var _tools$7 = tools;
function _interopRequireDefault$A(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
function _defineProperty$5(obj, key, value6) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value: value6, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value6;
  }
  return obj;
}
var _default2$5 = {
  name: "VxeButton",
  mixins: [_size$5.default],
  props: {
    type: String,
    size: {
      type: String,
      default: function _default94() {
        return _conf$7.default.button.size || _conf$7.default.size;
      }
    },
    name: [String, Number],
    content: String,
    placement: String,
    status: String,
    icon: String,
    round: Boolean,
    circle: Boolean,
    disabled: Boolean,
    loading: Boolean,
    destroyOnClose: Boolean,
    className: String,
    transfer: {
      type: Boolean,
      default: function _default95() {
        return _conf$7.default.button.transfer;
      }
    }
  },
  data: function data15() {
    return {
      inited: false,
      showPanel: false,
      animatVisible: false,
      panelIndex: 0,
      panelStyle: null,
      panelPlacement: null
    };
  },
  computed: {
    isText: function isText() {
      return this.type === "text";
    },
    isFormBtn: function isFormBtn() {
      return ["submit", "reset", "button"].indexOf(this.type) > -1;
    },
    btnType: function btnType() {
      return this.isText ? this.type : "button";
    }
  },
  created: function created10() {
    _tools$7.GlobalEvent.on(this, "mousewheel", this.handleGlobalMousewheelEvent);
  },
  beforeDestroy: function beforeDestroy7() {
    var panelElem = this.$refs.panel;
    if (panelElem && panelElem.parentNode) {
      panelElem.parentNode.removeChild(panelElem);
    }
  },
  destroyed: function destroyed11() {
    _tools$7.GlobalEvent.off(this, "mousewheel");
  },
  render: function render23(h) {
    var _ref, _ref2, _this = this, _ref3, _ref4;
    var $scopedSlots = this.$scopedSlots, $listeners = this.$listeners, className = this.className, inited = this.inited, type3 = this.type, destroyOnClose = this.destroyOnClose, isFormBtn2 = this.isFormBtn, status = this.status, btnType2 = this.btnType, vSize8 = this.vSize, name = this.name, disabled = this.disabled, loading = this.loading, showPanel4 = this.showPanel, animatVisible = this.animatVisible, panelPlacement = this.panelPlacement;
    var downsSlot = $scopedSlots.dropdowns;
    return downsSlot ? h("div", {
      class: ["vxe-button--dropdown", className, (_ref = {}, _defineProperty$5(_ref, "size--".concat(vSize8), vSize8), _defineProperty$5(_ref, "is--active", showPanel4), _ref)]
    }, [h("button", {
      ref: "xBtn",
      class: ["vxe-button", "type--".concat(btnType2), (_ref2 = {}, _defineProperty$5(_ref2, "size--".concat(vSize8), vSize8), _defineProperty$5(_ref2, "theme--".concat(status), status), _defineProperty$5(_ref2, "is--round", this.round), _defineProperty$5(_ref2, "is--circle", this.circle), _defineProperty$5(_ref2, "is--disabled", disabled || loading), _defineProperty$5(_ref2, "is--loading", loading), _ref2)],
      attrs: {
        name,
        type: isFormBtn2 ? type3 : "button",
        disabled: disabled || loading
      },
      on: Object.assign({
        mouseenter: this.mouseenterTargetEvent,
        mouseleave: this.mouseleaveEvent
      }, _xeUtils$6.default.objectMap($listeners, function(cb, type4) {
        return function(evnt) {
          return _this.$emit(type4, {
            $event: evnt
          });
        };
      }))
    }, this.renderContent(h).concat([h("i", {
      class: "vxe-button--dropdown-arrow ".concat(_conf$7.default.icon.BUTTON_DROPDOWN)
    })])), h("div", {
      ref: "panel",
      class: ["vxe-button--dropdown-panel", (_ref3 = {}, _defineProperty$5(_ref3, "size--".concat(vSize8), vSize8), _defineProperty$5(_ref3, "animat--leave", animatVisible), _defineProperty$5(_ref3, "animat--enter", showPanel4), _ref3)],
      attrs: {
        placement: panelPlacement
      },
      style: this.panelStyle
    }, inited ? [h("div", {
      class: "vxe-button--dropdown-wrapper",
      on: {
        mousedown: this.mousedownDropdownEvent,
        click: this.clickDropdownEvent,
        mouseenter: this.mouseenterEvent,
        mouseleave: this.mouseleaveEvent
      }
    }, destroyOnClose && !showPanel4 ? [] : downsSlot.call(this, {}, h))] : null)]) : h("button", {
      ref: "xBtn",
      class: ["vxe-button", "type--".concat(btnType2), className, (_ref4 = {}, _defineProperty$5(_ref4, "size--".concat(vSize8), vSize8), _defineProperty$5(_ref4, "theme--".concat(status), status), _defineProperty$5(_ref4, "is--round", this.round), _defineProperty$5(_ref4, "is--circle", this.circle), _defineProperty$5(_ref4, "is--disabled", disabled || loading), _defineProperty$5(_ref4, "is--loading", loading), _ref4)],
      attrs: {
        name,
        type: isFormBtn2 ? type3 : "button",
        disabled: disabled || loading
      },
      on: _xeUtils$6.default.objectMap($listeners, function(cb, type4) {
        return function(evnt) {
          return _this.$emit(type4, {
            $event: evnt
          });
        };
      })
    }, this.renderContent(h));
  },
  methods: {
    renderContent: function renderContent(h) {
      var $scopedSlots = this.$scopedSlots, content2 = this.content, icon2 = this.icon, loading = this.loading;
      var contents = [];
      if (loading) {
        contents.push(h("i", {
          class: ["vxe-button--loading-icon", _conf$7.default.icon.BUTTON_LOADING]
        }));
      } else if (icon2) {
        contents.push(h("i", {
          class: ["vxe-button--icon", icon2]
        }));
      }
      if ($scopedSlots.default) {
        contents.push(h("span", {
          class: "vxe-button--content"
        }, $scopedSlots.default.call(this)));
      } else if (content2) {
        contents.push(h("span", {
          class: "vxe-button--content"
        }, [_tools$7.UtilTools.getFuncText(content2)]));
      }
      return contents;
    },
    handleGlobalMousewheelEvent: function handleGlobalMousewheelEvent4(evnt) {
      if (this.showPanel && !_tools$7.DomTools.getEventTargetNode(evnt, this.$refs.panel).flag) {
        this.closePanel();
      }
    },
    updateZindex: function updateZindex5() {
      if (this.panelIndex < _tools$7.UtilTools.getLastZIndex()) {
        this.panelIndex = _tools$7.UtilTools.nextZIndex();
      }
    },
    mousedownDropdownEvent: function mousedownDropdownEvent(evnt) {
      var isLeftBtn = evnt.button === 0;
      if (isLeftBtn) {
        evnt.stopPropagation();
      }
    },
    clickDropdownEvent: function clickDropdownEvent(evnt) {
      var _this2 = this;
      var dropdownElem = evnt.currentTarget;
      var panelElem = this.$refs.panel;
      var _DomTools$getEventTar = _tools$7.DomTools.getEventTargetNode(evnt, dropdownElem, "vxe-button"), flag = _DomTools$getEventTar.flag, targetElem = _DomTools$getEventTar.targetElem;
      if (flag) {
        if (panelElem) {
          panelElem.dataset.active = "N";
        }
        this.showPanel = false;
        setTimeout(function() {
          if (!panelElem || panelElem.dataset.active !== "Y") {
            _this2.animatVisible = false;
          }
        }, 350);
        this.$emit("dropdown-click", {
          name: targetElem.getAttribute("name"),
          $event: evnt
        });
      }
    },
    mouseenterTargetEvent: function mouseenterTargetEvent() {
      var _this3 = this;
      var panelElem = this.$refs.panel;
      panelElem.dataset.active = "Y";
      if (!this.inited) {
        this.inited = true;
        if (this.transfer) {
          document.body.appendChild(panelElem);
        }
      }
      this.showTime = setTimeout(function() {
        if (panelElem.dataset.active === "Y") {
          _this3.mouseenterEvent();
        } else {
          _this3.animatVisible = false;
        }
      }, 250);
    },
    mouseenterEvent: function mouseenterEvent() {
      var _this4 = this;
      var panelElem = this.$refs.panel;
      panelElem.dataset.active = "Y";
      this.animatVisible = true;
      setTimeout(function() {
        if (panelElem.dataset.active === "Y") {
          _this4.showPanel = true;
          _this4.updateZindex();
          _this4.updatePlacement();
          setTimeout(function() {
            if (_this4.showPanel) {
              _this4.updatePlacement();
            }
          }, 50);
        }
      }, 20);
    },
    mouseleaveEvent: function mouseleaveEvent() {
      this.closePanel();
    },
    closePanel: function closePanel() {
      var _this5 = this;
      var panelElem = this.$refs.panel;
      clearTimeout(this.showTime);
      if (panelElem) {
        panelElem.dataset.active = "N";
        setTimeout(function() {
          if (panelElem.dataset.active !== "Y") {
            _this5.showPanel = false;
            setTimeout(function() {
              if (panelElem.dataset.active !== "Y") {
                _this5.animatVisible = false;
              }
            }, 350);
          }
        }, 100);
      } else {
        this.animatVisible = false;
        this.showPanel = false;
      }
    },
    updatePlacement: function updatePlacement3() {
      var _this6 = this;
      return this.$nextTick().then(function() {
        var $refs = _this6.$refs, transfer = _this6.transfer, placement = _this6.placement, panelIndex = _this6.panelIndex;
        var targetElem = $refs.xBtn;
        var panelElem = $refs.panel;
        if (panelElem && targetElem) {
          var targetHeight = targetElem.offsetHeight;
          var targetWidth = targetElem.offsetWidth;
          var panelHeight = panelElem.offsetHeight;
          var panelWidth = panelElem.offsetWidth;
          var marginSize = 5;
          var panelStyle = {
            zIndex: panelIndex
          };
          var _DomTools$getAbsolute = _tools$7.DomTools.getAbsolutePos(targetElem), top = _DomTools$getAbsolute.top, left = _DomTools$getAbsolute.left, boundingTop = _DomTools$getAbsolute.boundingTop, visibleHeight = _DomTools$getAbsolute.visibleHeight, visibleWidth = _DomTools$getAbsolute.visibleWidth;
          var panelPlacement = "bottom";
          if (transfer) {
            var btnLeft = left + targetWidth - panelWidth;
            var btnTop = top + targetHeight;
            if (placement === "top") {
              panelPlacement = "top";
              btnTop = top - panelHeight;
            } else if (!placement) {
              if (boundingTop + targetHeight + panelHeight + marginSize > visibleHeight) {
                panelPlacement = "top";
                btnTop = top - panelHeight;
              }
              if (btnTop < marginSize) {
                panelPlacement = "bottom";
                btnTop = top + targetHeight;
              }
            }
            if (btnLeft + panelWidth + marginSize > visibleWidth) {
              btnLeft -= btnLeft + panelWidth + marginSize - visibleWidth;
            }
            if (btnLeft < marginSize) {
              btnLeft = marginSize;
            }
            Object.assign(panelStyle, {
              left: "".concat(btnLeft, "px"),
              right: "auto",
              top: "".concat(btnTop, "px"),
              minWidth: "".concat(targetWidth, "px")
            });
          } else {
            if (placement === "top") {
              panelPlacement = "top";
              panelStyle.bottom = "".concat(targetHeight, "px");
            } else if (!placement) {
              if (boundingTop + targetHeight + panelHeight > visibleHeight) {
                if (boundingTop - targetHeight - panelHeight > marginSize) {
                  panelPlacement = "top";
                  panelStyle.bottom = "".concat(targetHeight, "px");
                }
              }
            }
          }
          _this6.panelStyle = panelStyle;
          _this6.panelPlacement = panelPlacement;
          return _this6.$nextTick();
        }
      });
    },
    focus: function focus5() {
      this.$el.focus();
      return this.$nextTick();
    },
    blur: function blur5() {
      this.$el.blur();
      return this.$nextTick();
    }
  }
};
button$1.default = _default2$5;
Object.defineProperty(button$2, "__esModule", {
  value: true
});
button$2.default = button$2.Button = void 0;
var _button = _interopRequireDefault$z(button$1);
function _interopRequireDefault$z(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var Button = Object.assign(_button.default, {
  install: function install22(Vue2) {
    Vue2.component(_button.default.name, _button.default);
  }
});
button$2.Button = Button;
var _default$j = Button;
button$2.default = _default$j;
var modal$1 = {};
function _typeof$8(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$8 = function _typeof2(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof$8 = function _typeof2(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof$8(obj);
}
Object.defineProperty(modal$1, "__esModule", {
  value: true
});
modal$1.modal = modal$1.default = modal$1.Modal = void 0;
var _xeUtils$5 = _interopRequireDefault$y(xeUtils);
var _modal = _interopRequireWildcard(modal$2);
var _vXETable$4 = _interopRequireDefault$y(vXETable);
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function")
    return null;
  var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
  var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
    return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || _typeof$8(obj) !== "object" && typeof obj !== "function") {
    return { default: obj };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function _interopRequireDefault$y(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var ModalClass = null;
function openModal(opts) {
  var options2 = Object.assign({}, opts, {
    transfer: true
  });
  return new Promise(function(resolve) {
    if (options2 && options2.id && _modal.allActivedModals.some(function(comp) {
      return comp.id === options2.id;
    })) {
      resolve("exist");
    } else {
      var events2 = options2.events || {};
      options2.events = Object.assign({}, events2, {
        hide: function hide2(params) {
          if (events2.hide) {
            events2.hide.call(this, params);
          }
          setTimeout(function() {
            return $modal.$destroy();
          }, $modal.isMsg ? 500 : 100);
          resolve(params.type);
        }
      });
      var $modal = new ModalClass({
        el: document.createElement("div"),
        propsData: options2
      });
      setTimeout(function() {
        if ($modal.isDestroy) {
          $modal.close();
        } else {
          $modal.open();
        }
      });
    }
  });
}
function closeModal(id2) {
  var modals = arguments.length ? [getModal$1(id2)] : _modal.allActivedModals;
  modals.forEach(function($modal) {
    if ($modal) {
      $modal.isDestroy = true;
      $modal.close("close");
    }
  });
  return Promise.resolve();
}
function getModal$1(id2) {
  return _xeUtils$5.default.find(_modal.allActivedModals, function($modal) {
    return $modal.id === id2;
  });
}
var ModalController = {
  get: getModal$1,
  close: closeModal,
  open: openModal
};
var modal = ModalController;
modal$1.modal = modal;
var shortcutTypes = ["alert", "confirm", "message"];
shortcutTypes.forEach(function(type3, index2) {
  var defOpts = index2 === 2 ? {
    mask: false,
    lockView: false,
    showHeader: false
  } : {
    showFooter: true
  };
  defOpts.type = type3;
  defOpts.dblclickZoom = false;
  if (index2 === 1) {
    defOpts.status = "question";
  }
  ModalController[type3] = function(content2, title, options2) {
    var opts = {};
    if (_xeUtils$5.default.isObject(content2)) {
      opts = content2;
    } else {
      if (title) {
        opts = index2 === 2 ? {
          status: title
        } : {
          title
        };
      }
      opts.content = _xeUtils$5.default.toValueString(content2);
    }
    return openModal(Object.assign({
      type: type3
    }, defOpts, opts, options2));
  };
});
var Modal = Object.assign(_modal.default, {
  install: function install23(Vue2) {
    _vXETable$4.default._modal = 1;
    Vue2.component(_modal.default.name, _modal.default);
    ModalClass = Vue2.extend(_modal.default);
    _vXETable$4.default.modal = ModalController;
    if (!Vue2.prototype.$vxe) {
      Vue2.prototype.$vxe = {
        modal: ModalController
      };
    } else {
      Vue2.prototype.$vxe.modal = ModalController;
    }
  }
});
modal$1.Modal = Modal;
var _default$i = Modal;
modal$1.default = _default$i;
var tooltip$2 = {};
var tooltip$1 = {};
Object.defineProperty(tooltip$1, "__esModule", {
  value: true
});
tooltip$1.default = void 0;
var _xeUtils$4 = _interopRequireDefault$x(xeUtils);
var _conf$6 = _interopRequireDefault$x(conf);
var _size$4 = _interopRequireDefault$x(size);
var _tools$6 = tools;
function _interopRequireDefault$x(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
function _defineProperty$4(obj, key, value6) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value: value6, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value6;
  }
  return obj;
}
function updateTipStyle(_vm) {
  var wrapperElem = _vm.$el, tipTarget = _vm.tipTarget, tipStore = _vm.tipStore;
  if (tipTarget) {
    var _DomTools$getDomNode = _tools$6.DomTools.getDomNode(), scrollTop = _DomTools$getDomNode.scrollTop, scrollLeft = _DomTools$getDomNode.scrollLeft, visibleWidth = _DomTools$getDomNode.visibleWidth;
    var _DomTools$getAbsolute = _tools$6.DomTools.getAbsolutePos(tipTarget), top = _DomTools$getAbsolute.top, left = _DomTools$getAbsolute.left;
    var marginSize = 6;
    var offsetHeight = wrapperElem.offsetHeight;
    var offsetWidth = wrapperElem.offsetWidth;
    var tipTop = top - offsetHeight - marginSize;
    var tipLeft = Math.max(marginSize, left + Math.floor((tipTarget.offsetWidth - offsetWidth) / 2));
    if (tipLeft + offsetWidth + marginSize > scrollLeft + visibleWidth) {
      tipLeft = scrollLeft + visibleWidth - offsetWidth - marginSize;
    }
    if (top - offsetHeight < scrollTop + marginSize) {
      tipStore.placement = "bottom";
      tipTop = top + tipTarget.offsetHeight + marginSize;
    }
    tipStore.style.top = "".concat(tipTop, "px");
    tipStore.style.left = "".concat(tipLeft, "px");
    tipStore.arrowStyle.left = "".concat(left - tipLeft + tipTarget.offsetWidth / 2, "px");
  }
}
function showTip(_vm) {
  var $el = _vm.$el, tipStore = _vm.tipStore, zIndex2 = _vm.zIndex;
  var parentNode2 = $el.parentNode;
  if (!parentNode2) {
    document.body.appendChild($el);
  }
  _vm.updateValue(true);
  _vm.updateZindex();
  tipStore.placement = "top";
  tipStore.style = {
    width: "auto",
    left: 0,
    top: 0,
    zIndex: zIndex2 || _vm.tipZindex
  };
  tipStore.arrowStyle = {
    left: "50%"
  };
  return _vm.updatePlacement();
}
var _default2$4 = {
  name: "VxeTooltip",
  mixins: [_size$4.default],
  props: {
    value: Boolean,
    size: {
      type: String,
      default: function _default96() {
        return _conf$6.default.tooltip.size || _conf$6.default.size;
      }
    },
    trigger: {
      type: String,
      default: function _default97() {
        return _conf$6.default.tooltip.trigger;
      }
    },
    theme: {
      type: String,
      default: function _default98() {
        return _conf$6.default.tooltip.theme;
      }
    },
    content: [String, Number],
    zIndex: [String, Number],
    isArrow: {
      type: Boolean,
      default: true
    },
    enterable: Boolean,
    enterDelay: {
      type: Number,
      default: function _default99() {
        return _conf$6.default.tooltip.enterDelay;
      }
    },
    leaveDelay: {
      type: Number,
      default: function _default100() {
        return _conf$6.default.tooltip.leaveDelay;
      }
    },
    leaveMethod: Function
  },
  data: function data16() {
    return {
      isUpdate: false,
      visible: false,
      message: "",
      tipActive: false,
      tipTarget: null,
      tipZindex: 0,
      tipStore: {
        style: {},
        placement: "",
        arrowStyle: null
      }
    };
  },
  watch: {
    content: function content(value6) {
      this.message = value6;
    },
    value: function value4(_value) {
      if (!this.isUpdate) {
        this[_value ? "open" : "close"]();
      }
      this.isUpdate = false;
    }
  },
  created: function created11() {
    var _this = this;
    this.showDelayTip = _xeUtils$4.default.debounce(function() {
      if (_this.tipActive) {
        showTip(_this);
      }
    }, this.enterDelay, {
      leading: false,
      trailing: true
    });
  },
  mounted: function mounted12() {
    var $el = this.$el, trigger3 = this.trigger, content2 = this.content, value6 = this.value;
    var parentNode2 = $el.parentNode;
    var target2;
    this.message = content2;
    this.tipZindex = _tools$6.UtilTools.nextZIndex();
    _xeUtils$4.default.arrayEach($el.children, function(elem, index2) {
      if (index2 > 1) {
        parentNode2.insertBefore(elem, $el);
        if (!target2) {
          target2 = elem;
        }
      }
    });
    parentNode2.removeChild($el);
    this.target = target2;
    if (target2) {
      if (trigger3 === "hover") {
        target2.onmouseleave = this.targetMouseleaveEvent;
        target2.onmouseenter = this.targetMouseenterEvent;
      } else if (trigger3 === "click") {
        target2.onclick = this.clickEvent;
      }
    }
    if (value6) {
      this.open();
    }
  },
  beforeDestroy: function beforeDestroy8() {
    var $el = this.$el, target2 = this.target, trigger3 = this.trigger;
    var parentNode2 = $el.parentNode;
    if (parentNode2) {
      parentNode2.removeChild($el);
    }
    if (target2) {
      if (trigger3 === "hover") {
        target2.onmouseenter = null;
        target2.onmouseleave = null;
      } else if (trigger3 === "click") {
        target2.onclick = null;
      }
    }
  },
  render: function render24(h) {
    var _ref;
    var $scopedSlots = this.$scopedSlots, vSize8 = this.vSize, theme = this.theme, message = this.message, tipActive = this.tipActive, isArrow = this.isArrow, visible2 = this.visible, tipStore = this.tipStore, enterable = this.enterable;
    var on3;
    if (enterable) {
      on3 = {
        mouseenter: this.wrapperMouseenterEvent,
        mouseleave: this.wrapperMouseleaveEvent
      };
    }
    return h("div", {
      class: ["vxe-table--tooltip-wrapper", "theme--".concat(theme), (_ref = {}, _defineProperty$4(_ref, "size--".concat(vSize8), vSize8), _defineProperty$4(_ref, "placement--".concat(tipStore.placement), tipStore.placement), _defineProperty$4(_ref, "is--enterable", enterable), _defineProperty$4(_ref, "is--visible", visible2), _defineProperty$4(_ref, "is--arrow", isArrow), _defineProperty$4(_ref, "is--actived", tipActive), _ref)],
      style: tipStore.style,
      ref: "tipWrapper",
      on: on3
    }, [h("div", {
      class: "vxe-table--tooltip-content"
    }, $scopedSlots.content ? $scopedSlots.content.call(this, {}) : message), h("div", {
      class: "vxe-table--tooltip-arrow",
      style: tipStore.arrowStyle
    })].concat($scopedSlots.default ? $scopedSlots.default.call(this, {}) : []));
  },
  methods: {
    open: function open2(target2, message) {
      return this.toVisible(target2 || this.target, message);
    },
    close: function close2() {
      this.tipTarget = null;
      this.tipActive = false;
      Object.assign(this.tipStore, {
        style: {},
        placement: "",
        arrowStyle: null
      });
      this.updateValue(false);
      return this.$nextTick();
    },
    updateValue: function updateValue(value6) {
      if (value6 !== this.visible) {
        this.visible = value6;
        this.isUpdate = true;
        if (this.$listeners.input) {
          this.$emit("input", this.visible);
        }
      }
    },
    updateZindex: function updateZindex6() {
      if (this.tipZindex < _tools$6.UtilTools.getLastZIndex()) {
        this.tipZindex = _tools$6.UtilTools.nextZIndex();
      }
    },
    toVisible: function toVisible(target2, message) {
      if (target2) {
        var trigger3 = this.trigger, enterDelay = this.enterDelay;
        this.tipActive = true;
        this.tipTarget = target2;
        if (message) {
          this.message = message;
        }
        if (enterDelay && trigger3 === "hover") {
          this.showDelayTip();
        } else {
          return showTip(this);
        }
      }
      return this.$nextTick();
    },
    updatePlacement: function updatePlacement4() {
      var _this2 = this;
      return this.$nextTick().then(function() {
        var wrapperElem = _this2.$el, tipTarget = _this2.tipTarget;
        if (tipTarget && wrapperElem) {
          updateTipStyle(_this2);
          return _this2.$nextTick().then(function() {
            return updateTipStyle(_this2);
          });
        }
      });
    },
    isActived: function isActived() {
      return this.tipActive;
    },
    setActived: function setActived(actived) {
      this.tipActive = !!actived;
    },
    clickEvent: function clickEvent4() {
      this[this.visible ? "close" : "open"]();
    },
    targetMouseenterEvent: function targetMouseenterEvent() {
      this.open();
    },
    targetMouseleaveEvent: function targetMouseleaveEvent() {
      var _this3 = this;
      var trigger3 = this.trigger, enterable = this.enterable, leaveDelay = this.leaveDelay;
      this.tipActive = false;
      if (enterable && trigger3 === "hover") {
        setTimeout(function() {
          if (!_this3.tipActive) {
            _this3.close();
          }
        }, leaveDelay);
      } else {
        this.close();
      }
    },
    wrapperMouseenterEvent: function wrapperMouseenterEvent() {
      this.tipActive = true;
    },
    wrapperMouseleaveEvent: function wrapperMouseleaveEvent(evnt) {
      var _this4 = this;
      var leaveMethod = this.leaveMethod, trigger3 = this.trigger, enterable = this.enterable, leaveDelay = this.leaveDelay;
      this.tipActive = false;
      if (!leaveMethod || leaveMethod({
        $event: evnt
      }) !== false) {
        if (enterable && trigger3 === "hover") {
          setTimeout(function() {
            if (!_this4.tipActive) {
              _this4.close();
            }
          }, leaveDelay);
        }
      }
    }
  }
};
tooltip$1.default = _default2$4;
Object.defineProperty(tooltip$2, "__esModule", {
  value: true
});
tooltip$2.default = tooltip$2.Tooltip = void 0;
var _tooltip = _interopRequireDefault$w(tooltip$1);
var _vXETable$3 = _interopRequireDefault$w(vXETable);
function _interopRequireDefault$w(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var Tooltip = Object.assign(_tooltip.default, {
  install: function install24(Vue2) {
    _vXETable$3.default._tooltip = 1;
    Vue2.component(_tooltip.default.name, _tooltip.default);
  }
});
tooltip$2.Tooltip = Tooltip;
var _default$h = Tooltip;
tooltip$2.default = _default$h;
var form$1 = {};
var form = {};
var util$1 = {};
Object.defineProperty(util$1, "__esModule", {
  value: true
});
util$1.assemItem = assemItem;
util$1.createItem = createItem;
util$1.destroyItem = destroyItem;
util$1.getItemConfig = getItemConfig;
util$1.handleFieldOrItem = void 0;
util$1.isItem = isItem;
var _xeUtils$3 = _interopRequireDefault$v(xeUtils);
_interopRequireDefault$v(vXETable);
function _interopRequireDefault$v(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
function _classCallCheck$2(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$1(target2, props2) {
  for (var i = 0; i < props2.length; i++) {
    var descriptor2 = props2[i];
    descriptor2.enumerable = descriptor2.enumerable || false;
    descriptor2.configurable = true;
    if ("value" in descriptor2)
      descriptor2.writable = true;
    Object.defineProperty(target2, descriptor2.key, descriptor2);
  }
}
function _createClass$1(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$1(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$1(Constructor, staticProps);
  return Constructor;
}
var ItemConfig = /* @__PURE__ */ function() {
  function ItemConfig2($xeform, item) {
    _classCallCheck$2(this, ItemConfig2);
    Object.assign(this, {
      id: _xeUtils$3.default.uniqueId("item_"),
      title: item.title,
      field: item.field,
      span: item.span,
      align: item.align,
      titleAlign: item.titleAlign,
      titleWidth: item.titleWidth,
      titlePrefix: item.titlePrefix,
      titleSuffix: item.titleSuffix,
      titleOverflow: item.titleOverflow,
      resetValue: item.resetValue,
      visible: item.visible,
      visibleMethod: item.visibleMethod,
      folding: item.folding,
      collapseNode: item.collapseNode,
      className: item.className,
      itemRender: item.itemRender,
      showError: false,
      errRule: null,
      slots: item.slots,
      children: []
    });
  }
  _createClass$1(ItemConfig2, [{
    key: "update",
    value: function update5(name, value6) {
      this[name] = value6;
    }
  }]);
  return ItemConfig2;
}();
function isItem(option2) {
  return option2 instanceof ItemConfig;
}
function getItemConfig($xeform, _vm, options2) {
  return isItem(_vm) ? _vm : new ItemConfig($xeform, _vm, options2);
}
var handleFieldOrItem = function handleFieldOrItem2($xeform, fieldOrItem) {
  if (fieldOrItem) {
    return _xeUtils$3.default.isString(fieldOrItem) ? $xeform.getItemByField(fieldOrItem) : fieldOrItem;
  }
  return null;
};
util$1.handleFieldOrItem = handleFieldOrItem;
function createItem($xeform, _vm) {
  return getItemConfig($xeform, _vm);
}
function destroyItem(_vm) {
  var $xeform = _vm.$xeform, itemConfig = _vm.itemConfig;
  var matchObj = _xeUtils$3.default.findTree($xeform.staticItems, function(option2) {
    return option2 === itemConfig;
  });
  if (matchObj) {
    matchObj.items.splice(matchObj.index, 1);
  }
}
function assemItem(_vm) {
  var $el = _vm.$el, $xeform = _vm.$xeform, xeformgather = _vm.xeformgather, itemConfig = _vm.itemConfig;
  var itemGather = xeformgather ? xeformgather.itemConfig : null;
  itemConfig.slots = _vm.$scopedSlots;
  if (itemGather) {
    if (!itemGather.children) {
      itemGather.children = [];
    }
    itemGather.children.splice([].indexOf.call(xeformgather.$el.children, $el), 0, itemConfig);
  } else {
    $xeform.staticItems.splice([].indexOf.call($xeform.$refs.hideItem.children, $el), 0, itemConfig);
  }
}
var render25 = {};
Object.defineProperty(render25, "__esModule", {
  value: true
});
render25.renderTitle = renderTitle;
var _conf$5 = _interopRequireDefault$u(conf);
var _vXETable$2 = _interopRequireDefault$u(vXETable);
var _tools$5 = tools;
function _interopRequireDefault$u(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
function renderPrefixIcon(h, titlePrefix) {
  return h("span", {
    class: "vxe-form--item-title-prefix"
  }, [h("i", {
    class: titlePrefix.icon || _conf$5.default.icon.FORM_PREFIX
  })]);
}
function renderSuffixIcon(h, titleSuffix) {
  return h("span", {
    class: "vxe-form--item-title-suffix"
  }, [h("i", {
    class: titleSuffix.icon || _conf$5.default.icon.FORM_SUFFIX
  })]);
}
function renderTitle(h, _vm, item) {
  var data25 = _vm.data;
  var slots = item.slots, field = item.field, itemRender = item.itemRender, titlePrefix = item.titlePrefix, titleSuffix = item.titleSuffix;
  var compConf = (0, _tools$5.isEnableConf)(itemRender) ? _vXETable$2.default.renderer.get(itemRender.name) : null;
  var params = {
    data: data25,
    property: field,
    item,
    $form: _vm
  };
  var contVNs = [];
  var titVNs = [];
  if (titlePrefix) {
    titVNs.push(titlePrefix.content || titlePrefix.message ? h("vxe-tooltip", {
      props: {
        content: _tools$5.UtilTools.getFuncText(titlePrefix.content || titlePrefix.message),
        enterable: titlePrefix.enterable,
        theme: titlePrefix.theme
      }
    }, [renderPrefixIcon(h, titlePrefix)]) : renderPrefixIcon(h, titlePrefix));
  }
  titVNs.push(h("span", {
    class: "vxe-form--item-title-label"
  }, compConf && compConf.renderItemTitle ? compConf.renderItemTitle(itemRender, params) : slots && slots.title ? _vm.callSlot(slots.title, params, h) : _tools$5.UtilTools.getFuncText(item.title)));
  contVNs.push(h("div", {
    class: "vxe-form--item-title-content"
  }, titVNs));
  var fixVNs = [];
  if (titleSuffix) {
    fixVNs.push(titleSuffix.content || titleSuffix.message ? h("vxe-tooltip", {
      props: {
        content: _tools$5.UtilTools.getFuncText(titleSuffix.content || titleSuffix.message),
        enterable: titleSuffix.enterable,
        theme: titleSuffix.theme
      }
    }, [renderSuffixIcon(h, titleSuffix)]) : renderSuffixIcon(h, titleSuffix));
  }
  contVNs.push(h("div", {
    class: "vxe-form--item-title-postfix"
  }, fixVNs));
  return contVNs;
}
Object.defineProperty(form, "__esModule", {
  value: true
});
form.default = void 0;
var _xeUtils$2 = _interopRequireDefault$t(xeUtils);
var _conf$4 = _interopRequireDefault$t(conf);
var _size$3 = _interopRequireDefault$t(size);
var _vXETable$1 = _interopRequireDefault$t(vXETable);
var _tools$4 = tools;
var _util$4 = util$1;
var _render$1 = render25;
var _utils = utils;
var _dom$6 = dom$1;
function _interopRequireDefault$t(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
function ownKeys(object3, enumerableOnly) {
  var keys3 = Object.keys(object3);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object3);
    if (enumerableOnly) {
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object3, sym).enumerable;
      });
    }
    keys3.push.apply(keys3, symbols);
  }
  return keys3;
}
function _objectSpread(target2) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys(Object(source), true).forEach(function(key) {
        _defineProperty$3(target2, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target2, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function(key) {
        Object.defineProperty(target2, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target2;
}
function _defineProperty$3(obj, key, value6) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value: value6, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value6;
  }
  return obj;
}
function _classCallCheck$1(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target2, props2) {
  for (var i = 0; i < props2.length; i++) {
    var descriptor2 = props2[i];
    descriptor2.enumerable = descriptor2.enumerable || false;
    descriptor2.configurable = true;
    if ("value" in descriptor2)
      descriptor2.writable = true;
    Object.defineProperty(target2, descriptor2.key, descriptor2);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  return Constructor;
}
var Rule = /* @__PURE__ */ function() {
  function Rule2(rule) {
    _classCallCheck$1(this, Rule2);
    Object.assign(this, {
      $options: rule,
      required: rule.required,
      min: rule.min,
      max: rule.min,
      type: rule.type,
      pattern: rule.pattern,
      validator: rule.validator,
      trigger: rule.trigger,
      maxWidth: rule.maxWidth
    });
  }
  _createClass(Rule2, [{
    key: "content",
    get: function get7() {
      return _tools$4.UtilTools.getFuncText(this.$options.content || this.$options.message);
    }
  }, {
    key: "message",
    get: function get7() {
      return this.content;
    }
  }]);
  return Rule2;
}();
function validErrorRuleValue(rule, val) {
  var type3 = rule.type, min2 = rule.min, max2 = rule.max, pattern2 = rule.pattern;
  var isNumType2 = type3 === "number";
  var numVal = isNumType2 ? _xeUtils$2.default.toNumber(val) : _xeUtils$2.default.getSize(val);
  if (isNumType2 && isNaN(val)) {
    return true;
  }
  if (!_xeUtils$2.default.eqNull(min2) && numVal < _xeUtils$2.default.toNumber(min2)) {
    return true;
  }
  if (!_xeUtils$2.default.eqNull(max2) && numVal > _xeUtils$2.default.toNumber(max2)) {
    return true;
  }
  if (pattern2 && !(_xeUtils$2.default.isRegExp(pattern2) ? pattern2 : new RegExp(pattern2)).test(val)) {
    return true;
  }
  return false;
}
function getResetValue(value6, resetValue) {
  if (_xeUtils$2.default.isArray(value6)) {
    resetValue = [];
  }
  return resetValue;
}
function renderItems(h, _vm, itemList) {
  var _e = _vm._e, rules2 = _vm.rules, data25 = _vm.data, collapseAll = _vm.collapseAll, validOpts3 = _vm.validOpts, allTitleOverflow = _vm.titleOverflow;
  return itemList.map(function(item, index2) {
    var slots = item.slots, title = item.title, folding = item.folding, visible2 = item.visible, visibleMethod = item.visibleMethod, field = item.field, collapseNode = item.collapseNode, itemRender = item.itemRender, showError = item.showError, errRule = item.errRule, className = item.className, titleOverflow = item.titleOverflow, children = item.children;
    var compConf = (0, _tools$4.isEnableConf)(itemRender) ? _vXETable$1.default.renderer.get(itemRender.name) : null;
    var span = item.span || _vm.span;
    var align = item.align || _vm.align;
    var titleAlign = item.titleAlign || _vm.titleAlign;
    var titleWidth = item.titleWidth || _vm.titleWidth;
    var itemVisibleMethod = visibleMethod;
    var itemOverflow = _xeUtils$2.default.isUndefined(titleOverflow) || _xeUtils$2.default.isNull(titleOverflow) ? allTitleOverflow : titleOverflow;
    var showEllipsis = itemOverflow === "ellipsis";
    var showTitle = itemOverflow === "title";
    var showTooltip = itemOverflow === true || itemOverflow === "tooltip";
    var hasEllipsis2 = showTitle || showTooltip || showEllipsis;
    var params = {
      data: data25,
      field,
      property: field,
      item,
      $form: _vm
    };
    var isRequired;
    if (visible2 === false) {
      return _e();
    }
    var isGather = children && children.length > 0;
    if (isGather) {
      var childVNs = renderItems(h, _vm, item.children);
      return childVNs.length ? h("div", {
        class: ["vxe-form--gather vxe-row", item.id, span ? "vxe-col--".concat(span, " is--span") : "", className ? _xeUtils$2.default.isFunction(className) ? className(params) : className : ""]
      }, childVNs) : _e();
    }
    if (!itemVisibleMethod && compConf && compConf.itemVisibleMethod) {
      itemVisibleMethod = compConf.itemVisibleMethod;
    }
    if (rules2) {
      var itemRules = rules2[field];
      if (itemRules) {
        isRequired = itemRules.some(function(rule) {
          return rule.required;
        });
      }
    }
    var contentVNs = [];
    if (slots && slots.default) {
      contentVNs = _vm.callSlot(slots.default, params, h);
    } else if (compConf && compConf.renderItemContent) {
      contentVNs = compConf.renderItemContent.call(_vm, h, itemRender, params);
    } else if (compConf && compConf.renderItem) {
      contentVNs = compConf.renderItem.call(_vm, h, itemRender, params);
    } else if (field) {
      contentVNs = ["".concat(_xeUtils$2.default.get(data25, field))];
    }
    var ons = showTooltip ? {
      mouseenter: function mouseenter(evnt) {
        _vm.triggerHeaderHelpEvent(evnt, params);
      },
      mouseleave: _vm.handleTargetLeaveEvent
    } : {};
    return h("div", {
      class: ["vxe-form--item", item.id, span ? "vxe-col--".concat(span, " is--span") : null, className ? _xeUtils$2.default.isFunction(className) ? className(params) : className : "", {
        "is--title": title,
        "is--required": isRequired,
        "is--hidden": folding && collapseAll,
        "is--active": !itemVisibleMethod || itemVisibleMethod(params),
        "is--error": showError
      }],
      key: index2
    }, [h("div", {
      class: "vxe-form--item-inner"
    }, [title || slots && slots.title ? h("div", {
      class: ["vxe-form--item-title", titleAlign ? "align--".concat(titleAlign) : null, {
        "is--ellipsis": hasEllipsis2
      }],
      style: titleWidth ? {
        width: isNaN(titleWidth) ? titleWidth : "".concat(titleWidth, "px")
      } : null,
      attrs: {
        title: showTitle ? _tools$4.UtilTools.getFuncText(title) : null
      },
      on: ons
    }, (0, _render$1.renderTitle)(h, _vm, item)) : null, h("div", {
      class: ["vxe-form--item-content", align ? "align--".concat(align) : null]
    }, contentVNs.concat([collapseNode ? h("div", {
      class: "vxe-form--item-trigger-node",
      on: {
        click: _vm.toggleCollapseEvent
      }
    }, [h("span", {
      class: "vxe-form--item-trigger-text"
    }, collapseAll ? _conf$4.default.i18n("vxe.form.unfolding") : _conf$4.default.i18n("vxe.form.folding")), h("i", {
      class: ["vxe-form--item-trigger-icon", collapseAll ? _conf$4.default.icon.FORM_FOLDING : _conf$4.default.icon.FORM_UNFOLDING]
    })]) : null, errRule && validOpts3.showMessage ? h("div", {
      class: "vxe-form--item-valid",
      style: errRule.maxWidth ? {
        width: "".concat(errRule.maxWidth, "px")
      } : null
    }, errRule.content) : null]))])]);
  });
}
var _default2$3 = {
  name: "VxeForm",
  mixins: [_size$3.default],
  props: {
    collapseStatus: {
      type: Boolean,
      default: true
    },
    loading: Boolean,
    data: Object,
    size: {
      type: String,
      default: function _default101() {
        return _conf$4.default.form.size || _conf$4.default.size;
      }
    },
    span: {
      type: [String, Number],
      default: function _default102() {
        return _conf$4.default.form.span;
      }
    },
    align: {
      type: String,
      default: function _default103() {
        return _conf$4.default.form.align;
      }
    },
    titleAlign: {
      type: String,
      default: function _default104() {
        return _conf$4.default.form.titleAlign;
      }
    },
    titleWidth: {
      type: [String, Number],
      default: function _default105() {
        return _conf$4.default.form.titleWidth;
      }
    },
    titleColon: {
      type: Boolean,
      default: function _default106() {
        return _conf$4.default.form.titleColon;
      }
    },
    titleAsterisk: {
      type: Boolean,
      default: function _default107() {
        return _conf$4.default.form.titleAsterisk;
      }
    },
    titleOverflow: {
      type: [Boolean, String],
      default: null
    },
    className: [String, Function],
    items: Array,
    rules: Object,
    preventSubmit: {
      type: Boolean,
      default: function _default108() {
        return _conf$4.default.form.preventSubmit;
      }
    },
    validConfig: Object,
    customLayout: {
      type: Boolean,
      default: function _default109() {
        return _conf$4.default.form.customLayout;
      }
    }
  },
  data: function data17() {
    return {
      collapseAll: this.collapseStatus,
      staticItems: [],
      formItems: [],
      tooltipTimeout: null,
      tooltipActive: false,
      tooltipStore: {
        item: null,
        visible: false
      }
    };
  },
  provide: function provide8() {
    return {
      $xeform: this
    };
  },
  computed: {
    validOpts: function validOpts2() {
      return Object.assign({}, _conf$4.default.form.validConfig, this.validConfig);
    },
    tooltipOpts: function tooltipOpts2() {
      var opts = Object.assign({
        leaveDelay: 300
      }, _conf$4.default.form.tooltipConfig, this.tooltipConfig);
      if (opts.enterable) {
        opts.leaveMethod = this.handleTooltipLeaveMethod;
      }
      return opts;
    }
  },
  watch: {
    staticItems: function staticItems(value6) {
      this.formItems = value6;
    },
    items: function items(value6) {
      this.loadItem(value6);
    },
    collapseStatus: function collapseStatus(value6) {
      this.collapseAll = !!value6;
    }
  },
  created: function created12() {
    var _this = this;
    this.$nextTick(function() {
      var items2 = _this.items;
      if (items2) {
        _this.loadItem(items2);
      }
    });
  },
  render: function render26(h) {
    var _ref;
    var _e = this._e, loading = this.loading, className = this.className, data25 = this.data, vSize8 = this.vSize, tooltipOpts3 = this.tooltipOpts, formItems = this.formItems, customLayout = this.customLayout;
    var hasUseTooltip = _vXETable$1.default._tooltip;
    return h("form", {
      class: ["vxe-form", className ? _xeUtils$2.default.isFunction(className) ? className({
        items: formItems,
        data: data25,
        $form: this
      }) : className : "", (_ref = {}, _defineProperty$3(_ref, "size--".concat(vSize8), vSize8), _defineProperty$3(_ref, "is--colon", this.titleColon), _defineProperty$3(_ref, "is--asterisk", this.titleAsterisk), _defineProperty$3(_ref, "is--loading", loading), _ref)],
      on: {
        submit: this.submitEvent,
        reset: this.resetEvent
      }
    }, [
      h("div", {
        class: "vxe-form--wrapper vxe-row"
      }, customLayout ? this.$slots.default : renderItems(h, this, formItems)),
      h("div", {
        class: "vxe-form-slots",
        ref: "hideItem"
      }, customLayout ? [] : this.$slots.default),
      h("div", {
        class: ["vxe-loading", {
          "is--visible": loading
        }]
      }, [h("div", {
        class: "vxe-loading--spinner"
      })]),
      hasUseTooltip ? h("vxe-tooltip", _objectSpread({
        ref: "tooltip"
      }, tooltipOpts3)) : _e()
    ]);
  },
  methods: {
    callSlot: function callSlot4(slotFunc, params, h) {
      if (slotFunc) {
        var $scopedSlots = this.$scopedSlots;
        if (_xeUtils$2.default.isString(slotFunc)) {
          slotFunc = $scopedSlots[slotFunc] || null;
        }
        if (_xeUtils$2.default.isFunction(slotFunc)) {
          return slotFunc.call(this, params, h);
        }
      }
      return [];
    },
    loadItem: function loadItem(list2) {
      var _this2 = this;
      this.staticItems = _xeUtils$2.default.mapTree(list2, function(item) {
        return (0, _util$4.createItem)(_this2, item);
      }, {
        children: "children"
      });
      return this.$nextTick();
    },
    getItems: function getItems() {
      var itemList = [];
      _xeUtils$2.default.eachTree(this.formItems, function(item) {
        itemList.push(item);
      }, {
        children: "children"
      });
      return itemList;
    },
    getItemByField: function getItemByField(field) {
      var rest = _xeUtils$2.default.findTree(this.formItems, function(item) {
        return item.field === field;
      }, {
        children: "children"
      });
      return rest ? rest.item : null;
    },
    toggleCollapse: function toggleCollapse() {
      var status = !this.collapseAll;
      this.collapseAll = status;
      this.$emit("update:collapseStatus", status);
      return this.$nextTick();
    },
    toggleCollapseEvent: function toggleCollapseEvent(evnt) {
      this.toggleCollapse();
      var status = this.collapseAll;
      this.$emit("toggle-collapse", {
        status,
        collapse: status,
        data: this.data,
        $form: this,
        $event: evnt
      }, evnt);
      this.$emit("collapse", {
        status,
        collapse: status,
        data: this.data,
        $form: this,
        $event: evnt
      }, evnt);
    },
    submitEvent: function submitEvent2(evnt) {
      var _this3 = this;
      evnt.preventDefault();
      if (!this.preventSubmit) {
        this.clearValidate();
        this.beginValidate(this.getItems()).then(function() {
          _this3.$emit("submit", {
            data: _this3.data,
            $form: _this3,
            $event: evnt
          });
        }).catch(function(errMap) {
          _this3.$emit("submit-invalid", {
            data: _this3.data,
            errMap,
            $form: _this3,
            $event: evnt
          });
        });
      }
    },
    reset: function reset() {
      var _this4 = this;
      var data25 = this.data;
      if (data25) {
        var itemList = this.getItems();
        itemList.forEach(function(item) {
          var field = item.field, resetValue = item.resetValue, itemRender = item.itemRender;
          if ((0, _tools$4.isEnableConf)(itemRender)) {
            var compConf = _vXETable$1.default.renderer.get(itemRender.name);
            if (compConf && compConf.itemResetMethod) {
              compConf.itemResetMethod({
                data: data25,
                field,
                property: field,
                item,
                $form: _this4
              });
            } else if (field) {
              _xeUtils$2.default.set(data25, field, resetValue === null ? getResetValue(_xeUtils$2.default.get(data25, field), void 0) : resetValue);
            }
          }
        });
      }
      return this.clearValidate();
    },
    resetEvent: function resetEvent2(evnt) {
      evnt.preventDefault();
      this.reset();
      this.$emit("reset", {
        data: this.data,
        $form: this,
        $event: evnt
      });
    },
    handleTooltipLeaveMethod: function handleTooltipLeaveMethod2() {
      var _this5 = this;
      var tooltipOpts3 = this.tooltipOpts;
      setTimeout(function() {
        if (!_this5.tooltipActive) {
          _this5.closeTooltip();
        }
      }, tooltipOpts3.leaveDelay);
      return false;
    },
    closeTooltip: function closeTooltip2() {
      var tooltipStore = this.tooltipStore;
      var $tooltip = this.$refs.tooltip;
      if (tooltipStore.visible) {
        Object.assign(tooltipStore, {
          item: null,
          visible: false
        });
        if ($tooltip) {
          $tooltip.close();
        }
      }
      return this.$nextTick();
    },
    triggerHeaderHelpEvent: function triggerHeaderHelpEvent2(evnt, params) {
      var item = params.item;
      var tooltipStore = this.tooltipStore;
      var $tooltip = this.$refs.tooltip;
      var overflowElem = evnt.currentTarget.children[0];
      var content2 = (overflowElem.textContent || "").trim();
      var isCellOverflow = overflowElem.scrollWidth > overflowElem.clientWidth;
      clearTimeout(this.tooltipTimeout);
      this.tooltipActive = true;
      this.closeTooltip();
      if (content2 && isCellOverflow) {
        Object.assign(tooltipStore, {
          item,
          visible: true
        });
        if ($tooltip) {
          $tooltip.open(overflowElem, content2);
        }
      }
    },
    handleTargetLeaveEvent: function handleTargetLeaveEvent2() {
      var _this6 = this;
      var tooltipOpts3 = this.tooltipOpts;
      var $tooltip = this.$refs.tooltip;
      this.tooltipActive = false;
      if ($tooltip) {
        $tooltip.setActived(false);
      }
      if (tooltipOpts3.enterable) {
        this.tooltipTimeout = setTimeout(function() {
          $tooltip = _this6.$refs.tooltip;
          if ($tooltip && !$tooltip.isActived()) {
            _this6.closeTooltip();
          }
        }, tooltipOpts3.leaveDelay);
      } else {
        this.closeTooltip();
      }
    },
    clearValidate: function clearValidate(fieldOrItem) {
      if (fieldOrItem) {
        var item = (0, _util$4.handleFieldOrItem)(this, fieldOrItem);
        if (item) {
          item.showError = false;
        }
      } else {
        this.getItems().forEach(function(item2) {
          item2.showError = false;
        });
      }
      return this.$nextTick();
    },
    validate: function validate(callback) {
      this.clearValidate();
      return this.beginValidate(this.getItems(), "", callback);
    },
    validateField: function validateField(fieldOrItem, callback) {
      var item = (0, _util$4.handleFieldOrItem)(this, fieldOrItem);
      return this.beginValidate(item ? [item] : [], "", callback);
    },
    beginValidate: function beginValidate2(itemList, type3, callback) {
      var _this7 = this;
      var data25 = this.data, formRules = this.rules, validOpts3 = this.validOpts;
      var validRest = {};
      var validFields = [];
      var itemValids = [];
      clearTimeout(this.showErrTime);
      if (data25 && formRules) {
        itemList.forEach(function(item) {
          var field = item.field;
          if (field) {
            itemValids.push(_this7.validItemRules(type3 || "all", field).then(function() {
              item.errRule = null;
            }).catch(function(_ref2) {
              var rule = _ref2.rule, rules2 = _ref2.rules;
              var rest = {
                rule,
                rules: rules2,
                data: data25,
                field,
                property: field,
                $form: _this7
              };
              if (!validRest[field]) {
                validRest[field] = [];
              }
              validRest[field].push(rest);
              validFields.push(field);
              item.errRule = rule;
              return Promise.reject(rest);
            }));
          }
        });
        return Promise.all(itemValids).then(function() {
          if (callback) {
            callback();
          }
        }).catch(function() {
          return new Promise(function(resolve) {
            _this7.showErrTime = setTimeout(function() {
              itemList.forEach(function(item) {
                if (item.errRule) {
                  item.showError = true;
                }
              });
            }, 20);
            if (validOpts3.autoPos) {
              _this7.$nextTick(function() {
                _this7.handleFocus(validFields);
              });
            }
            if (callback) {
              callback(validRest);
              resolve();
            } else {
              resolve(validRest);
            }
          });
        });
      }
      if (callback) {
        callback();
      }
      return Promise.resolve();
    },
    validItemRules: function validItemRules(validType, property2, val) {
      var _this8 = this;
      var data25 = this.data, formRules = this.rules;
      var errorRules = [];
      var syncVailds = [];
      if (property2 && formRules) {
        var rules2 = _xeUtils$2.default.get(formRules, property2);
        if (rules2) {
          var itemValue = _xeUtils$2.default.isUndefined(val) ? _xeUtils$2.default.get(data25, property2) : val;
          rules2.forEach(function(rule) {
            var type3 = rule.type, trigger3 = rule.trigger, required2 = rule.required;
            if (validType === "all" || !trigger3 || validType === rule.trigger) {
              if (_xeUtils$2.default.isFunction(rule.validator)) {
                var customValid = rule.validator({
                  itemValue,
                  rule,
                  rules: rules2,
                  data: data25,
                  field: property2,
                  property: property2,
                  $form: _this8
                });
                if (customValid) {
                  if (_xeUtils$2.default.isError(customValid)) {
                    errorRules.push(new Rule({
                      type: "custom",
                      trigger: trigger3,
                      content: customValid.message,
                      rule: new Rule(rule)
                    }));
                  } else if (customValid.catch) {
                    syncVailds.push(customValid.catch(function(e) {
                      errorRules.push(new Rule({
                        type: "custom",
                        trigger: trigger3,
                        content: e ? e.message : rule.content || rule.message,
                        rule: new Rule(rule)
                      }));
                    }));
                  }
                }
              } else {
                var isArrType = type3 === "array";
                var hasEmpty = isArrType ? !_xeUtils$2.default.isArray(itemValue) || !itemValue.length : (0, _utils.eqEmptyValue)(itemValue);
                if (required2 ? hasEmpty || validErrorRuleValue(rule, itemValue) : !hasEmpty && validErrorRuleValue(rule, itemValue)) {
                  errorRules.push(new Rule(rule));
                }
              }
            }
          });
        }
      }
      return Promise.all(syncVailds).then(function() {
        if (errorRules.length) {
          var rest = {
            rules: errorRules,
            rule: errorRules[0]
          };
          return Promise.reject(rest);
        }
      });
    },
    handleFocus: function handleFocus2(fields) {
      var _this9 = this;
      var $el = this.$el;
      fields.some(function(property2, index2) {
        var item = _this9.getItemByField(property2);
        if (item && (0, _tools$4.isEnableConf)(item.itemRender)) {
          var itemRender = item.itemRender;
          var compConf = _vXETable$1.default.renderer.get(itemRender.name);
          var inputElem;
          if (!index2) {
            _tools$4.DomTools.scrollToView($el.querySelector(".".concat(item.id)));
          }
          if (itemRender.autofocus) {
            inputElem = $el.querySelector(".".concat(item.id, " ").concat(itemRender.autofocus));
          }
          if (!inputElem && compConf && compConf.autofocus) {
            inputElem = $el.querySelector(".".concat(item.id, " ").concat(compConf.autofocus));
          }
          if (inputElem) {
            inputElem.focus();
            if (_dom$6.browse.msie) {
              var textRange = inputElem.createTextRange();
              textRange.collapse(false);
              textRange.select();
            }
            return true;
          }
        }
      });
    },
    updateStatus: function updateStatus2(scope, itemValue) {
      var _this10 = this;
      var property2 = scope.property;
      if (property2) {
        this.validItemRules("change", property2, itemValue).then(function() {
          _this10.clearValidate(property2);
        }).catch(function(_ref3) {
          var rule = _ref3.rule;
          var item = _this10.getItemByField(property2);
          if (item) {
            item.showError = true;
            item.errRule = rule;
          }
        });
      }
    }
  }
};
form.default = _default2$3;
Object.defineProperty(form$1, "__esModule", {
  value: true
});
form$1.default = form$1.Form = void 0;
var _form = _interopRequireDefault$s(form);
function _interopRequireDefault$s(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var Form = Object.assign(_form.default, {
  install: function install25(Vue2) {
    Vue2.component(_form.default.name, _form.default);
  }
});
form$1.Form = Form;
var _default$g = Form;
form$1.default = _default$g;
var formItem$1 = {};
var formItem = {};
Object.defineProperty(formItem, "__esModule", {
  value: true
});
formItem.default = void 0;
var _xeUtils$1 = _interopRequireDefault$r(xeUtils);
var _conf$3 = _interopRequireDefault$r(conf);
var _vXETable = _interopRequireDefault$r(vXETable);
var _tools$3 = tools;
var _util$3 = util$1;
var _render = render25;
function _interopRequireDefault$r(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var props$2 = {
  title: String,
  field: String,
  size: String,
  span: [String, Number],
  align: String,
  titleAlign: String,
  titleWidth: [String, Number],
  className: [String, Function],
  titleOverflow: {
    type: [Boolean, String],
    default: null
  },
  titlePrefix: Object,
  titleSuffix: Object,
  resetValue: {
    default: null
  },
  visible: {
    type: Boolean,
    default: null
  },
  visibleMethod: Function,
  folding: Boolean,
  collapseNode: Boolean,
  itemRender: Object
};
var watch$1 = {};
Object.keys(props$2).forEach(function(name) {
  watch$1[name] = function(value6) {
    this.itemConfig.update(name, value6);
  };
});
var renderItem = function renderItem2(h, _vm, item, slots) {
  var rules2 = _vm.rules, data25 = _vm.data, collapseAll = _vm.collapseAll, validOpts3 = _vm.validOpts, allTitleOverflow = _vm.titleOverflow;
  var title = item.title, folding = item.folding, visible2 = item.visible, visibleMethod = item.visibleMethod, field = item.field, collapseNode = item.collapseNode, itemRender = item.itemRender, showError = item.showError, errRule = item.errRule, className = item.className, titleOverflow = item.titleOverflow;
  var compConf = (0, _tools$3.isEnableConf)(itemRender) ? _vXETable.default.renderer.get(itemRender.name) : null;
  var span = item.span || _vm.span;
  var align = item.align || _vm.align;
  var titleAlign = item.titleAlign || _vm.titleAlign;
  var titleWidth = item.titleWidth || _vm.titleWidth;
  var itemVisibleMethod = visibleMethod;
  var itemOverflow = _xeUtils$1.default.isUndefined(titleOverflow) || _xeUtils$1.default.isNull(titleOverflow) ? allTitleOverflow : titleOverflow;
  var showEllipsis = itemOverflow === "ellipsis";
  var showTitle = itemOverflow === "title";
  var showTooltip = itemOverflow === true || itemOverflow === "tooltip";
  var hasEllipsis2 = showTitle || showTooltip || showEllipsis;
  var params = {
    data: data25,
    property: field,
    item,
    $form: _vm
  };
  var isRequired;
  if (!itemVisibleMethod && compConf && compConf.itemVisibleMethod) {
    itemVisibleMethod = compConf.itemVisibleMethod;
  }
  if (rules2) {
    var itemRules = rules2[field];
    if (itemRules) {
      isRequired = itemRules.some(function(rule) {
        return rule.required;
      });
    }
  }
  var contentVNs = [];
  if (slots && slots.default) {
    contentVNs = _vm.callSlot(slots.default, params, h);
  } else if (compConf && compConf.renderItemContent) {
    contentVNs = compConf.renderItemContent.call(_vm, h, itemRender, params);
  } else if (compConf && compConf.renderItem) {
    contentVNs = compConf.renderItem.call(_vm, h, itemRender, params);
  } else if (field) {
    contentVNs = ["".concat(_xeUtils$1.default.get(data25, field))];
  }
  var ons = showTooltip ? {
    mouseenter: function mouseenter(evnt) {
      _vm.triggerHeaderHelpEvent(evnt, params);
    },
    mouseleave: _vm.handleTargetLeaveEvent
  } : {};
  return h("div", {
    class: ["vxe-form--item", item.id, span ? "vxe-col--".concat(span, " is--span") : null, className ? _xeUtils$1.default.isFunction(className) ? className(params) : className : "", {
      "is--title": title,
      "is--required": isRequired,
      "is--hidden": visible2 === false || folding && collapseAll,
      "is--active": !itemVisibleMethod || itemVisibleMethod(params),
      "is--error": showError
    }]
  }, [h("div", {
    class: "vxe-form--item-inner"
  }, [title || slots && slots.title ? h("div", {
    class: ["vxe-form--item-title", titleAlign ? "align--".concat(titleAlign) : null, {
      "is--ellipsis": hasEllipsis2
    }],
    style: titleWidth ? {
      width: isNaN(titleWidth) ? titleWidth : "".concat(titleWidth, "px")
    } : null,
    attrs: {
      title: showTitle ? _tools$3.UtilTools.getFuncText(title) : null
    },
    on: ons
  }, (0, _render.renderTitle)(h, _vm, item)) : null, h("div", {
    class: ["vxe-form--item-content", align ? "align--".concat(align) : null]
  }, contentVNs.concat([collapseNode ? h("div", {
    class: "vxe-form--item-trigger-node",
    on: {
      click: _vm.toggleCollapseEvent
    }
  }, [h("span", {
    class: "vxe-form--item-trigger-text"
  }, collapseAll ? _conf$3.default.i18n("vxe.form.unfolding") : _conf$3.default.i18n("vxe.form.folding")), h("i", {
    class: ["vxe-form--item-trigger-icon", collapseAll ? _conf$3.default.icon.FORM_FOLDING : _conf$3.default.icon.FORM_UNFOLDING]
  })]) : null, errRule && validOpts3.showMessage ? h("div", {
    class: "vxe-form--item-valid",
    style: errRule.maxWidth ? {
      width: "".concat(errRule.maxWidth, "px")
    } : null
  }, errRule.message) : null]))])]);
};
var _default$f = {
  name: "VxeFormItem",
  props: props$2,
  inject: {
    $xeform: {
      default: null
    },
    xeformgather: {
      default: null
    }
  },
  data: function data18() {
    return {
      itemConfig: null
    };
  },
  watch: watch$1,
  mounted: function mounted13() {
    (0, _util$3.assemItem)(this);
  },
  created: function created13() {
    this.itemConfig = (0, _util$3.createItem)(this.$xeform, this);
  },
  destroyed: function destroyed12() {
    (0, _util$3.destroyItem)(this);
  },
  render: function render27(h) {
    var $xeform = this.$xeform;
    return $xeform && $xeform.customLayout ? renderItem(h, $xeform, this.itemConfig, this.$scopedSlots) : h("div");
  }
};
formItem.default = _default$f;
Object.defineProperty(formItem$1, "__esModule", {
  value: true
});
formItem$1.default = formItem$1.FormItem = void 0;
var _formItem$1 = _interopRequireDefault$q(formItem);
function _interopRequireDefault$q(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var FormItem = Object.assign(_formItem$1.default, {
  install: function install26(Vue2) {
    Vue2.component(_formItem$1.default.name, _formItem$1.default);
  }
});
formItem$1.FormItem = FormItem;
var _default$e = FormItem;
formItem$1.default = _default$e;
var formGather$1 = {};
var formGather = {};
Object.defineProperty(formGather, "__esModule", {
  value: true
});
formGather.default = void 0;
var _formItem = _interopRequireDefault$p(formItem);
function _interopRequireDefault$p(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var _default$d = {
  name: "VxeFormGather",
  extends: _formItem.default,
  provide: function provide9() {
    return {
      xeformgather: this
    };
  },
  created: function created14() {
  },
  render: function render28(h) {
    return h("div", this.$slots.default);
  }
};
formGather.default = _default$d;
Object.defineProperty(formGather$1, "__esModule", {
  value: true
});
formGather$1.default = formGather$1.FormGather = void 0;
var _formGather = _interopRequireDefault$o(formGather);
function _interopRequireDefault$o(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var FormGather = Object.assign(_formGather.default, {
  install: function install27(Vue2) {
    Vue2.component(_formGather.default.name, _formGather.default);
  }
});
formGather$1.FormGather = FormGather;
var _default$c = FormGather;
formGather$1.default = _default$c;
var select$1 = {};
var optgroup$1 = {};
Object.defineProperty(optgroup$1, "__esModule", {
  value: true
});
optgroup$1.default = void 0;
var _util$2 = util$3;
var props$1 = {
  label: {
    type: [String, Number, Boolean],
    default: ""
  },
  visible: {
    type: Boolean,
    default: null
  },
  className: [String, Function],
  disabled: Boolean
};
var watch = {};
Object.keys(props$1).forEach(function(name) {
  watch[name] = function(value6) {
    this.optionConfig.update(name, value6);
  };
});
var _default$b = {
  name: "VxeOptgroup",
  props: props$1,
  provide: function provide10() {
    return {
      $xeoptgroup: this
    };
  },
  inject: {
    $xeselect: {
      default: null
    }
  },
  computed: {
    vSize: function vSize7() {
      return this.size || this.$parent.size || this.$parent.vSize;
    }
  },
  watch,
  mounted: function mounted14() {
    (0, _util$2.assemOption)(this);
  },
  created: function created15() {
    this.optionConfig = (0, _util$2.createOption)(this.$xeselect, this);
  },
  destroyed: function destroyed13() {
    (0, _util$2.destroyOption)(this);
  },
  render: function render29(h) {
    return h("div", this.$slots.default);
  }
};
optgroup$1.default = _default$b;
Object.defineProperty(select$1, "__esModule", {
  value: true
});
select$1.default = select$1.Select = void 0;
var _select = _interopRequireDefault$n(select$2);
var _option$1 = _interopRequireDefault$n(option$2);
var _optgroup$1 = _interopRequireDefault$n(optgroup$1);
function _interopRequireDefault$n(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var Select = Object.assign(_select.default, {
  Option: _option$1.default,
  Optgroup: _optgroup$1.default,
  install: function install28(Vue2) {
    Vue2.component(_select.default.name, _select.default);
    Vue2.component(_option$1.default.name, _option$1.default);
    Vue2.component(_optgroup$1.default.name, _optgroup$1.default);
  }
});
select$1.Select = Select;
var _default$a = Select;
select$1.default = _default$a;
var optgroup = {};
Object.defineProperty(optgroup, "__esModule", {
  value: true
});
optgroup.default = optgroup.Optgroup = void 0;
var _optgroup = _interopRequireDefault$m(optgroup$1);
function _interopRequireDefault$m(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var Optgroup = Object.assign(_optgroup.default, {
  install: function install29(Vue2) {
    Vue2.component(_optgroup.default.name, _optgroup.default);
  }
});
optgroup.Optgroup = Optgroup;
var _default$9 = Optgroup;
optgroup.default = _default$9;
var option$1 = {};
Object.defineProperty(option$1, "__esModule", {
  value: true
});
option$1.default = option$1.Option = void 0;
var _option = _interopRequireDefault$l(option$2);
function _interopRequireDefault$l(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var Option = Object.assign(_option.default, {
  install: function install30(Vue2) {
    Vue2.component(_option.default.name, _option.default);
  }
});
option$1.Option = Option;
var _default$8 = Option;
option$1.default = _default$8;
var _switch$2 = {};
var _switch$1 = {};
Object.defineProperty(_switch$1, "__esModule", {
  value: true
});
_switch$1.default = void 0;
var _tools$2 = tools;
var _conf$2 = _interopRequireDefault$k(conf);
var _size$2 = _interopRequireDefault$k(size);
var _dom$5 = dom$1;
function _interopRequireDefault$k(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
function _defineProperty$2(obj, key, value6) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value: value6, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value6;
  }
  return obj;
}
var _default2$2 = {
  name: "VxeSwitch",
  mixins: [_size$2.default],
  props: {
    value: [String, Number, Boolean],
    disabled: Boolean,
    className: String,
    size: {
      type: String,
      default: function _default110() {
        return _conf$2.default.switch.size || _conf$2.default.size;
      }
    },
    openLabel: String,
    closeLabel: String,
    openValue: {
      type: [String, Number, Boolean],
      default: true
    },
    closeValue: {
      type: [String, Number, Boolean],
      default: false
    },
    openIcon: String,
    closeIcon: String
  },
  data: function data19() {
    return {
      isActivated: false,
      hasAnimat: false,
      offsetLeft: 0
    };
  },
  computed: {
    isChecked: function isChecked() {
      return this.value === this.openValue;
    },
    onShowLabel: function onShowLabel() {
      return _tools$2.UtilTools.getFuncText(this.openLabel);
    },
    offShowLabel: function offShowLabel() {
      return _tools$2.UtilTools.getFuncText(this.closeLabel);
    },
    styles: function styles() {
      return _dom$5.browse.msie && this.isChecked ? {
        left: "".concat(this.offsetLeft, "px")
      } : null;
    }
  },
  created: function created16() {
    var _this = this;
    if (_dom$5.browse.msie) {
      this.$nextTick(function() {
        return _this.updateStyle();
      });
    }
  },
  render: function render30(h) {
    var _ref;
    var isChecked2 = this.isChecked, vSize8 = this.vSize, className = this.className, disabled = this.disabled, openIcon = this.openIcon, closeIcon = this.closeIcon;
    return h("div", {
      class: ["vxe-switch", className, isChecked2 ? "is--on" : "is--off", (_ref = {}, _defineProperty$2(_ref, "size--".concat(vSize8), vSize8), _defineProperty$2(_ref, "is--disabled", disabled), _defineProperty$2(_ref, "is--animat", this.hasAnimat), _ref)]
    }, [h("button", {
      ref: "btn",
      class: "vxe-switch--button",
      attrs: {
        type: "button",
        disabled
      },
      on: {
        click: this.clickEvent,
        focus: this.focusEvent,
        blur: this.blurEvent
      }
    }, [h("span", {
      class: "vxe-switch--label vxe-switch--label-on"
    }, [openIcon ? h("i", {
      class: ["vxe-switch--label-icon", openIcon]
    }) : null, this.onShowLabel]), h("span", {
      class: "vxe-switch--label vxe-switch--label-off"
    }, [closeIcon ? h("i", {
      class: ["vxe-switch--label-icon", closeIcon]
    }) : null, this.offShowLabel]), h("span", {
      class: "vxe-switch--icon",
      style: this.styles
    })])]);
  },
  methods: {
    updateStyle: function updateStyle3() {
      this.hasAnimat = true;
      this.offsetLeft = this.$refs.btn.offsetWidth;
    },
    clickEvent: function clickEvent5(evnt) {
      var _this2 = this;
      if (!this.disabled) {
        clearTimeout(this.activeTimeout);
        var value6 = this.isChecked ? this.closeValue : this.openValue;
        this.hasAnimat = true;
        if (_dom$5.browse.msie) {
          this.updateStyle();
        }
        this.$emit("input", value6);
        this.$emit("change", {
          value: value6,
          $event: evnt
        });
        this.activeTimeout = setTimeout(function() {
          _this2.hasAnimat = false;
        }, 400);
      }
    },
    focusEvent: function focusEvent3(evnt) {
      this.isActivated = true;
      this.$emit("focus", {
        value: this.value,
        $event: evnt
      });
    },
    blurEvent: function blurEvent4(evnt) {
      this.isActivated = false;
      this.$emit("blur", {
        value: this.value,
        $event: evnt
      });
    }
  }
};
_switch$1.default = _default2$2;
Object.defineProperty(_switch$2, "__esModule", {
  value: true
});
_switch$2.default = _switch$2.Switch = void 0;
var _switch = _interopRequireDefault$j(_switch$1);
function _interopRequireDefault$j(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var Switch = Object.assign(_switch.default, {
  install: function install31(Vue2) {
    Vue2.component(_switch.default.name, _switch.default);
  }
});
_switch$2.Switch = Switch;
var _default$7 = Switch;
_switch$2.default = _default$7;
var list$1 = {};
var list = {};
Object.defineProperty(list, "__esModule", {
  value: true
});
list.default = void 0;
var _xeUtils = _interopRequireDefault$i(xeUtils);
var _conf$1 = _interopRequireDefault$i(conf);
var _size$1 = _interopRequireDefault$i(size);
var _tools$1 = tools;
var _dom$4 = dom$1;
function _interopRequireDefault$i(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var _default2$1 = {
  name: "VxeList",
  mixins: [_size$1.default],
  props: {
    data: Array,
    height: [Number, String],
    maxHeight: [Number, String],
    loading: Boolean,
    className: [String, Function],
    size: {
      type: String,
      default: function _default111() {
        return _conf$1.default.list.size || _conf$1.default.size;
      }
    },
    autoResize: {
      type: Boolean,
      default: function _default112() {
        return _conf$1.default.list.autoResize;
      }
    },
    syncResize: [Boolean, String, Number],
    scrollY: Object
  },
  data: function data20() {
    return {
      scrollYLoad: false,
      bodyHeight: 0,
      topSpaceHeight: 0,
      items: []
    };
  },
  computed: {
    sYOpts: function sYOpts2() {
      return Object.assign({}, _conf$1.default.list.scrollY, this.scrollY);
    },
    styles: function styles2() {
      var height3 = this.height, maxHeight2 = this.maxHeight;
      var style2 = {};
      if (height3) {
        style2.height = isNaN(height3) ? height3 : "".concat(height3, "px");
      } else if (maxHeight2) {
        style2.height = "auto";
        style2.maxHeight = isNaN(maxHeight2) ? maxHeight2 : "".concat(maxHeight2, "px");
      }
      return style2;
    }
  },
  watch: {
    data: function data21(value6) {
      this.loadData(value6);
    },
    syncResize: function syncResize2(value6) {
      var _this = this;
      if (value6) {
        this.recalculate();
        this.$nextTick(function() {
          return setTimeout(function() {
            return _this.recalculate();
          });
        });
      }
    }
  },
  created: function created17() {
    Object.assign(this, {
      fullData: [],
      lastScrollLeft: 0,
      lastScrollTop: 0,
      scrollYStore: {
        startIndex: 0,
        endIndex: 0,
        visibleSize: 0
      }
    });
    this.loadData(this.data);
    _tools$1.GlobalEvent.on(this, "resize", this.handleGlobalResizeEvent);
  },
  mounted: function mounted15() {
    var _this2 = this;
    if (this.autoResize) {
      var resizeObserver = (0, _tools$1.createResizeEvent)(function() {
        return _this2.recalculate();
      });
      resizeObserver.observe(this.$el);
      this.$resize = resizeObserver;
    }
  },
  beforeDestroy: function beforeDestroy9() {
    if (this.$resize) {
      this.$resize.disconnect();
    }
  },
  destroyed: function destroyed14() {
    _tools$1.GlobalEvent.off(this, "resize");
  },
  render: function render31(h) {
    var $scopedSlots = this.$scopedSlots, styles3 = this.styles, bodyHeight = this.bodyHeight, topSpaceHeight = this.topSpaceHeight, items2 = this.items, className = this.className, loading = this.loading;
    return h("div", {
      class: ["vxe-list", className ? _xeUtils.default.isFunction(className) ? className({
        $list: this
      }) : className : "", {
        "is--loading": loading
      }]
    }, [h("div", {
      ref: "virtualWrapper",
      class: "vxe-list--virtual-wrapper",
      style: styles3,
      on: {
        scroll: this.scrollEvent
      }
    }, [h("div", {
      ref: "ySpace",
      class: "vxe-list--y-space",
      style: {
        height: bodyHeight ? "".concat(bodyHeight, "px") : ""
      }
    }), h("div", {
      ref: "virtualBody",
      class: "vxe-list--body",
      style: {
        marginTop: topSpaceHeight ? "".concat(topSpaceHeight, "px") : ""
      }
    }, $scopedSlots.default ? $scopedSlots.default.call(this, {
      items: items2,
      $list: this
    }, h) : [])]), h("div", {
      class: ["vxe-list--loading vxe-loading", {
        "is--visible": loading
      }]
    }, [h("div", {
      class: "vxe-loading--spinner"
    })])]);
  },
  methods: {
    getParentElem: function getParentElem2() {
      return this.$el.parentNode;
    },
    loadData: function loadData2(datas) {
      var _this3 = this;
      var sYOpts3 = this.sYOpts, scrollYStore = this.scrollYStore;
      var fullData = datas || [];
      Object.assign(scrollYStore, {
        startIndex: 0,
        endIndex: 1,
        visibleSize: 0
      });
      this.fullData = fullData;
      this.scrollYLoad = sYOpts3.enabled && sYOpts3.gt > -1 && sYOpts3.gt <= fullData.length;
      this.handleData();
      return this.computeScrollLoad().then(function() {
        _this3.refreshScroll();
      });
    },
    reloadData: function reloadData2(datas) {
      this.clearScroll();
      return this.loadData(datas);
    },
    handleData: function handleData() {
      var fullData = this.fullData, scrollYLoad = this.scrollYLoad, scrollYStore = this.scrollYStore;
      this.items = scrollYLoad ? fullData.slice(scrollYStore.startIndex, scrollYStore.endIndex) : fullData.slice(0);
      return this.$nextTick();
    },
    recalculate: function recalculate3() {
      var $el = this.$el;
      if ($el.clientWidth && $el.clientHeight) {
        return this.computeScrollLoad();
      }
      return Promise.resolve();
    },
    clearScroll: function clearScroll2() {
      var scrollBodyElem = this.$refs.virtualWrapper;
      if (scrollBodyElem) {
        scrollBodyElem.scrollTop = 0;
      }
      return this.$nextTick();
    },
    refreshScroll: function refreshScroll2() {
      var _this4 = this;
      var lastScrollLeft = this.lastScrollLeft, lastScrollTop = this.lastScrollTop;
      return this.clearScroll().then(function() {
        if (lastScrollLeft || lastScrollTop) {
          _this4.lastScrollLeft = 0;
          _this4.lastScrollTop = 0;
          return _this4.scrollTo(lastScrollLeft, lastScrollTop);
        }
      });
    },
    scrollTo: function scrollTo2(scrollLeft, scrollTop) {
      var _this5 = this;
      var scrollBodyElem = this.$refs.virtualWrapper;
      if (_xeUtils.default.isNumber(scrollLeft)) {
        scrollBodyElem.scrollLeft = scrollLeft;
      }
      if (_xeUtils.default.isNumber(scrollTop)) {
        scrollBodyElem.scrollTop = scrollTop;
      }
      if (this.scrollYLoad) {
        return new Promise(function(resolve) {
          return setTimeout(function() {
            return resolve(_this5.$nextTick());
          }, 50);
        });
      }
      return this.$nextTick();
    },
    computeScrollLoad: function computeScrollLoad2() {
      var _this6 = this;
      return this.$nextTick().then(function() {
        var $refs = _this6.$refs, sYOpts3 = _this6.sYOpts, scrollYLoad = _this6.scrollYLoad, scrollYStore = _this6.scrollYStore;
        var virtualWrapperElem = $refs.virtualWrapper, virtualBodyElem = $refs.virtualBody;
        var rowHeight = 0;
        var firstItemElem;
        if (virtualBodyElem) {
          if (sYOpts3.sItem) {
            firstItemElem = virtualBodyElem.querySelector(sYOpts3.sItem);
          }
          if (!firstItemElem) {
            firstItemElem = virtualBodyElem.children[0];
          }
        }
        if (firstItemElem) {
          rowHeight = firstItemElem.offsetHeight;
        }
        rowHeight = Math.max(20, rowHeight);
        scrollYStore.rowHeight = rowHeight;
        if (scrollYLoad) {
          var visibleYSize = Math.max(8, Math.ceil(virtualWrapperElem.clientHeight / rowHeight));
          var offsetYSize = sYOpts3.oSize ? _xeUtils.default.toNumber(sYOpts3.oSize) : _dom$4.browse.msie ? 20 : _dom$4.browse.edge ? 10 : 0;
          scrollYStore.offsetSize = offsetYSize;
          scrollYStore.visibleSize = visibleYSize;
          scrollYStore.endIndex = Math.max(scrollYStore.startIndex, visibleYSize + offsetYSize, scrollYStore.endIndex);
          _this6.updateYData();
        } else {
          _this6.updateYSpace();
        }
        _this6.rowHeight = rowHeight;
      });
    },
    scrollEvent: function scrollEvent3(evnt) {
      var scrollBodyElem = evnt.target;
      var scrollTop = scrollBodyElem.scrollTop;
      var scrollLeft = scrollBodyElem.scrollLeft;
      var isX = scrollLeft !== this.lastScrollLeft;
      var isY = scrollTop !== this.lastScrollTop;
      this.lastScrollTop = scrollTop;
      this.lastScrollLeft = scrollLeft;
      if (this.scrollYLoad) {
        this.loadYData(evnt);
      }
      this.$emit("scroll", {
        scrollLeft,
        scrollTop,
        isX,
        isY,
        $event: evnt
      });
    },
    loadYData: function loadYData(evnt) {
      var scrollYStore = this.scrollYStore;
      var startIndex = scrollYStore.startIndex, endIndex = scrollYStore.endIndex, visibleSize = scrollYStore.visibleSize, offsetSize = scrollYStore.offsetSize, rowHeight = scrollYStore.rowHeight;
      var scrollBodyElem = evnt.target;
      var scrollTop = scrollBodyElem.scrollTop;
      var toVisibleIndex = Math.floor(scrollTop / rowHeight);
      var offsetStartIndex = Math.max(0, toVisibleIndex - 1 - offsetSize);
      var offsetEndIndex = toVisibleIndex + visibleSize + offsetSize;
      if (toVisibleIndex <= startIndex || toVisibleIndex >= endIndex - visibleSize - 1) {
        if (startIndex !== offsetStartIndex || endIndex !== offsetEndIndex) {
          scrollYStore.startIndex = offsetStartIndex;
          scrollYStore.endIndex = offsetEndIndex;
          this.updateYData();
        }
      }
    },
    updateYData: function updateYData() {
      this.handleData();
      this.updateYSpace();
    },
    updateYSpace: function updateYSpace() {
      var scrollYStore = this.scrollYStore, scrollYLoad = this.scrollYLoad, fullData = this.fullData;
      this.bodyHeight = scrollYLoad ? fullData.length * scrollYStore.rowHeight : 0;
      this.topSpaceHeight = scrollYLoad ? Math.max(scrollYStore.startIndex * scrollYStore.rowHeight, 0) : 0;
    },
    handleGlobalResizeEvent: function handleGlobalResizeEvent2() {
      this.recalculate();
    }
  }
};
list.default = _default2$1;
Object.defineProperty(list$1, "__esModule", {
  value: true
});
list$1.default = list$1.List = void 0;
var _list = _interopRequireDefault$h(list);
function _interopRequireDefault$h(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var List = Object.assign(_list.default, {
  install: function install32(Vue2) {
    Vue2.component(_list.default.name, _list.default);
  }
});
list$1.List = List;
var _default$6 = List;
list$1.default = _default$6;
var pulldown$1 = {};
var pulldown = {};
Object.defineProperty(pulldown, "__esModule", {
  value: true
});
pulldown.default = void 0;
var _conf = _interopRequireDefault$g(conf);
var _size = _interopRequireDefault$g(size);
var _tools = tools;
function _interopRequireDefault$g(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
function _defineProperty$1(obj, key, value6) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value: value6, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value6;
  }
  return obj;
}
var _default210 = {
  name: "VxePulldown",
  mixins: [_size.default],
  props: {
    value: Boolean,
    disabled: Boolean,
    placement: String,
    size: {
      type: String,
      default: function _default113() {
        return _conf.default.size;
      }
    },
    destroyOnClose: Boolean,
    transfer: Boolean
  },
  data: function data22() {
    return {
      inited: false,
      panelIndex: 0,
      panelStyle: null,
      panelPlacement: null,
      currentValue: null,
      visiblePanel: false,
      animatVisible: false,
      isActivated: false
    };
  },
  watch: {
    value: function value5(_value) {
      if (_value) {
        this.showPanel();
      } else {
        this.hidePanel();
      }
    }
  },
  created: function created18() {
    _tools.GlobalEvent.on(this, "mousewheel", this.handleGlobalMousewheelEvent);
    _tools.GlobalEvent.on(this, "mousedown", this.handleGlobalMousedownEvent);
    _tools.GlobalEvent.on(this, "blur", this.handleGlobalBlurEvent);
  },
  beforeDestroy: function beforeDestroy10() {
    var panelElem = this.$refs.panel;
    if (panelElem && panelElem.parentNode) {
      panelElem.parentNode.removeChild(panelElem);
    }
  },
  destroyed: function destroyed15() {
    _tools.GlobalEvent.off(this, "mousewheel");
    _tools.GlobalEvent.off(this, "mousedown");
    _tools.GlobalEvent.off(this, "blur");
  },
  render: function render32(h) {
    var _ref, _ref2;
    var $scopedSlots = this.$scopedSlots, inited = this.inited, vSize8 = this.vSize, destroyOnClose = this.destroyOnClose, transfer = this.transfer, isActivated = this.isActivated, disabled = this.disabled, animatVisible = this.animatVisible, visiblePanel = this.visiblePanel, panelStyle = this.panelStyle, panelPlacement = this.panelPlacement;
    var defaultSlot = $scopedSlots.default;
    var downSlot = $scopedSlots.dropdown;
    return h("div", {
      class: ["vxe-pulldown", (_ref = {}, _defineProperty$1(_ref, "size--".concat(vSize8), vSize8), _defineProperty$1(_ref, "is--visivle", visiblePanel), _defineProperty$1(_ref, "is--disabled", disabled), _defineProperty$1(_ref, "is--active", isActivated), _ref)]
    }, [h("div", {
      ref: "content",
      class: "vxe-pulldown--content"
    }, defaultSlot ? defaultSlot.call(this, {
      $pulldown: this
    }, h) : []), h("div", {
      ref: "panel",
      class: ["vxe-table--ignore-clear vxe-pulldown--panel", (_ref2 = {}, _defineProperty$1(_ref2, "size--".concat(vSize8), vSize8), _defineProperty$1(_ref2, "is--transfer", transfer), _defineProperty$1(_ref2, "animat--leave", animatVisible), _defineProperty$1(_ref2, "animat--enter", visiblePanel), _ref2)],
      attrs: {
        placement: panelPlacement
      },
      style: panelStyle
    }, downSlot ? [h("div", {
      class: "vxe-pulldown--wrapper"
    }, !inited || destroyOnClose && !visiblePanel && !animatVisible ? [] : downSlot.call(this, {
      $pulldown: this
    }, h))] : [])]);
  },
  methods: {
    handleGlobalMousewheelEvent: function handleGlobalMousewheelEvent5(evnt) {
      var $refs = this.$refs, disabled = this.disabled, visiblePanel = this.visiblePanel;
      if (!disabled) {
        if (visiblePanel) {
          if (_tools.DomTools.getEventTargetNode(evnt, $refs.panel).flag) {
            this.updatePlacement();
          } else {
            this.hidePanel();
            this.$emit("hide-panel", {
              $event: evnt
            });
          }
        }
      }
    },
    handleGlobalMousedownEvent: function handleGlobalMousedownEvent5(evnt) {
      var $refs = this.$refs, $el = this.$el, disabled = this.disabled, visiblePanel = this.visiblePanel;
      if (!disabled) {
        this.isActivated = _tools.DomTools.getEventTargetNode(evnt, $el).flag || _tools.DomTools.getEventTargetNode(evnt, $refs.panel).flag;
        if (visiblePanel && !this.isActivated) {
          this.hidePanel();
          this.$emit("hide-panel", {
            $event: evnt
          });
        }
      }
    },
    handleGlobalBlurEvent: function handleGlobalBlurEvent5(evnt) {
      if (this.visiblePanel) {
        this.isActivated = false;
        this.hidePanel();
        this.$emit("hide-panel", {
          $event: evnt
        });
      }
    },
    updateZindex: function updateZindex7() {
      if (this.panelIndex < _tools.UtilTools.getLastZIndex()) {
        this.panelIndex = _tools.UtilTools.nextZIndex();
      }
    },
    isPanelVisible: function isPanelVisible2() {
      return this.visiblePanel;
    },
    togglePanel: function togglePanel2() {
      if (this.visiblePanel) {
        return this.hidePanel();
      }
      return this.showPanel();
    },
    showPanel: function showPanel3() {
      var _this = this;
      if (!this.inited) {
        this.inited = true;
        if (this.transfer) {
          document.body.appendChild(this.$refs.panel);
        }
      }
      return new Promise(function(resolve) {
        if (!_this.disabled) {
          clearTimeout(_this.hidePanelTimeout);
          _this.isActivated = true;
          _this.animatVisible = true;
          setTimeout(function() {
            _this.visiblePanel = true;
            _this.$emit("update:input", true);
            _this.updatePlacement();
            setTimeout(function() {
              resolve(_this.updatePlacement());
            }, 40);
          }, 10);
          _this.updateZindex();
        } else {
          resolve(_this.$nextTick());
        }
      });
    },
    hidePanel: function hidePanel3() {
      var _this2 = this;
      this.visiblePanel = false;
      this.$emit("update:input", false);
      return new Promise(function(resolve) {
        if (_this2.animatVisible) {
          _this2.hidePanelTimeout = setTimeout(function() {
            _this2.animatVisible = false;
            resolve(_this2.$nextTick());
          }, 350);
        } else {
          resolve(_this2.$nextTick());
        }
      });
    },
    updatePlacement: function updatePlacement5() {
      var _this3 = this;
      return this.$nextTick().then(function() {
        var $refs = _this3.$refs, transfer = _this3.transfer, placement = _this3.placement, panelIndex = _this3.panelIndex, visiblePanel = _this3.visiblePanel;
        if (visiblePanel) {
          var panelElem = $refs.panel;
          var targetElem = $refs.content;
          if (panelElem && targetElem) {
            var targetHeight = targetElem.offsetHeight;
            var targetWidth = targetElem.offsetWidth;
            var panelHeight = panelElem.offsetHeight;
            var panelWidth = panelElem.offsetWidth;
            var marginSize = 5;
            var panelStyle = {
              zIndex: panelIndex
            };
            var _DomTools$getAbsolute = _tools.DomTools.getAbsolutePos(targetElem), boundingTop = _DomTools$getAbsolute.boundingTop, boundingLeft = _DomTools$getAbsolute.boundingLeft, visibleHeight = _DomTools$getAbsolute.visibleHeight, visibleWidth = _DomTools$getAbsolute.visibleWidth;
            var panelPlacement = "bottom";
            if (transfer) {
              var left = boundingLeft;
              var top = boundingTop + targetHeight;
              if (placement === "top") {
                panelPlacement = "top";
                top = boundingTop - panelHeight;
              } else if (!placement) {
                if (top + panelHeight + marginSize > visibleHeight) {
                  panelPlacement = "top";
                  top = boundingTop - panelHeight;
                }
                if (top < marginSize) {
                  panelPlacement = "bottom";
                  top = boundingTop + targetHeight;
                }
              }
              if (left + panelWidth + marginSize > visibleWidth) {
                left -= left + panelWidth + marginSize - visibleWidth;
              }
              if (left < marginSize) {
                left = marginSize;
              }
              Object.assign(panelStyle, {
                left: "".concat(left, "px"),
                top: "".concat(top, "px"),
                minWidth: "".concat(targetWidth, "px")
              });
            } else {
              if (placement === "top") {
                panelPlacement = "top";
                panelStyle.bottom = "".concat(targetHeight, "px");
              } else if (!placement) {
                if (boundingTop + targetHeight + panelHeight > visibleHeight) {
                  if (boundingTop - targetHeight - panelHeight > marginSize) {
                    panelPlacement = "top";
                    panelStyle.bottom = "".concat(targetHeight, "px");
                  }
                }
              }
            }
            _this3.panelStyle = panelStyle;
            _this3.panelPlacement = panelPlacement;
          }
        }
        return _this3.$nextTick();
      });
    }
  }
};
pulldown.default = _default210;
Object.defineProperty(pulldown$1, "__esModule", {
  value: true
});
pulldown$1.default = pulldown$1.Pulldown = void 0;
var _pulldown = _interopRequireDefault$f(pulldown);
function _interopRequireDefault$f(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var Pulldown = Object.assign(_pulldown.default, {
  install: function install33(Vue2) {
    Vue2.component(_pulldown.default.name, _pulldown.default);
  }
});
pulldown$1.Pulldown = Pulldown;
var _default$5 = Pulldown;
pulldown$1.default = _default$5;
var zhCN$1 = {};
Object.defineProperty(zhCN$1, "__esModule", {
  value: true
});
zhCN$1.default = void 0;
var _default$4 = {
  vxe: {
    error: {
      groupFixed: "\u5982\u679C\u4F7F\u7528\u5206\u7EC4\u8868\u5934\uFF0C\u56FA\u5B9A\u5217\u5FC5\u987B\u6309\u7EC4\u8BBE\u7F6E",
      groupMouseRange: '\u5206\u7EC4\u8868\u5934\u4E0E "{0}" \u4E0D\u80FD\u540C\u65F6\u4F7F\u7528\uFF0C\u8FD9\u53EF\u80FD\u4F1A\u51FA\u73B0\u9519\u8BEF',
      groupTag: '\u5206\u7EC4\u5217\u5934\u5E94\u8BE5\u4F7F\u7528 "{0}" \u800C\u4E0D\u662F "{1}"\uFF0C\u8FD9\u53EF\u80FD\u4F1A\u51FA\u73B0\u9519\u8BEF',
      scrollErrProp: '\u542F\u7528\u865A\u62DF\u6EDA\u52A8\u540E\u4E0D\u652F\u6301\u8BE5\u53C2\u6570 "{0}"',
      scrollXNotGroup: '\u6A2A\u5411\u865A\u62DF\u6EDA\u52A8\u4E0D\u652F\u6301\u5206\u7EC4\u8868\u5934\uFF0C\u9700\u8981\u8BBE\u7F6E "scroll-x.enabled=false" \u53C2\u6570\uFF0C\u5426\u5219\u53EF\u80FD\u4F1A\u5BFC\u81F4\u51FA\u73B0\u9519\u8BEF',
      errConflicts: '\u53C2\u6570 "{0}" \u4E0E "{1}" \u6709\u51B2\u7A81',
      unableInsert: "\u65E0\u6CD5\u63D2\u5165\u5230\u6307\u5B9A\u4F4D\u7F6E\uFF0C\u8BF7\u68C0\u67E5\u53C2\u6570\u662F\u5426\u6B63\u786E",
      useErr: '\u5B89\u88C5 "{0}" \u6A21\u5757\u65F6\u53D1\u751F\u9519\u8BEF\uFF0C\u53EF\u80FD\u987A\u5E8F\u4E0D\u6B63\u786E\uFF0C\u4F9D\u8D56\u7684\u6A21\u5757\u9700\u8981\u5728 Table \u4E4B\u524D\u5B89\u88C5',
      barUnableLink: "\u5DE5\u5177\u680F\u65E0\u6CD5\u5173\u8054\u8868\u683C",
      expandContent: '\u5C55\u5F00\u884C\u7684\u63D2\u69FD\u5E94\u8BE5\u662F "content"\uFF0C\u8BF7\u68C0\u67E5\u662F\u5426\u6B63\u786E',
      reqModule: '\u7F3A\u5C11 "{0}" \u6A21\u5757',
      reqProp: '\u7F3A\u5C11\u5FC5\u8981\u7684 "{0}" \u53C2\u6570\uFF0C\u8FD9\u53EF\u80FD\u4F1A\u5BFC\u81F4\u51FA\u73B0\u9519\u8BEF',
      emptyProp: '\u53C2\u6570 "{0}" \u4E0D\u5141\u8BB8\u4E3A\u7A7A',
      errProp: '\u4E0D\u652F\u6301\u7684\u53C2\u6570 "{0}"\uFF0C\u53EF\u80FD\u4E3A "{1}"',
      colRepet: 'column.{0}="{1}" \u91CD\u590D\u4E86\uFF0C\u8FD9\u53EF\u80FD\u4F1A\u5BFC\u81F4\u67D0\u4E9B\u529F\u80FD\u65E0\u6CD5\u4F7F\u7528',
      notFunc: '\u65B9\u6CD5 "{0}" \u4E0D\u5B58\u5728',
      notSlot: '\u63D2\u69FD "{0}" \u4E0D\u5B58\u5728',
      noTree: '\u6811\u7ED3\u6784\u4E0D\u652F\u6301 "{0}"',
      notProp: '\u4E0D\u652F\u6301\u7684\u53C2\u6570 "{0}"',
      coverProp: '"{0}" \u7684\u53C2\u6570 "{1}" \u88AB\u8986\u76D6\uFF0C\u8FD9\u53EF\u80FD\u4F1A\u51FA\u73B0\u9519\u8BEF',
      delFunc: '\u65B9\u6CD5 "{0}" \u5DF2\u5E9F\u5F03\uFF0C\u8BF7\u4F7F\u7528 "{1}"',
      delProp: '\u53C2\u6570 "{0}" \u5DF2\u5E9F\u5F03\uFF0C\u8BF7\u4F7F\u7528 "{1}"',
      delEvent: '\u4E8B\u4EF6 "{0}" \u5DF2\u5E9F\u5F03\uFF0C\u8BF7\u4F7F\u7528 "{1}"',
      removeProp: '\u53C2\u6570 "{0}" \u5DF2\u5E9F\u5F03\uFF0C\u4E0D\u5EFA\u8BAE\u4F7F\u7528\uFF0C\u8FD9\u53EF\u80FD\u4F1A\u5BFC\u81F4\u51FA\u73B0\u9519\u8BEF',
      errFormat: '\u5168\u5C40\u7684\u683C\u5F0F\u5316\u5185\u5BB9\u5E94\u8BE5\u4F7F\u7528 "VXETable.formats" \u5B9A\u4E49\uFF0C\u6302\u8F7D "formatter={0}" \u7684\u65B9\u5F0F\u5DF2\u4E0D\u5EFA\u8BAE\u4F7F\u7528',
      notType: '\u4E0D\u652F\u6301\u7684\u6587\u4EF6\u7C7B\u578B "{0}"',
      notExp: "\u8BE5\u6D4F\u89C8\u5668\u4E0D\u652F\u6301\u5BFC\u5165/\u5BFC\u51FA\u529F\u80FD",
      impFields: "\u5BFC\u5165\u5931\u8D25\uFF0C\u8BF7\u68C0\u67E5\u5B57\u6BB5\u540D\u548C\u6570\u636E\u683C\u5F0F\u662F\u5426\u6B63\u786E",
      treeNotImp: "\u6811\u8868\u683C\u4E0D\u652F\u6301\u5BFC\u5165"
    },
    renderer: {
      search: "\u641C\u7D22",
      cases: {
        equal: "\u7B49\u4E8E",
        unequal: "\u4E0D\u7B49\u4E8E",
        gt: "\u5927\u4E8E",
        ge: "\u5927\u4E8E\u6216\u7B49\u4E8E",
        lt: "\u5C0F\u4E8E",
        le: "\u5C0F\u4E8E\u6216\u7B49\u4E8E",
        begin: "\u5F00\u5934\u662F",
        notbegin: "\u5F00\u5934\u4E0D\u662F",
        endin: "\u7ED3\u5C3E\u662F",
        notendin: "\u7ED3\u5C3E\u4E0D\u662F",
        include: "\u5305\u542B",
        exclude: "\u4E0D\u5305\u542B",
        between: "\u4ECB\u4E8E",
        custom: "\u81EA\u5B9A\u4E49\u7B5B\u9009",
        insensitive: "\u4E0D\u533A\u5206\u5927\u5C0F\u5199",
        isSensitive: "\u533A\u5206\u5927\u5C0F\u5199"
      },
      combination: {
        menus: {
          sortAsc: "\u5347\u5E8F",
          sortDesc: "\u964D\u5E8F",
          fixedColumn: "\u9501\u5B9A\u5217",
          fixedGroup: "\u9501\u5B9A\u7EC4",
          cancelFixed: "\u53D6\u6D88\u9501\u5B9A",
          fixedLeft: "\u9501\u5B9A\u5DE6\u4FA7",
          fixedRight: "\u9501\u5B9A\u53F3\u4FA7",
          clearFilter: "\u6E05\u9664\u7B5B\u9009",
          textOption: "\u6587\u672C\u7B5B\u9009",
          numberOption: "\u6570\u503C\u7B5B\u9009"
        },
        popup: {
          title: "\u81EA\u5B9A\u4E49\u7B5B\u9009\u7684\u65B9\u5F0F",
          currColumnTitle: "\u5F53\u524D\u5217\uFF1A",
          and: "\u4E0E",
          or: "\u6216",
          describeHtml: "\u53EF\u7528 ? \u4EE3\u8868\u5355\u4E2A\u5B57\u7B26<br/>\u7528 * \u4EE3\u8868\u4EFB\u610F\u591A\u4E2A\u5B57\u7B26"
        },
        empty: "(\u7A7A\u767D)",
        notData: "\u65E0\u5339\u914D\u9879"
      }
    },
    pro: {
      area: {
        mergeErr: "\u65E0\u6CD5\u5BF9\u5408\u5E76\u5355\u5143\u683C\u8FDB\u884C\u8BE5\u64CD\u4F5C",
        multiErr: "\u65E0\u6CD5\u5BF9\u591A\u91CD\u9009\u62E9\u533A\u57DF\u8FDB\u884C\u8BE5\u64CD\u4F5C",
        extendErr: "\u5982\u679C\u5EF6\u4F38\u7684\u533A\u57DF\u5305\u542B\u88AB\u5408\u5E76\u7684\u5355\u5143\u683C\uFF0C\u6240\u6709\u5408\u5E76\u7684\u5355\u5143\u683C\u9700\u5927\u5C0F\u76F8\u540C"
      },
      fnr: {
        title: "\u67E5\u627E\u548C\u66FF\u6362",
        findLabel: "\u67E5\u627E",
        replaceLabel: "\u66FF\u6362",
        findTitle: "\u67E5\u627E\u5185\u5BB9\uFF1A",
        replaceTitle: "\u66FF\u6362\u4E3A\uFF1A",
        tabs: {
          find: "\u67E5\u627E",
          replace: "\u66FF\u6362"
        },
        filter: {
          re: "\u6B63\u5219\u8868\u8FBE\u5F0F",
          whole: "\u5168\u8BCD\u5339\u914D",
          sensitive: "\u533A\u5206\u5927\u5C0F\u5199"
        },
        btns: {
          findNext: "\u67E5\u627E\u4E0B\u4E00\u4E2A",
          findAll: "\u67E5\u627E\u5168\u90E8",
          replace: "\u66FF\u6362",
          replaceAll: "\u66FF\u6362\u5168\u90E8",
          cancel: "\u53D6\u6D88"
        },
        header: {
          seq: "#",
          cell: "\u5355\u5143\u683C",
          value: "\u503C"
        },
        empty: "(\u7A7A\u503C)",
        reError: "\u65E0\u6548\u7684\u6B63\u5219\u8868\u8FBE\u5F0F",
        recordCount: "\u5DF2\u627E\u5230 {0} \u4E2A\u5355\u5143\u683C",
        notCell: "\u627E\u4E0D\u5230\u5339\u914D\u7684\u5355\u5143\u683C",
        replaceSuccess: "\u6210\u529F\u66FF\u6362 {0} \u4E2A\u5355\u5143\u683C"
      }
    },
    table: {
      emptyText: "\u6682\u65E0\u6570\u636E",
      allTitle: "\u5168\u9009/\u53D6\u6D88",
      seqTitle: "#",
      confirmFilter: "\u7B5B\u9009",
      resetFilter: "\u91CD\u7F6E",
      allFilter: "\u5168\u90E8",
      sortAsc: "\u5347\u5E8F\uFF1A\u6700\u4F4E\u5230\u6700\u9AD8",
      sortDesc: "\u964D\u5E8F\uFF1A\u6700\u9AD8\u5230\u6700\u4F4E",
      filter: "\u5BF9\u6240\u9009\u7684\u5217\u542F\u7528\u7B5B\u9009",
      impSuccess: "\u6210\u529F\u5BFC\u5165 {0} \u6761\u8BB0\u5F55",
      expLoading: "\u6B63\u5728\u5BFC\u51FA\u4E2D",
      expSuccess: "\u5BFC\u51FA\u6210\u529F",
      expFilename: "\u5BFC\u51FA_{0}",
      expOriginFilename: "\u5BFC\u51FA_\u6E90_{0}",
      customTitle: "\u5217\u8BBE\u7F6E",
      customAll: "\u5168\u90E8",
      customConfirm: "\u786E\u8BA4",
      customRestore: "\u8FD8\u539F"
    },
    grid: {
      selectOneRecord: "\u8BF7\u81F3\u5C11\u9009\u62E9\u4E00\u6761\u8BB0\u5F55\uFF01",
      deleteSelectRecord: "\u60A8\u786E\u5B9A\u8981\u5220\u9664\u6240\u9009\u8BB0\u5F55\u5417\uFF1F",
      removeSelectRecord: "\u60A8\u786E\u5B9A\u8981\u79FB\u9664\u6240\u9009\u8BB0\u5F55\u5417\uFF1F",
      dataUnchanged: "\u6570\u636E\u672A\u6539\u52A8\uFF01",
      delSuccess: "\u6210\u529F\u5220\u9664\u6240\u9009\u8BB0\u5F55\uFF01",
      saveSuccess: "\u4FDD\u5B58\u6210\u529F\uFF01",
      operError: "\u53D1\u751F\u9519\u8BEF\uFF0C\u64CD\u4F5C\u5931\u8D25\uFF01"
    },
    select: {
      emptyText: "\u6682\u65E0\u6570\u636E"
    },
    pager: {
      goto: "\u524D\u5F80",
      pagesize: "{0}\u6761/\u9875",
      total: "\u5171 {0} \u6761\u8BB0\u5F55",
      pageClassifier: "\u9875",
      prevPage: "\u4E0A\u4E00\u9875",
      nextPage: "\u4E0B\u4E00\u9875",
      prevJump: "\u5411\u4E0A\u8DF3\u9875",
      nextJump: "\u5411\u4E0B\u8DF3\u9875"
    },
    alert: {
      title: "\u6D88\u606F\u63D0\u793A"
    },
    button: {
      confirm: "\u786E\u8BA4",
      cancel: "\u53D6\u6D88"
    },
    import: {
      modes: {
        covering: "\u8986\u76D6",
        insert: "\u65B0\u589E"
      },
      impTitle: "\u5BFC\u5165\u6570\u636E",
      impFile: "\u6587\u4EF6\u540D",
      impSelect: "\u9009\u62E9\u6587\u4EF6",
      impType: "\u6587\u4EF6\u7C7B\u578B",
      impOpts: "\u53C2\u6570\u8BBE\u7F6E",
      impConfirm: "\u5BFC\u5165",
      impCancel: "\u53D6\u6D88"
    },
    export: {
      types: {
        csv: "CSV (\u9017\u53F7\u5206\u9694)(*.csv)",
        html: "\u7F51\u9875(*.html)",
        xml: "XML \u6570\u636E(*.xml)",
        txt: "\u6587\u672C\u6587\u4EF6(\u5236\u8868\u7B26\u5206\u9694)(*.txt)",
        xls: "Excel 97-2003 \u5DE5\u4F5C\u7C3F(*.xls)",
        xlsx: "Excel \u5DE5\u4F5C\u7C3F(*.xlsx)",
        pdf: "PDF (*.pdf)"
      },
      modes: {
        current: "\u5F53\u524D\u6570\u636E\uFF08\u5F53\u524D\u9875\u7684\u6570\u636E\uFF09",
        selected: "\u9009\u4E2D\u6570\u636E\uFF08\u5F53\u524D\u9875\u9009\u4E2D\u7684\u6570\u636E\uFF09",
        all: "\u5168\u91CF\u6570\u636E\uFF08\u5305\u62EC\u6240\u6709\u5206\u9875\u7684\u6570\u636E\uFF09"
      },
      printTitle: "\u6253\u5370\u6570\u636E",
      expTitle: "\u5BFC\u51FA\u6570\u636E",
      expName: "\u6587\u4EF6\u540D",
      expNamePlaceholder: "\u8BF7\u8F93\u5165\u6587\u4EF6\u540D",
      expSheetName: "\u6807\u9898",
      expSheetNamePlaceholder: "\u8BF7\u8F93\u5165\u6807\u9898",
      expType: "\u4FDD\u5B58\u7C7B\u578B",
      expMode: "\u9009\u62E9\u6570\u636E",
      expCurrentColumn: "\u5168\u90E8\u5B57\u6BB5",
      expColumn: "\u9009\u62E9\u5B57\u6BB5",
      expOpts: "\u53C2\u6570\u8BBE\u7F6E",
      expOptHeader: "\u8868\u5934",
      expHeaderTitle: "\u662F\u5426\u9700\u8981\u8868\u5934",
      expOptFooter: "\u8868\u5C3E",
      expFooterTitle: "\u662F\u5426\u9700\u8981\u8868\u5C3E",
      expOptColgroup: "\u5206\u7EC4\u8868\u5934",
      expColgroupTitle: "\u5982\u679C\u5B58\u5728\uFF0C\u5219\u652F\u6301\u5E26\u6709\u5206\u7EC4\u7ED3\u6784\u7684\u8868\u5934",
      expOptMerge: "\u5408\u5E76",
      expMergeTitle: "\u5982\u679C\u5B58\u5728\uFF0C\u5219\u652F\u6301\u5E26\u6709\u5408\u5E76\u7ED3\u6784\u7684\u5355\u5143\u683C",
      expOptAllExpand: "\u5C55\u5F00\u5C42\u7EA7",
      expAllExpandTitle: "\u5982\u679C\u5B58\u5728\uFF0C\u5219\u652F\u6301\u5C06\u5E26\u6709\u5C42\u7EA7\u7ED3\u6784\u7684\u6570\u636E\u5168\u90E8\u5C55\u5F00",
      expOptUseStyle: "\u6837\u5F0F",
      expUseStyleTitle: "\u5982\u679C\u5B58\u5728\uFF0C\u5219\u652F\u6301\u5E26\u6837\u5F0F\u7684\u5355\u5143\u683C",
      expOptOriginal: "\u6E90\u6570\u636E",
      expOriginalTitle: "\u5982\u679C\u4E3A\u6E90\u6570\u636E\uFF0C\u5219\u652F\u6301\u5BFC\u5165\u5230\u8868\u683C\u4E2D",
      expPrint: "\u6253\u5370",
      expConfirm: "\u5BFC\u51FA",
      expCancel: "\u53D6\u6D88"
    },
    modal: {
      zoomIn: "\u6700\u5927\u5316",
      zoomOut: "\u8FD8\u539F",
      close: "\u5173\u95ED"
    },
    form: {
      folding: "\u6536\u8D77",
      unfolding: "\u5C55\u5F00"
    },
    toolbar: {
      import: "\u5BFC\u5165",
      export: "\u5BFC\u51FA",
      print: "\u6253\u5370",
      refresh: "\u5237\u65B0",
      zoomIn: "\u5168\u5C4F",
      zoomOut: "\u8FD8\u539F",
      custom: "\u5217\u8BBE\u7F6E",
      customAll: "\u5168\u90E8",
      customConfirm: "\u786E\u8BA4",
      customRestore: "\u8FD8\u539F"
    },
    input: {
      date: {
        m1: "01 \u6708",
        m2: "02 \u6708",
        m3: "03 \u6708",
        m4: "04 \u6708",
        m5: "05 \u6708",
        m6: "06 \u6708",
        m7: "07 \u6708",
        m8: "08 \u6708",
        m9: "09 \u6708",
        m10: "10 \u6708",
        m11: "11 \u6708",
        m12: "12 \u6708",
        quarterLabel: "{0} \u5E74",
        monthLabel: "{0} \u5E74",
        dayLabel: "{0} \u5E74 {1}",
        labelFormat: {
          date: "yyyy-MM-dd",
          time: "HH:mm:ss",
          datetime: "yyyy-MM-dd HH:mm:ss",
          week: "yyyy \u5E74\u7B2C WW \u5468",
          month: "yyyy-MM",
          quarter: "yyyy \u5E74\u7B2C q \u5B63\u5EA6",
          year: "yyyy"
        },
        weeks: {
          w: "\u5468",
          w0: "\u5468\u65E5",
          w1: "\u5468\u4E00",
          w2: "\u5468\u4E8C",
          w3: "\u5468\u4E09",
          w4: "\u5468\u56DB",
          w5: "\u5468\u4E94",
          w6: "\u5468\u516D"
        },
        months: {
          m0: "\u4E00\u6708",
          m1: "\u4E8C\u6708",
          m2: "\u4E09\u6708",
          m3: "\u56DB\u6708",
          m4: "\u4E94\u6708",
          m5: "\u516D\u6708",
          m6: "\u4E03\u6708",
          m7: "\u516B\u6708",
          m8: "\u4E5D\u6708",
          m9: "\u5341\u6708",
          m10: "\u5341\u4E00\u6708",
          m11: "\u5341\u4E8C\u6708"
        },
        quarters: {
          q1: "\u7B2C\u4E00\u5B63\u5EA6",
          q2: "\u7B2C\u4E8C\u5B63\u5EA6",
          q3: "\u7B2C\u4E09\u5B63\u5EA6",
          q4: "\u7B2C\u56DB\u5B63\u5EA6"
        }
      }
    }
  }
};
zhCN$1.default = _default$4;
(function(exports2) {
  Object.defineProperty(exports2, "__esModule", {
    value: true
  });
  var _exportNames = {
    install: true
  };
  exports2.install = install34;
  var _xeUtils2 = _interopRequireDefault2(xeUtils);
  var _vXETable2 = vXETable;
  Object.keys(_vXETable2).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key))
      return;
    if (key in exports2 && exports2[key] === _vXETable2[key])
      return;
    Object.defineProperty(exports2, key, {
      enumerable: true,
      get: function get7() {
        return _vXETable2[key];
      }
    });
  });
  var _icon = icon;
  Object.keys(_icon).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key))
      return;
    if (key in exports2 && exports2[key] === _icon[key])
      return;
    Object.defineProperty(exports2, key, {
      enumerable: true,
      get: function get7() {
        return _icon[key];
      }
    });
  });
  var _filter = filter;
  Object.keys(_filter).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key))
      return;
    if (key in exports2 && exports2[key] === _filter[key])
      return;
    Object.defineProperty(exports2, key, {
      enumerable: true,
      get: function get7() {
        return _filter[key];
      }
    });
  });
  var _menu = menu;
  Object.keys(_menu).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key))
      return;
    if (key in exports2 && exports2[key] === _menu[key])
      return;
    Object.defineProperty(exports2, key, {
      enumerable: true,
      get: function get7() {
        return _menu[key];
      }
    });
  });
  var _edit = edit;
  Object.keys(_edit).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key))
      return;
    if (key in exports2 && exports2[key] === _edit[key])
      return;
    Object.defineProperty(exports2, key, {
      enumerable: true,
      get: function get7() {
        return _edit[key];
      }
    });
  });
  var _export2 = _export$1;
  Object.keys(_export2).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key))
      return;
    if (key in exports2 && exports2[key] === _export2[key])
      return;
    Object.defineProperty(exports2, key, {
      enumerable: true,
      get: function get7() {
        return _export2[key];
      }
    });
  });
  var _keyboard = keyboard;
  Object.keys(_keyboard).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key))
      return;
    if (key in exports2 && exports2[key] === _keyboard[key])
      return;
    Object.defineProperty(exports2, key, {
      enumerable: true,
      get: function get7() {
        return _keyboard[key];
      }
    });
  });
  var _validator = validator;
  Object.keys(_validator).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key))
      return;
    if (key in exports2 && exports2[key] === _validator[key])
      return;
    Object.defineProperty(exports2, key, {
      enumerable: true,
      get: function get7() {
        return _validator[key];
      }
    });
  });
  var _header2 = header$1;
  Object.keys(_header2).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key))
      return;
    if (key in exports2 && exports2[key] === _header2[key])
      return;
    Object.defineProperty(exports2, key, {
      enumerable: true,
      get: function get7() {
        return _header2[key];
      }
    });
  });
  var _footer2 = footer$1;
  Object.keys(_footer2).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key))
      return;
    if (key in exports2 && exports2[key] === _footer2[key])
      return;
    Object.defineProperty(exports2, key, {
      enumerable: true,
      get: function get7() {
        return _footer2[key];
      }
    });
  });
  var _column2 = column$1;
  Object.keys(_column2).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key))
      return;
    if (key in exports2 && exports2[key] === _column2[key])
      return;
    Object.defineProperty(exports2, key, {
      enumerable: true,
      get: function get7() {
        return _column2[key];
      }
    });
  });
  var _colgroup = colgroup;
  Object.keys(_colgroup).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key))
      return;
    if (key in exports2 && exports2[key] === _colgroup[key])
      return;
    Object.defineProperty(exports2, key, {
      enumerable: true,
      get: function get7() {
        return _colgroup[key];
      }
    });
  });
  var _grid2 = grid$1;
  Object.keys(_grid2).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key))
      return;
    if (key in exports2 && exports2[key] === _grid2[key])
      return;
    Object.defineProperty(exports2, key, {
      enumerable: true,
      get: function get7() {
        return _grid2[key];
      }
    });
  });
  var _toolbar2 = toolbar$1;
  Object.keys(_toolbar2).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key))
      return;
    if (key in exports2 && exports2[key] === _toolbar2[key])
      return;
    Object.defineProperty(exports2, key, {
      enumerable: true,
      get: function get7() {
        return _toolbar2[key];
      }
    });
  });
  var _pager2 = pager$1;
  Object.keys(_pager2).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key))
      return;
    if (key in exports2 && exports2[key] === _pager2[key])
      return;
    Object.defineProperty(exports2, key, {
      enumerable: true,
      get: function get7() {
        return _pager2[key];
      }
    });
  });
  var _checkbox2 = checkbox$1;
  Object.keys(_checkbox2).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key))
      return;
    if (key in exports2 && exports2[key] === _checkbox2[key])
      return;
    Object.defineProperty(exports2, key, {
      enumerable: true,
      get: function get7() {
        return _checkbox2[key];
      }
    });
  });
  var _checkboxGroup = checkboxGroup$1;
  Object.keys(_checkboxGroup).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key))
      return;
    if (key in exports2 && exports2[key] === _checkboxGroup[key])
      return;
    Object.defineProperty(exports2, key, {
      enumerable: true,
      get: function get7() {
        return _checkboxGroup[key];
      }
    });
  });
  var _radio2 = radio$1;
  Object.keys(_radio2).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key))
      return;
    if (key in exports2 && exports2[key] === _radio2[key])
      return;
    Object.defineProperty(exports2, key, {
      enumerable: true,
      get: function get7() {
        return _radio2[key];
      }
    });
  });
  var _radioGroup = radioGroup;
  Object.keys(_radioGroup).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key))
      return;
    if (key in exports2 && exports2[key] === _radioGroup[key])
      return;
    Object.defineProperty(exports2, key, {
      enumerable: true,
      get: function get7() {
        return _radioGroup[key];
      }
    });
  });
  var _radioButton = radioButton;
  Object.keys(_radioButton).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key))
      return;
    if (key in exports2 && exports2[key] === _radioButton[key])
      return;
    Object.defineProperty(exports2, key, {
      enumerable: true,
      get: function get7() {
        return _radioButton[key];
      }
    });
  });
  var _input2 = input$1;
  Object.keys(_input2).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key))
      return;
    if (key in exports2 && exports2[key] === _input2[key])
      return;
    Object.defineProperty(exports2, key, {
      enumerable: true,
      get: function get7() {
        return _input2[key];
      }
    });
  });
  var _textarea2 = textarea$1;
  Object.keys(_textarea2).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key))
      return;
    if (key in exports2 && exports2[key] === _textarea2[key])
      return;
    Object.defineProperty(exports2, key, {
      enumerable: true,
      get: function get7() {
        return _textarea2[key];
      }
    });
  });
  var _button2 = button$2;
  Object.keys(_button2).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key))
      return;
    if (key in exports2 && exports2[key] === _button2[key])
      return;
    Object.defineProperty(exports2, key, {
      enumerable: true,
      get: function get7() {
        return _button2[key];
      }
    });
  });
  var _modal2 = modal$1;
  Object.keys(_modal2).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key))
      return;
    if (key in exports2 && exports2[key] === _modal2[key])
      return;
    Object.defineProperty(exports2, key, {
      enumerable: true,
      get: function get7() {
        return _modal2[key];
      }
    });
  });
  var _tooltip2 = tooltip$2;
  Object.keys(_tooltip2).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key))
      return;
    if (key in exports2 && exports2[key] === _tooltip2[key])
      return;
    Object.defineProperty(exports2, key, {
      enumerable: true,
      get: function get7() {
        return _tooltip2[key];
      }
    });
  });
  var _form2 = form$1;
  Object.keys(_form2).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key))
      return;
    if (key in exports2 && exports2[key] === _form2[key])
      return;
    Object.defineProperty(exports2, key, {
      enumerable: true,
      get: function get7() {
        return _form2[key];
      }
    });
  });
  var _formItem2 = formItem$1;
  Object.keys(_formItem2).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key))
      return;
    if (key in exports2 && exports2[key] === _formItem2[key])
      return;
    Object.defineProperty(exports2, key, {
      enumerable: true,
      get: function get7() {
        return _formItem2[key];
      }
    });
  });
  var _formGather2 = formGather$1;
  Object.keys(_formGather2).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key))
      return;
    if (key in exports2 && exports2[key] === _formGather2[key])
      return;
    Object.defineProperty(exports2, key, {
      enumerable: true,
      get: function get7() {
        return _formGather2[key];
      }
    });
  });
  var _select2 = select$1;
  Object.keys(_select2).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key))
      return;
    if (key in exports2 && exports2[key] === _select2[key])
      return;
    Object.defineProperty(exports2, key, {
      enumerable: true,
      get: function get7() {
        return _select2[key];
      }
    });
  });
  var _optgroup2 = optgroup;
  Object.keys(_optgroup2).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key))
      return;
    if (key in exports2 && exports2[key] === _optgroup2[key])
      return;
    Object.defineProperty(exports2, key, {
      enumerable: true,
      get: function get7() {
        return _optgroup2[key];
      }
    });
  });
  var _option2 = option$1;
  Object.keys(_option2).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key))
      return;
    if (key in exports2 && exports2[key] === _option2[key])
      return;
    Object.defineProperty(exports2, key, {
      enumerable: true,
      get: function get7() {
        return _option2[key];
      }
    });
  });
  var _switch2 = _switch$2;
  Object.keys(_switch2).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key))
      return;
    if (key in exports2 && exports2[key] === _switch2[key])
      return;
    Object.defineProperty(exports2, key, {
      enumerable: true,
      get: function get7() {
        return _switch2[key];
      }
    });
  });
  var _list2 = list$1;
  Object.keys(_list2).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key))
      return;
    if (key in exports2 && exports2[key] === _list2[key])
      return;
    Object.defineProperty(exports2, key, {
      enumerable: true,
      get: function get7() {
        return _list2[key];
      }
    });
  });
  var _pulldown2 = pulldown$1;
  Object.keys(_pulldown2).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key))
      return;
    if (key in exports2 && exports2[key] === _pulldown2[key])
      return;
    Object.defineProperty(exports2, key, {
      enumerable: true,
      get: function get7() {
        return _pulldown2[key];
      }
    });
  });
  var _table2 = table$1;
  Object.keys(_table2).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key))
      return;
    if (key in exports2 && exports2[key] === _table2[key])
      return;
    Object.defineProperty(exports2, key, {
      enumerable: true,
      get: function get7() {
        return _table2[key];
      }
    });
  });
  var _zhCN3 = _interopRequireDefault2(zhCN$1);
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var components = [
    _header2.Header,
    _footer2.Footer,
    _icon.Icon,
    _filter.Filter,
    _menu.Menu,
    _edit.Edit,
    _export2.Export,
    _keyboard.Keyboard,
    _validator.Validator,
    _column2.Column,
    _colgroup.Colgroup,
    _grid2.Grid,
    _toolbar2.Toolbar,
    _pager2.Pager,
    _checkbox2.Checkbox,
    _checkboxGroup.CheckboxGroup,
    _radio2.Radio,
    _radioGroup.RadioGroup,
    _radioButton.RadioButton,
    _input2.Input,
    _textarea2.Textarea,
    _button2.Button,
    _modal2.Modal,
    _tooltip2.Tooltip,
    _form2.Form,
    _formItem2.FormItem,
    _formGather2.FormGather,
    _select2.Select,
    _optgroup2.Optgroup,
    _option2.Option,
    _switch2.Switch,
    _list2.List,
    _pulldown2.Pulldown,
    _table2.Table
  ];
  function install34(Vue2, options2) {
    if (_xeUtils2.default.isPlainObject(options2)) {
      _vXETable2.VXETable.setup(options2);
    }
    components.map(function(component) {
      return component.install(Vue2);
    });
  }
  _vXETable2.VXETable.setup({
    i18n: function i18n4(key, args) {
      return _xeUtils2.default.toFormatString(_xeUtils2.default.get(_zhCN3.default, key), args);
    }
  });
})(all);
(function(exports2) {
  function _typeof2(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof2 = function _typeof3(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof2 = function _typeof3(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof2(obj);
  }
  Object.defineProperty(exports2, "__esModule", {
    value: true
  });
  var _exportNames = {};
  exports2.default = void 0;
  var VXETableExport = _interopRequireWildcard2(all);
  Object.keys(VXETableExport).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key))
      return;
    if (key in exports2 && exports2[key] === VXETableExport[key])
      return;
    Object.defineProperty(exports2, key, {
      enumerable: true,
      get: function get7() {
        return VXETableExport[key];
      }
    });
  });
  function _getRequireWildcardCache2(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
    var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache2 = function _getRequireWildcardCache3(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard2(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache2(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  var _default116 = VXETableExport;
  exports2.default = _default116;
})(index_common);
/*!
 * Vue.js v2.6.14
 * (c) 2014-2021 Evan You
 * Released under the MIT License.
 */
var emptyObject = Object.freeze({});
function isUndef(v) {
  return v === void 0 || v === null;
}
function isDef$1(v) {
  return v !== void 0 && v !== null;
}
function isTrue(v) {
  return v === true;
}
function isFalse(v) {
  return v === false;
}
function isPrimitive$1(value6) {
  return typeof value6 === "string" || typeof value6 === "number" || typeof value6 === "symbol" || typeof value6 === "boolean";
}
function isObject$7(obj) {
  return obj !== null && typeof obj === "object";
}
var _toString = Object.prototype.toString;
function toRawType(value6) {
  return _toString.call(value6).slice(8, -1);
}
function isPlainObject$1(obj) {
  return _toString.call(obj) === "[object Object]";
}
function isRegExp(v) {
  return _toString.call(v) === "[object RegExp]";
}
function isValidArrayIndex(val) {
  var n = parseFloat(String(val));
  return n >= 0 && Math.floor(n) === n && isFinite(val);
}
function isPromise$1(val) {
  return isDef$1(val) && typeof val.then === "function" && typeof val.catch === "function";
}
function toString$2(val) {
  return val == null ? "" : Array.isArray(val) || isPlainObject$1(val) && val.toString === _toString ? JSON.stringify(val, null, 2) : String(val);
}
function toNumber$1(val) {
  var n = parseFloat(val);
  return isNaN(n) ? val : n;
}
function makeMap(str, expectsLowerCase) {
  var map2 = /* @__PURE__ */ Object.create(null);
  var list2 = str.split(",");
  for (var i = 0; i < list2.length; i++) {
    map2[list2[i]] = true;
  }
  return expectsLowerCase ? function(val) {
    return map2[val.toLowerCase()];
  } : function(val) {
    return map2[val];
  };
}
makeMap("slot,component", true);
var isReservedAttribute = makeMap("key,ref,slot,slot-scope,is");
function remove(arr, item) {
  if (arr.length) {
    var index2 = arr.indexOf(item);
    if (index2 > -1) {
      return arr.splice(index2, 1);
    }
  }
}
var hasOwnProperty$d = Object.prototype.hasOwnProperty;
function hasOwn$1(obj, key) {
  return hasOwnProperty$d.call(obj, key);
}
function cached(fn) {
  var cache = /* @__PURE__ */ Object.create(null);
  return function cachedFn(str) {
    var hit = cache[str];
    return hit || (cache[str] = fn(str));
  };
}
var camelizeRE = /-(\w)/g;
var camelize = cached(function(str) {
  return str.replace(camelizeRE, function(_, c) {
    return c ? c.toUpperCase() : "";
  });
});
var capitalize = cached(function(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
});
var hyphenateRE$1 = /\B([A-Z])/g;
var hyphenate$1 = cached(function(str) {
  return str.replace(hyphenateRE$1, "-$1").toLowerCase();
});
function polyfillBind(fn, ctx2) {
  function boundFn(a) {
    var l = arguments.length;
    return l ? l > 1 ? fn.apply(ctx2, arguments) : fn.call(ctx2, a) : fn.call(ctx2);
  }
  boundFn._length = fn.length;
  return boundFn;
}
function nativeBind(fn, ctx2) {
  return fn.bind(ctx2);
}
var bind = Function.prototype.bind ? nativeBind : polyfillBind;
function toArray(list2, start) {
  start = start || 0;
  var i = list2.length - start;
  var ret = new Array(i);
  while (i--) {
    ret[i] = list2[i + start];
  }
  return ret;
}
function extend$1(to, _from) {
  for (var key in _from) {
    to[key] = _from[key];
  }
  return to;
}
function toObject$4(arr) {
  var res = {};
  for (var i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend$1(res, arr[i]);
    }
  }
  return res;
}
function noop$1(a, b, c) {
}
var no = function(a, b, c) {
  return false;
};
var identity$1 = function(_) {
  return _;
};
function looseEqual$1(a, b) {
  if (a === b) {
    return true;
  }
  var isObjectA = isObject$7(a);
  var isObjectB = isObject$7(b);
  if (isObjectA && isObjectB) {
    try {
      var isArrayA = Array.isArray(a);
      var isArrayB = Array.isArray(b);
      if (isArrayA && isArrayB) {
        return a.length === b.length && a.every(function(e, i) {
          return looseEqual$1(e, b[i]);
        });
      } else if (a instanceof Date && b instanceof Date) {
        return a.getTime() === b.getTime();
      } else if (!isArrayA && !isArrayB) {
        var keysA = Object.keys(a);
        var keysB = Object.keys(b);
        return keysA.length === keysB.length && keysA.every(function(key) {
          return looseEqual$1(a[key], b[key]);
        });
      } else {
        return false;
      }
    } catch (e) {
      return false;
    }
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b);
  } else {
    return false;
  }
}
function looseIndexOf(arr, val) {
  for (var i = 0; i < arr.length; i++) {
    if (looseEqual$1(arr[i], val)) {
      return i;
    }
  }
  return -1;
}
function once(fn) {
  var called = false;
  return function() {
    if (!called) {
      called = true;
      fn.apply(this, arguments);
    }
  };
}
var SSR_ATTR = "data-server-rendered";
var ASSET_TYPES = [
  "component",
  "directive",
  "filter"
];
var LIFECYCLE_HOOKS = [
  "beforeCreate",
  "created",
  "beforeMount",
  "mounted",
  "beforeUpdate",
  "updated",
  "beforeDestroy",
  "destroyed",
  "activated",
  "deactivated",
  "errorCaptured",
  "serverPrefetch"
];
var config = {
  optionMergeStrategies: /* @__PURE__ */ Object.create(null),
  silent: false,
  productionTip: false,
  devtools: false,
  performance: false,
  errorHandler: null,
  warnHandler: null,
  ignoredElements: [],
  keyCodes: /* @__PURE__ */ Object.create(null),
  isReservedTag: no,
  isReservedAttr: no,
  isUnknownElement: no,
  getTagNamespace: noop$1,
  parsePlatformTagName: identity$1,
  mustUseProp: no,
  async: true,
  _lifecycleHooks: LIFECYCLE_HOOKS
};
var unicodeRegExp = /a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;
function isReserved(str) {
  var c = (str + "").charCodeAt(0);
  return c === 36 || c === 95;
}
function def$1(obj, key, val, enumerable2) {
  Object.defineProperty(obj, key, {
    value: val,
    enumerable: !!enumerable2,
    writable: true,
    configurable: true
  });
}
var bailRE = new RegExp("[^" + unicodeRegExp.source + ".$_\\d]");
function parsePath(path) {
  if (bailRE.test(path)) {
    return;
  }
  var segments = path.split(".");
  return function(obj) {
    for (var i = 0; i < segments.length; i++) {
      if (!obj) {
        return;
      }
      obj = obj[segments[i]];
    }
    return obj;
  };
}
var hasProto$1 = "__proto__" in {};
var inBrowser = typeof window !== "undefined";
var inWeex = typeof WXEnvironment !== "undefined" && !!WXEnvironment.platform;
var weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();
var UA = inBrowser && window.navigator.userAgent.toLowerCase();
var isIE = UA && /msie|trident/.test(UA);
var isIE9 = UA && UA.indexOf("msie 9.0") > 0;
var isEdge = UA && UA.indexOf("edge/") > 0;
UA && UA.indexOf("android") > 0 || weexPlatform === "android";
var isIOS = UA && /iphone|ipad|ipod|ios/.test(UA) || weexPlatform === "ios";
UA && /chrome\/\d+/.test(UA) && !isEdge;
UA && /phantomjs/.test(UA);
var isFF = UA && UA.match(/firefox\/(\d+)/);
var nativeWatch = {}.watch;
var supportsPassive = false;
if (inBrowser) {
  try {
    var opts = {};
    Object.defineProperty(opts, "passive", {
      get: function get7() {
        supportsPassive = true;
      }
    });
    window.addEventListener("test-passive", null, opts);
  } catch (e) {
  }
}
var _isServer;
var isServerRendering = function() {
  if (_isServer === void 0) {
    if (!inBrowser && !inWeex && typeof global !== "undefined") {
      _isServer = global["process"] && global["process"].env.VUE_ENV === "server";
    } else {
      _isServer = false;
    }
  }
  return _isServer;
};
var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;
function isNative(Ctor) {
  return typeof Ctor === "function" && /native code/.test(Ctor.toString());
}
var hasSymbol = typeof Symbol !== "undefined" && isNative(Symbol) && typeof Reflect !== "undefined" && isNative(Reflect.ownKeys);
var _Set;
if (typeof Set !== "undefined" && isNative(Set)) {
  _Set = Set;
} else {
  _Set = /* @__PURE__ */ function() {
    function Set2() {
      this.set = /* @__PURE__ */ Object.create(null);
    }
    Set2.prototype.has = function has2(key) {
      return this.set[key] === true;
    };
    Set2.prototype.add = function add4(key) {
      this.set[key] = true;
    };
    Set2.prototype.clear = function clear2() {
      this.set = /* @__PURE__ */ Object.create(null);
    };
    return Set2;
  }();
}
var warn = noop$1;
var uid$3 = 0;
var Dep = function Dep2() {
  this.id = uid$3++;
  this.subs = [];
};
Dep.prototype.addSub = function addSub(sub) {
  this.subs.push(sub);
};
Dep.prototype.removeSub = function removeSub(sub) {
  remove(this.subs, sub);
};
Dep.prototype.depend = function depend() {
  if (Dep.target) {
    Dep.target.addDep(this);
  }
};
Dep.prototype.notify = function notify() {
  var subs = this.subs.slice();
  for (var i = 0, l = subs.length; i < l; i++) {
    subs[i].update();
  }
};
Dep.target = null;
var targetStack = [];
function pushTarget(target2) {
  targetStack.push(target2);
  Dep.target = target2;
}
function popTarget() {
  targetStack.pop();
  Dep.target = targetStack[targetStack.length - 1];
}
var VNode = function VNode2(tag2, data25, children, text, elm, context, componentOptions, asyncFactory) {
  this.tag = tag2;
  this.data = data25;
  this.children = children;
  this.text = text;
  this.elm = elm;
  this.ns = void 0;
  this.context = context;
  this.fnContext = void 0;
  this.fnOptions = void 0;
  this.fnScopeId = void 0;
  this.key = data25 && data25.key;
  this.componentOptions = componentOptions;
  this.componentInstance = void 0;
  this.parent = void 0;
  this.raw = false;
  this.isStatic = false;
  this.isRootInsert = true;
  this.isComment = false;
  this.isCloned = false;
  this.isOnce = false;
  this.asyncFactory = asyncFactory;
  this.asyncMeta = void 0;
  this.isAsyncPlaceholder = false;
};
var prototypeAccessors = { child: { configurable: true } };
prototypeAccessors.child.get = function() {
  return this.componentInstance;
};
Object.defineProperties(VNode.prototype, prototypeAccessors);
var createEmptyVNode = function(text) {
  if (text === void 0)
    text = "";
  var node = new VNode();
  node.text = text;
  node.isComment = true;
  return node;
};
function createTextVNode(val) {
  return new VNode(void 0, void 0, void 0, String(val));
}
function cloneVNode(vnode) {
  var cloned = new VNode(vnode.tag, vnode.data, vnode.children && vnode.children.slice(), vnode.text, vnode.elm, vnode.context, vnode.componentOptions, vnode.asyncFactory);
  cloned.ns = vnode.ns;
  cloned.isStatic = vnode.isStatic;
  cloned.key = vnode.key;
  cloned.isComment = vnode.isComment;
  cloned.fnContext = vnode.fnContext;
  cloned.fnOptions = vnode.fnOptions;
  cloned.fnScopeId = vnode.fnScopeId;
  cloned.asyncMeta = vnode.asyncMeta;
  cloned.isCloned = true;
  return cloned;
}
var arrayProto$1 = Array.prototype;
var arrayMethods = Object.create(arrayProto$1);
var methodsToPatch = [
  "push",
  "pop",
  "shift",
  "unshift",
  "splice",
  "sort",
  "reverse"
];
methodsToPatch.forEach(function(method3) {
  var original = arrayProto$1[method3];
  def$1(arrayMethods, method3, function mutator() {
    var args = [], len = arguments.length;
    while (len--)
      args[len] = arguments[len];
    var result = original.apply(this, args);
    var ob = this.__ob__;
    var inserted2;
    switch (method3) {
      case "push":
      case "unshift":
        inserted2 = args;
        break;
      case "splice":
        inserted2 = args.slice(2);
        break;
    }
    if (inserted2) {
      ob.observeArray(inserted2);
    }
    ob.dep.notify();
    return result;
  });
});
var arrayKeys = Object.getOwnPropertyNames(arrayMethods);
var shouldObserve = true;
function toggleObserving(value6) {
  shouldObserve = value6;
}
var Observer = function Observer2(value6) {
  this.value = value6;
  this.dep = new Dep();
  this.vmCount = 0;
  def$1(value6, "__ob__", this);
  if (Array.isArray(value6)) {
    if (hasProto$1) {
      protoAugment(value6, arrayMethods);
    } else {
      copyAugment(value6, arrayMethods, arrayKeys);
    }
    this.observeArray(value6);
  } else {
    this.walk(value6);
  }
};
Observer.prototype.walk = function walk(obj) {
  var keys3 = Object.keys(obj);
  for (var i = 0; i < keys3.length; i++) {
    defineReactive$$1(obj, keys3[i]);
  }
};
Observer.prototype.observeArray = function observeArray(items2) {
  for (var i = 0, l = items2.length; i < l; i++) {
    observe(items2[i]);
  }
};
function protoAugment(target2, src) {
  target2.__proto__ = src;
}
function copyAugment(target2, src, keys3) {
  for (var i = 0, l = keys3.length; i < l; i++) {
    var key = keys3[i];
    def$1(target2, key, src[key]);
  }
}
function observe(value6, asRootData) {
  if (!isObject$7(value6) || value6 instanceof VNode) {
    return;
  }
  var ob;
  if (hasOwn$1(value6, "__ob__") && value6.__ob__ instanceof Observer) {
    ob = value6.__ob__;
  } else if (shouldObserve && !isServerRendering() && (Array.isArray(value6) || isPlainObject$1(value6)) && Object.isExtensible(value6) && !value6._isVue) {
    ob = new Observer(value6);
  }
  if (asRootData && ob) {
    ob.vmCount++;
  }
  return ob;
}
function defineReactive$$1(obj, key, val, customSetter, shallow) {
  var dep = new Dep();
  var property2 = Object.getOwnPropertyDescriptor(obj, key);
  if (property2 && property2.configurable === false) {
    return;
  }
  var getter = property2 && property2.get;
  var setter2 = property2 && property2.set;
  if ((!getter || setter2) && arguments.length === 2) {
    val = obj[key];
  }
  var childOb = !shallow && observe(val);
  Object.defineProperty(obj, key, {
    enumerable: true,
    configurable: true,
    get: function reactiveGetter() {
      var value6 = getter ? getter.call(obj) : val;
      if (Dep.target) {
        dep.depend();
        if (childOb) {
          childOb.dep.depend();
          if (Array.isArray(value6)) {
            dependArray(value6);
          }
        }
      }
      return value6;
    },
    set: function reactiveSetter(newVal) {
      var value6 = getter ? getter.call(obj) : val;
      if (newVal === value6 || newVal !== newVal && value6 !== value6) {
        return;
      }
      if (getter && !setter2) {
        return;
      }
      if (setter2) {
        setter2.call(obj, newVal);
      } else {
        val = newVal;
      }
      childOb = !shallow && observe(newVal);
      dep.notify();
    }
  });
}
function set(target2, key, val) {
  if (Array.isArray(target2) && isValidArrayIndex(key)) {
    target2.length = Math.max(target2.length, key);
    target2.splice(key, 1, val);
    return val;
  }
  if (key in target2 && !(key in Object.prototype)) {
    target2[key] = val;
    return val;
  }
  var ob = target2.__ob__;
  if (target2._isVue || ob && ob.vmCount) {
    return val;
  }
  if (!ob) {
    target2[key] = val;
    return val;
  }
  defineReactive$$1(ob.value, key, val);
  ob.dep.notify();
  return val;
}
function del(target2, key) {
  if (Array.isArray(target2) && isValidArrayIndex(key)) {
    target2.splice(key, 1);
    return;
  }
  var ob = target2.__ob__;
  if (target2._isVue || ob && ob.vmCount) {
    return;
  }
  if (!hasOwn$1(target2, key)) {
    return;
  }
  delete target2[key];
  if (!ob) {
    return;
  }
  ob.dep.notify();
}
function dependArray(value6) {
  for (var e = void 0, i = 0, l = value6.length; i < l; i++) {
    e = value6[i];
    e && e.__ob__ && e.__ob__.dep.depend();
    if (Array.isArray(e)) {
      dependArray(e);
    }
  }
}
var strats = config.optionMergeStrategies;
function mergeData(to, from) {
  if (!from) {
    return to;
  }
  var key, toVal, fromVal;
  var keys3 = hasSymbol ? Reflect.ownKeys(from) : Object.keys(from);
  for (var i = 0; i < keys3.length; i++) {
    key = keys3[i];
    if (key === "__ob__") {
      continue;
    }
    toVal = to[key];
    fromVal = from[key];
    if (!hasOwn$1(to, key)) {
      set(to, key, fromVal);
    } else if (toVal !== fromVal && isPlainObject$1(toVal) && isPlainObject$1(fromVal)) {
      mergeData(toVal, fromVal);
    }
  }
  return to;
}
function mergeDataOrFn(parentVal, childVal, vm) {
  if (!vm) {
    if (!childVal) {
      return parentVal;
    }
    if (!parentVal) {
      return childVal;
    }
    return function mergedDataFn() {
      return mergeData(typeof childVal === "function" ? childVal.call(this, this) : childVal, typeof parentVal === "function" ? parentVal.call(this, this) : parentVal);
    };
  } else {
    return function mergedInstanceDataFn() {
      var instanceData = typeof childVal === "function" ? childVal.call(vm, vm) : childVal;
      var defaultData = typeof parentVal === "function" ? parentVal.call(vm, vm) : parentVal;
      if (instanceData) {
        return mergeData(instanceData, defaultData);
      } else {
        return defaultData;
      }
    };
  }
}
strats.data = function(parentVal, childVal, vm) {
  if (!vm) {
    if (childVal && typeof childVal !== "function") {
      return parentVal;
    }
    return mergeDataOrFn(parentVal, childVal);
  }
  return mergeDataOrFn(parentVal, childVal, vm);
};
function mergeHook(parentVal, childVal) {
  var res = childVal ? parentVal ? parentVal.concat(childVal) : Array.isArray(childVal) ? childVal : [childVal] : parentVal;
  return res ? dedupeHooks(res) : res;
}
function dedupeHooks(hooks2) {
  var res = [];
  for (var i = 0; i < hooks2.length; i++) {
    if (res.indexOf(hooks2[i]) === -1) {
      res.push(hooks2[i]);
    }
  }
  return res;
}
LIFECYCLE_HOOKS.forEach(function(hook) {
  strats[hook] = mergeHook;
});
function mergeAssets(parentVal, childVal, vm, key) {
  var res = Object.create(parentVal || null);
  if (childVal) {
    return extend$1(res, childVal);
  } else {
    return res;
  }
}
ASSET_TYPES.forEach(function(type3) {
  strats[type3 + "s"] = mergeAssets;
});
strats.watch = function(parentVal, childVal, vm, key) {
  if (parentVal === nativeWatch) {
    parentVal = void 0;
  }
  if (childVal === nativeWatch) {
    childVal = void 0;
  }
  if (!childVal) {
    return Object.create(parentVal || null);
  }
  if (!parentVal) {
    return childVal;
  }
  var ret = {};
  extend$1(ret, parentVal);
  for (var key$1 in childVal) {
    var parent2 = ret[key$1];
    var child = childVal[key$1];
    if (parent2 && !Array.isArray(parent2)) {
      parent2 = [parent2];
    }
    ret[key$1] = parent2 ? parent2.concat(child) : Array.isArray(child) ? child : [child];
  }
  return ret;
};
strats.props = strats.methods = strats.inject = strats.computed = function(parentVal, childVal, vm, key) {
  if (childVal && false) {
    assertObjectType(key, childVal);
  }
  if (!parentVal) {
    return childVal;
  }
  var ret = /* @__PURE__ */ Object.create(null);
  extend$1(ret, parentVal);
  if (childVal) {
    extend$1(ret, childVal);
  }
  return ret;
};
strats.provide = mergeDataOrFn;
var defaultStrat = function(parentVal, childVal) {
  return childVal === void 0 ? parentVal : childVal;
};
function normalizeProps(options2, vm) {
  var props2 = options2.props;
  if (!props2) {
    return;
  }
  var res = {};
  var i, val, name;
  if (Array.isArray(props2)) {
    i = props2.length;
    while (i--) {
      val = props2[i];
      if (typeof val === "string") {
        name = camelize(val);
        res[name] = { type: null };
      }
    }
  } else if (isPlainObject$1(props2)) {
    for (var key in props2) {
      val = props2[key];
      name = camelize(key);
      res[name] = isPlainObject$1(val) ? val : { type: val };
    }
  } else
    ;
  options2.props = res;
}
function normalizeInject(options2, vm) {
  var inject = options2.inject;
  if (!inject) {
    return;
  }
  var normalized = options2.inject = {};
  if (Array.isArray(inject)) {
    for (var i = 0; i < inject.length; i++) {
      normalized[inject[i]] = { from: inject[i] };
    }
  } else if (isPlainObject$1(inject)) {
    for (var key in inject) {
      var val = inject[key];
      normalized[key] = isPlainObject$1(val) ? extend$1({ from: key }, val) : { from: val };
    }
  } else
    ;
}
function normalizeDirectives(options2) {
  var dirs = options2.directives;
  if (dirs) {
    for (var key in dirs) {
      var def$$1 = dirs[key];
      if (typeof def$$1 === "function") {
        dirs[key] = { bind: def$$1, update: def$$1 };
      }
    }
  }
}
function assertObjectType(name, value6, vm) {
  if (!isPlainObject$1(value6)) {
    warn('Invalid value for option "' + name + '": expected an Object, but got ' + toRawType(value6) + ".");
  }
}
function mergeOptions(parent2, child, vm) {
  if (typeof child === "function") {
    child = child.options;
  }
  normalizeProps(child);
  normalizeInject(child);
  normalizeDirectives(child);
  if (!child._base) {
    if (child.extends) {
      parent2 = mergeOptions(parent2, child.extends, vm);
    }
    if (child.mixins) {
      for (var i = 0, l = child.mixins.length; i < l; i++) {
        parent2 = mergeOptions(parent2, child.mixins[i], vm);
      }
    }
  }
  var options2 = {};
  var key;
  for (key in parent2) {
    mergeField(key);
  }
  for (key in child) {
    if (!hasOwn$1(parent2, key)) {
      mergeField(key);
    }
  }
  function mergeField(key2) {
    var strat = strats[key2] || defaultStrat;
    options2[key2] = strat(parent2[key2], child[key2], vm, key2);
  }
  return options2;
}
function resolveAsset(options2, type3, id2, warnMissing) {
  if (typeof id2 !== "string") {
    return;
  }
  var assets = options2[type3];
  if (hasOwn$1(assets, id2)) {
    return assets[id2];
  }
  var camelizedId = camelize(id2);
  if (hasOwn$1(assets, camelizedId)) {
    return assets[camelizedId];
  }
  var PascalCaseId = capitalize(camelizedId);
  if (hasOwn$1(assets, PascalCaseId)) {
    return assets[PascalCaseId];
  }
  var res = assets[id2] || assets[camelizedId] || assets[PascalCaseId];
  return res;
}
function validateProp(key, propOptions, propsData, vm) {
  var prop = propOptions[key];
  var absent = !hasOwn$1(propsData, key);
  var value6 = propsData[key];
  var booleanIndex = getTypeIndex(Boolean, prop.type);
  if (booleanIndex > -1) {
    if (absent && !hasOwn$1(prop, "default")) {
      value6 = false;
    } else if (value6 === "" || value6 === hyphenate$1(key)) {
      var stringIndex = getTypeIndex(String, prop.type);
      if (stringIndex < 0 || booleanIndex < stringIndex) {
        value6 = true;
      }
    }
  }
  if (value6 === void 0) {
    value6 = getPropDefaultValue(vm, prop, key);
    var prevShouldObserve = shouldObserve;
    toggleObserving(true);
    observe(value6);
    toggleObserving(prevShouldObserve);
  }
  return value6;
}
function getPropDefaultValue(vm, prop, key) {
  if (!hasOwn$1(prop, "default")) {
    return void 0;
  }
  var def2 = prop.default;
  if (vm && vm.$options.propsData && vm.$options.propsData[key] === void 0 && vm._props[key] !== void 0) {
    return vm._props[key];
  }
  return typeof def2 === "function" && getType(prop.type) !== "Function" ? def2.call(vm) : def2;
}
var functionTypeCheckRE = /^\s*function (\w+)/;
function getType(fn) {
  var match = fn && fn.toString().match(functionTypeCheckRE);
  return match ? match[1] : "";
}
function isSameType(a, b) {
  return getType(a) === getType(b);
}
function getTypeIndex(type3, expectedTypes) {
  if (!Array.isArray(expectedTypes)) {
    return isSameType(expectedTypes, type3) ? 0 : -1;
  }
  for (var i = 0, len = expectedTypes.length; i < len; i++) {
    if (isSameType(expectedTypes[i], type3)) {
      return i;
    }
  }
  return -1;
}
function handleError(err, vm, info) {
  pushTarget();
  try {
    if (vm) {
      var cur = vm;
      while (cur = cur.$parent) {
        var hooks2 = cur.$options.errorCaptured;
        if (hooks2) {
          for (var i = 0; i < hooks2.length; i++) {
            try {
              var capture = hooks2[i].call(cur, err, vm, info) === false;
              if (capture) {
                return;
              }
            } catch (e) {
              globalHandleError(e, cur, "errorCaptured hook");
            }
          }
        }
      }
    }
    globalHandleError(err, vm, info);
  } finally {
    popTarget();
  }
}
function invokeWithErrorHandling(handler2, context, args, vm, info) {
  var res;
  try {
    res = args ? handler2.apply(context, args) : handler2.call(context);
    if (res && !res._isVue && isPromise$1(res) && !res._handled) {
      res.catch(function(e) {
        return handleError(e, vm, info + " (Promise/async)");
      });
      res._handled = true;
    }
  } catch (e) {
    handleError(e, vm, info);
  }
  return res;
}
function globalHandleError(err, vm, info) {
  if (config.errorHandler) {
    try {
      return config.errorHandler.call(null, err, vm, info);
    } catch (e) {
      if (e !== err) {
        logError(e);
      }
    }
  }
  logError(err);
}
function logError(err, vm, info) {
  if ((inBrowser || inWeex) && typeof console !== "undefined") {
    console.error(err);
  } else {
    throw err;
  }
}
var isUsingMicroTask = false;
var callbacks = [];
var pending = false;
function flushCallbacks() {
  pending = false;
  var copies = callbacks.slice(0);
  callbacks.length = 0;
  for (var i = 0; i < copies.length; i++) {
    copies[i]();
  }
}
var timerFunc;
if (typeof Promise !== "undefined" && isNative(Promise)) {
  var p = Promise.resolve();
  timerFunc = function() {
    p.then(flushCallbacks);
    if (isIOS) {
      setTimeout(noop$1);
    }
  };
  isUsingMicroTask = true;
} else if (!isIE && typeof MutationObserver !== "undefined" && (isNative(MutationObserver) || MutationObserver.toString() === "[object MutationObserverConstructor]")) {
  var counter = 1;
  var observer = new MutationObserver(flushCallbacks);
  var textNode = document.createTextNode(String(counter));
  observer.observe(textNode, {
    characterData: true
  });
  timerFunc = function() {
    counter = (counter + 1) % 2;
    textNode.data = String(counter);
  };
  isUsingMicroTask = true;
} else if (typeof setImmediate !== "undefined" && isNative(setImmediate)) {
  timerFunc = function() {
    setImmediate(flushCallbacks);
  };
} else {
  timerFunc = function() {
    setTimeout(flushCallbacks, 0);
  };
}
function nextTick(cb, ctx2) {
  var _resolve;
  callbacks.push(function() {
    if (cb) {
      try {
        cb.call(ctx2);
      } catch (e) {
        handleError(e, ctx2, "nextTick");
      }
    } else if (_resolve) {
      _resolve(ctx2);
    }
  });
  if (!pending) {
    pending = true;
    timerFunc();
  }
  if (!cb && typeof Promise !== "undefined") {
    return new Promise(function(resolve) {
      _resolve = resolve;
    });
  }
}
var seenObjects = new _Set();
function traverse(val) {
  _traverse(val, seenObjects);
  seenObjects.clear();
}
function _traverse(val, seen) {
  var i, keys3;
  var isA = Array.isArray(val);
  if (!isA && !isObject$7(val) || Object.isFrozen(val) || val instanceof VNode) {
    return;
  }
  if (val.__ob__) {
    var depId = val.__ob__.dep.id;
    if (seen.has(depId)) {
      return;
    }
    seen.add(depId);
  }
  if (isA) {
    i = val.length;
    while (i--) {
      _traverse(val[i], seen);
    }
  } else {
    keys3 = Object.keys(val);
    i = keys3.length;
    while (i--) {
      _traverse(val[keys3[i]], seen);
    }
  }
}
var normalizeEvent = cached(function(name) {
  var passive = name.charAt(0) === "&";
  name = passive ? name.slice(1) : name;
  var once$$1 = name.charAt(0) === "~";
  name = once$$1 ? name.slice(1) : name;
  var capture = name.charAt(0) === "!";
  name = capture ? name.slice(1) : name;
  return {
    name,
    once: once$$1,
    capture,
    passive
  };
});
function createFnInvoker(fns, vm) {
  function invoker() {
    var arguments$1 = arguments;
    var fns2 = invoker.fns;
    if (Array.isArray(fns2)) {
      var cloned = fns2.slice();
      for (var i = 0; i < cloned.length; i++) {
        invokeWithErrorHandling(cloned[i], null, arguments$1, vm, "v-on handler");
      }
    } else {
      return invokeWithErrorHandling(fns2, null, arguments, vm, "v-on handler");
    }
  }
  invoker.fns = fns;
  return invoker;
}
function updateListeners(on3, oldOn, add4, remove$$12, createOnceHandler2, vm) {
  var name, cur, old, event2;
  for (name in on3) {
    cur = on3[name];
    old = oldOn[name];
    event2 = normalizeEvent(name);
    if (isUndef(cur))
      ;
    else if (isUndef(old)) {
      if (isUndef(cur.fns)) {
        cur = on3[name] = createFnInvoker(cur, vm);
      }
      if (isTrue(event2.once)) {
        cur = on3[name] = createOnceHandler2(event2.name, cur, event2.capture);
      }
      add4(event2.name, cur, event2.capture, event2.passive, event2.params);
    } else if (cur !== old) {
      old.fns = cur;
      on3[name] = old;
    }
  }
  for (name in oldOn) {
    if (isUndef(on3[name])) {
      event2 = normalizeEvent(name);
      remove$$12(event2.name, oldOn[name], event2.capture);
    }
  }
}
function mergeVNodeHook(def2, hookKey, hook) {
  if (def2 instanceof VNode) {
    def2 = def2.data.hook || (def2.data.hook = {});
  }
  var invoker;
  var oldHook = def2[hookKey];
  function wrappedHook() {
    hook.apply(this, arguments);
    remove(invoker.fns, wrappedHook);
  }
  if (isUndef(oldHook)) {
    invoker = createFnInvoker([wrappedHook]);
  } else {
    if (isDef$1(oldHook.fns) && isTrue(oldHook.merged)) {
      invoker = oldHook;
      invoker.fns.push(wrappedHook);
    } else {
      invoker = createFnInvoker([oldHook, wrappedHook]);
    }
  }
  invoker.merged = true;
  def2[hookKey] = invoker;
}
function extractPropsFromVNodeData(data25, Ctor, tag2) {
  var propOptions = Ctor.options.props;
  if (isUndef(propOptions)) {
    return;
  }
  var res = {};
  var attrs2 = data25.attrs;
  var props2 = data25.props;
  if (isDef$1(attrs2) || isDef$1(props2)) {
    for (var key in propOptions) {
      var altKey = hyphenate$1(key);
      checkProp(res, props2, key, altKey, true) || checkProp(res, attrs2, key, altKey, false);
    }
  }
  return res;
}
function checkProp(res, hash, key, altKey, preserve) {
  if (isDef$1(hash)) {
    if (hasOwn$1(hash, key)) {
      res[key] = hash[key];
      if (!preserve) {
        delete hash[key];
      }
      return true;
    } else if (hasOwn$1(hash, altKey)) {
      res[key] = hash[altKey];
      if (!preserve) {
        delete hash[altKey];
      }
      return true;
    }
  }
  return false;
}
function simpleNormalizeChildren(children) {
  for (var i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children);
    }
  }
  return children;
}
function normalizeChildren(children) {
  return isPrimitive$1(children) ? [createTextVNode(children)] : Array.isArray(children) ? normalizeArrayChildren(children) : void 0;
}
function isTextNode(node) {
  return isDef$1(node) && isDef$1(node.text) && isFalse(node.isComment);
}
function normalizeArrayChildren(children, nestedIndex) {
  var res = [];
  var i, c, lastIndex, last2;
  for (i = 0; i < children.length; i++) {
    c = children[i];
    if (isUndef(c) || typeof c === "boolean") {
      continue;
    }
    lastIndex = res.length - 1;
    last2 = res[lastIndex];
    if (Array.isArray(c)) {
      if (c.length > 0) {
        c = normalizeArrayChildren(c, (nestedIndex || "") + "_" + i);
        if (isTextNode(c[0]) && isTextNode(last2)) {
          res[lastIndex] = createTextVNode(last2.text + c[0].text);
          c.shift();
        }
        res.push.apply(res, c);
      }
    } else if (isPrimitive$1(c)) {
      if (isTextNode(last2)) {
        res[lastIndex] = createTextVNode(last2.text + c);
      } else if (c !== "") {
        res.push(createTextVNode(c));
      }
    } else {
      if (isTextNode(c) && isTextNode(last2)) {
        res[lastIndex] = createTextVNode(last2.text + c.text);
      } else {
        if (isTrue(children._isVList) && isDef$1(c.tag) && isUndef(c.key) && isDef$1(nestedIndex)) {
          c.key = "__vlist" + nestedIndex + "_" + i + "__";
        }
        res.push(c);
      }
    }
  }
  return res;
}
function initProvide(vm) {
  var provide11 = vm.$options.provide;
  if (provide11) {
    vm._provided = typeof provide11 === "function" ? provide11.call(vm) : provide11;
  }
}
function initInjections(vm) {
  var result = resolveInject(vm.$options.inject, vm);
  if (result) {
    toggleObserving(false);
    Object.keys(result).forEach(function(key) {
      {
        defineReactive$$1(vm, key, result[key]);
      }
    });
    toggleObserving(true);
  }
}
function resolveInject(inject, vm) {
  if (inject) {
    var result = /* @__PURE__ */ Object.create(null);
    var keys3 = hasSymbol ? Reflect.ownKeys(inject) : Object.keys(inject);
    for (var i = 0; i < keys3.length; i++) {
      var key = keys3[i];
      if (key === "__ob__") {
        continue;
      }
      var provideKey = inject[key].from;
      var source = vm;
      while (source) {
        if (source._provided && hasOwn$1(source._provided, provideKey)) {
          result[key] = source._provided[provideKey];
          break;
        }
        source = source.$parent;
      }
      if (!source) {
        if ("default" in inject[key]) {
          var provideDefault = inject[key].default;
          result[key] = typeof provideDefault === "function" ? provideDefault.call(vm) : provideDefault;
        }
      }
    }
    return result;
  }
}
function resolveSlots(children, context) {
  if (!children || !children.length) {
    return {};
  }
  var slots = {};
  for (var i = 0, l = children.length; i < l; i++) {
    var child = children[i];
    var data25 = child.data;
    if (data25 && data25.attrs && data25.attrs.slot) {
      delete data25.attrs.slot;
    }
    if ((child.context === context || child.fnContext === context) && data25 && data25.slot != null) {
      var name = data25.slot;
      var slot = slots[name] || (slots[name] = []);
      if (child.tag === "template") {
        slot.push.apply(slot, child.children || []);
      } else {
        slot.push(child);
      }
    } else {
      (slots.default || (slots.default = [])).push(child);
    }
  }
  for (var name$1 in slots) {
    if (slots[name$1].every(isWhitespace)) {
      delete slots[name$1];
    }
  }
  return slots;
}
function isWhitespace(node) {
  return node.isComment && !node.asyncFactory || node.text === " ";
}
function isAsyncPlaceholder(node) {
  return node.isComment && node.asyncFactory;
}
function normalizeScopedSlots(slots, normalSlots, prevSlots) {
  var res;
  var hasNormalSlots = Object.keys(normalSlots).length > 0;
  var isStable = slots ? !!slots.$stable : !hasNormalSlots;
  var key = slots && slots.$key;
  if (!slots) {
    res = {};
  } else if (slots._normalized) {
    return slots._normalized;
  } else if (isStable && prevSlots && prevSlots !== emptyObject && key === prevSlots.$key && !hasNormalSlots && !prevSlots.$hasNormal) {
    return prevSlots;
  } else {
    res = {};
    for (var key$1 in slots) {
      if (slots[key$1] && key$1[0] !== "$") {
        res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);
      }
    }
  }
  for (var key$2 in normalSlots) {
    if (!(key$2 in res)) {
      res[key$2] = proxyNormalSlot(normalSlots, key$2);
    }
  }
  if (slots && Object.isExtensible(slots)) {
    slots._normalized = res;
  }
  def$1(res, "$stable", isStable);
  def$1(res, "$key", key);
  def$1(res, "$hasNormal", hasNormalSlots);
  return res;
}
function normalizeScopedSlot(normalSlots, key, fn) {
  var normalized = function() {
    var res = arguments.length ? fn.apply(null, arguments) : fn({});
    res = res && typeof res === "object" && !Array.isArray(res) ? [res] : normalizeChildren(res);
    var vnode = res && res[0];
    return res && (!vnode || res.length === 1 && vnode.isComment && !isAsyncPlaceholder(vnode)) ? void 0 : res;
  };
  if (fn.proxy) {
    Object.defineProperty(normalSlots, key, {
      get: normalized,
      enumerable: true,
      configurable: true
    });
  }
  return normalized;
}
function proxyNormalSlot(slots, key) {
  return function() {
    return slots[key];
  };
}
function renderList(val, render37) {
  var ret, i, l, keys3, key;
  if (Array.isArray(val) || typeof val === "string") {
    ret = new Array(val.length);
    for (i = 0, l = val.length; i < l; i++) {
      ret[i] = render37(val[i], i);
    }
  } else if (typeof val === "number") {
    ret = new Array(val);
    for (i = 0; i < val; i++) {
      ret[i] = render37(i + 1, i);
    }
  } else if (isObject$7(val)) {
    if (hasSymbol && val[Symbol.iterator]) {
      ret = [];
      var iterator2 = val[Symbol.iterator]();
      var result = iterator2.next();
      while (!result.done) {
        ret.push(render37(result.value, ret.length));
        result = iterator2.next();
      }
    } else {
      keys3 = Object.keys(val);
      ret = new Array(keys3.length);
      for (i = 0, l = keys3.length; i < l; i++) {
        key = keys3[i];
        ret[i] = render37(val[key], key, i);
      }
    }
  }
  if (!isDef$1(ret)) {
    ret = [];
  }
  ret._isVList = true;
  return ret;
}
function renderSlot(name, fallbackRender, props2, bindObject) {
  var scopedSlotFn = this.$scopedSlots[name];
  var nodes;
  if (scopedSlotFn) {
    props2 = props2 || {};
    if (bindObject) {
      props2 = extend$1(extend$1({}, bindObject), props2);
    }
    nodes = scopedSlotFn(props2) || (typeof fallbackRender === "function" ? fallbackRender() : fallbackRender);
  } else {
    nodes = this.$slots[name] || (typeof fallbackRender === "function" ? fallbackRender() : fallbackRender);
  }
  var target2 = props2 && props2.slot;
  if (target2) {
    return this.$createElement("template", { slot: target2 }, nodes);
  } else {
    return nodes;
  }
}
function resolveFilter(id2) {
  return resolveAsset(this.$options, "filters", id2) || identity$1;
}
function isKeyNotMatch(expect, actual) {
  if (Array.isArray(expect)) {
    return expect.indexOf(actual) === -1;
  } else {
    return expect !== actual;
  }
}
function checkKeyCodes(eventKeyCode, key, builtInKeyCode, eventKeyName, builtInKeyName) {
  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;
  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {
    return isKeyNotMatch(builtInKeyName, eventKeyName);
  } else if (mappedKeyCode) {
    return isKeyNotMatch(mappedKeyCode, eventKeyCode);
  } else if (eventKeyName) {
    return hyphenate$1(eventKeyName) !== key;
  }
  return eventKeyCode === void 0;
}
function bindObjectProps(data25, tag2, value6, asProp, isSync) {
  if (value6) {
    if (!isObject$7(value6))
      ;
    else {
      if (Array.isArray(value6)) {
        value6 = toObject$4(value6);
      }
      var hash;
      var loop = function(key2) {
        if (key2 === "class" || key2 === "style" || isReservedAttribute(key2)) {
          hash = data25;
        } else {
          var type3 = data25.attrs && data25.attrs.type;
          hash = asProp || config.mustUseProp(tag2, type3, key2) ? data25.domProps || (data25.domProps = {}) : data25.attrs || (data25.attrs = {});
        }
        var camelizedKey = camelize(key2);
        var hyphenatedKey = hyphenate$1(key2);
        if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {
          hash[key2] = value6[key2];
          if (isSync) {
            var on3 = data25.on || (data25.on = {});
            on3["update:" + key2] = function($event) {
              value6[key2] = $event;
            };
          }
        }
      };
      for (var key in value6)
        loop(key);
    }
  }
  return data25;
}
function renderStatic(index2, isInFor) {
  var cached2 = this._staticTrees || (this._staticTrees = []);
  var tree = cached2[index2];
  if (tree && !isInFor) {
    return tree;
  }
  tree = cached2[index2] = this.$options.staticRenderFns[index2].call(this._renderProxy, null, this);
  markStatic(tree, "__static__" + index2, false);
  return tree;
}
function markOnce(tree, index2, key) {
  markStatic(tree, "__once__" + index2 + (key ? "_" + key : ""), true);
  return tree;
}
function markStatic(tree, key, isOnce) {
  if (Array.isArray(tree)) {
    for (var i = 0; i < tree.length; i++) {
      if (tree[i] && typeof tree[i] !== "string") {
        markStaticNode(tree[i], key + "_" + i, isOnce);
      }
    }
  } else {
    markStaticNode(tree, key, isOnce);
  }
}
function markStaticNode(node, key, isOnce) {
  node.isStatic = true;
  node.key = key;
  node.isOnce = isOnce;
}
function bindObjectListeners(data25, value6) {
  if (value6) {
    if (!isPlainObject$1(value6))
      ;
    else {
      var on3 = data25.on = data25.on ? extend$1({}, data25.on) : {};
      for (var key in value6) {
        var existing = on3[key];
        var ours = value6[key];
        on3[key] = existing ? [].concat(existing, ours) : ours;
      }
    }
  }
  return data25;
}
function resolveScopedSlots(fns, res, hasDynamicKeys, contentHashKey) {
  res = res || { $stable: !hasDynamicKeys };
  for (var i = 0; i < fns.length; i++) {
    var slot = fns[i];
    if (Array.isArray(slot)) {
      resolveScopedSlots(slot, res, hasDynamicKeys);
    } else if (slot) {
      if (slot.proxy) {
        slot.fn.proxy = true;
      }
      res[slot.key] = slot.fn;
    }
  }
  if (contentHashKey) {
    res.$key = contentHashKey;
  }
  return res;
}
function bindDynamicKeys(baseObj, values2) {
  for (var i = 0; i < values2.length; i += 2) {
    var key = values2[i];
    if (typeof key === "string" && key) {
      baseObj[values2[i]] = values2[i + 1];
    }
  }
  return baseObj;
}
function prependModifier(value6, symbol2) {
  return typeof value6 === "string" ? symbol2 + value6 : value6;
}
function installRenderHelpers(target2) {
  target2._o = markOnce;
  target2._n = toNumber$1;
  target2._s = toString$2;
  target2._l = renderList;
  target2._t = renderSlot;
  target2._q = looseEqual$1;
  target2._i = looseIndexOf;
  target2._m = renderStatic;
  target2._f = resolveFilter;
  target2._k = checkKeyCodes;
  target2._b = bindObjectProps;
  target2._v = createTextVNode;
  target2._e = createEmptyVNode;
  target2._u = resolveScopedSlots;
  target2._g = bindObjectListeners;
  target2._d = bindDynamicKeys;
  target2._p = prependModifier;
}
function FunctionalRenderContext(data25, props2, children, parent2, Ctor) {
  var this$1$1 = this;
  var options2 = Ctor.options;
  var contextVm;
  if (hasOwn$1(parent2, "_uid")) {
    contextVm = Object.create(parent2);
    contextVm._original = parent2;
  } else {
    contextVm = parent2;
    parent2 = parent2._original;
  }
  var isCompiled = isTrue(options2._compiled);
  var needNormalization = !isCompiled;
  this.data = data25;
  this.props = props2;
  this.children = children;
  this.parent = parent2;
  this.listeners = data25.on || emptyObject;
  this.injections = resolveInject(options2.inject, parent2);
  this.slots = function() {
    if (!this$1$1.$slots) {
      normalizeScopedSlots(data25.scopedSlots, this$1$1.$slots = resolveSlots(children, parent2));
    }
    return this$1$1.$slots;
  };
  Object.defineProperty(this, "scopedSlots", {
    enumerable: true,
    get: function get7() {
      return normalizeScopedSlots(data25.scopedSlots, this.slots());
    }
  });
  if (isCompiled) {
    this.$options = options2;
    this.$slots = this.slots();
    this.$scopedSlots = normalizeScopedSlots(data25.scopedSlots, this.$slots);
  }
  if (options2._scopeId) {
    this._c = function(a, b, c, d) {
      var vnode = createElement(contextVm, a, b, c, d, needNormalization);
      if (vnode && !Array.isArray(vnode)) {
        vnode.fnScopeId = options2._scopeId;
        vnode.fnContext = parent2;
      }
      return vnode;
    };
  } else {
    this._c = function(a, b, c, d) {
      return createElement(contextVm, a, b, c, d, needNormalization);
    };
  }
}
installRenderHelpers(FunctionalRenderContext.prototype);
function createFunctionalComponent(Ctor, propsData, data25, contextVm, children) {
  var options2 = Ctor.options;
  var props2 = {};
  var propOptions = options2.props;
  if (isDef$1(propOptions)) {
    for (var key in propOptions) {
      props2[key] = validateProp(key, propOptions, propsData || emptyObject);
    }
  } else {
    if (isDef$1(data25.attrs)) {
      mergeProps(props2, data25.attrs);
    }
    if (isDef$1(data25.props)) {
      mergeProps(props2, data25.props);
    }
  }
  var renderContext = new FunctionalRenderContext(data25, props2, children, contextVm, Ctor);
  var vnode = options2.render.call(null, renderContext._c, renderContext);
  if (vnode instanceof VNode) {
    return cloneAndMarkFunctionalResult(vnode, data25, renderContext.parent, options2);
  } else if (Array.isArray(vnode)) {
    var vnodes = normalizeChildren(vnode) || [];
    var res = new Array(vnodes.length);
    for (var i = 0; i < vnodes.length; i++) {
      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data25, renderContext.parent, options2);
    }
    return res;
  }
}
function cloneAndMarkFunctionalResult(vnode, data25, contextVm, options2, renderContext) {
  var clone2 = cloneVNode(vnode);
  clone2.fnContext = contextVm;
  clone2.fnOptions = options2;
  if (data25.slot) {
    (clone2.data || (clone2.data = {})).slot = data25.slot;
  }
  return clone2;
}
function mergeProps(to, from) {
  for (var key in from) {
    to[camelize(key)] = from[key];
  }
}
var componentVNodeHooks = {
  init: function init(vnode, hydrating) {
    if (vnode.componentInstance && !vnode.componentInstance._isDestroyed && vnode.data.keepAlive) {
      var mountedNode = vnode;
      componentVNodeHooks.prepatch(mountedNode, mountedNode);
    } else {
      var child = vnode.componentInstance = createComponentInstanceForVnode(vnode, activeInstance);
      child.$mount(hydrating ? vnode.elm : void 0, hydrating);
    }
  },
  prepatch: function prepatch(oldVnode, vnode) {
    var options2 = vnode.componentOptions;
    var child = vnode.componentInstance = oldVnode.componentInstance;
    updateChildComponent(child, options2.propsData, options2.listeners, vnode, options2.children);
  },
  insert: function insert(vnode) {
    var context = vnode.context;
    var componentInstance = vnode.componentInstance;
    if (!componentInstance._isMounted) {
      componentInstance._isMounted = true;
      callHook(componentInstance, "mounted");
    }
    if (vnode.data.keepAlive) {
      if (context._isMounted) {
        queueActivatedComponent(componentInstance);
      } else {
        activateChildComponent(componentInstance, true);
      }
    }
  },
  destroy: function destroy(vnode) {
    var componentInstance = vnode.componentInstance;
    if (!componentInstance._isDestroyed) {
      if (!vnode.data.keepAlive) {
        componentInstance.$destroy();
      } else {
        deactivateChildComponent(componentInstance, true);
      }
    }
  }
};
var hooksToMerge = Object.keys(componentVNodeHooks);
function createComponent(Ctor, data25, context, children, tag2) {
  if (isUndef(Ctor)) {
    return;
  }
  var baseCtor = context.$options._base;
  if (isObject$7(Ctor)) {
    Ctor = baseCtor.extend(Ctor);
  }
  if (typeof Ctor !== "function") {
    return;
  }
  var asyncFactory;
  if (isUndef(Ctor.cid)) {
    asyncFactory = Ctor;
    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);
    if (Ctor === void 0) {
      return createAsyncPlaceholder(asyncFactory, data25, context, children, tag2);
    }
  }
  data25 = data25 || {};
  resolveConstructorOptions(Ctor);
  if (isDef$1(data25.model)) {
    transformModel(Ctor.options, data25);
  }
  var propsData = extractPropsFromVNodeData(data25, Ctor);
  if (isTrue(Ctor.options.functional)) {
    return createFunctionalComponent(Ctor, propsData, data25, context, children);
  }
  var listeners = data25.on;
  data25.on = data25.nativeOn;
  if (isTrue(Ctor.options.abstract)) {
    var slot = data25.slot;
    data25 = {};
    if (slot) {
      data25.slot = slot;
    }
  }
  installComponentHooks(data25);
  var name = Ctor.options.name || tag2;
  var vnode = new VNode("vue-component-" + Ctor.cid + (name ? "-" + name : ""), data25, void 0, void 0, void 0, context, { Ctor, propsData, listeners, tag: tag2, children }, asyncFactory);
  return vnode;
}
function createComponentInstanceForVnode(vnode, parent2) {
  var options2 = {
    _isComponent: true,
    _parentVnode: vnode,
    parent: parent2
  };
  var inlineTemplate = vnode.data.inlineTemplate;
  if (isDef$1(inlineTemplate)) {
    options2.render = inlineTemplate.render;
    options2.staticRenderFns = inlineTemplate.staticRenderFns;
  }
  return new vnode.componentOptions.Ctor(options2);
}
function installComponentHooks(data25) {
  var hooks2 = data25.hook || (data25.hook = {});
  for (var i = 0; i < hooksToMerge.length; i++) {
    var key = hooksToMerge[i];
    var existing = hooks2[key];
    var toMerge = componentVNodeHooks[key];
    if (existing !== toMerge && !(existing && existing._merged)) {
      hooks2[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;
    }
  }
}
function mergeHook$1(f1, f2) {
  var merged2 = function(a, b) {
    f1(a, b);
    f2(a, b);
  };
  merged2._merged = true;
  return merged2;
}
function transformModel(options2, data25) {
  var prop = options2.model && options2.model.prop || "value";
  var event2 = options2.model && options2.model.event || "input";
  (data25.attrs || (data25.attrs = {}))[prop] = data25.model.value;
  var on3 = data25.on || (data25.on = {});
  var existing = on3[event2];
  var callback = data25.model.callback;
  if (isDef$1(existing)) {
    if (Array.isArray(existing) ? existing.indexOf(callback) === -1 : existing !== callback) {
      on3[event2] = [callback].concat(existing);
    }
  } else {
    on3[event2] = callback;
  }
}
var SIMPLE_NORMALIZE = 1;
var ALWAYS_NORMALIZE = 2;
function createElement(context, tag2, data25, children, normalizationType, alwaysNormalize) {
  if (Array.isArray(data25) || isPrimitive$1(data25)) {
    normalizationType = children;
    children = data25;
    data25 = void 0;
  }
  if (isTrue(alwaysNormalize)) {
    normalizationType = ALWAYS_NORMALIZE;
  }
  return _createElement(context, tag2, data25, children, normalizationType);
}
function _createElement(context, tag2, data25, children, normalizationType) {
  if (isDef$1(data25) && isDef$1(data25.__ob__)) {
    return createEmptyVNode();
  }
  if (isDef$1(data25) && isDef$1(data25.is)) {
    tag2 = data25.is;
  }
  if (!tag2) {
    return createEmptyVNode();
  }
  if (Array.isArray(children) && typeof children[0] === "function") {
    data25 = data25 || {};
    data25.scopedSlots = { default: children[0] };
    children.length = 0;
  }
  if (normalizationType === ALWAYS_NORMALIZE) {
    children = normalizeChildren(children);
  } else if (normalizationType === SIMPLE_NORMALIZE) {
    children = simpleNormalizeChildren(children);
  }
  var vnode, ns;
  if (typeof tag2 === "string") {
    var Ctor;
    ns = context.$vnode && context.$vnode.ns || config.getTagNamespace(tag2);
    if (config.isReservedTag(tag2)) {
      vnode = new VNode(config.parsePlatformTagName(tag2), data25, children, void 0, void 0, context);
    } else if ((!data25 || !data25.pre) && isDef$1(Ctor = resolveAsset(context.$options, "components", tag2))) {
      vnode = createComponent(Ctor, data25, context, children, tag2);
    } else {
      vnode = new VNode(tag2, data25, children, void 0, void 0, context);
    }
  } else {
    vnode = createComponent(tag2, data25, context, children);
  }
  if (Array.isArray(vnode)) {
    return vnode;
  } else if (isDef$1(vnode)) {
    if (isDef$1(ns)) {
      applyNS(vnode, ns);
    }
    if (isDef$1(data25)) {
      registerDeepBindings(data25);
    }
    return vnode;
  } else {
    return createEmptyVNode();
  }
}
function applyNS(vnode, ns, force) {
  vnode.ns = ns;
  if (vnode.tag === "foreignObject") {
    ns = void 0;
    force = true;
  }
  if (isDef$1(vnode.children)) {
    for (var i = 0, l = vnode.children.length; i < l; i++) {
      var child = vnode.children[i];
      if (isDef$1(child.tag) && (isUndef(child.ns) || isTrue(force) && child.tag !== "svg")) {
        applyNS(child, ns, force);
      }
    }
  }
}
function registerDeepBindings(data25) {
  if (isObject$7(data25.style)) {
    traverse(data25.style);
  }
  if (isObject$7(data25.class)) {
    traverse(data25.class);
  }
}
function initRender(vm) {
  vm._vnode = null;
  vm._staticTrees = null;
  var options2 = vm.$options;
  var parentVnode = vm.$vnode = options2._parentVnode;
  var renderContext = parentVnode && parentVnode.context;
  vm.$slots = resolveSlots(options2._renderChildren, renderContext);
  vm.$scopedSlots = emptyObject;
  vm._c = function(a, b, c, d) {
    return createElement(vm, a, b, c, d, false);
  };
  vm.$createElement = function(a, b, c, d) {
    return createElement(vm, a, b, c, d, true);
  };
  var parentData = parentVnode && parentVnode.data;
  {
    defineReactive$$1(vm, "$attrs", parentData && parentData.attrs || emptyObject, null, true);
    defineReactive$$1(vm, "$listeners", options2._parentListeners || emptyObject, null, true);
  }
}
var currentRenderingInstance = null;
function renderMixin(Vue2) {
  installRenderHelpers(Vue2.prototype);
  Vue2.prototype.$nextTick = function(fn) {
    return nextTick(fn, this);
  };
  Vue2.prototype._render = function() {
    var vm = this;
    var ref2 = vm.$options;
    var render37 = ref2.render;
    var _parentVnode = ref2._parentVnode;
    if (_parentVnode) {
      vm.$scopedSlots = normalizeScopedSlots(_parentVnode.data.scopedSlots, vm.$slots, vm.$scopedSlots);
    }
    vm.$vnode = _parentVnode;
    var vnode;
    try {
      currentRenderingInstance = vm;
      vnode = render37.call(vm._renderProxy, vm.$createElement);
    } catch (e) {
      handleError(e, vm, "render");
      {
        vnode = vm._vnode;
      }
    } finally {
      currentRenderingInstance = null;
    }
    if (Array.isArray(vnode) && vnode.length === 1) {
      vnode = vnode[0];
    }
    if (!(vnode instanceof VNode)) {
      vnode = createEmptyVNode();
    }
    vnode.parent = _parentVnode;
    return vnode;
  };
}
function ensureCtor(comp, base) {
  if (comp.__esModule || hasSymbol && comp[Symbol.toStringTag] === "Module") {
    comp = comp.default;
  }
  return isObject$7(comp) ? base.extend(comp) : comp;
}
function createAsyncPlaceholder(factory, data25, context, children, tag2) {
  var node = createEmptyVNode();
  node.asyncFactory = factory;
  node.asyncMeta = { data: data25, context, children, tag: tag2 };
  return node;
}
function resolveAsyncComponent(factory, baseCtor) {
  if (isTrue(factory.error) && isDef$1(factory.errorComp)) {
    return factory.errorComp;
  }
  if (isDef$1(factory.resolved)) {
    return factory.resolved;
  }
  var owner = currentRenderingInstance;
  if (owner && isDef$1(factory.owners) && factory.owners.indexOf(owner) === -1) {
    factory.owners.push(owner);
  }
  if (isTrue(factory.loading) && isDef$1(factory.loadingComp)) {
    return factory.loadingComp;
  }
  if (owner && !isDef$1(factory.owners)) {
    var owners = factory.owners = [owner];
    var sync = true;
    var timerLoading = null;
    var timerTimeout = null;
    owner.$on("hook:destroyed", function() {
      return remove(owners, owner);
    });
    var forceRender = function(renderCompleted) {
      for (var i = 0, l = owners.length; i < l; i++) {
        owners[i].$forceUpdate();
      }
      if (renderCompleted) {
        owners.length = 0;
        if (timerLoading !== null) {
          clearTimeout(timerLoading);
          timerLoading = null;
        }
        if (timerTimeout !== null) {
          clearTimeout(timerTimeout);
          timerTimeout = null;
        }
      }
    };
    var resolve = once(function(res2) {
      factory.resolved = ensureCtor(res2, baseCtor);
      if (!sync) {
        forceRender(true);
      } else {
        owners.length = 0;
      }
    });
    var reject = once(function(reason) {
      if (isDef$1(factory.errorComp)) {
        factory.error = true;
        forceRender(true);
      }
    });
    var res = factory(resolve, reject);
    if (isObject$7(res)) {
      if (isPromise$1(res)) {
        if (isUndef(factory.resolved)) {
          res.then(resolve, reject);
        }
      } else if (isPromise$1(res.component)) {
        res.component.then(resolve, reject);
        if (isDef$1(res.error)) {
          factory.errorComp = ensureCtor(res.error, baseCtor);
        }
        if (isDef$1(res.loading)) {
          factory.loadingComp = ensureCtor(res.loading, baseCtor);
          if (res.delay === 0) {
            factory.loading = true;
          } else {
            timerLoading = setTimeout(function() {
              timerLoading = null;
              if (isUndef(factory.resolved) && isUndef(factory.error)) {
                factory.loading = true;
                forceRender(false);
              }
            }, res.delay || 200);
          }
        }
        if (isDef$1(res.timeout)) {
          timerTimeout = setTimeout(function() {
            timerTimeout = null;
            if (isUndef(factory.resolved)) {
              reject(null);
            }
          }, res.timeout);
        }
      }
    }
    sync = false;
    return factory.loading ? factory.loadingComp : factory.resolved;
  }
}
function getFirstComponentChild(children) {
  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      var c = children[i];
      if (isDef$1(c) && (isDef$1(c.componentOptions) || isAsyncPlaceholder(c))) {
        return c;
      }
    }
  }
}
function initEvents(vm) {
  vm._events = /* @__PURE__ */ Object.create(null);
  vm._hasHookEvent = false;
  var listeners = vm.$options._parentListeners;
  if (listeners) {
    updateComponentListeners(vm, listeners);
  }
}
var target;
function add3(event2, fn) {
  target.$on(event2, fn);
}
function remove$1(event2, fn) {
  target.$off(event2, fn);
}
function createOnceHandler(event2, fn) {
  var _target = target;
  return function onceHandler() {
    var res = fn.apply(null, arguments);
    if (res !== null) {
      _target.$off(event2, onceHandler);
    }
  };
}
function updateComponentListeners(vm, listeners, oldListeners) {
  target = vm;
  updateListeners(listeners, oldListeners || {}, add3, remove$1, createOnceHandler, vm);
  target = void 0;
}
function eventsMixin(Vue2) {
  var hookRE = /^hook:/;
  Vue2.prototype.$on = function(event2, fn) {
    var vm = this;
    if (Array.isArray(event2)) {
      for (var i = 0, l = event2.length; i < l; i++) {
        vm.$on(event2[i], fn);
      }
    } else {
      (vm._events[event2] || (vm._events[event2] = [])).push(fn);
      if (hookRE.test(event2)) {
        vm._hasHookEvent = true;
      }
    }
    return vm;
  };
  Vue2.prototype.$once = function(event2, fn) {
    var vm = this;
    function on3() {
      vm.$off(event2, on3);
      fn.apply(vm, arguments);
    }
    on3.fn = fn;
    vm.$on(event2, on3);
    return vm;
  };
  Vue2.prototype.$off = function(event2, fn) {
    var vm = this;
    if (!arguments.length) {
      vm._events = /* @__PURE__ */ Object.create(null);
      return vm;
    }
    if (Array.isArray(event2)) {
      for (var i$1 = 0, l = event2.length; i$1 < l; i$1++) {
        vm.$off(event2[i$1], fn);
      }
      return vm;
    }
    var cbs = vm._events[event2];
    if (!cbs) {
      return vm;
    }
    if (!fn) {
      vm._events[event2] = null;
      return vm;
    }
    var cb;
    var i = cbs.length;
    while (i--) {
      cb = cbs[i];
      if (cb === fn || cb.fn === fn) {
        cbs.splice(i, 1);
        break;
      }
    }
    return vm;
  };
  Vue2.prototype.$emit = function(event2) {
    var vm = this;
    var cbs = vm._events[event2];
    if (cbs) {
      cbs = cbs.length > 1 ? toArray(cbs) : cbs;
      var args = toArray(arguments, 1);
      var info = 'event handler for "' + event2 + '"';
      for (var i = 0, l = cbs.length; i < l; i++) {
        invokeWithErrorHandling(cbs[i], vm, args, vm, info);
      }
    }
    return vm;
  };
}
var activeInstance = null;
function setActiveInstance(vm) {
  var prevActiveInstance = activeInstance;
  activeInstance = vm;
  return function() {
    activeInstance = prevActiveInstance;
  };
}
function initLifecycle(vm) {
  var options2 = vm.$options;
  var parent2 = options2.parent;
  if (parent2 && !options2.abstract) {
    while (parent2.$options.abstract && parent2.$parent) {
      parent2 = parent2.$parent;
    }
    parent2.$children.push(vm);
  }
  vm.$parent = parent2;
  vm.$root = parent2 ? parent2.$root : vm;
  vm.$children = [];
  vm.$refs = {};
  vm._watcher = null;
  vm._inactive = null;
  vm._directInactive = false;
  vm._isMounted = false;
  vm._isDestroyed = false;
  vm._isBeingDestroyed = false;
}
function lifecycleMixin(Vue2) {
  Vue2.prototype._update = function(vnode, hydrating) {
    var vm = this;
    var prevEl = vm.$el;
    var prevVnode = vm._vnode;
    var restoreActiveInstance = setActiveInstance(vm);
    vm._vnode = vnode;
    if (!prevVnode) {
      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false);
    } else {
      vm.$el = vm.__patch__(prevVnode, vnode);
    }
    restoreActiveInstance();
    if (prevEl) {
      prevEl.__vue__ = null;
    }
    if (vm.$el) {
      vm.$el.__vue__ = vm;
    }
    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
      vm.$parent.$el = vm.$el;
    }
  };
  Vue2.prototype.$forceUpdate = function() {
    var vm = this;
    if (vm._watcher) {
      vm._watcher.update();
    }
  };
  Vue2.prototype.$destroy = function() {
    var vm = this;
    if (vm._isBeingDestroyed) {
      return;
    }
    callHook(vm, "beforeDestroy");
    vm._isBeingDestroyed = true;
    var parent2 = vm.$parent;
    if (parent2 && !parent2._isBeingDestroyed && !vm.$options.abstract) {
      remove(parent2.$children, vm);
    }
    if (vm._watcher) {
      vm._watcher.teardown();
    }
    var i = vm._watchers.length;
    while (i--) {
      vm._watchers[i].teardown();
    }
    if (vm._data.__ob__) {
      vm._data.__ob__.vmCount--;
    }
    vm._isDestroyed = true;
    vm.__patch__(vm._vnode, null);
    callHook(vm, "destroyed");
    vm.$off();
    if (vm.$el) {
      vm.$el.__vue__ = null;
    }
    if (vm.$vnode) {
      vm.$vnode.parent = null;
    }
  };
}
function mountComponent(vm, el, hydrating) {
  vm.$el = el;
  if (!vm.$options.render) {
    vm.$options.render = createEmptyVNode;
  }
  callHook(vm, "beforeMount");
  var updateComponent;
  {
    updateComponent = function() {
      vm._update(vm._render(), hydrating);
    };
  }
  new Watcher(vm, updateComponent, noop$1, {
    before: function before2() {
      if (vm._isMounted && !vm._isDestroyed) {
        callHook(vm, "beforeUpdate");
      }
    }
  }, true);
  hydrating = false;
  if (vm.$vnode == null) {
    vm._isMounted = true;
    callHook(vm, "mounted");
  }
  return vm;
}
function updateChildComponent(vm, propsData, listeners, parentVnode, renderChildren) {
  var newScopedSlots = parentVnode.data.scopedSlots;
  var oldScopedSlots = vm.$scopedSlots;
  var hasDynamicScopedSlot = !!(newScopedSlots && !newScopedSlots.$stable || oldScopedSlots !== emptyObject && !oldScopedSlots.$stable || newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key || !newScopedSlots && vm.$scopedSlots.$key);
  var needsForceUpdate = !!(renderChildren || vm.$options._renderChildren || hasDynamicScopedSlot);
  vm.$options._parentVnode = parentVnode;
  vm.$vnode = parentVnode;
  if (vm._vnode) {
    vm._vnode.parent = parentVnode;
  }
  vm.$options._renderChildren = renderChildren;
  vm.$attrs = parentVnode.data.attrs || emptyObject;
  vm.$listeners = listeners || emptyObject;
  if (propsData && vm.$options.props) {
    toggleObserving(false);
    var props2 = vm._props;
    var propKeys2 = vm.$options._propKeys || [];
    for (var i = 0; i < propKeys2.length; i++) {
      var key = propKeys2[i];
      var propOptions = vm.$options.props;
      props2[key] = validateProp(key, propOptions, propsData, vm);
    }
    toggleObserving(true);
    vm.$options.propsData = propsData;
  }
  listeners = listeners || emptyObject;
  var oldListeners = vm.$options._parentListeners;
  vm.$options._parentListeners = listeners;
  updateComponentListeners(vm, listeners, oldListeners);
  if (needsForceUpdate) {
    vm.$slots = resolveSlots(renderChildren, parentVnode.context);
    vm.$forceUpdate();
  }
}
function isInInactiveTree(vm) {
  while (vm && (vm = vm.$parent)) {
    if (vm._inactive) {
      return true;
    }
  }
  return false;
}
function activateChildComponent(vm, direct) {
  if (direct) {
    vm._directInactive = false;
    if (isInInactiveTree(vm)) {
      return;
    }
  } else if (vm._directInactive) {
    return;
  }
  if (vm._inactive || vm._inactive === null) {
    vm._inactive = false;
    for (var i = 0; i < vm.$children.length; i++) {
      activateChildComponent(vm.$children[i]);
    }
    callHook(vm, "activated");
  }
}
function deactivateChildComponent(vm, direct) {
  if (direct) {
    vm._directInactive = true;
    if (isInInactiveTree(vm)) {
      return;
    }
  }
  if (!vm._inactive) {
    vm._inactive = true;
    for (var i = 0; i < vm.$children.length; i++) {
      deactivateChildComponent(vm.$children[i]);
    }
    callHook(vm, "deactivated");
  }
}
function callHook(vm, hook) {
  pushTarget();
  var handlers = vm.$options[hook];
  var info = hook + " hook";
  if (handlers) {
    for (var i = 0, j = handlers.length; i < j; i++) {
      invokeWithErrorHandling(handlers[i], vm, null, vm, info);
    }
  }
  if (vm._hasHookEvent) {
    vm.$emit("hook:" + hook);
  }
  popTarget();
}
var queue = [];
var activatedChildren = [];
var has$7 = {};
var waiting = false;
var flushing = false;
var index$3 = 0;
function resetSchedulerState() {
  index$3 = queue.length = activatedChildren.length = 0;
  has$7 = {};
  waiting = flushing = false;
}
var currentFlushTimestamp = 0;
var getNow = Date.now;
if (inBrowser && !isIE) {
  var performance = window.performance;
  if (performance && typeof performance.now === "function" && getNow() > document.createEvent("Event").timeStamp) {
    getNow = function() {
      return performance.now();
    };
  }
}
function flushSchedulerQueue() {
  currentFlushTimestamp = getNow();
  flushing = true;
  var watcher, id2;
  queue.sort(function(a, b) {
    return a.id - b.id;
  });
  for (index$3 = 0; index$3 < queue.length; index$3++) {
    watcher = queue[index$3];
    if (watcher.before) {
      watcher.before();
    }
    id2 = watcher.id;
    has$7[id2] = null;
    watcher.run();
  }
  var activatedQueue = activatedChildren.slice();
  var updatedQueue = queue.slice();
  resetSchedulerState();
  callActivatedHooks(activatedQueue);
  callUpdatedHooks(updatedQueue);
  if (devtools && config.devtools) {
    devtools.emit("flush");
  }
}
function callUpdatedHooks(queue2) {
  var i = queue2.length;
  while (i--) {
    var watcher = queue2[i];
    var vm = watcher.vm;
    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {
      callHook(vm, "updated");
    }
  }
}
function queueActivatedComponent(vm) {
  vm._inactive = false;
  activatedChildren.push(vm);
}
function callActivatedHooks(queue2) {
  for (var i = 0; i < queue2.length; i++) {
    queue2[i]._inactive = true;
    activateChildComponent(queue2[i], true);
  }
}
function queueWatcher(watcher) {
  var id2 = watcher.id;
  if (has$7[id2] == null) {
    has$7[id2] = true;
    if (!flushing) {
      queue.push(watcher);
    } else {
      var i = queue.length - 1;
      while (i > index$3 && queue[i].id > watcher.id) {
        i--;
      }
      queue.splice(i + 1, 0, watcher);
    }
    if (!waiting) {
      waiting = true;
      nextTick(flushSchedulerQueue);
    }
  }
}
var uid$2$1 = 0;
var Watcher = function Watcher2(vm, expOrFn, cb, options2, isRenderWatcher) {
  this.vm = vm;
  if (isRenderWatcher) {
    vm._watcher = this;
  }
  vm._watchers.push(this);
  if (options2) {
    this.deep = !!options2.deep;
    this.user = !!options2.user;
    this.lazy = !!options2.lazy;
    this.sync = !!options2.sync;
    this.before = options2.before;
  } else {
    this.deep = this.user = this.lazy = this.sync = false;
  }
  this.cb = cb;
  this.id = ++uid$2$1;
  this.active = true;
  this.dirty = this.lazy;
  this.deps = [];
  this.newDeps = [];
  this.depIds = new _Set();
  this.newDepIds = new _Set();
  this.expression = "";
  if (typeof expOrFn === "function") {
    this.getter = expOrFn;
  } else {
    this.getter = parsePath(expOrFn);
    if (!this.getter) {
      this.getter = noop$1;
    }
  }
  this.value = this.lazy ? void 0 : this.get();
};
Watcher.prototype.get = function get4() {
  pushTarget(this);
  var value6;
  var vm = this.vm;
  try {
    value6 = this.getter.call(vm, vm);
  } catch (e) {
    if (this.user) {
      handleError(e, vm, 'getter for watcher "' + this.expression + '"');
    } else {
      throw e;
    }
  } finally {
    if (this.deep) {
      traverse(value6);
    }
    popTarget();
    this.cleanupDeps();
  }
  return value6;
};
Watcher.prototype.addDep = function addDep(dep) {
  var id2 = dep.id;
  if (!this.newDepIds.has(id2)) {
    this.newDepIds.add(id2);
    this.newDeps.push(dep);
    if (!this.depIds.has(id2)) {
      dep.addSub(this);
    }
  }
};
Watcher.prototype.cleanupDeps = function cleanupDeps() {
  var i = this.deps.length;
  while (i--) {
    var dep = this.deps[i];
    if (!this.newDepIds.has(dep.id)) {
      dep.removeSub(this);
    }
  }
  var tmp = this.depIds;
  this.depIds = this.newDepIds;
  this.newDepIds = tmp;
  this.newDepIds.clear();
  tmp = this.deps;
  this.deps = this.newDeps;
  this.newDeps = tmp;
  this.newDeps.length = 0;
};
Watcher.prototype.update = function update() {
  if (this.lazy) {
    this.dirty = true;
  } else if (this.sync) {
    this.run();
  } else {
    queueWatcher(this);
  }
};
Watcher.prototype.run = function run() {
  if (this.active) {
    var value6 = this.get();
    if (value6 !== this.value || isObject$7(value6) || this.deep) {
      var oldValue = this.value;
      this.value = value6;
      if (this.user) {
        var info = 'callback for watcher "' + this.expression + '"';
        invokeWithErrorHandling(this.cb, this.vm, [value6, oldValue], this.vm, info);
      } else {
        this.cb.call(this.vm, value6, oldValue);
      }
    }
  }
};
Watcher.prototype.evaluate = function evaluate() {
  this.value = this.get();
  this.dirty = false;
};
Watcher.prototype.depend = function depend2() {
  var i = this.deps.length;
  while (i--) {
    this.deps[i].depend();
  }
};
Watcher.prototype.teardown = function teardown() {
  if (this.active) {
    if (!this.vm._isBeingDestroyed) {
      remove(this.vm._watchers, this);
    }
    var i = this.deps.length;
    while (i--) {
      this.deps[i].removeSub(this);
    }
    this.active = false;
  }
};
var sharedPropertyDefinition = {
  enumerable: true,
  configurable: true,
  get: noop$1,
  set: noop$1
};
function proxy(target2, sourceKey, key) {
  sharedPropertyDefinition.get = function proxyGetter() {
    return this[sourceKey][key];
  };
  sharedPropertyDefinition.set = function proxySetter(val) {
    this[sourceKey][key] = val;
  };
  Object.defineProperty(target2, key, sharedPropertyDefinition);
}
function initState(vm) {
  vm._watchers = [];
  var opts = vm.$options;
  if (opts.props) {
    initProps(vm, opts.props);
  }
  if (opts.methods) {
    initMethods(vm, opts.methods);
  }
  if (opts.data) {
    initData(vm);
  } else {
    observe(vm._data = {}, true);
  }
  if (opts.computed) {
    initComputed(vm, opts.computed);
  }
  if (opts.watch && opts.watch !== nativeWatch) {
    initWatch(vm, opts.watch);
  }
}
function initProps(vm, propsOptions) {
  var propsData = vm.$options.propsData || {};
  var props2 = vm._props = {};
  var keys3 = vm.$options._propKeys = [];
  var isRoot = !vm.$parent;
  if (!isRoot) {
    toggleObserving(false);
  }
  var loop = function(key2) {
    keys3.push(key2);
    var value6 = validateProp(key2, propsOptions, propsData, vm);
    {
      defineReactive$$1(props2, key2, value6);
    }
    if (!(key2 in vm)) {
      proxy(vm, "_props", key2);
    }
  };
  for (var key in propsOptions)
    loop(key);
  toggleObserving(true);
}
function initData(vm) {
  var data25 = vm.$options.data;
  data25 = vm._data = typeof data25 === "function" ? getData2(data25, vm) : data25 || {};
  if (!isPlainObject$1(data25)) {
    data25 = {};
  }
  var keys3 = Object.keys(data25);
  var props2 = vm.$options.props;
  vm.$options.methods;
  var i = keys3.length;
  while (i--) {
    var key = keys3[i];
    if (props2 && hasOwn$1(props2, key))
      ;
    else if (!isReserved(key)) {
      proxy(vm, "_data", key);
    }
  }
  observe(data25, true);
}
function getData2(data25, vm) {
  pushTarget();
  try {
    return data25.call(vm, vm);
  } catch (e) {
    handleError(e, vm, "data()");
    return {};
  } finally {
    popTarget();
  }
}
var computedWatcherOptions = { lazy: true };
function initComputed(vm, computed) {
  var watchers = vm._computedWatchers = /* @__PURE__ */ Object.create(null);
  var isSSR = isServerRendering();
  for (var key in computed) {
    var userDef = computed[key];
    var getter = typeof userDef === "function" ? userDef : userDef.get;
    if (!isSSR) {
      watchers[key] = new Watcher(vm, getter || noop$1, noop$1, computedWatcherOptions);
    }
    if (!(key in vm)) {
      defineComputed(vm, key, userDef);
    }
  }
}
function defineComputed(target2, key, userDef) {
  var shouldCache = !isServerRendering();
  if (typeof userDef === "function") {
    sharedPropertyDefinition.get = shouldCache ? createComputedGetter(key) : createGetterInvoker(userDef);
    sharedPropertyDefinition.set = noop$1;
  } else {
    sharedPropertyDefinition.get = userDef.get ? shouldCache && userDef.cache !== false ? createComputedGetter(key) : createGetterInvoker(userDef.get) : noop$1;
    sharedPropertyDefinition.set = userDef.set || noop$1;
  }
  Object.defineProperty(target2, key, sharedPropertyDefinition);
}
function createComputedGetter(key) {
  return function computedGetter() {
    var watcher = this._computedWatchers && this._computedWatchers[key];
    if (watcher) {
      if (watcher.dirty) {
        watcher.evaluate();
      }
      if (Dep.target) {
        watcher.depend();
      }
      return watcher.value;
    }
  };
}
function createGetterInvoker(fn) {
  return function computedGetter() {
    return fn.call(this, this);
  };
}
function initMethods(vm, methods2) {
  vm.$options.props;
  for (var key in methods2) {
    vm[key] = typeof methods2[key] !== "function" ? noop$1 : bind(methods2[key], vm);
  }
}
function initWatch(vm, watch2) {
  for (var key in watch2) {
    var handler2 = watch2[key];
    if (Array.isArray(handler2)) {
      for (var i = 0; i < handler2.length; i++) {
        createWatcher(vm, key, handler2[i]);
      }
    } else {
      createWatcher(vm, key, handler2);
    }
  }
}
function createWatcher(vm, expOrFn, handler2, options2) {
  if (isPlainObject$1(handler2)) {
    options2 = handler2;
    handler2 = handler2.handler;
  }
  if (typeof handler2 === "string") {
    handler2 = vm[handler2];
  }
  return vm.$watch(expOrFn, handler2, options2);
}
function stateMixin(Vue2) {
  var dataDef = {};
  dataDef.get = function() {
    return this._data;
  };
  var propsDef = {};
  propsDef.get = function() {
    return this._props;
  };
  Object.defineProperty(Vue2.prototype, "$data", dataDef);
  Object.defineProperty(Vue2.prototype, "$props", propsDef);
  Vue2.prototype.$set = set;
  Vue2.prototype.$delete = del;
  Vue2.prototype.$watch = function(expOrFn, cb, options2) {
    var vm = this;
    if (isPlainObject$1(cb)) {
      return createWatcher(vm, expOrFn, cb, options2);
    }
    options2 = options2 || {};
    options2.user = true;
    var watcher = new Watcher(vm, expOrFn, cb, options2);
    if (options2.immediate) {
      var info = 'callback for immediate watcher "' + watcher.expression + '"';
      pushTarget();
      invokeWithErrorHandling(cb, vm, [watcher.value], vm, info);
      popTarget();
    }
    return function unwatchFn() {
      watcher.teardown();
    };
  };
}
var uid$3$1 = 0;
function initMixin(Vue2) {
  Vue2.prototype._init = function(options2) {
    var vm = this;
    vm._uid = uid$3$1++;
    vm._isVue = true;
    if (options2 && options2._isComponent) {
      initInternalComponent(vm, options2);
    } else {
      vm.$options = mergeOptions(resolveConstructorOptions(vm.constructor), options2 || {}, vm);
    }
    {
      vm._renderProxy = vm;
    }
    vm._self = vm;
    initLifecycle(vm);
    initEvents(vm);
    initRender(vm);
    callHook(vm, "beforeCreate");
    initInjections(vm);
    initState(vm);
    initProvide(vm);
    callHook(vm, "created");
    if (vm.$options.el) {
      vm.$mount(vm.$options.el);
    }
  };
}
function initInternalComponent(vm, options2) {
  var opts = vm.$options = Object.create(vm.constructor.options);
  var parentVnode = options2._parentVnode;
  opts.parent = options2.parent;
  opts._parentVnode = parentVnode;
  var vnodeComponentOptions = parentVnode.componentOptions;
  opts.propsData = vnodeComponentOptions.propsData;
  opts._parentListeners = vnodeComponentOptions.listeners;
  opts._renderChildren = vnodeComponentOptions.children;
  opts._componentTag = vnodeComponentOptions.tag;
  if (options2.render) {
    opts.render = options2.render;
    opts.staticRenderFns = options2.staticRenderFns;
  }
}
function resolveConstructorOptions(Ctor) {
  var options2 = Ctor.options;
  if (Ctor.super) {
    var superOptions = resolveConstructorOptions(Ctor.super);
    var cachedSuperOptions = Ctor.superOptions;
    if (superOptions !== cachedSuperOptions) {
      Ctor.superOptions = superOptions;
      var modifiedOptions = resolveModifiedOptions(Ctor);
      if (modifiedOptions) {
        extend$1(Ctor.extendOptions, modifiedOptions);
      }
      options2 = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);
      if (options2.name) {
        options2.components[options2.name] = Ctor;
      }
    }
  }
  return options2;
}
function resolveModifiedOptions(Ctor) {
  var modified;
  var latest = Ctor.options;
  var sealed = Ctor.sealedOptions;
  for (var key in latest) {
    if (latest[key] !== sealed[key]) {
      if (!modified) {
        modified = {};
      }
      modified[key] = latest[key];
    }
  }
  return modified;
}
function Vue(options2) {
  this._init(options2);
}
initMixin(Vue);
stateMixin(Vue);
eventsMixin(Vue);
lifecycleMixin(Vue);
renderMixin(Vue);
function initUse(Vue2) {
  Vue2.use = function(plugin) {
    var installedPlugins = this._installedPlugins || (this._installedPlugins = []);
    if (installedPlugins.indexOf(plugin) > -1) {
      return this;
    }
    var args = toArray(arguments, 1);
    args.unshift(this);
    if (typeof plugin.install === "function") {
      plugin.install.apply(plugin, args);
    } else if (typeof plugin === "function") {
      plugin.apply(null, args);
    }
    installedPlugins.push(plugin);
    return this;
  };
}
function initMixin$1(Vue2) {
  Vue2.mixin = function(mixin4) {
    this.options = mergeOptions(this.options, mixin4);
    return this;
  };
}
function initExtend(Vue2) {
  Vue2.cid = 0;
  var cid = 1;
  Vue2.extend = function(extendOptions) {
    extendOptions = extendOptions || {};
    var Super = this;
    var SuperId = Super.cid;
    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});
    if (cachedCtors[SuperId]) {
      return cachedCtors[SuperId];
    }
    var name = extendOptions.name || Super.options.name;
    var Sub = function VueComponent(options2) {
      this._init(options2);
    };
    Sub.prototype = Object.create(Super.prototype);
    Sub.prototype.constructor = Sub;
    Sub.cid = cid++;
    Sub.options = mergeOptions(Super.options, extendOptions);
    Sub["super"] = Super;
    if (Sub.options.props) {
      initProps$1(Sub);
    }
    if (Sub.options.computed) {
      initComputed$1(Sub);
    }
    Sub.extend = Super.extend;
    Sub.mixin = Super.mixin;
    Sub.use = Super.use;
    ASSET_TYPES.forEach(function(type3) {
      Sub[type3] = Super[type3];
    });
    if (name) {
      Sub.options.components[name] = Sub;
    }
    Sub.superOptions = Super.options;
    Sub.extendOptions = extendOptions;
    Sub.sealedOptions = extend$1({}, Sub.options);
    cachedCtors[SuperId] = Sub;
    return Sub;
  };
}
function initProps$1(Comp) {
  var props2 = Comp.options.props;
  for (var key in props2) {
    proxy(Comp.prototype, "_props", key);
  }
}
function initComputed$1(Comp) {
  var computed = Comp.options.computed;
  for (var key in computed) {
    defineComputed(Comp.prototype, key, computed[key]);
  }
}
function initAssetRegisters(Vue2) {
  ASSET_TYPES.forEach(function(type3) {
    Vue2[type3] = function(id2, definition) {
      if (!definition) {
        return this.options[type3 + "s"][id2];
      } else {
        if (type3 === "component" && isPlainObject$1(definition)) {
          definition.name = definition.name || id2;
          definition = this.options._base.extend(definition);
        }
        if (type3 === "directive" && typeof definition === "function") {
          definition = { bind: definition, update: definition };
        }
        this.options[type3 + "s"][id2] = definition;
        return definition;
      }
    };
  });
}
function getComponentName(opts) {
  return opts && (opts.Ctor.options.name || opts.tag);
}
function matches(pattern2, name) {
  if (Array.isArray(pattern2)) {
    return pattern2.indexOf(name) > -1;
  } else if (typeof pattern2 === "string") {
    return pattern2.split(",").indexOf(name) > -1;
  } else if (isRegExp(pattern2)) {
    return pattern2.test(name);
  }
  return false;
}
function pruneCache(keepAliveInstance, filter2) {
  var cache = keepAliveInstance.cache;
  var keys3 = keepAliveInstance.keys;
  var _vnode = keepAliveInstance._vnode;
  for (var key in cache) {
    var entry = cache[key];
    if (entry) {
      var name = entry.name;
      if (name && !filter2(name)) {
        pruneCacheEntry(cache, key, keys3, _vnode);
      }
    }
  }
}
function pruneCacheEntry(cache, key, keys3, current) {
  var entry = cache[key];
  if (entry && (!current || entry.tag !== current.tag)) {
    entry.componentInstance.$destroy();
  }
  cache[key] = null;
  remove(keys3, key);
}
var patternTypes = [String, RegExp, Array];
var KeepAlive = {
  name: "keep-alive",
  abstract: true,
  props: {
    include: patternTypes,
    exclude: patternTypes,
    max: [String, Number]
  },
  methods: {
    cacheVNode: function cacheVNode() {
      var ref2 = this;
      var cache = ref2.cache;
      var keys3 = ref2.keys;
      var vnodeToCache = ref2.vnodeToCache;
      var keyToCache = ref2.keyToCache;
      if (vnodeToCache) {
        var tag2 = vnodeToCache.tag;
        var componentInstance = vnodeToCache.componentInstance;
        var componentOptions = vnodeToCache.componentOptions;
        cache[keyToCache] = {
          name: getComponentName(componentOptions),
          tag: tag2,
          componentInstance
        };
        keys3.push(keyToCache);
        if (this.max && keys3.length > parseInt(this.max)) {
          pruneCacheEntry(cache, keys3[0], keys3, this._vnode);
        }
        this.vnodeToCache = null;
      }
    }
  },
  created: function created19() {
    this.cache = /* @__PURE__ */ Object.create(null);
    this.keys = [];
  },
  destroyed: function destroyed16() {
    for (var key in this.cache) {
      pruneCacheEntry(this.cache, key, this.keys);
    }
  },
  mounted: function mounted16() {
    var this$1$1 = this;
    this.cacheVNode();
    this.$watch("include", function(val) {
      pruneCache(this$1$1, function(name) {
        return matches(val, name);
      });
    });
    this.$watch("exclude", function(val) {
      pruneCache(this$1$1, function(name) {
        return !matches(val, name);
      });
    });
  },
  updated: function updated() {
    this.cacheVNode();
  },
  render: function render33() {
    var slot = this.$slots.default;
    var vnode = getFirstComponentChild(slot);
    var componentOptions = vnode && vnode.componentOptions;
    if (componentOptions) {
      var name = getComponentName(componentOptions);
      var ref2 = this;
      var include = ref2.include;
      var exclude = ref2.exclude;
      if (include && (!name || !matches(include, name)) || exclude && name && matches(exclude, name)) {
        return vnode;
      }
      var ref$1 = this;
      var cache = ref$1.cache;
      var keys3 = ref$1.keys;
      var key = vnode.key == null ? componentOptions.Ctor.cid + (componentOptions.tag ? "::" + componentOptions.tag : "") : vnode.key;
      if (cache[key]) {
        vnode.componentInstance = cache[key].componentInstance;
        remove(keys3, key);
        keys3.push(key);
      } else {
        this.vnodeToCache = vnode;
        this.keyToCache = key;
      }
      vnode.data.keepAlive = true;
    }
    return vnode || slot && slot[0];
  }
};
var builtInComponents = {
  KeepAlive
};
function initGlobalAPI(Vue2) {
  var configDef = {};
  configDef.get = function() {
    return config;
  };
  Object.defineProperty(Vue2, "config", configDef);
  Vue2.util = {
    warn,
    extend: extend$1,
    mergeOptions,
    defineReactive: defineReactive$$1
  };
  Vue2.set = set;
  Vue2.delete = del;
  Vue2.nextTick = nextTick;
  Vue2.observable = function(obj) {
    observe(obj);
    return obj;
  };
  Vue2.options = /* @__PURE__ */ Object.create(null);
  ASSET_TYPES.forEach(function(type3) {
    Vue2.options[type3 + "s"] = /* @__PURE__ */ Object.create(null);
  });
  Vue2.options._base = Vue2;
  extend$1(Vue2.options.components, builtInComponents);
  initUse(Vue2);
  initMixin$1(Vue2);
  initExtend(Vue2);
  initAssetRegisters(Vue2);
}
initGlobalAPI(Vue);
Object.defineProperty(Vue.prototype, "$isServer", {
  get: isServerRendering
});
Object.defineProperty(Vue.prototype, "$ssrContext", {
  get: function get5() {
    return this.$vnode && this.$vnode.ssrContext;
  }
});
Object.defineProperty(Vue, "FunctionalRenderContext", {
  value: FunctionalRenderContext
});
Vue.version = "2.6.14";
var isReservedAttr = makeMap("style,class");
var acceptValue = makeMap("input,textarea,option,select,progress");
var mustUseProp = function(tag2, type3, attr) {
  return attr === "value" && acceptValue(tag2) && type3 !== "button" || attr === "selected" && tag2 === "option" || attr === "checked" && tag2 === "input" || attr === "muted" && tag2 === "video";
};
var isEnumeratedAttr = makeMap("contenteditable,draggable,spellcheck");
var isValidContentEditableValue = makeMap("events,caret,typing,plaintext-only");
var convertEnumeratedValue = function(key, value6) {
  return isFalsyAttrValue(value6) || value6 === "false" ? "false" : key === "contenteditable" && isValidContentEditableValue(value6) ? value6 : "true";
};
var isBooleanAttr = makeMap("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,truespeed,typemustmatch,visible");
var xlinkNS = "http://www.w3.org/1999/xlink";
var isXlink = function(name) {
  return name.charAt(5) === ":" && name.slice(0, 5) === "xlink";
};
var getXlinkProp = function(name) {
  return isXlink(name) ? name.slice(6, name.length) : "";
};
var isFalsyAttrValue = function(val) {
  return val == null || val === false;
};
function genClassForVnode(vnode) {
  var data25 = vnode.data;
  var parentNode2 = vnode;
  var childNode = vnode;
  while (isDef$1(childNode.componentInstance)) {
    childNode = childNode.componentInstance._vnode;
    if (childNode && childNode.data) {
      data25 = mergeClassData(childNode.data, data25);
    }
  }
  while (isDef$1(parentNode2 = parentNode2.parent)) {
    if (parentNode2 && parentNode2.data) {
      data25 = mergeClassData(data25, parentNode2.data);
    }
  }
  return renderClass(data25.staticClass, data25.class);
}
function mergeClassData(child, parent2) {
  return {
    staticClass: concat(child.staticClass, parent2.staticClass),
    class: isDef$1(child.class) ? [child.class, parent2.class] : parent2.class
  };
}
function renderClass(staticClass, dynamicClass) {
  if (isDef$1(staticClass) || isDef$1(dynamicClass)) {
    return concat(staticClass, stringifyClass(dynamicClass));
  }
  return "";
}
function concat(a, b) {
  return a ? b ? a + " " + b : a : b || "";
}
function stringifyClass(value6) {
  if (Array.isArray(value6)) {
    return stringifyArray(value6);
  }
  if (isObject$7(value6)) {
    return stringifyObject(value6);
  }
  if (typeof value6 === "string") {
    return value6;
  }
  return "";
}
function stringifyArray(value6) {
  var res = "";
  var stringified;
  for (var i = 0, l = value6.length; i < l; i++) {
    if (isDef$1(stringified = stringifyClass(value6[i])) && stringified !== "") {
      if (res) {
        res += " ";
      }
      res += stringified;
    }
  }
  return res;
}
function stringifyObject(value6) {
  var res = "";
  for (var key in value6) {
    if (value6[key]) {
      if (res) {
        res += " ";
      }
      res += key;
    }
  }
  return res;
}
var namespaceMap = {
  svg: "http://www.w3.org/2000/svg",
  math: "http://www.w3.org/1998/Math/MathML"
};
var isHTMLTag = makeMap("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot");
var isSVG = makeMap("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view", true);
var isReservedTag = function(tag2) {
  return isHTMLTag(tag2) || isSVG(tag2);
};
function getTagNamespace(tag2) {
  if (isSVG(tag2)) {
    return "svg";
  }
  if (tag2 === "math") {
    return "math";
  }
}
var unknownElementCache = /* @__PURE__ */ Object.create(null);
function isUnknownElement(tag2) {
  if (!inBrowser) {
    return true;
  }
  if (isReservedTag(tag2)) {
    return false;
  }
  tag2 = tag2.toLowerCase();
  if (unknownElementCache[tag2] != null) {
    return unknownElementCache[tag2];
  }
  var el = document.createElement(tag2);
  if (tag2.indexOf("-") > -1) {
    return unknownElementCache[tag2] = el.constructor === window.HTMLUnknownElement || el.constructor === window.HTMLElement;
  } else {
    return unknownElementCache[tag2] = /HTMLUnknownElement/.test(el.toString());
  }
}
var isTextInputType = makeMap("text,number,password,search,email,tel,url");
function query(el) {
  if (typeof el === "string") {
    var selected = document.querySelector(el);
    if (!selected) {
      return document.createElement("div");
    }
    return selected;
  } else {
    return el;
  }
}
function createElement$1(tagName2, vnode) {
  var elm = document.createElement(tagName2);
  if (tagName2 !== "select") {
    return elm;
  }
  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== void 0) {
    elm.setAttribute("multiple", "multiple");
  }
  return elm;
}
function createElementNS(namespace, tagName2) {
  return document.createElementNS(namespaceMap[namespace], tagName2);
}
function createTextNode(text) {
  return document.createTextNode(text);
}
function createComment(text) {
  return document.createComment(text);
}
function insertBefore(parentNode2, newNode, referenceNode) {
  parentNode2.insertBefore(newNode, referenceNode);
}
function removeChild(node, child) {
  node.removeChild(child);
}
function appendChild(node, child) {
  node.appendChild(child);
}
function parentNode(node) {
  return node.parentNode;
}
function nextSibling(node) {
  return node.nextSibling;
}
function tagName(node) {
  return node.tagName;
}
function setTextContent(node, text) {
  node.textContent = text;
}
function setStyleScope(node, scopeId) {
  node.setAttribute(scopeId, "");
}
var nodeOps = /* @__PURE__ */ Object.freeze({
  createElement: createElement$1,
  createElementNS,
  createTextNode,
  createComment,
  insertBefore,
  removeChild,
  appendChild,
  parentNode,
  nextSibling,
  tagName,
  setTextContent,
  setStyleScope
});
var ref = {
  create: function create(_, vnode) {
    registerRef(vnode);
  },
  update: function update2(oldVnode, vnode) {
    if (oldVnode.data.ref !== vnode.data.ref) {
      registerRef(oldVnode, true);
      registerRef(vnode);
    }
  },
  destroy: function destroy2(vnode) {
    registerRef(vnode, true);
  }
};
function registerRef(vnode, isRemoval) {
  var key = vnode.data.ref;
  if (!isDef$1(key)) {
    return;
  }
  var vm = vnode.context;
  var ref2 = vnode.componentInstance || vnode.elm;
  var refs = vm.$refs;
  if (isRemoval) {
    if (Array.isArray(refs[key])) {
      remove(refs[key], ref2);
    } else if (refs[key] === ref2) {
      refs[key] = void 0;
    }
  } else {
    if (vnode.data.refInFor) {
      if (!Array.isArray(refs[key])) {
        refs[key] = [ref2];
      } else if (refs[key].indexOf(ref2) < 0) {
        refs[key].push(ref2);
      }
    } else {
      refs[key] = ref2;
    }
  }
}
var emptyNode = new VNode("", {}, []);
var hooks = ["create", "activate", "update", "remove", "destroy"];
function sameVnode(a, b) {
  return a.key === b.key && a.asyncFactory === b.asyncFactory && (a.tag === b.tag && a.isComment === b.isComment && isDef$1(a.data) === isDef$1(b.data) && sameInputType(a, b) || isTrue(a.isAsyncPlaceholder) && isUndef(b.asyncFactory.error));
}
function sameInputType(a, b) {
  if (a.tag !== "input") {
    return true;
  }
  var i;
  var typeA = isDef$1(i = a.data) && isDef$1(i = i.attrs) && i.type;
  var typeB = isDef$1(i = b.data) && isDef$1(i = i.attrs) && i.type;
  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB);
}
function createKeyToOldIdx(children, beginIdx, endIdx) {
  var i, key;
  var map2 = {};
  for (i = beginIdx; i <= endIdx; ++i) {
    key = children[i].key;
    if (isDef$1(key)) {
      map2[key] = i;
    }
  }
  return map2;
}
function createPatchFunction(backend) {
  var i, j;
  var cbs = {};
  var modules2 = backend.modules;
  var nodeOps2 = backend.nodeOps;
  for (i = 0; i < hooks.length; ++i) {
    cbs[hooks[i]] = [];
    for (j = 0; j < modules2.length; ++j) {
      if (isDef$1(modules2[j][hooks[i]])) {
        cbs[hooks[i]].push(modules2[j][hooks[i]]);
      }
    }
  }
  function emptyNodeAt(elm) {
    return new VNode(nodeOps2.tagName(elm).toLowerCase(), {}, [], void 0, elm);
  }
  function createRmCb(childElm, listeners) {
    function remove$$12() {
      if (--remove$$12.listeners === 0) {
        removeNode(childElm);
      }
    }
    remove$$12.listeners = listeners;
    return remove$$12;
  }
  function removeNode(el) {
    var parent2 = nodeOps2.parentNode(el);
    if (isDef$1(parent2)) {
      nodeOps2.removeChild(parent2, el);
    }
  }
  function createElm(vnode, insertedVnodeQueue, parentElm, refElm, nested, ownerArray, index2) {
    if (isDef$1(vnode.elm) && isDef$1(ownerArray)) {
      vnode = ownerArray[index2] = cloneVNode(vnode);
    }
    vnode.isRootInsert = !nested;
    if (createComponent2(vnode, insertedVnodeQueue, parentElm, refElm)) {
      return;
    }
    var data25 = vnode.data;
    var children = vnode.children;
    var tag2 = vnode.tag;
    if (isDef$1(tag2)) {
      vnode.elm = vnode.ns ? nodeOps2.createElementNS(vnode.ns, tag2) : nodeOps2.createElement(tag2, vnode);
      setScope(vnode);
      {
        createChildren(vnode, children, insertedVnodeQueue);
        if (isDef$1(data25)) {
          invokeCreateHooks(vnode, insertedVnodeQueue);
        }
        insert2(parentElm, vnode.elm, refElm);
      }
    } else if (isTrue(vnode.isComment)) {
      vnode.elm = nodeOps2.createComment(vnode.text);
      insert2(parentElm, vnode.elm, refElm);
    } else {
      vnode.elm = nodeOps2.createTextNode(vnode.text);
      insert2(parentElm, vnode.elm, refElm);
    }
  }
  function createComponent2(vnode, insertedVnodeQueue, parentElm, refElm) {
    var i2 = vnode.data;
    if (isDef$1(i2)) {
      var isReactivated = isDef$1(vnode.componentInstance) && i2.keepAlive;
      if (isDef$1(i2 = i2.hook) && isDef$1(i2 = i2.init)) {
        i2(vnode, false);
      }
      if (isDef$1(vnode.componentInstance)) {
        initComponent(vnode, insertedVnodeQueue);
        insert2(parentElm, vnode.elm, refElm);
        if (isTrue(isReactivated)) {
          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
        }
        return true;
      }
    }
  }
  function initComponent(vnode, insertedVnodeQueue) {
    if (isDef$1(vnode.data.pendingInsert)) {
      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
      vnode.data.pendingInsert = null;
    }
    vnode.elm = vnode.componentInstance.$el;
    if (isPatchable(vnode)) {
      invokeCreateHooks(vnode, insertedVnodeQueue);
      setScope(vnode);
    } else {
      registerRef(vnode);
      insertedVnodeQueue.push(vnode);
    }
  }
  function reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm) {
    var i2;
    var innerNode = vnode;
    while (innerNode.componentInstance) {
      innerNode = innerNode.componentInstance._vnode;
      if (isDef$1(i2 = innerNode.data) && isDef$1(i2 = i2.transition)) {
        for (i2 = 0; i2 < cbs.activate.length; ++i2) {
          cbs.activate[i2](emptyNode, innerNode);
        }
        insertedVnodeQueue.push(innerNode);
        break;
      }
    }
    insert2(parentElm, vnode.elm, refElm);
  }
  function insert2(parent2, elm, ref$$1) {
    if (isDef$1(parent2)) {
      if (isDef$1(ref$$1)) {
        if (nodeOps2.parentNode(ref$$1) === parent2) {
          nodeOps2.insertBefore(parent2, elm, ref$$1);
        }
      } else {
        nodeOps2.appendChild(parent2, elm);
      }
    }
  }
  function createChildren(vnode, children, insertedVnodeQueue) {
    if (Array.isArray(children)) {
      for (var i2 = 0; i2 < children.length; ++i2) {
        createElm(children[i2], insertedVnodeQueue, vnode.elm, null, true, children, i2);
      }
    } else if (isPrimitive$1(vnode.text)) {
      nodeOps2.appendChild(vnode.elm, nodeOps2.createTextNode(String(vnode.text)));
    }
  }
  function isPatchable(vnode) {
    while (vnode.componentInstance) {
      vnode = vnode.componentInstance._vnode;
    }
    return isDef$1(vnode.tag);
  }
  function invokeCreateHooks(vnode, insertedVnodeQueue) {
    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
      cbs.create[i$1](emptyNode, vnode);
    }
    i = vnode.data.hook;
    if (isDef$1(i)) {
      if (isDef$1(i.create)) {
        i.create(emptyNode, vnode);
      }
      if (isDef$1(i.insert)) {
        insertedVnodeQueue.push(vnode);
      }
    }
  }
  function setScope(vnode) {
    var i2;
    if (isDef$1(i2 = vnode.fnScopeId)) {
      nodeOps2.setStyleScope(vnode.elm, i2);
    } else {
      var ancestor = vnode;
      while (ancestor) {
        if (isDef$1(i2 = ancestor.context) && isDef$1(i2 = i2.$options._scopeId)) {
          nodeOps2.setStyleScope(vnode.elm, i2);
        }
        ancestor = ancestor.parent;
      }
    }
    if (isDef$1(i2 = activeInstance) && i2 !== vnode.context && i2 !== vnode.fnContext && isDef$1(i2 = i2.$options._scopeId)) {
      nodeOps2.setStyleScope(vnode.elm, i2);
    }
  }
  function addVnodes(parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
    for (; startIdx <= endIdx; ++startIdx) {
      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);
    }
  }
  function invokeDestroyHook(vnode) {
    var i2, j2;
    var data25 = vnode.data;
    if (isDef$1(data25)) {
      if (isDef$1(i2 = data25.hook) && isDef$1(i2 = i2.destroy)) {
        i2(vnode);
      }
      for (i2 = 0; i2 < cbs.destroy.length; ++i2) {
        cbs.destroy[i2](vnode);
      }
    }
    if (isDef$1(i2 = vnode.children)) {
      for (j2 = 0; j2 < vnode.children.length; ++j2) {
        invokeDestroyHook(vnode.children[j2]);
      }
    }
  }
  function removeVnodes(vnodes, startIdx, endIdx) {
    for (; startIdx <= endIdx; ++startIdx) {
      var ch = vnodes[startIdx];
      if (isDef$1(ch)) {
        if (isDef$1(ch.tag)) {
          removeAndInvokeRemoveHook(ch);
          invokeDestroyHook(ch);
        } else {
          removeNode(ch.elm);
        }
      }
    }
  }
  function removeAndInvokeRemoveHook(vnode, rm) {
    if (isDef$1(rm) || isDef$1(vnode.data)) {
      var i2;
      var listeners = cbs.remove.length + 1;
      if (isDef$1(rm)) {
        rm.listeners += listeners;
      } else {
        rm = createRmCb(vnode.elm, listeners);
      }
      if (isDef$1(i2 = vnode.componentInstance) && isDef$1(i2 = i2._vnode) && isDef$1(i2.data)) {
        removeAndInvokeRemoveHook(i2, rm);
      }
      for (i2 = 0; i2 < cbs.remove.length; ++i2) {
        cbs.remove[i2](vnode, rm);
      }
      if (isDef$1(i2 = vnode.data.hook) && isDef$1(i2 = i2.remove)) {
        i2(vnode, rm);
      } else {
        rm();
      }
    } else {
      removeNode(vnode.elm);
    }
  }
  function updateChildren(parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
    var oldStartIdx = 0;
    var newStartIdx = 0;
    var oldEndIdx = oldCh.length - 1;
    var oldStartVnode = oldCh[0];
    var oldEndVnode = oldCh[oldEndIdx];
    var newEndIdx = newCh.length - 1;
    var newStartVnode = newCh[0];
    var newEndVnode = newCh[newEndIdx];
    var oldKeyToIdx, idxInOld, vnodeToMove, refElm;
    var canMove = !removeOnly;
    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
      if (isUndef(oldStartVnode)) {
        oldStartVnode = oldCh[++oldStartIdx];
      } else if (isUndef(oldEndVnode)) {
        oldEndVnode = oldCh[--oldEndIdx];
      } else if (sameVnode(oldStartVnode, newStartVnode)) {
        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        oldStartVnode = oldCh[++oldStartIdx];
        newStartVnode = newCh[++newStartIdx];
      } else if (sameVnode(oldEndVnode, newEndVnode)) {
        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        oldEndVnode = oldCh[--oldEndIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldStartVnode, newEndVnode)) {
        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        canMove && nodeOps2.insertBefore(parentElm, oldStartVnode.elm, nodeOps2.nextSibling(oldEndVnode.elm));
        oldStartVnode = oldCh[++oldStartIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldEndVnode, newStartVnode)) {
        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        canMove && nodeOps2.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
        oldEndVnode = oldCh[--oldEndIdx];
        newStartVnode = newCh[++newStartIdx];
      } else {
        if (isUndef(oldKeyToIdx)) {
          oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);
        }
        idxInOld = isDef$1(newStartVnode.key) ? oldKeyToIdx[newStartVnode.key] : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);
        if (isUndef(idxInOld)) {
          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
        } else {
          vnodeToMove = oldCh[idxInOld];
          if (sameVnode(vnodeToMove, newStartVnode)) {
            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
            oldCh[idxInOld] = void 0;
            canMove && nodeOps2.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);
          } else {
            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
          }
        }
        newStartVnode = newCh[++newStartIdx];
      }
    }
    if (oldStartIdx > oldEndIdx) {
      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
    } else if (newStartIdx > newEndIdx) {
      removeVnodes(oldCh, oldStartIdx, oldEndIdx);
    }
  }
  function findIdxInOld(node, oldCh, start, end) {
    for (var i2 = start; i2 < end; i2++) {
      var c = oldCh[i2];
      if (isDef$1(c) && sameVnode(node, c)) {
        return i2;
      }
    }
  }
  function patchVnode(oldVnode, vnode, insertedVnodeQueue, ownerArray, index2, removeOnly) {
    if (oldVnode === vnode) {
      return;
    }
    if (isDef$1(vnode.elm) && isDef$1(ownerArray)) {
      vnode = ownerArray[index2] = cloneVNode(vnode);
    }
    var elm = vnode.elm = oldVnode.elm;
    if (isTrue(oldVnode.isAsyncPlaceholder)) {
      if (isDef$1(vnode.asyncFactory.resolved)) {
        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);
      } else {
        vnode.isAsyncPlaceholder = true;
      }
      return;
    }
    if (isTrue(vnode.isStatic) && isTrue(oldVnode.isStatic) && vnode.key === oldVnode.key && (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))) {
      vnode.componentInstance = oldVnode.componentInstance;
      return;
    }
    var i2;
    var data25 = vnode.data;
    if (isDef$1(data25) && isDef$1(i2 = data25.hook) && isDef$1(i2 = i2.prepatch)) {
      i2(oldVnode, vnode);
    }
    var oldCh = oldVnode.children;
    var ch = vnode.children;
    if (isDef$1(data25) && isPatchable(vnode)) {
      for (i2 = 0; i2 < cbs.update.length; ++i2) {
        cbs.update[i2](oldVnode, vnode);
      }
      if (isDef$1(i2 = data25.hook) && isDef$1(i2 = i2.update)) {
        i2(oldVnode, vnode);
      }
    }
    if (isUndef(vnode.text)) {
      if (isDef$1(oldCh) && isDef$1(ch)) {
        if (oldCh !== ch) {
          updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly);
        }
      } else if (isDef$1(ch)) {
        if (isDef$1(oldVnode.text)) {
          nodeOps2.setTextContent(elm, "");
        }
        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
      } else if (isDef$1(oldCh)) {
        removeVnodes(oldCh, 0, oldCh.length - 1);
      } else if (isDef$1(oldVnode.text)) {
        nodeOps2.setTextContent(elm, "");
      }
    } else if (oldVnode.text !== vnode.text) {
      nodeOps2.setTextContent(elm, vnode.text);
    }
    if (isDef$1(data25)) {
      if (isDef$1(i2 = data25.hook) && isDef$1(i2 = i2.postpatch)) {
        i2(oldVnode, vnode);
      }
    }
  }
  function invokeInsertHook(vnode, queue2, initial) {
    if (isTrue(initial) && isDef$1(vnode.parent)) {
      vnode.parent.data.pendingInsert = queue2;
    } else {
      for (var i2 = 0; i2 < queue2.length; ++i2) {
        queue2[i2].data.hook.insert(queue2[i2]);
      }
    }
  }
  var isRenderedModule = makeMap("attrs,class,staticClass,staticStyle,key");
  function hydrate(elm, vnode, insertedVnodeQueue, inVPre) {
    var i2;
    var tag2 = vnode.tag;
    var data25 = vnode.data;
    var children = vnode.children;
    inVPre = inVPre || data25 && data25.pre;
    vnode.elm = elm;
    if (isTrue(vnode.isComment) && isDef$1(vnode.asyncFactory)) {
      vnode.isAsyncPlaceholder = true;
      return true;
    }
    if (isDef$1(data25)) {
      if (isDef$1(i2 = data25.hook) && isDef$1(i2 = i2.init)) {
        i2(vnode, true);
      }
      if (isDef$1(i2 = vnode.componentInstance)) {
        initComponent(vnode, insertedVnodeQueue);
        return true;
      }
    }
    if (isDef$1(tag2)) {
      if (isDef$1(children)) {
        if (!elm.hasChildNodes()) {
          createChildren(vnode, children, insertedVnodeQueue);
        } else {
          if (isDef$1(i2 = data25) && isDef$1(i2 = i2.domProps) && isDef$1(i2 = i2.innerHTML)) {
            if (i2 !== elm.innerHTML) {
              return false;
            }
          } else {
            var childrenMatch = true;
            var childNode = elm.firstChild;
            for (var i$1 = 0; i$1 < children.length; i$1++) {
              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {
                childrenMatch = false;
                break;
              }
              childNode = childNode.nextSibling;
            }
            if (!childrenMatch || childNode) {
              return false;
            }
          }
        }
      }
      if (isDef$1(data25)) {
        var fullInvoke = false;
        for (var key in data25) {
          if (!isRenderedModule(key)) {
            fullInvoke = true;
            invokeCreateHooks(vnode, insertedVnodeQueue);
            break;
          }
        }
        if (!fullInvoke && data25["class"]) {
          traverse(data25["class"]);
        }
      }
    } else if (elm.data !== vnode.text) {
      elm.data = vnode.text;
    }
    return true;
  }
  return function patch2(oldVnode, vnode, hydrating, removeOnly) {
    if (isUndef(vnode)) {
      if (isDef$1(oldVnode)) {
        invokeDestroyHook(oldVnode);
      }
      return;
    }
    var isInitialPatch = false;
    var insertedVnodeQueue = [];
    if (isUndef(oldVnode)) {
      isInitialPatch = true;
      createElm(vnode, insertedVnodeQueue);
    } else {
      var isRealElement = isDef$1(oldVnode.nodeType);
      if (!isRealElement && sameVnode(oldVnode, vnode)) {
        patchVnode(oldVnode, vnode, insertedVnodeQueue, null, null, removeOnly);
      } else {
        if (isRealElement) {
          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
            oldVnode.removeAttribute(SSR_ATTR);
            hydrating = true;
          }
          if (isTrue(hydrating)) {
            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
              invokeInsertHook(vnode, insertedVnodeQueue, true);
              return oldVnode;
            }
          }
          oldVnode = emptyNodeAt(oldVnode);
        }
        var oldElm = oldVnode.elm;
        var parentElm = nodeOps2.parentNode(oldElm);
        createElm(vnode, insertedVnodeQueue, oldElm._leaveCb ? null : parentElm, nodeOps2.nextSibling(oldElm));
        if (isDef$1(vnode.parent)) {
          var ancestor = vnode.parent;
          var patchable = isPatchable(vnode);
          while (ancestor) {
            for (var i2 = 0; i2 < cbs.destroy.length; ++i2) {
              cbs.destroy[i2](ancestor);
            }
            ancestor.elm = vnode.elm;
            if (patchable) {
              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
                cbs.create[i$1](emptyNode, ancestor);
              }
              var insert3 = ancestor.data.hook.insert;
              if (insert3.merged) {
                for (var i$2 = 1; i$2 < insert3.fns.length; i$2++) {
                  insert3.fns[i$2]();
                }
              }
            } else {
              registerRef(ancestor);
            }
            ancestor = ancestor.parent;
          }
        }
        if (isDef$1(parentElm)) {
          removeVnodes([oldVnode], 0, 0);
        } else if (isDef$1(oldVnode.tag)) {
          invokeDestroyHook(oldVnode);
        }
      }
    }
    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
    return vnode.elm;
  };
}
var directives = {
  create: updateDirectives,
  update: updateDirectives,
  destroy: function unbindDirectives(vnode) {
    updateDirectives(vnode, emptyNode);
  }
};
function updateDirectives(oldVnode, vnode) {
  if (oldVnode.data.directives || vnode.data.directives) {
    _update(oldVnode, vnode);
  }
}
function _update(oldVnode, vnode) {
  var isCreate = oldVnode === emptyNode;
  var isDestroy = vnode === emptyNode;
  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);
  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);
  var dirsWithInsert = [];
  var dirsWithPostpatch = [];
  var key, oldDir, dir;
  for (key in newDirs) {
    oldDir = oldDirs[key];
    dir = newDirs[key];
    if (!oldDir) {
      callHook$1(dir, "bind", vnode, oldVnode);
      if (dir.def && dir.def.inserted) {
        dirsWithInsert.push(dir);
      }
    } else {
      dir.oldValue = oldDir.value;
      dir.oldArg = oldDir.arg;
      callHook$1(dir, "update", vnode, oldVnode);
      if (dir.def && dir.def.componentUpdated) {
        dirsWithPostpatch.push(dir);
      }
    }
  }
  if (dirsWithInsert.length) {
    var callInsert = function() {
      for (var i = 0; i < dirsWithInsert.length; i++) {
        callHook$1(dirsWithInsert[i], "inserted", vnode, oldVnode);
      }
    };
    if (isCreate) {
      mergeVNodeHook(vnode, "insert", callInsert);
    } else {
      callInsert();
    }
  }
  if (dirsWithPostpatch.length) {
    mergeVNodeHook(vnode, "postpatch", function() {
      for (var i = 0; i < dirsWithPostpatch.length; i++) {
        callHook$1(dirsWithPostpatch[i], "componentUpdated", vnode, oldVnode);
      }
    });
  }
  if (!isCreate) {
    for (key in oldDirs) {
      if (!newDirs[key]) {
        callHook$1(oldDirs[key], "unbind", oldVnode, oldVnode, isDestroy);
      }
    }
  }
}
var emptyModifiers = /* @__PURE__ */ Object.create(null);
function normalizeDirectives$1(dirs, vm) {
  var res = /* @__PURE__ */ Object.create(null);
  if (!dirs) {
    return res;
  }
  var i, dir;
  for (i = 0; i < dirs.length; i++) {
    dir = dirs[i];
    if (!dir.modifiers) {
      dir.modifiers = emptyModifiers;
    }
    res[getRawDirName(dir)] = dir;
    dir.def = resolveAsset(vm.$options, "directives", dir.name);
  }
  return res;
}
function getRawDirName(dir) {
  return dir.rawName || dir.name + "." + Object.keys(dir.modifiers || {}).join(".");
}
function callHook$1(dir, hook, vnode, oldVnode, isDestroy) {
  var fn = dir.def && dir.def[hook];
  if (fn) {
    try {
      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
    } catch (e) {
      handleError(e, vnode.context, "directive " + dir.name + " " + hook + " hook");
    }
  }
}
var baseModules = [
  ref,
  directives
];
function updateAttrs(oldVnode, vnode) {
  var opts = vnode.componentOptions;
  if (isDef$1(opts) && opts.Ctor.options.inheritAttrs === false) {
    return;
  }
  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {
    return;
  }
  var key, cur, old;
  var elm = vnode.elm;
  var oldAttrs = oldVnode.data.attrs || {};
  var attrs2 = vnode.data.attrs || {};
  if (isDef$1(attrs2.__ob__)) {
    attrs2 = vnode.data.attrs = extend$1({}, attrs2);
  }
  for (key in attrs2) {
    cur = attrs2[key];
    old = oldAttrs[key];
    if (old !== cur) {
      setAttr(elm, key, cur, vnode.data.pre);
    }
  }
  if ((isIE || isEdge) && attrs2.value !== oldAttrs.value) {
    setAttr(elm, "value", attrs2.value);
  }
  for (key in oldAttrs) {
    if (isUndef(attrs2[key])) {
      if (isXlink(key)) {
        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));
      } else if (!isEnumeratedAttr(key)) {
        elm.removeAttribute(key);
      }
    }
  }
}
function setAttr(el, key, value6, isInPre) {
  if (isInPre || el.tagName.indexOf("-") > -1) {
    baseSetAttr(el, key, value6);
  } else if (isBooleanAttr(key)) {
    if (isFalsyAttrValue(value6)) {
      el.removeAttribute(key);
    } else {
      value6 = key === "allowfullscreen" && el.tagName === "EMBED" ? "true" : key;
      el.setAttribute(key, value6);
    }
  } else if (isEnumeratedAttr(key)) {
    el.setAttribute(key, convertEnumeratedValue(key, value6));
  } else if (isXlink(key)) {
    if (isFalsyAttrValue(value6)) {
      el.removeAttributeNS(xlinkNS, getXlinkProp(key));
    } else {
      el.setAttributeNS(xlinkNS, key, value6);
    }
  } else {
    baseSetAttr(el, key, value6);
  }
}
function baseSetAttr(el, key, value6) {
  if (isFalsyAttrValue(value6)) {
    el.removeAttribute(key);
  } else {
    if (isIE && !isIE9 && el.tagName === "TEXTAREA" && key === "placeholder" && value6 !== "" && !el.__ieph) {
      var blocker = function(e) {
        e.stopImmediatePropagation();
        el.removeEventListener("input", blocker);
      };
      el.addEventListener("input", blocker);
      el.__ieph = true;
    }
    el.setAttribute(key, value6);
  }
}
var attrs = {
  create: updateAttrs,
  update: updateAttrs
};
function updateClass(oldVnode, vnode) {
  var el = vnode.elm;
  var data25 = vnode.data;
  var oldData = oldVnode.data;
  if (isUndef(data25.staticClass) && isUndef(data25.class) && (isUndef(oldData) || isUndef(oldData.staticClass) && isUndef(oldData.class))) {
    return;
  }
  var cls = genClassForVnode(vnode);
  var transitionClass = el._transitionClasses;
  if (isDef$1(transitionClass)) {
    cls = concat(cls, stringifyClass(transitionClass));
  }
  if (cls !== el._prevClass) {
    el.setAttribute("class", cls);
    el._prevClass = cls;
  }
}
var klass = {
  create: updateClass,
  update: updateClass
};
var RANGE_TOKEN = "__r";
var CHECKBOX_RADIO_TOKEN = "__c";
function normalizeEvents(on3) {
  if (isDef$1(on3[RANGE_TOKEN])) {
    var event2 = isIE ? "change" : "input";
    on3[event2] = [].concat(on3[RANGE_TOKEN], on3[event2] || []);
    delete on3[RANGE_TOKEN];
  }
  if (isDef$1(on3[CHECKBOX_RADIO_TOKEN])) {
    on3.change = [].concat(on3[CHECKBOX_RADIO_TOKEN], on3.change || []);
    delete on3[CHECKBOX_RADIO_TOKEN];
  }
}
var target$1;
function createOnceHandler$1(event2, handler2, capture) {
  var _target = target$1;
  return function onceHandler() {
    var res = handler2.apply(null, arguments);
    if (res !== null) {
      remove$2(event2, onceHandler, capture, _target);
    }
  };
}
var useMicrotaskFix = isUsingMicroTask && !(isFF && Number(isFF[1]) <= 53);
function add$1(name, handler2, capture, passive) {
  if (useMicrotaskFix) {
    var attachedTimestamp = currentFlushTimestamp;
    var original = handler2;
    handler2 = original._wrapper = function(e) {
      if (e.target === e.currentTarget || e.timeStamp >= attachedTimestamp || e.timeStamp <= 0 || e.target.ownerDocument !== document) {
        return original.apply(this, arguments);
      }
    };
  }
  target$1.addEventListener(name, handler2, supportsPassive ? { capture, passive } : capture);
}
function remove$2(name, handler2, capture, _target) {
  (_target || target$1).removeEventListener(name, handler2._wrapper || handler2, capture);
}
function updateDOMListeners(oldVnode, vnode) {
  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {
    return;
  }
  var on3 = vnode.data.on || {};
  var oldOn = oldVnode.data.on || {};
  target$1 = vnode.elm;
  normalizeEvents(on3);
  updateListeners(on3, oldOn, add$1, remove$2, createOnceHandler$1, vnode.context);
  target$1 = void 0;
}
var events = {
  create: updateDOMListeners,
  update: updateDOMListeners
};
var svgContainer;
function updateDOMProps(oldVnode, vnode) {
  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {
    return;
  }
  var key, cur;
  var elm = vnode.elm;
  var oldProps = oldVnode.data.domProps || {};
  var props2 = vnode.data.domProps || {};
  if (isDef$1(props2.__ob__)) {
    props2 = vnode.data.domProps = extend$1({}, props2);
  }
  for (key in oldProps) {
    if (!(key in props2)) {
      elm[key] = "";
    }
  }
  for (key in props2) {
    cur = props2[key];
    if (key === "textContent" || key === "innerHTML") {
      if (vnode.children) {
        vnode.children.length = 0;
      }
      if (cur === oldProps[key]) {
        continue;
      }
      if (elm.childNodes.length === 1) {
        elm.removeChild(elm.childNodes[0]);
      }
    }
    if (key === "value" && elm.tagName !== "PROGRESS") {
      elm._value = cur;
      var strCur = isUndef(cur) ? "" : String(cur);
      if (shouldUpdateValue(elm, strCur)) {
        elm.value = strCur;
      }
    } else if (key === "innerHTML" && isSVG(elm.tagName) && isUndef(elm.innerHTML)) {
      svgContainer = svgContainer || document.createElement("div");
      svgContainer.innerHTML = "<svg>" + cur + "</svg>";
      var svg = svgContainer.firstChild;
      while (elm.firstChild) {
        elm.removeChild(elm.firstChild);
      }
      while (svg.firstChild) {
        elm.appendChild(svg.firstChild);
      }
    } else if (cur !== oldProps[key]) {
      try {
        elm[key] = cur;
      } catch (e) {
      }
    }
  }
}
function shouldUpdateValue(elm, checkVal) {
  return !elm.composing && (elm.tagName === "OPTION" || isNotInFocusAndDirty(elm, checkVal) || isDirtyWithModifiers(elm, checkVal));
}
function isNotInFocusAndDirty(elm, checkVal) {
  var notInFocus = true;
  try {
    notInFocus = document.activeElement !== elm;
  } catch (e) {
  }
  return notInFocus && elm.value !== checkVal;
}
function isDirtyWithModifiers(elm, newVal) {
  var value6 = elm.value;
  var modifiers = elm._vModifiers;
  if (isDef$1(modifiers)) {
    if (modifiers.number) {
      return toNumber$1(value6) !== toNumber$1(newVal);
    }
    if (modifiers.trim) {
      return value6.trim() !== newVal.trim();
    }
  }
  return value6 !== newVal;
}
var domProps = {
  create: updateDOMProps,
  update: updateDOMProps
};
var parseStyleText = cached(function(cssText) {
  var res = {};
  var listDelimiter = /;(?![^(]*\))/g;
  var propertyDelimiter = /:(.+)/;
  cssText.split(listDelimiter).forEach(function(item) {
    if (item) {
      var tmp = item.split(propertyDelimiter);
      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return res;
});
function normalizeStyleData(data25) {
  var style2 = normalizeStyleBinding(data25.style);
  return data25.staticStyle ? extend$1(data25.staticStyle, style2) : style2;
}
function normalizeStyleBinding(bindingStyle) {
  if (Array.isArray(bindingStyle)) {
    return toObject$4(bindingStyle);
  }
  if (typeof bindingStyle === "string") {
    return parseStyleText(bindingStyle);
  }
  return bindingStyle;
}
function getStyle$1(vnode, checkChild) {
  var res = {};
  var styleData;
  if (checkChild) {
    var childNode = vnode;
    while (childNode.componentInstance) {
      childNode = childNode.componentInstance._vnode;
      if (childNode && childNode.data && (styleData = normalizeStyleData(childNode.data))) {
        extend$1(res, styleData);
      }
    }
  }
  if (styleData = normalizeStyleData(vnode.data)) {
    extend$1(res, styleData);
  }
  var parentNode2 = vnode;
  while (parentNode2 = parentNode2.parent) {
    if (parentNode2.data && (styleData = normalizeStyleData(parentNode2.data))) {
      extend$1(res, styleData);
    }
  }
  return res;
}
var cssVarRE = /^--/;
var importantRE = /\s*!important$/;
var setProp = function(el, name, val) {
  if (cssVarRE.test(name)) {
    el.style.setProperty(name, val);
  } else if (importantRE.test(val)) {
    el.style.setProperty(hyphenate$1(name), val.replace(importantRE, ""), "important");
  } else {
    var normalizedName = normalize(name);
    if (Array.isArray(val)) {
      for (var i = 0, len = val.length; i < len; i++) {
        el.style[normalizedName] = val[i];
      }
    } else {
      el.style[normalizedName] = val;
    }
  }
};
var vendorNames = ["Webkit", "Moz", "ms"];
var emptyStyle;
var normalize = cached(function(prop) {
  emptyStyle = emptyStyle || document.createElement("div").style;
  prop = camelize(prop);
  if (prop !== "filter" && prop in emptyStyle) {
    return prop;
  }
  var capName = prop.charAt(0).toUpperCase() + prop.slice(1);
  for (var i = 0; i < vendorNames.length; i++) {
    var name = vendorNames[i] + capName;
    if (name in emptyStyle) {
      return name;
    }
  }
});
function updateStyle4(oldVnode, vnode) {
  var data25 = vnode.data;
  var oldData = oldVnode.data;
  if (isUndef(data25.staticStyle) && isUndef(data25.style) && isUndef(oldData.staticStyle) && isUndef(oldData.style)) {
    return;
  }
  var cur, name;
  var el = vnode.elm;
  var oldStaticStyle = oldData.staticStyle;
  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};
  var oldStyle = oldStaticStyle || oldStyleBinding;
  var style2 = normalizeStyleBinding(vnode.data.style) || {};
  vnode.data.normalizedStyle = isDef$1(style2.__ob__) ? extend$1({}, style2) : style2;
  var newStyle = getStyle$1(vnode, true);
  for (name in oldStyle) {
    if (isUndef(newStyle[name])) {
      setProp(el, name, "");
    }
  }
  for (name in newStyle) {
    cur = newStyle[name];
    if (cur !== oldStyle[name]) {
      setProp(el, name, cur == null ? "" : cur);
    }
  }
}
var style = {
  create: updateStyle4,
  update: updateStyle4
};
var whitespaceRE = /\s+/;
function addClass$1(el, cls) {
  if (!cls || !(cls = cls.trim())) {
    return;
  }
  if (el.classList) {
    if (cls.indexOf(" ") > -1) {
      cls.split(whitespaceRE).forEach(function(c) {
        return el.classList.add(c);
      });
    } else {
      el.classList.add(cls);
    }
  } else {
    var cur = " " + (el.getAttribute("class") || "") + " ";
    if (cur.indexOf(" " + cls + " ") < 0) {
      el.setAttribute("class", (cur + cls).trim());
    }
  }
}
function removeClass$1(el, cls) {
  if (!cls || !(cls = cls.trim())) {
    return;
  }
  if (el.classList) {
    if (cls.indexOf(" ") > -1) {
      cls.split(whitespaceRE).forEach(function(c) {
        return el.classList.remove(c);
      });
    } else {
      el.classList.remove(cls);
    }
    if (!el.classList.length) {
      el.removeAttribute("class");
    }
  } else {
    var cur = " " + (el.getAttribute("class") || "") + " ";
    var tar = " " + cls + " ";
    while (cur.indexOf(tar) >= 0) {
      cur = cur.replace(tar, " ");
    }
    cur = cur.trim();
    if (cur) {
      el.setAttribute("class", cur);
    } else {
      el.removeAttribute("class");
    }
  }
}
function resolveTransition(def$$1) {
  if (!def$$1) {
    return;
  }
  if (typeof def$$1 === "object") {
    var res = {};
    if (def$$1.css !== false) {
      extend$1(res, autoCssTransition(def$$1.name || "v"));
    }
    extend$1(res, def$$1);
    return res;
  } else if (typeof def$$1 === "string") {
    return autoCssTransition(def$$1);
  }
}
var autoCssTransition = cached(function(name) {
  return {
    enterClass: name + "-enter",
    enterToClass: name + "-enter-to",
    enterActiveClass: name + "-enter-active",
    leaveClass: name + "-leave",
    leaveToClass: name + "-leave-to",
    leaveActiveClass: name + "-leave-active"
  };
});
var hasTransition = inBrowser && !isIE9;
var TRANSITION = "transition";
var ANIMATION = "animation";
var transitionProp = "transition";
var transitionEndEvent = "transitionend";
var animationProp = "animation";
var animationEndEvent = "animationend";
if (hasTransition) {
  if (window.ontransitionend === void 0 && window.onwebkittransitionend !== void 0) {
    transitionProp = "WebkitTransition";
    transitionEndEvent = "webkitTransitionEnd";
  }
  if (window.onanimationend === void 0 && window.onwebkitanimationend !== void 0) {
    animationProp = "WebkitAnimation";
    animationEndEvent = "webkitAnimationEnd";
  }
}
var raf = inBrowser ? window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : setTimeout : function(fn) {
  return fn();
};
function nextFrame(fn) {
  raf(function() {
    raf(fn);
  });
}
function addTransitionClass(el, cls) {
  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);
  if (transitionClasses.indexOf(cls) < 0) {
    transitionClasses.push(cls);
    addClass$1(el, cls);
  }
}
function removeTransitionClass(el, cls) {
  if (el._transitionClasses) {
    remove(el._transitionClasses, cls);
  }
  removeClass$1(el, cls);
}
function whenTransitionEnds(el, expectedType, cb) {
  var ref2 = getTransitionInfo(el, expectedType);
  var type3 = ref2.type;
  var timeout = ref2.timeout;
  var propCount = ref2.propCount;
  if (!type3) {
    return cb();
  }
  var event2 = type3 === TRANSITION ? transitionEndEvent : animationEndEvent;
  var ended = 0;
  var end = function() {
    el.removeEventListener(event2, onEnd);
    cb();
  };
  var onEnd = function(e) {
    if (e.target === el) {
      if (++ended >= propCount) {
        end();
      }
    }
  };
  setTimeout(function() {
    if (ended < propCount) {
      end();
    }
  }, timeout + 1);
  el.addEventListener(event2, onEnd);
}
var transformRE = /\b(transform|all)(,|$)/;
function getTransitionInfo(el, expectedType) {
  var styles3 = window.getComputedStyle(el);
  var transitionDelays = (styles3[transitionProp + "Delay"] || "").split(", ");
  var transitionDurations = (styles3[transitionProp + "Duration"] || "").split(", ");
  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);
  var animationDelays = (styles3[animationProp + "Delay"] || "").split(", ");
  var animationDurations = (styles3[animationProp + "Duration"] || "").split(", ");
  var animationTimeout = getTimeout(animationDelays, animationDurations);
  var type3;
  var timeout = 0;
  var propCount = 0;
  if (expectedType === TRANSITION) {
    if (transitionTimeout > 0) {
      type3 = TRANSITION;
      timeout = transitionTimeout;
      propCount = transitionDurations.length;
    }
  } else if (expectedType === ANIMATION) {
    if (animationTimeout > 0) {
      type3 = ANIMATION;
      timeout = animationTimeout;
      propCount = animationDurations.length;
    }
  } else {
    timeout = Math.max(transitionTimeout, animationTimeout);
    type3 = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION : ANIMATION : null;
    propCount = type3 ? type3 === TRANSITION ? transitionDurations.length : animationDurations.length : 0;
  }
  var hasTransform = type3 === TRANSITION && transformRE.test(styles3[transitionProp + "Property"]);
  return {
    type: type3,
    timeout,
    propCount,
    hasTransform
  };
}
function getTimeout(delays, durations) {
  while (delays.length < durations.length) {
    delays = delays.concat(delays);
  }
  return Math.max.apply(null, durations.map(function(d, i) {
    return toMs(d) + toMs(delays[i]);
  }));
}
function toMs(s) {
  return Number(s.slice(0, -1).replace(",", ".")) * 1e3;
}
function enter(vnode, toggleDisplay) {
  var el = vnode.elm;
  if (isDef$1(el._leaveCb)) {
    el._leaveCb.cancelled = true;
    el._leaveCb();
  }
  var data25 = resolveTransition(vnode.data.transition);
  if (isUndef(data25)) {
    return;
  }
  if (isDef$1(el._enterCb) || el.nodeType !== 1) {
    return;
  }
  var css = data25.css;
  var type3 = data25.type;
  var enterClass = data25.enterClass;
  var enterToClass = data25.enterToClass;
  var enterActiveClass = data25.enterActiveClass;
  var appearClass = data25.appearClass;
  var appearToClass = data25.appearToClass;
  var appearActiveClass = data25.appearActiveClass;
  var beforeEnter = data25.beforeEnter;
  var enter2 = data25.enter;
  var afterEnter = data25.afterEnter;
  var enterCancelled = data25.enterCancelled;
  var beforeAppear = data25.beforeAppear;
  var appear = data25.appear;
  var afterAppear = data25.afterAppear;
  var appearCancelled = data25.appearCancelled;
  var duration = data25.duration;
  var context = activeInstance;
  var transitionNode = activeInstance.$vnode;
  while (transitionNode && transitionNode.parent) {
    context = transitionNode.context;
    transitionNode = transitionNode.parent;
  }
  var isAppear = !context._isMounted || !vnode.isRootInsert;
  if (isAppear && !appear && appear !== "") {
    return;
  }
  var startClass = isAppear && appearClass ? appearClass : enterClass;
  var activeClass = isAppear && appearActiveClass ? appearActiveClass : enterActiveClass;
  var toClass = isAppear && appearToClass ? appearToClass : enterToClass;
  var beforeEnterHook = isAppear ? beforeAppear || beforeEnter : beforeEnter;
  var enterHook = isAppear ? typeof appear === "function" ? appear : enter2 : enter2;
  var afterEnterHook = isAppear ? afterAppear || afterEnter : afterEnter;
  var enterCancelledHook = isAppear ? appearCancelled || enterCancelled : enterCancelled;
  var explicitEnterDuration = toNumber$1(isObject$7(duration) ? duration.enter : duration);
  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(enterHook);
  var cb = el._enterCb = once(function() {
    if (expectsCSS) {
      removeTransitionClass(el, toClass);
      removeTransitionClass(el, activeClass);
    }
    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, startClass);
      }
      enterCancelledHook && enterCancelledHook(el);
    } else {
      afterEnterHook && afterEnterHook(el);
    }
    el._enterCb = null;
  });
  if (!vnode.data.show) {
    mergeVNodeHook(vnode, "insert", function() {
      var parent2 = el.parentNode;
      var pendingNode = parent2 && parent2._pending && parent2._pending[vnode.key];
      if (pendingNode && pendingNode.tag === vnode.tag && pendingNode.elm._leaveCb) {
        pendingNode.elm._leaveCb();
      }
      enterHook && enterHook(el, cb);
    });
  }
  beforeEnterHook && beforeEnterHook(el);
  if (expectsCSS) {
    addTransitionClass(el, startClass);
    addTransitionClass(el, activeClass);
    nextFrame(function() {
      removeTransitionClass(el, startClass);
      if (!cb.cancelled) {
        addTransitionClass(el, toClass);
        if (!userWantsControl) {
          if (isValidDuration(explicitEnterDuration)) {
            setTimeout(cb, explicitEnterDuration);
          } else {
            whenTransitionEnds(el, type3, cb);
          }
        }
      }
    });
  }
  if (vnode.data.show) {
    toggleDisplay && toggleDisplay();
    enterHook && enterHook(el, cb);
  }
  if (!expectsCSS && !userWantsControl) {
    cb();
  }
}
function leave(vnode, rm) {
  var el = vnode.elm;
  if (isDef$1(el._enterCb)) {
    el._enterCb.cancelled = true;
    el._enterCb();
  }
  var data25 = resolveTransition(vnode.data.transition);
  if (isUndef(data25) || el.nodeType !== 1) {
    return rm();
  }
  if (isDef$1(el._leaveCb)) {
    return;
  }
  var css = data25.css;
  var type3 = data25.type;
  var leaveClass = data25.leaveClass;
  var leaveToClass = data25.leaveToClass;
  var leaveActiveClass = data25.leaveActiveClass;
  var beforeLeave = data25.beforeLeave;
  var leave2 = data25.leave;
  var afterLeave2 = data25.afterLeave;
  var leaveCancelled = data25.leaveCancelled;
  var delayLeave = data25.delayLeave;
  var duration = data25.duration;
  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(leave2);
  var explicitLeaveDuration = toNumber$1(isObject$7(duration) ? duration.leave : duration);
  var cb = el._leaveCb = once(function() {
    if (el.parentNode && el.parentNode._pending) {
      el.parentNode._pending[vnode.key] = null;
    }
    if (expectsCSS) {
      removeTransitionClass(el, leaveToClass);
      removeTransitionClass(el, leaveActiveClass);
    }
    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, leaveClass);
      }
      leaveCancelled && leaveCancelled(el);
    } else {
      rm();
      afterLeave2 && afterLeave2(el);
    }
    el._leaveCb = null;
  });
  if (delayLeave) {
    delayLeave(performLeave);
  } else {
    performLeave();
  }
  function performLeave() {
    if (cb.cancelled) {
      return;
    }
    if (!vnode.data.show && el.parentNode) {
      (el.parentNode._pending || (el.parentNode._pending = {}))[vnode.key] = vnode;
    }
    beforeLeave && beforeLeave(el);
    if (expectsCSS) {
      addTransitionClass(el, leaveClass);
      addTransitionClass(el, leaveActiveClass);
      nextFrame(function() {
        removeTransitionClass(el, leaveClass);
        if (!cb.cancelled) {
          addTransitionClass(el, leaveToClass);
          if (!userWantsControl) {
            if (isValidDuration(explicitLeaveDuration)) {
              setTimeout(cb, explicitLeaveDuration);
            } else {
              whenTransitionEnds(el, type3, cb);
            }
          }
        }
      });
    }
    leave2 && leave2(el, cb);
    if (!expectsCSS && !userWantsControl) {
      cb();
    }
  }
}
function isValidDuration(val) {
  return typeof val === "number" && !isNaN(val);
}
function getHookArgumentsLength(fn) {
  if (isUndef(fn)) {
    return false;
  }
  var invokerFns = fn.fns;
  if (isDef$1(invokerFns)) {
    return getHookArgumentsLength(Array.isArray(invokerFns) ? invokerFns[0] : invokerFns);
  } else {
    return (fn._length || fn.length) > 1;
  }
}
function _enter(_, vnode) {
  if (vnode.data.show !== true) {
    enter(vnode);
  }
}
var transition = inBrowser ? {
  create: _enter,
  activate: _enter,
  remove: function remove$$1(vnode, rm) {
    if (vnode.data.show !== true) {
      leave(vnode, rm);
    } else {
      rm();
    }
  }
} : {};
var platformModules = [
  attrs,
  klass,
  events,
  domProps,
  style,
  transition
];
var modules = platformModules.concat(baseModules);
var patch = createPatchFunction({ nodeOps, modules });
if (isIE9) {
  document.addEventListener("selectionchange", function() {
    var el = document.activeElement;
    if (el && el.vmodel) {
      trigger2(el, "input");
    }
  });
}
var directive = {
  inserted: function inserted(el, binding, vnode, oldVnode) {
    if (vnode.tag === "select") {
      if (oldVnode.elm && !oldVnode.elm._vOptions) {
        mergeVNodeHook(vnode, "postpatch", function() {
          directive.componentUpdated(el, binding, vnode);
        });
      } else {
        setSelected(el, binding, vnode.context);
      }
      el._vOptions = [].map.call(el.options, getValue$1);
    } else if (vnode.tag === "textarea" || isTextInputType(el.type)) {
      el._vModifiers = binding.modifiers;
      if (!binding.modifiers.lazy) {
        el.addEventListener("compositionstart", onCompositionStart);
        el.addEventListener("compositionend", onCompositionEnd);
        el.addEventListener("change", onCompositionEnd);
        if (isIE9) {
          el.vmodel = true;
        }
      }
    }
  },
  componentUpdated: function componentUpdated(el, binding, vnode) {
    if (vnode.tag === "select") {
      setSelected(el, binding, vnode.context);
      var prevOptions = el._vOptions;
      var curOptions = el._vOptions = [].map.call(el.options, getValue$1);
      if (curOptions.some(function(o, i) {
        return !looseEqual$1(o, prevOptions[i]);
      })) {
        var needReset = el.multiple ? binding.value.some(function(v) {
          return hasNoMatchingOption(v, curOptions);
        }) : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);
        if (needReset) {
          trigger2(el, "change");
        }
      }
    }
  }
};
function setSelected(el, binding, vm) {
  actuallySetSelected(el, binding);
  if (isIE || isEdge) {
    setTimeout(function() {
      actuallySetSelected(el, binding);
    }, 0);
  }
}
function actuallySetSelected(el, binding, vm) {
  var value6 = binding.value;
  var isMultiple = el.multiple;
  if (isMultiple && !Array.isArray(value6)) {
    return;
  }
  var selected, option2;
  for (var i = 0, l = el.options.length; i < l; i++) {
    option2 = el.options[i];
    if (isMultiple) {
      selected = looseIndexOf(value6, getValue$1(option2)) > -1;
      if (option2.selected !== selected) {
        option2.selected = selected;
      }
    } else {
      if (looseEqual$1(getValue$1(option2), value6)) {
        if (el.selectedIndex !== i) {
          el.selectedIndex = i;
        }
        return;
      }
    }
  }
  if (!isMultiple) {
    el.selectedIndex = -1;
  }
}
function hasNoMatchingOption(value6, options2) {
  return options2.every(function(o) {
    return !looseEqual$1(o, value6);
  });
}
function getValue$1(option2) {
  return "_value" in option2 ? option2._value : option2.value;
}
function onCompositionStart(e) {
  e.target.composing = true;
}
function onCompositionEnd(e) {
  if (!e.target.composing) {
    return;
  }
  e.target.composing = false;
  trigger2(e.target, "input");
}
function trigger2(el, type3) {
  var e = document.createEvent("HTMLEvents");
  e.initEvent(type3, true, true);
  el.dispatchEvent(e);
}
function locateNode(vnode) {
  return vnode.componentInstance && (!vnode.data || !vnode.data.transition) ? locateNode(vnode.componentInstance._vnode) : vnode;
}
var show = {
  bind: function bind2(el, ref2, vnode) {
    var value6 = ref2.value;
    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;
    var originalDisplay = el.__vOriginalDisplay = el.style.display === "none" ? "" : el.style.display;
    if (value6 && transition$$1) {
      vnode.data.show = true;
      enter(vnode, function() {
        el.style.display = originalDisplay;
      });
    } else {
      el.style.display = value6 ? originalDisplay : "none";
    }
  },
  update: function update3(el, ref2, vnode) {
    var value6 = ref2.value;
    var oldValue = ref2.oldValue;
    if (!value6 === !oldValue) {
      return;
    }
    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;
    if (transition$$1) {
      vnode.data.show = true;
      if (value6) {
        enter(vnode, function() {
          el.style.display = el.__vOriginalDisplay;
        });
      } else {
        leave(vnode, function() {
          el.style.display = "none";
        });
      }
    } else {
      el.style.display = value6 ? el.__vOriginalDisplay : "none";
    }
  },
  unbind: function unbind(el, binding, vnode, oldVnode, isDestroy) {
    if (!isDestroy) {
      el.style.display = el.__vOriginalDisplay;
    }
  }
};
var platformDirectives = {
  model: directive,
  show
};
var transitionProps = {
  name: String,
  appear: Boolean,
  css: Boolean,
  mode: String,
  type: String,
  enterClass: String,
  leaveClass: String,
  enterToClass: String,
  leaveToClass: String,
  enterActiveClass: String,
  leaveActiveClass: String,
  appearClass: String,
  appearActiveClass: String,
  appearToClass: String,
  duration: [Number, String, Object]
};
function getRealChild(vnode) {
  var compOptions = vnode && vnode.componentOptions;
  if (compOptions && compOptions.Ctor.options.abstract) {
    return getRealChild(getFirstComponentChild(compOptions.children));
  } else {
    return vnode;
  }
}
function extractTransitionData(comp) {
  var data25 = {};
  var options2 = comp.$options;
  for (var key in options2.propsData) {
    data25[key] = comp[key];
  }
  var listeners = options2._parentListeners;
  for (var key$1 in listeners) {
    data25[camelize(key$1)] = listeners[key$1];
  }
  return data25;
}
function placeholder(h, rawChild) {
  if (/\d-keep-alive$/.test(rawChild.tag)) {
    return h("keep-alive", {
      props: rawChild.componentOptions.propsData
    });
  }
}
function hasParentTransition(vnode) {
  while (vnode = vnode.parent) {
    if (vnode.data.transition) {
      return true;
    }
  }
}
function isSameChild(child, oldChild) {
  return oldChild.key === child.key && oldChild.tag === child.tag;
}
var isNotTextNode = function(c) {
  return c.tag || isAsyncPlaceholder(c);
};
var isVShowDirective = function(d) {
  return d.name === "show";
};
var Transition$1 = {
  name: "transition",
  props: transitionProps,
  abstract: true,
  render: function render34(h) {
    var this$1$1 = this;
    var children = this.$slots.default;
    if (!children) {
      return;
    }
    children = children.filter(isNotTextNode);
    if (!children.length) {
      return;
    }
    var mode = this.mode;
    var rawChild = children[0];
    if (hasParentTransition(this.$vnode)) {
      return rawChild;
    }
    var child = getRealChild(rawChild);
    if (!child) {
      return rawChild;
    }
    if (this._leaving) {
      return placeholder(h, rawChild);
    }
    var id2 = "__transition-" + this._uid + "-";
    child.key = child.key == null ? child.isComment ? id2 + "comment" : id2 + child.tag : isPrimitive$1(child.key) ? String(child.key).indexOf(id2) === 0 ? child.key : id2 + child.key : child.key;
    var data25 = (child.data || (child.data = {})).transition = extractTransitionData(this);
    var oldRawChild = this._vnode;
    var oldChild = getRealChild(oldRawChild);
    if (child.data.directives && child.data.directives.some(isVShowDirective)) {
      child.data.show = true;
    }
    if (oldChild && oldChild.data && !isSameChild(child, oldChild) && !isAsyncPlaceholder(oldChild) && !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)) {
      var oldData = oldChild.data.transition = extend$1({}, data25);
      if (mode === "out-in") {
        this._leaving = true;
        mergeVNodeHook(oldData, "afterLeave", function() {
          this$1$1._leaving = false;
          this$1$1.$forceUpdate();
        });
        return placeholder(h, rawChild);
      } else if (mode === "in-out") {
        if (isAsyncPlaceholder(child)) {
          return oldRawChild;
        }
        var delayedLeave;
        var performLeave = function() {
          delayedLeave();
        };
        mergeVNodeHook(data25, "afterEnter", performLeave);
        mergeVNodeHook(data25, "enterCancelled", performLeave);
        mergeVNodeHook(oldData, "delayLeave", function(leave2) {
          delayedLeave = leave2;
        });
      }
    }
    return rawChild;
  }
};
var props = extend$1({
  tag: String,
  moveClass: String
}, transitionProps);
delete props.mode;
var TransitionGroup = {
  props,
  beforeMount: function beforeMount() {
    var this$1$1 = this;
    var update5 = this._update;
    this._update = function(vnode, hydrating) {
      var restoreActiveInstance = setActiveInstance(this$1$1);
      this$1$1.__patch__(this$1$1._vnode, this$1$1.kept, false, true);
      this$1$1._vnode = this$1$1.kept;
      restoreActiveInstance();
      update5.call(this$1$1, vnode, hydrating);
    };
  },
  render: function render35(h) {
    var tag2 = this.tag || this.$vnode.data.tag || "span";
    var map2 = /* @__PURE__ */ Object.create(null);
    var prevChildren = this.prevChildren = this.children;
    var rawChildren = this.$slots.default || [];
    var children = this.children = [];
    var transitionData = extractTransitionData(this);
    for (var i = 0; i < rawChildren.length; i++) {
      var c = rawChildren[i];
      if (c.tag) {
        if (c.key != null && String(c.key).indexOf("__vlist") !== 0) {
          children.push(c);
          map2[c.key] = c;
          (c.data || (c.data = {})).transition = transitionData;
        }
      }
    }
    if (prevChildren) {
      var kept = [];
      var removed = [];
      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {
        var c$1 = prevChildren[i$1];
        c$1.data.transition = transitionData;
        c$1.data.pos = c$1.elm.getBoundingClientRect();
        if (map2[c$1.key]) {
          kept.push(c$1);
        } else {
          removed.push(c$1);
        }
      }
      this.kept = h(tag2, null, kept);
      this.removed = removed;
    }
    return h(tag2, null, children);
  },
  updated: function updated2() {
    var children = this.prevChildren;
    var moveClass = this.moveClass || (this.name || "v") + "-move";
    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {
      return;
    }
    children.forEach(callPendingCbs);
    children.forEach(recordPosition);
    children.forEach(applyTranslation);
    this._reflow = document.body.offsetHeight;
    children.forEach(function(c) {
      if (c.data.moved) {
        var el = c.elm;
        var s = el.style;
        addTransitionClass(el, moveClass);
        s.transform = s.WebkitTransform = s.transitionDuration = "";
        el.addEventListener(transitionEndEvent, el._moveCb = function cb(e) {
          if (e && e.target !== el) {
            return;
          }
          if (!e || /transform$/.test(e.propertyName)) {
            el.removeEventListener(transitionEndEvent, cb);
            el._moveCb = null;
            removeTransitionClass(el, moveClass);
          }
        });
      }
    });
  },
  methods: {
    hasMove: function hasMove(el, moveClass) {
      if (!hasTransition) {
        return false;
      }
      if (this._hasMove) {
        return this._hasMove;
      }
      var clone2 = el.cloneNode();
      if (el._transitionClasses) {
        el._transitionClasses.forEach(function(cls) {
          removeClass$1(clone2, cls);
        });
      }
      addClass$1(clone2, moveClass);
      clone2.style.display = "none";
      this.$el.appendChild(clone2);
      var info = getTransitionInfo(clone2);
      this.$el.removeChild(clone2);
      return this._hasMove = info.hasTransform;
    }
  }
};
function callPendingCbs(c) {
  if (c.elm._moveCb) {
    c.elm._moveCb();
  }
  if (c.elm._enterCb) {
    c.elm._enterCb();
  }
}
function recordPosition(c) {
  c.data.newPos = c.elm.getBoundingClientRect();
}
function applyTranslation(c) {
  var oldPos = c.data.pos;
  var newPos = c.data.newPos;
  var dx = oldPos.left - newPos.left;
  var dy = oldPos.top - newPos.top;
  if (dx || dy) {
    c.data.moved = true;
    var s = c.elm.style;
    s.transform = s.WebkitTransform = "translate(" + dx + "px," + dy + "px)";
    s.transitionDuration = "0s";
  }
}
var platformComponents = {
  Transition: Transition$1,
  TransitionGroup
};
Vue.config.mustUseProp = mustUseProp;
Vue.config.isReservedTag = isReservedTag;
Vue.config.isReservedAttr = isReservedAttr;
Vue.config.getTagNamespace = getTagNamespace;
Vue.config.isUnknownElement = isUnknownElement;
extend$1(Vue.options.directives, platformDirectives);
extend$1(Vue.options.components, platformComponents);
Vue.prototype.__patch__ = inBrowser ? patch : noop$1;
Vue.prototype.$mount = function(el, hydrating) {
  el = el && inBrowser ? query(el) : void 0;
  return mountComponent(this, el, hydrating);
};
if (inBrowser) {
  setTimeout(function() {
    if (config.devtools) {
      if (devtools) {
        devtools.emit("init", Vue);
      }
    }
  }, 0);
}
var vue_runtime_esm = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Vue
});
Vue.use(index_common.Header).use(index_common.Column).use(index_common.Table);
var index$2 = "";
var index$1 = "";
var ColumnType = /* @__PURE__ */ ((ColumnType2) => {
  ColumnType2[ColumnType2["Default"] = 0] = "Default";
  ColumnType2[ColumnType2["Expand"] = 1] = "Expand";
  ColumnType2[ColumnType2["Radio"] = 2] = "Radio";
  ColumnType2[ColumnType2["Checkbox"] = 3] = "Checkbox";
  ColumnType2[ColumnType2["Seq"] = 4] = "Seq";
  return ColumnType2;
})(ColumnType || {});
var Align = /* @__PURE__ */ ((Align2) => {
  Align2["Left"] = "left";
  Align2["Center"] = "center";
  Align2["Right"] = "right";
  return Align2;
})(Align || {});
var Fixed = /* @__PURE__ */ ((Fixed2) => {
  Fixed2["Left"] = "left";
  Fixed2["Right"] = "right";
  return Fixed2;
})(Fixed || {});
var BaseFormType = /* @__PURE__ */ ((BaseFormType2) => {
  BaseFormType2["String"] = "string";
  BaseFormType2["Textarea"] = "textarea";
  BaseFormType2["Number"] = "number";
  BaseFormType2["Select"] = "select";
  BaseFormType2["RemoteSearch"] = "remote-search";
  BaseFormType2["Cascader"] = "cascader";
  BaseFormType2["DatePicker"] = "date-picker";
  BaseFormType2["TimePicker"] = "time-picker";
  BaseFormType2["DateTimePicker"] = "date-time-picker";
  BaseFormType2["DateRangePicker"] = "date-range-picker";
  BaseFormType2["TimeRangePicker"] = "time-range-picker";
  BaseFormType2["DateTimeRangePicker"] = "date-time-range-picker";
  return BaseFormType2;
})(BaseFormType || {});
var AvailableLanguage = /* @__PURE__ */ ((AvailableLanguage2) => {
  AvailableLanguage2[AvailableLanguage2["ZhCn"] = 0] = "ZhCn";
  AvailableLanguage2[AvailableLanguage2["En"] = 1] = "En";
  return AvailableLanguage2;
})(AvailableLanguage || {});
var OperationType = /* @__PURE__ */ ((OperationType2) => {
  OperationType2[OperationType2["Button"] = 0] = "Button";
  OperationType2[OperationType2["ButtonWithIcon"] = 1] = "ButtonWithIcon";
  OperationType2[OperationType2["Link"] = 2] = "Link";
  OperationType2[OperationType2["LinkWithoutUnderline"] = 3] = "LinkWithoutUnderline";
  OperationType2[OperationType2["ButtonMore"] = 4] = "ButtonMore";
  OperationType2[OperationType2["ButtonWithIconMore"] = 5] = "ButtonWithIconMore";
  OperationType2[OperationType2["LinkMore"] = 6] = "LinkMore";
  OperationType2[OperationType2["LinkWithoutUnderlineMore"] = 7] = "LinkWithoutUnderlineMore";
  return OperationType2;
})(OperationType || {});
var _default$3 = {
  el: {
    colorpicker: {
      confirm: "OK",
      clear: "Clear"
    },
    datepicker: {
      now: "Now",
      today: "Today",
      cancel: "Cancel",
      clear: "Clear",
      confirm: "OK",
      selectDate: "Select date",
      selectTime: "Select time",
      startDate: "Start Date",
      startTime: "Start Time",
      endDate: "End Date",
      endTime: "End Time",
      prevYear: "Previous Year",
      nextYear: "Next Year",
      prevMonth: "Previous Month",
      nextMonth: "Next Month",
      year: "",
      month1: "January",
      month2: "February",
      month3: "March",
      month4: "April",
      month5: "May",
      month6: "June",
      month7: "July",
      month8: "August",
      month9: "September",
      month10: "October",
      month11: "November",
      month12: "December",
      week: "week",
      weeks: {
        sun: "Sun",
        mon: "Mon",
        tue: "Tue",
        wed: "Wed",
        thu: "Thu",
        fri: "Fri",
        sat: "Sat"
      },
      months: {
        jan: "Jan",
        feb: "Feb",
        mar: "Mar",
        apr: "Apr",
        may: "May",
        jun: "Jun",
        jul: "Jul",
        aug: "Aug",
        sep: "Sep",
        oct: "Oct",
        nov: "Nov",
        dec: "Dec"
      }
    },
    select: {
      loading: "Loading",
      noMatch: "No matching data",
      noData: "No data",
      placeholder: "Select"
    },
    cascader: {
      noMatch: "No matching data",
      loading: "Loading",
      placeholder: "Select",
      noData: "No data"
    },
    pagination: {
      goto: "Go to",
      pagesize: "/page",
      total: "Total {total}",
      pageClassifier: ""
    },
    messagebox: {
      title: "Message",
      confirm: "OK",
      cancel: "Cancel",
      error: "Illegal input"
    },
    upload: {
      deleteTip: "press delete to remove",
      delete: "Delete",
      preview: "Preview",
      continue: "Continue"
    },
    table: {
      emptyText: "No Data",
      confirmFilter: "Confirm",
      resetFilter: "Reset",
      clearFilter: "All",
      sumText: "Sum"
    },
    tree: {
      emptyText: "No Data"
    },
    transfer: {
      noMatch: "No matching data",
      noData: "No data",
      titles: ["List 1", "List 2"],
      filterPlaceholder: "Enter keyword",
      noCheckedFormat: "{total} items",
      hasCheckedFormat: "{checked}/{total} checked"
    },
    image: {
      error: "FAILED"
    },
    pageHeader: {
      title: "Back"
    },
    popconfirm: {
      confirmButtonText: "Yes",
      cancelButtonText: "No"
    },
    empty: {
      description: "No Data"
    }
  }
};
var zhCN = {};
zhCN.__esModule = true;
var _default$2 = zhCN.default = {
  el: {
    colorpicker: {
      confirm: "\u786E\u5B9A",
      clear: "\u6E05\u7A7A"
    },
    datepicker: {
      now: "\u6B64\u523B",
      today: "\u4ECA\u5929",
      cancel: "\u53D6\u6D88",
      clear: "\u6E05\u7A7A",
      confirm: "\u786E\u5B9A",
      selectDate: "\u9009\u62E9\u65E5\u671F",
      selectTime: "\u9009\u62E9\u65F6\u95F4",
      startDate: "\u5F00\u59CB\u65E5\u671F",
      startTime: "\u5F00\u59CB\u65F6\u95F4",
      endDate: "\u7ED3\u675F\u65E5\u671F",
      endTime: "\u7ED3\u675F\u65F6\u95F4",
      prevYear: "\u524D\u4E00\u5E74",
      nextYear: "\u540E\u4E00\u5E74",
      prevMonth: "\u4E0A\u4E2A\u6708",
      nextMonth: "\u4E0B\u4E2A\u6708",
      year: "\u5E74",
      month1: "1 \u6708",
      month2: "2 \u6708",
      month3: "3 \u6708",
      month4: "4 \u6708",
      month5: "5 \u6708",
      month6: "6 \u6708",
      month7: "7 \u6708",
      month8: "8 \u6708",
      month9: "9 \u6708",
      month10: "10 \u6708",
      month11: "11 \u6708",
      month12: "12 \u6708",
      weeks: {
        sun: "\u65E5",
        mon: "\u4E00",
        tue: "\u4E8C",
        wed: "\u4E09",
        thu: "\u56DB",
        fri: "\u4E94",
        sat: "\u516D"
      },
      months: {
        jan: "\u4E00\u6708",
        feb: "\u4E8C\u6708",
        mar: "\u4E09\u6708",
        apr: "\u56DB\u6708",
        may: "\u4E94\u6708",
        jun: "\u516D\u6708",
        jul: "\u4E03\u6708",
        aug: "\u516B\u6708",
        sep: "\u4E5D\u6708",
        oct: "\u5341\u6708",
        nov: "\u5341\u4E00\u6708",
        dec: "\u5341\u4E8C\u6708"
      }
    },
    select: {
      loading: "\u52A0\u8F7D\u4E2D",
      noMatch: "\u65E0\u5339\u914D\u6570\u636E",
      noData: "\u65E0\u6570\u636E",
      placeholder: "\u8BF7\u9009\u62E9"
    },
    cascader: {
      noMatch: "\u65E0\u5339\u914D\u6570\u636E",
      loading: "\u52A0\u8F7D\u4E2D",
      placeholder: "\u8BF7\u9009\u62E9",
      noData: "\u6682\u65E0\u6570\u636E"
    },
    pagination: {
      goto: "\u524D\u5F80",
      pagesize: "\u6761/\u9875",
      total: "\u5171 {total} \u6761",
      pageClassifier: "\u9875"
    },
    messagebox: {
      title: "\u63D0\u793A",
      confirm: "\u786E\u5B9A",
      cancel: "\u53D6\u6D88",
      error: "\u8F93\u5165\u7684\u6570\u636E\u4E0D\u5408\u6CD5!"
    },
    upload: {
      deleteTip: "\u6309 delete \u952E\u53EF\u5220\u9664",
      delete: "\u5220\u9664",
      preview: "\u67E5\u770B\u56FE\u7247",
      continue: "\u7EE7\u7EED\u4E0A\u4F20"
    },
    table: {
      emptyText: "\u6682\u65E0\u6570\u636E",
      confirmFilter: "\u7B5B\u9009",
      resetFilter: "\u91CD\u7F6E",
      clearFilter: "\u5168\u90E8",
      sumText: "\u5408\u8BA1"
    },
    tree: {
      emptyText: "\u6682\u65E0\u6570\u636E"
    },
    transfer: {
      noMatch: "\u65E0\u5339\u914D\u6570\u636E",
      noData: "\u65E0\u6570\u636E",
      titles: ["\u5217\u8868 1", "\u5217\u8868 2"],
      filterPlaceholder: "\u8BF7\u8F93\u5165\u641C\u7D22\u5185\u5BB9",
      noCheckedFormat: "\u5171 {total} \u9879",
      hasCheckedFormat: "\u5DF2\u9009 {checked}/{total} \u9879"
    },
    image: {
      error: "\u52A0\u8F7D\u5931\u8D25"
    },
    pageHeader: {
      title: "\u8FD4\u56DE"
    },
    popconfirm: {
      confirmButtonText: "\u786E\u5B9A",
      cancelButtonText: "\u53D6\u6D88"
    },
    empty: {
      description: "\u6682\u65E0\u6570\u636E"
    }
  }
};
var locale$2 = {};
var require$$6 = /* @__PURE__ */ getAugmentedNamespace(vue_runtime_esm);
var isMergeableObject = function isMergeableObject2(value6) {
  return isNonNullObject(value6) && !isSpecial(value6);
};
function isNonNullObject(value6) {
  return !!value6 && typeof value6 === "object";
}
function isSpecial(value6) {
  var stringValue = Object.prototype.toString.call(value6);
  return stringValue === "[object RegExp]" || stringValue === "[object Date]" || isReactElement(value6);
}
var canUseSymbol = typeof Symbol === "function" && Symbol.for;
var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for("react.element") : 60103;
function isReactElement(value6) {
  return value6.$$typeof === REACT_ELEMENT_TYPE;
}
function emptyTarget(val) {
  return Array.isArray(val) ? [] : {};
}
function cloneIfNecessary(value6, optionsArgument) {
  var clone2 = optionsArgument && optionsArgument.clone === true;
  return clone2 && isMergeableObject(value6) ? deepmerge(emptyTarget(value6), value6, optionsArgument) : value6;
}
function defaultArrayMerge(target2, source, optionsArgument) {
  var destination = target2.slice();
  source.forEach(function(e, i) {
    if (typeof destination[i] === "undefined") {
      destination[i] = cloneIfNecessary(e, optionsArgument);
    } else if (isMergeableObject(e)) {
      destination[i] = deepmerge(target2[i], e, optionsArgument);
    } else if (target2.indexOf(e) === -1) {
      destination.push(cloneIfNecessary(e, optionsArgument));
    }
  });
  return destination;
}
function mergeObject(target2, source, optionsArgument) {
  var destination = {};
  if (isMergeableObject(target2)) {
    Object.keys(target2).forEach(function(key) {
      destination[key] = cloneIfNecessary(target2[key], optionsArgument);
    });
  }
  Object.keys(source).forEach(function(key) {
    if (!isMergeableObject(source[key]) || !target2[key]) {
      destination[key] = cloneIfNecessary(source[key], optionsArgument);
    } else {
      destination[key] = deepmerge(target2[key], source[key], optionsArgument);
    }
  });
  return destination;
}
function deepmerge(target2, source, optionsArgument) {
  var sourceIsArray = Array.isArray(source);
  var targetIsArray = Array.isArray(target2);
  var options2 = optionsArgument || { arrayMerge: defaultArrayMerge };
  var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
  if (!sourceAndTargetTypesMatch) {
    return cloneIfNecessary(source, optionsArgument);
  } else if (sourceIsArray) {
    var arrayMerge = options2.arrayMerge || defaultArrayMerge;
    return arrayMerge(target2, source, optionsArgument);
  } else {
    return mergeObject(target2, source, optionsArgument);
  }
}
deepmerge.all = function deepmergeAll(array3, optionsArgument) {
  if (!Array.isArray(array3) || array3.length < 2) {
    throw new Error("first argument should be an array with at least two elements");
  }
  return array3.reduce(function(prev, next) {
    return deepmerge(prev, next, optionsArgument);
  });
};
var deepmerge_1 = deepmerge;
var es$1 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": deepmerge_1
});
var require$$2 = /* @__PURE__ */ getAugmentedNamespace(es$1);
var format$2 = {};
var util = {};
var types$1 = {};
types$1.__esModule = true;
types$1.isDefined = types$1.isUndefined = types$1.isFunction = void 0;
var _typeof$7 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
  return typeof obj;
} : function(obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};
types$1.isString = isString;
types$1.isObject = isObject$6;
types$1.isHtmlElement = isHtmlElement;
var _vue$9 = require$$6;
var _vue2$9 = _interopRequireDefault$e(_vue$9);
function _interopRequireDefault$e(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
function isString(obj) {
  return Object.prototype.toString.call(obj) === "[object String]";
}
function isObject$6(obj) {
  return Object.prototype.toString.call(obj) === "[object Object]";
}
function isHtmlElement(node) {
  return node && node.nodeType === Node.ELEMENT_NODE;
}
var isFunction$1 = function isFunction(functionToCheck) {
  var getType3 = {};
  return functionToCheck && getType3.toString.call(functionToCheck) === "[object Function]";
};
if (typeof /./ !== "function" && (typeof Int8Array === "undefined" ? "undefined" : _typeof$7(Int8Array)) !== "object" && (_vue2$9.default.prototype.$isServer || typeof document.childNodes !== "function")) {
  types$1.isFunction = isFunction$1 = function isFunction3(obj) {
    return typeof obj === "function" || false;
  };
}
types$1.isFunction = isFunction$1;
types$1.isUndefined = function isUndefined2(val) {
  return val === void 0;
};
types$1.isDefined = function isDefined(val) {
  return val !== void 0 && val !== null;
};
util.__esModule = true;
util.isEmpty = util.isEqual = util.arrayEquals = util.looseEqual = util.capitalize = util.kebabCase = util.autoprefixer = util.isFirefox = util.isEdge = util.isIE = util.coerceTruthyValueToArray = util.arrayFind = util.arrayFindIndex = util.escapeRegexpString = util.valueEquals = util.generateId = util.getValueByPath = void 0;
var _typeof$6 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
  return typeof obj;
} : function(obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};
util.noop = noop;
util.hasOwn = hasOwn;
util.toObject = toObject$3;
util.getPropByPath = getPropByPath;
util.rafThrottle = rafThrottle;
util.objToArray = objToArray;
var _vue$8 = require$$6;
var _vue2$8 = _interopRequireDefault$d(_vue$8);
var _types = types$1;
function _interopRequireDefault$d(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var hasOwnProperty$c = Object.prototype.hasOwnProperty;
function noop() {
}
function hasOwn(obj, key) {
  return hasOwnProperty$c.call(obj, key);
}
function extend(to, _from) {
  for (var key in _from) {
    to[key] = _from[key];
  }
  return to;
}
function toObject$3(arr) {
  var res = {};
  for (var i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }
  return res;
}
util.getValueByPath = function getValueByPath2(object3, prop) {
  prop = prop || "";
  var paths = prop.split(".");
  var current = object3;
  var result = null;
  for (var i = 0, j = paths.length; i < j; i++) {
    var path = paths[i];
    if (!current)
      break;
    if (i === j - 1) {
      result = current[path];
      break;
    }
    current = current[path];
  }
  return result;
};
function getPropByPath(obj, path, strict) {
  var tempObj = obj;
  path = path.replace(/\[(\w+)\]/g, ".$1");
  path = path.replace(/^\./, "");
  var keyArr = path.split(".");
  var i = 0;
  for (var len = keyArr.length; i < len - 1; ++i) {
    if (!tempObj && !strict)
      break;
    var key = keyArr[i];
    if (key in tempObj) {
      tempObj = tempObj[key];
    } else {
      if (strict) {
        throw new Error("please transfer a valid prop path to form item!");
      }
      break;
    }
  }
  return {
    o: tempObj,
    k: keyArr[i],
    v: tempObj ? tempObj[keyArr[i]] : null
  };
}
util.generateId = function generateId() {
  return Math.floor(Math.random() * 1e4);
};
util.valueEquals = function valueEquals(a, b) {
  if (a === b)
    return true;
  if (!(a instanceof Array))
    return false;
  if (!(b instanceof Array))
    return false;
  if (a.length !== b.length)
    return false;
  for (var i = 0; i !== a.length; ++i) {
    if (a[i] !== b[i])
      return false;
  }
  return true;
};
util.escapeRegexpString = function escapeRegexpString() {
  var value6 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
  return String(value6).replace(/[|\\{}()[\]^$+*?.]/g, "\\$&");
};
var arrayFindIndex = util.arrayFindIndex = function arrayFindIndex2(arr, pred) {
  for (var i = 0; i !== arr.length; ++i) {
    if (pred(arr[i])) {
      return i;
    }
  }
  return -1;
};
util.arrayFind = function arrayFind(arr, pred) {
  var idx = arrayFindIndex(arr, pred);
  return idx !== -1 ? arr[idx] : void 0;
};
util.coerceTruthyValueToArray = function coerceTruthyValueToArray(val) {
  if (Array.isArray(val)) {
    return val;
  } else if (val) {
    return [val];
  } else {
    return [];
  }
};
util.isIE = function isIE2() {
  return !_vue2$8.default.prototype.$isServer && !isNaN(Number(document.documentMode));
};
util.isEdge = function isEdge2() {
  return !_vue2$8.default.prototype.$isServer && navigator.userAgent.indexOf("Edge") > -1;
};
util.isFirefox = function isFirefox() {
  return !_vue2$8.default.prototype.$isServer && !!window.navigator.userAgent.match(/firefox/i);
};
util.autoprefixer = function autoprefixer(style2) {
  if ((typeof style2 === "undefined" ? "undefined" : _typeof$6(style2)) !== "object")
    return style2;
  var rules2 = ["transform", "transition", "animation"];
  var prefixes = ["ms-", "webkit-"];
  rules2.forEach(function(rule) {
    var value6 = style2[rule];
    if (rule && value6) {
      prefixes.forEach(function(prefix) {
        style2[prefix + rule] = value6;
      });
    }
  });
  return style2;
};
util.kebabCase = function kebabCase2(str) {
  var hyphenateRE2 = /([^-])([A-Z])/g;
  return str.replace(hyphenateRE2, "$1-$2").replace(hyphenateRE2, "$1-$2").toLowerCase();
};
util.capitalize = function capitalize2(str) {
  if (!(0, _types.isString)(str))
    return str;
  return str.charAt(0).toUpperCase() + str.slice(1);
};
var looseEqual = util.looseEqual = function looseEqual2(a, b) {
  var isObjectA = (0, _types.isObject)(a);
  var isObjectB = (0, _types.isObject)(b);
  if (isObjectA && isObjectB) {
    return JSON.stringify(a) === JSON.stringify(b);
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b);
  } else {
    return false;
  }
};
var arrayEquals = util.arrayEquals = function arrayEquals2(arrayA, arrayB) {
  arrayA = arrayA || [];
  arrayB = arrayB || [];
  if (arrayA.length !== arrayB.length) {
    return false;
  }
  for (var i = 0; i < arrayA.length; i++) {
    if (!looseEqual(arrayA[i], arrayB[i])) {
      return false;
    }
  }
  return true;
};
util.isEqual = function isEqual2(value1, value22) {
  if (Array.isArray(value1) && Array.isArray(value22)) {
    return arrayEquals(value1, value22);
  }
  return looseEqual(value1, value22);
};
var isEmpty = util.isEmpty = function isEmpty2(val) {
  if (val == null)
    return true;
  if (typeof val === "boolean")
    return false;
  if (typeof val === "number")
    return !val;
  if (val instanceof Error)
    return val.message === "";
  switch (Object.prototype.toString.call(val)) {
    case "[object String]":
    case "[object Array]":
      return !val.length;
    case "[object File]":
    case "[object Map]":
    case "[object Set]": {
      return !val.size;
    }
    case "[object Object]": {
      return !Object.keys(val).length;
    }
  }
  return false;
};
function rafThrottle(fn) {
  var locked = false;
  return function() {
    var _this = this;
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    if (locked)
      return;
    locked = true;
    window.requestAnimationFrame(function(_) {
      fn.apply(_this, args);
      locked = false;
    });
  };
}
function objToArray(obj) {
  if (Array.isArray(obj)) {
    return obj;
  }
  return isEmpty(obj) ? [] : [obj];
}
format$2.__esModule = true;
var _typeof$5 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
  return typeof obj;
} : function(obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};
format$2.default = function(Vue2) {
  function template2(string2) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    if (args.length === 1 && _typeof$5(args[0]) === "object") {
      args = args[0];
    }
    if (!args || !args.hasOwnProperty) {
      args = {};
    }
    return string2.replace(RE_NARGS, function(match, prefix, i, index2) {
      var result = void 0;
      if (string2[index2 - 1] === "{" && string2[index2 + match.length] === "}") {
        return i;
      } else {
        result = (0, _util$1.hasOwn)(args, i) ? args[i] : null;
        if (result === null || result === void 0) {
          return "";
        }
        return result;
      }
    });
  }
  return template2;
};
var _util$1 = util;
var RE_NARGS = /(%|)\{([0-9a-zA-Z_]+)\}/g;
var use_1;
locale$2.__esModule = true;
locale$2.i18n = use_1 = locale$2.use = locale$2.t = void 0;
var _zhCN = zhCN;
var _zhCN2 = _interopRequireDefault$c(_zhCN);
var _vue$7 = require$$6;
var _vue2$7 = _interopRequireDefault$c(_vue$7);
var _deepmerge = require$$2;
var _deepmerge2 = _interopRequireDefault$c(_deepmerge);
var _format = format$2;
var _format2 = _interopRequireDefault$c(_format);
function _interopRequireDefault$c(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var format$1 = (0, _format2.default)(_vue2$7.default);
var lang = _zhCN2.default;
var merged = false;
var i18nHandler = function i18nHandler2() {
  var vuei18n = Object.getPrototypeOf(this || _vue2$7.default).$t;
  if (typeof vuei18n === "function" && !!_vue2$7.default.locale) {
    if (!merged) {
      merged = true;
      _vue2$7.default.locale(_vue2$7.default.config.lang, (0, _deepmerge2.default)(lang, _vue2$7.default.locale(_vue2$7.default.config.lang) || {}, { clone: true }));
    }
    return vuei18n.apply(this, arguments);
  }
};
var t = locale$2.t = function t2(path, options2) {
  var value6 = i18nHandler.apply(this, arguments);
  if (value6 !== null && value6 !== void 0)
    return value6;
  var array3 = path.split(".");
  var current = lang;
  for (var i = 0, j = array3.length; i < j; i++) {
    var property2 = array3[i];
    value6 = current[property2];
    if (i === j - 1)
      return format$1(value6, options2);
    if (!value6)
      return "";
    current = value6;
  }
  return "";
};
var use = use_1 = locale$2.use = function use2(l) {
  lang = l || lang;
};
var i18n2 = locale$2.i18n = function i18n3(fn) {
  i18nHandler = fn || i18nHandler;
};
locale$2.default = { use, t, i18n: i18n2 };
Vue.prototype.$ELEMENT = { size: "small" };
function locale$1(lang2) {
  let langFile;
  switch (lang2) {
    case AvailableLanguage.En:
      langFile = _default$3;
      break;
    case AvailableLanguage.ZhCn:
      langFile = _default$2;
      break;
  }
  use_1(langFile);
}
function _extends() {
  return _extends = Object.assign || function(a) {
    for (var b, c = 1; c < arguments.length; c++)
      for (var d in b = arguments[c], b)
        Object.prototype.hasOwnProperty.call(b, d) && (a[d] = b[d]);
    return a;
  }, _extends.apply(this, arguments);
}
var normalMerge = ["attrs", "props", "domProps"], toArrayMerge = ["class", "style", "directives"], functionalMerge = ["on", "nativeOn"], mergeJsxProps = function(a) {
  return a.reduce(function(c, a2) {
    for (var b in a2)
      if (!c[b])
        c[b] = a2[b];
      else if (normalMerge.indexOf(b) !== -1)
        c[b] = _extends({}, c[b], a2[b]);
      else if (toArrayMerge.indexOf(b) !== -1) {
        var d = c[b] instanceof Array ? c[b] : [c[b]], e = a2[b] instanceof Array ? a2[b] : [a2[b]];
        c[b] = d.concat(e);
      } else if (functionalMerge.indexOf(b) !== -1) {
        for (var f in a2[b])
          if (c[b][f]) {
            var g = c[b][f] instanceof Array ? c[b][f] : [c[b][f]], h = a2[b][f] instanceof Array ? a2[b][f] : [a2[b][f]];
            c[b][f] = g.concat(h);
          } else
            c[b][f] = a2[b][f];
      } else if (b == "hook")
        for (var i in a2[b])
          c[b][i] = c[b][i] ? mergeFn$1(c[b][i], a2[b][i]) : a2[b][i];
      else
        c[b] = a2[b];
    return c;
  }, {});
}, mergeFn$1 = function(a, b) {
  return function() {
    a && a.apply(this, arguments), b && b.apply(this, arguments);
  };
};
var helper = mergeJsxProps;
/**
  * vue-class-component v7.2.6
  * (c) 2015-present Evan You
  * @license MIT
  */
function _typeof$4(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$4 = function(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof$4 = function(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof$4(obj);
}
function _defineProperty(obj, key, value6) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value6,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value6;
  }
  return obj;
}
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++)
      arr2[i] = arr[i];
    return arr2;
  }
}
function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]")
    return Array.from(iter);
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}
function reflectionIsSupported() {
  return typeof Reflect !== "undefined" && Reflect.defineMetadata && Reflect.getOwnMetadataKeys;
}
function copyReflectionMetadata(to, from) {
  forwardMetadata(to, from);
  Object.getOwnPropertyNames(from.prototype).forEach(function(key) {
    forwardMetadata(to.prototype, from.prototype, key);
  });
  Object.getOwnPropertyNames(from).forEach(function(key) {
    forwardMetadata(to, from, key);
  });
}
function forwardMetadata(to, from, propertyKey) {
  var metaKeys = propertyKey ? Reflect.getOwnMetadataKeys(from, propertyKey) : Reflect.getOwnMetadataKeys(from);
  metaKeys.forEach(function(metaKey) {
    var metadata = propertyKey ? Reflect.getOwnMetadata(metaKey, from, propertyKey) : Reflect.getOwnMetadata(metaKey, from);
    if (propertyKey) {
      Reflect.defineMetadata(metaKey, metadata, to, propertyKey);
    } else {
      Reflect.defineMetadata(metaKey, metadata, to);
    }
  });
}
var fakeArray = {
  __proto__: []
};
var hasProto = fakeArray instanceof Array;
function createDecorator(factory) {
  return function(target2, key, index2) {
    var Ctor = typeof target2 === "function" ? target2 : target2.constructor;
    if (!Ctor.__decorators__) {
      Ctor.__decorators__ = [];
    }
    if (typeof index2 !== "number") {
      index2 = void 0;
    }
    Ctor.__decorators__.push(function(options2) {
      return factory(options2, key, index2);
    });
  };
}
function mixins() {
  for (var _len = arguments.length, Ctors = new Array(_len), _key = 0; _key < _len; _key++) {
    Ctors[_key] = arguments[_key];
  }
  return Vue.extend({
    mixins: Ctors
  });
}
function isPrimitive(value6) {
  var type3 = _typeof$4(value6);
  return value6 == null || type3 !== "object" && type3 !== "function";
}
function collectDataFromConstructor(vm, Component2) {
  var originalInit = Component2.prototype._init;
  Component2.prototype._init = function() {
    var _this = this;
    var keys3 = Object.getOwnPropertyNames(vm);
    if (vm.$options.props) {
      for (var key in vm.$options.props) {
        if (!vm.hasOwnProperty(key)) {
          keys3.push(key);
        }
      }
    }
    keys3.forEach(function(key2) {
      Object.defineProperty(_this, key2, {
        get: function get7() {
          return vm[key2];
        },
        set: function set3(value6) {
          vm[key2] = value6;
        },
        configurable: true
      });
    });
  };
  var data25 = new Component2();
  Component2.prototype._init = originalInit;
  var plainData = {};
  Object.keys(data25).forEach(function(key) {
    if (data25[key] !== void 0) {
      plainData[key] = data25[key];
    }
  });
  return plainData;
}
var $internalHooks = [
  "data",
  "beforeCreate",
  "created",
  "beforeMount",
  "mounted",
  "beforeDestroy",
  "destroyed",
  "beforeUpdate",
  "updated",
  "activated",
  "deactivated",
  "render",
  "errorCaptured",
  "serverPrefetch"
];
function componentFactory(Component2) {
  var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  options2.name = options2.name || Component2._componentTag || Component2.name;
  var proto = Component2.prototype;
  Object.getOwnPropertyNames(proto).forEach(function(key) {
    if (key === "constructor") {
      return;
    }
    if ($internalHooks.indexOf(key) > -1) {
      options2[key] = proto[key];
      return;
    }
    var descriptor2 = Object.getOwnPropertyDescriptor(proto, key);
    if (descriptor2.value !== void 0) {
      if (typeof descriptor2.value === "function") {
        (options2.methods || (options2.methods = {}))[key] = descriptor2.value;
      } else {
        (options2.mixins || (options2.mixins = [])).push({
          data: function data25() {
            return _defineProperty({}, key, descriptor2.value);
          }
        });
      }
    } else if (descriptor2.get || descriptor2.set) {
      (options2.computed || (options2.computed = {}))[key] = {
        get: descriptor2.get,
        set: descriptor2.set
      };
    }
  });
  (options2.mixins || (options2.mixins = [])).push({
    data: function data25() {
      return collectDataFromConstructor(this, Component2);
    }
  });
  var decorators = Component2.__decorators__;
  if (decorators) {
    decorators.forEach(function(fn) {
      return fn(options2);
    });
    delete Component2.__decorators__;
  }
  var superProto = Object.getPrototypeOf(Component2.prototype);
  var Super = superProto instanceof Vue ? superProto.constructor : Vue;
  var Extended = Super.extend(options2);
  forwardStaticMembers(Extended, Component2, Super);
  if (reflectionIsSupported()) {
    copyReflectionMetadata(Extended, Component2);
  }
  return Extended;
}
var shouldIgnore = {
  prototype: true,
  arguments: true,
  callee: true,
  caller: true
};
function forwardStaticMembers(Extended, Original, Super) {
  Object.getOwnPropertyNames(Original).forEach(function(key) {
    if (shouldIgnore[key]) {
      return;
    }
    var extendedDescriptor = Object.getOwnPropertyDescriptor(Extended, key);
    if (extendedDescriptor && !extendedDescriptor.configurable) {
      return;
    }
    var descriptor2 = Object.getOwnPropertyDescriptor(Original, key);
    if (!hasProto) {
      if (key === "cid") {
        return;
      }
      var superDescriptor = Object.getOwnPropertyDescriptor(Super, key);
      if (!isPrimitive(descriptor2.value) && superDescriptor && superDescriptor.value === descriptor2.value) {
        return;
      }
    }
    Object.defineProperty(Extended, key, descriptor2);
  });
}
function Component(options2) {
  if (typeof options2 === "function") {
    return componentFactory(options2);
  }
  return function(Component2) {
    return componentFactory(Component2, options2);
  };
}
Component.registerHooks = function registerHooks(keys3) {
  $internalHooks.push.apply($internalHooks, _toConsumableArray(keys3));
};
var __spreadArrays = globalThis && globalThis.__spreadArrays || function() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++)
    s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
      r[k] = a[j];
  return r;
};
var hyphenateRE = /\B([A-Z])/g;
var hyphenate = function(str) {
  return str.replace(hyphenateRE, "-$1").toLowerCase();
};
function Emit(event2) {
  return function(_target, propertyKey, descriptor2) {
    var key = hyphenate(propertyKey);
    var original = descriptor2.value;
    descriptor2.value = function emitter2() {
      var _this = this;
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      var emit = function(returnValue2) {
        var emitName = event2 || key;
        if (returnValue2 === void 0) {
          if (args.length === 0) {
            _this.$emit(emitName);
          } else if (args.length === 1) {
            _this.$emit(emitName, args[0]);
          } else {
            _this.$emit.apply(_this, __spreadArrays([emitName], args));
          }
        } else {
          args.unshift(returnValue2);
          _this.$emit.apply(_this, __spreadArrays([emitName], args));
        }
      };
      var returnValue = original.apply(this, args);
      if (isPromise(returnValue)) {
        returnValue.then(emit);
      } else {
        emit(returnValue);
      }
      return returnValue;
    };
  };
}
function isPromise(obj) {
  return obj instanceof Promise || obj && typeof obj.then === "function";
}
function needToProduceProvide(original) {
  return typeof original !== "function" || !original.managed && !original.managedReactive;
}
function produceProvide(original) {
  var provide11 = function() {
    var _this = this;
    var rv = typeof original === "function" ? original.call(this) : original;
    rv = Object.create(rv || null);
    rv[reactiveInjectKey] = Object.create(this[reactiveInjectKey] || {});
    for (var i in provide11.managed) {
      rv[provide11.managed[i]] = this[i];
    }
    var _loop_1 = function(i2) {
      rv[provide11.managedReactive[i2]] = this_1[i2];
      Object.defineProperty(rv[reactiveInjectKey], provide11.managedReactive[i2], {
        enumerable: true,
        configurable: true,
        get: function() {
          return _this[i2];
        }
      });
    };
    var this_1 = this;
    for (var i in provide11.managedReactive) {
      _loop_1(i);
    }
    return rv;
  };
  provide11.managed = {};
  provide11.managedReactive = {};
  return provide11;
}
var reactiveInjectKey = "__reactiveInject__";
function inheritInjected(componentOptions) {
  if (!Array.isArray(componentOptions.inject)) {
    componentOptions.inject = componentOptions.inject || {};
    componentOptions.inject[reactiveInjectKey] = {
      from: reactiveInjectKey,
      default: {}
    };
  }
}
function InjectReactive(options2) {
  return createDecorator(function(componentOptions, key) {
    if (typeof componentOptions.inject === "undefined") {
      componentOptions.inject = {};
    }
    if (!Array.isArray(componentOptions.inject)) {
      var fromKey_1 = !!options2 ? options2.from || options2 : key;
      var defaultVal_1 = !!options2 && options2.default || void 0;
      if (!componentOptions.computed)
        componentOptions.computed = {};
      componentOptions.computed[key] = function() {
        var obj = this[reactiveInjectKey];
        return obj ? obj[fromKey_1] : defaultVal_1;
      };
      componentOptions.inject[reactiveInjectKey] = reactiveInjectKey;
    }
  });
}
var reflectMetadataIsSupported = typeof Reflect !== "undefined" && typeof Reflect.getMetadata !== "undefined";
function applyMetadata(options2, target2, key) {
  if (reflectMetadataIsSupported) {
    if (!Array.isArray(options2) && typeof options2 !== "function" && !options2.hasOwnProperty("type") && typeof options2.type === "undefined") {
      var type3 = Reflect.getMetadata("design:type", target2, key);
      if (type3 !== Object) {
        options2.type = type3;
      }
    }
  }
}
function Prop(options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  return function(target2, key) {
    applyMetadata(options2, target2, key);
    createDecorator(function(componentOptions, k) {
      (componentOptions.props || (componentOptions.props = {}))[k] = options2;
    })(target2, key);
  };
}
function ProvideReactive(key) {
  return createDecorator(function(componentOptions, k) {
    var provide11 = componentOptions.provide;
    inheritInjected(componentOptions);
    if (needToProduceProvide(provide11)) {
      provide11 = componentOptions.provide = produceProvide(provide11);
    }
    provide11.managedReactive[k] = key || k;
  });
}
function Watch(path, options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  var _a = options2.deep, deep = _a === void 0 ? false : _a, _b = options2.immediate, immediate = _b === void 0 ? false : _b;
  return createDecorator(function(componentOptions, handler2) {
    if (typeof componentOptions.watch !== "object") {
      componentOptions.watch = /* @__PURE__ */ Object.create(null);
    }
    var watch2 = componentOptions.watch;
    if (typeof watch2[path] === "object" && !Array.isArray(watch2[path])) {
      watch2[path] = [watch2[path]];
    } else if (typeof watch2[path] === "undefined") {
      watch2[path] = [];
    }
    watch2[path].push({ handler: handler2, deep, immediate });
  });
}
var elementUi_common = { exports: {} };
var dateUtil = {};
var date$1 = { exports: {} };
(function(module2) {
  (function(main) {
    var fecha = {};
    var token = /d{1,4}|M{1,4}|yy(?:yy)?|S{1,3}|Do|ZZ|([HhMsDm])\1?|[aA]|"[^"]*"|'[^']*'/g;
    var twoDigits = "\\d\\d?";
    var threeDigits = "\\d{3}";
    var fourDigits = "\\d{4}";
    var word = "[^\\s]+";
    var literal = /\[([^]*?)\]/gm;
    var noop2 = function noop3() {
    };
    function regexEscape(str) {
      return str.replace(/[|\\{()[^$+*?.-]/g, "\\$&");
    }
    function shorten(arr, sLen) {
      var newArr = [];
      for (var i = 0, len = arr.length; i < len; i++) {
        newArr.push(arr[i].substr(0, sLen));
      }
      return newArr;
    }
    function monthUpdate(arrName) {
      return function(d, v, i18n4) {
        var index2 = i18n4[arrName].indexOf(v.charAt(0).toUpperCase() + v.substr(1).toLowerCase());
        if (~index2) {
          d.month = index2;
        }
      };
    }
    function pad(val, len) {
      val = String(val);
      len = len || 2;
      while (val.length < len) {
        val = "0" + val;
      }
      return val;
    }
    var dayNames = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
    var monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
    var monthNamesShort = shorten(monthNames, 3);
    var dayNamesShort = shorten(dayNames, 3);
    fecha.i18n = {
      dayNamesShort,
      dayNames,
      monthNamesShort,
      monthNames,
      amPm: ["am", "pm"],
      DoFn: function DoFn(D) {
        return D + ["th", "st", "nd", "rd"][D % 10 > 3 ? 0 : (D - D % 10 !== 10) * D % 10];
      }
    };
    var formatFlags = {
      D: function D(dateObj) {
        return dateObj.getDay();
      },
      DD: function DD(dateObj) {
        return pad(dateObj.getDay());
      },
      Do: function Do(dateObj, i18n4) {
        return i18n4.DoFn(dateObj.getDate());
      },
      d: function d(dateObj) {
        return dateObj.getDate();
      },
      dd: function dd(dateObj) {
        return pad(dateObj.getDate());
      },
      ddd: function ddd(dateObj, i18n4) {
        return i18n4.dayNamesShort[dateObj.getDay()];
      },
      dddd: function dddd(dateObj, i18n4) {
        return i18n4.dayNames[dateObj.getDay()];
      },
      M: function M(dateObj) {
        return dateObj.getMonth() + 1;
      },
      MM: function MM(dateObj) {
        return pad(dateObj.getMonth() + 1);
      },
      MMM: function MMM(dateObj, i18n4) {
        return i18n4.monthNamesShort[dateObj.getMonth()];
      },
      MMMM: function MMMM(dateObj, i18n4) {
        return i18n4.monthNames[dateObj.getMonth()];
      },
      yy: function yy(dateObj) {
        return pad(String(dateObj.getFullYear()), 4).substr(2);
      },
      yyyy: function yyyy(dateObj) {
        return pad(dateObj.getFullYear(), 4);
      },
      h: function h(dateObj) {
        return dateObj.getHours() % 12 || 12;
      },
      hh: function hh(dateObj) {
        return pad(dateObj.getHours() % 12 || 12);
      },
      H: function H(dateObj) {
        return dateObj.getHours();
      },
      HH: function HH(dateObj) {
        return pad(dateObj.getHours());
      },
      m: function m(dateObj) {
        return dateObj.getMinutes();
      },
      mm: function mm(dateObj) {
        return pad(dateObj.getMinutes());
      },
      s: function s(dateObj) {
        return dateObj.getSeconds();
      },
      ss: function ss(dateObj) {
        return pad(dateObj.getSeconds());
      },
      S: function S(dateObj) {
        return Math.round(dateObj.getMilliseconds() / 100);
      },
      SS: function SS(dateObj) {
        return pad(Math.round(dateObj.getMilliseconds() / 10), 2);
      },
      SSS: function SSS(dateObj) {
        return pad(dateObj.getMilliseconds(), 3);
      },
      a: function a(dateObj, i18n4) {
        return dateObj.getHours() < 12 ? i18n4.amPm[0] : i18n4.amPm[1];
      },
      A: function A(dateObj, i18n4) {
        return dateObj.getHours() < 12 ? i18n4.amPm[0].toUpperCase() : i18n4.amPm[1].toUpperCase();
      },
      ZZ: function ZZ(dateObj) {
        var o = dateObj.getTimezoneOffset();
        return (o > 0 ? "-" : "+") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4);
      }
    };
    var parseFlags = {
      d: [twoDigits, function(d, v) {
        d.day = v;
      }],
      Do: [twoDigits + word, function(d, v) {
        d.day = parseInt(v, 10);
      }],
      M: [twoDigits, function(d, v) {
        d.month = v - 1;
      }],
      yy: [twoDigits, function(d, v) {
        var da = new Date(), cent = +("" + da.getFullYear()).substr(0, 2);
        d.year = "" + (v > 68 ? cent - 1 : cent) + v;
      }],
      h: [twoDigits, function(d, v) {
        d.hour = v;
      }],
      m: [twoDigits, function(d, v) {
        d.minute = v;
      }],
      s: [twoDigits, function(d, v) {
        d.second = v;
      }],
      yyyy: [fourDigits, function(d, v) {
        d.year = v;
      }],
      S: ["\\d", function(d, v) {
        d.millisecond = v * 100;
      }],
      SS: ["\\d{2}", function(d, v) {
        d.millisecond = v * 10;
      }],
      SSS: [threeDigits, function(d, v) {
        d.millisecond = v;
      }],
      D: [twoDigits, noop2],
      ddd: [word, noop2],
      MMM: [word, monthUpdate("monthNamesShort")],
      MMMM: [word, monthUpdate("monthNames")],
      a: [word, function(d, v, i18n4) {
        var val = v.toLowerCase();
        if (val === i18n4.amPm[0]) {
          d.isPm = false;
        } else if (val === i18n4.amPm[1]) {
          d.isPm = true;
        }
      }],
      ZZ: ["[^\\s]*?[\\+\\-]\\d\\d:?\\d\\d|[^\\s]*?Z", function(d, v) {
        var parts = (v + "").match(/([+-]|\d\d)/gi), minutes;
        if (parts) {
          minutes = +(parts[1] * 60) + parseInt(parts[2], 10);
          d.timezoneOffset = parts[0] === "+" ? minutes : -minutes;
        }
      }]
    };
    parseFlags.dd = parseFlags.d;
    parseFlags.dddd = parseFlags.ddd;
    parseFlags.DD = parseFlags.D;
    parseFlags.mm = parseFlags.m;
    parseFlags.hh = parseFlags.H = parseFlags.HH = parseFlags.h;
    parseFlags.MM = parseFlags.M;
    parseFlags.ss = parseFlags.s;
    parseFlags.A = parseFlags.a;
    fecha.masks = {
      default: "ddd MMM dd yyyy HH:mm:ss",
      shortDate: "M/D/yy",
      mediumDate: "MMM d, yyyy",
      longDate: "MMMM d, yyyy",
      fullDate: "dddd, MMMM d, yyyy",
      shortTime: "HH:mm",
      mediumTime: "HH:mm:ss",
      longTime: "HH:mm:ss.SSS"
    };
    fecha.format = function(dateObj, mask, i18nSettings) {
      var i18n4 = i18nSettings || fecha.i18n;
      if (typeof dateObj === "number") {
        dateObj = new Date(dateObj);
      }
      if (Object.prototype.toString.call(dateObj) !== "[object Date]" || isNaN(dateObj.getTime())) {
        throw new Error("Invalid Date in fecha.format");
      }
      mask = fecha.masks[mask] || mask || fecha.masks["default"];
      var literals = [];
      mask = mask.replace(literal, function($0, $1) {
        literals.push($1);
        return "@@@";
      });
      mask = mask.replace(token, function($0) {
        return $0 in formatFlags ? formatFlags[$0](dateObj, i18n4) : $0.slice(1, $0.length - 1);
      });
      return mask.replace(/@@@/g, function() {
        return literals.shift();
      });
    };
    fecha.parse = function(dateStr, format2, i18nSettings) {
      var i18n4 = i18nSettings || fecha.i18n;
      if (typeof format2 !== "string") {
        throw new Error("Invalid format in fecha.parse");
      }
      format2 = fecha.masks[format2] || format2;
      if (dateStr.length > 1e3) {
        return null;
      }
      var dateInfo = {};
      var parseInfo = [];
      var literals = [];
      format2 = format2.replace(literal, function($0, $1) {
        literals.push($1);
        return "@@@";
      });
      var newFormat = regexEscape(format2).replace(token, function($0) {
        if (parseFlags[$0]) {
          var info = parseFlags[$0];
          parseInfo.push(info[1]);
          return "(" + info[0] + ")";
        }
        return $0;
      });
      newFormat = newFormat.replace(/@@@/g, function() {
        return literals.shift();
      });
      var matches2 = dateStr.match(new RegExp(newFormat, "i"));
      if (!matches2) {
        return null;
      }
      for (var i = 1; i < matches2.length; i++) {
        parseInfo[i - 1](dateInfo, matches2[i], i18n4);
      }
      var today = new Date();
      if (dateInfo.isPm === true && dateInfo.hour != null && +dateInfo.hour !== 12) {
        dateInfo.hour = +dateInfo.hour + 12;
      } else if (dateInfo.isPm === false && +dateInfo.hour === 12) {
        dateInfo.hour = 0;
      }
      var date3;
      if (dateInfo.timezoneOffset != null) {
        dateInfo.minute = +(dateInfo.minute || 0) - +dateInfo.timezoneOffset;
        date3 = new Date(Date.UTC(dateInfo.year || today.getFullYear(), dateInfo.month || 0, dateInfo.day || 1, dateInfo.hour || 0, dateInfo.minute || 0, dateInfo.second || 0, dateInfo.millisecond || 0));
      } else {
        date3 = new Date(dateInfo.year || today.getFullYear(), dateInfo.month || 0, dateInfo.day || 1, dateInfo.hour || 0, dateInfo.minute || 0, dateInfo.second || 0, dateInfo.millisecond || 0);
      }
      return date3;
    };
    if (module2.exports) {
      module2.exports = fecha;
    } else {
      main.fecha = fecha;
    }
  })(void 0);
})(date$1);
dateUtil.__esModule = true;
dateUtil.validateRangeInOneMonth = dateUtil.extractTimeFormat = dateUtil.extractDateFormat = dateUtil.nextYear = dateUtil.prevYear = dateUtil.nextMonth = dateUtil.prevMonth = dateUtil.changeYearMonthAndClampDate = dateUtil.timeWithinRange = dateUtil.limitTimeRange = dateUtil.clearMilliseconds = dateUtil.clearTime = dateUtil.modifyWithTimeString = dateUtil.modifyTime = dateUtil.modifyDate = dateUtil.range = dateUtil.getRangeMinutes = dateUtil.getMonthDays = dateUtil.getPrevMonthLastDays = dateUtil.getRangeHours = dateUtil.getWeekNumber = dateUtil.getStartDateOfMonth = dateUtil.nextDate = dateUtil.prevDate = dateUtil.getFirstDayOfMonth = dateUtil.getDayCountOfYear = dateUtil.getDayCountOfMonth = dateUtil.parseDate = dateUtil.formatDate = dateUtil.isDateObject = dateUtil.isDate = dateUtil.toDate = dateUtil.getI18nSettings = void 0;
var _date = date$1.exports;
var _date2 = _interopRequireDefault$b(_date);
var _locale$1 = locale$2;
function _interopRequireDefault$b(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var weeks = ["sun", "mon", "tue", "wed", "thu", "fri", "sat"];
var months = ["jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec"];
var newArray = function newArray2(start, end) {
  var result = [];
  for (var i = start; i <= end; i++) {
    result.push(i);
  }
  return result;
};
var getI18nSettings = dateUtil.getI18nSettings = function getI18nSettings2() {
  return {
    dayNamesShort: weeks.map(function(week) {
      return (0, _locale$1.t)("el.datepicker.weeks." + week);
    }),
    dayNames: weeks.map(function(week) {
      return (0, _locale$1.t)("el.datepicker.weeks." + week);
    }),
    monthNamesShort: months.map(function(month) {
      return (0, _locale$1.t)("el.datepicker.months." + month);
    }),
    monthNames: months.map(function(month, index2) {
      return (0, _locale$1.t)("el.datepicker.month" + (index2 + 1));
    }),
    amPm: ["am", "pm"]
  };
};
var toDate = dateUtil.toDate = function toDate2(date3) {
  return isDate(date3) ? new Date(date3) : null;
};
var isDate = dateUtil.isDate = function isDate2(date3) {
  if (date3 === null || date3 === void 0)
    return false;
  if (isNaN(new Date(date3).getTime()))
    return false;
  if (Array.isArray(date3))
    return false;
  return true;
};
dateUtil.isDateObject = function isDateObject(val) {
  return val instanceof Date;
};
dateUtil.formatDate = function formatDate(date3, format2) {
  date3 = toDate(date3);
  if (!date3)
    return "";
  return _date2.default.format(date3, format2 || "yyyy-MM-dd", getI18nSettings());
};
var parseDate2 = dateUtil.parseDate = function parseDate3(string2, format2) {
  return _date2.default.parse(string2, format2 || "yyyy-MM-dd", getI18nSettings());
};
var getDayCountOfMonth = dateUtil.getDayCountOfMonth = function getDayCountOfMonth2(year, month) {
  if (month === 3 || month === 5 || month === 8 || month === 10) {
    return 30;
  }
  if (month === 1) {
    if (year % 4 === 0 && year % 100 !== 0 || year % 400 === 0) {
      return 29;
    } else {
      return 28;
    }
  }
  return 31;
};
dateUtil.getDayCountOfYear = function getDayCountOfYear(year) {
  var isLeapYear2 = year % 400 === 0 || year % 100 !== 0 && year % 4 === 0;
  return isLeapYear2 ? 366 : 365;
};
dateUtil.getFirstDayOfMonth = function getFirstDayOfMonth(date3) {
  var temp = new Date(date3.getTime());
  temp.setDate(1);
  return temp.getDay();
};
var prevDate = dateUtil.prevDate = function prevDate2(date3) {
  var amount = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
  return new Date(date3.getFullYear(), date3.getMonth(), date3.getDate() - amount);
};
dateUtil.nextDate = function nextDate(date3) {
  var amount = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
  return new Date(date3.getFullYear(), date3.getMonth(), date3.getDate() + amount);
};
dateUtil.getStartDateOfMonth = function getStartDateOfMonth(year, month) {
  var result = new Date(year, month, 1);
  var day = result.getDay();
  if (day === 0) {
    return prevDate(result, 7);
  } else {
    return prevDate(result, day);
  }
};
dateUtil.getWeekNumber = function getWeekNumber(src) {
  if (!isDate(src))
    return null;
  var date3 = new Date(src.getTime());
  date3.setHours(0, 0, 0, 0);
  date3.setDate(date3.getDate() + 3 - (date3.getDay() + 6) % 7);
  var week1 = new Date(date3.getFullYear(), 0, 4);
  return 1 + Math.round(((date3.getTime() - week1.getTime()) / 864e5 - 3 + (week1.getDay() + 6) % 7) / 7);
};
dateUtil.getRangeHours = function getRangeHours(ranges) {
  var hours = [];
  var disabledHours = [];
  (ranges || []).forEach(function(range3) {
    var value6 = range3.map(function(date3) {
      return date3.getHours();
    });
    disabledHours = disabledHours.concat(newArray(value6[0], value6[1]));
  });
  if (disabledHours.length) {
    for (var i = 0; i < 24; i++) {
      hours[i] = disabledHours.indexOf(i) === -1;
    }
  } else {
    for (var _i = 0; _i < 24; _i++) {
      hours[_i] = false;
    }
  }
  return hours;
};
dateUtil.getPrevMonthLastDays = function getPrevMonthLastDays(date3, amount) {
  if (amount <= 0)
    return [];
  var temp = new Date(date3.getTime());
  temp.setDate(0);
  var lastDay = temp.getDate();
  return range$1(amount).map(function(_, index2) {
    return lastDay - (amount - index2 - 1);
  });
};
dateUtil.getMonthDays = function getMonthDays(date3) {
  var temp = new Date(date3.getFullYear(), date3.getMonth() + 1, 0);
  var days = temp.getDate();
  return range$1(days).map(function(_, index2) {
    return index2 + 1;
  });
};
function setRangeData(arr, start, end, value6) {
  for (var i = start; i < end; i++) {
    arr[i] = value6;
  }
}
dateUtil.getRangeMinutes = function getRangeMinutes(ranges, hour) {
  var minutes = new Array(60);
  if (ranges.length > 0) {
    ranges.forEach(function(range3) {
      var start = range3[0];
      var end = range3[1];
      var startHour = start.getHours();
      var startMinute = start.getMinutes();
      var endHour = end.getHours();
      var endMinute = end.getMinutes();
      if (startHour === hour && endHour !== hour) {
        setRangeData(minutes, startMinute, 60, true);
      } else if (startHour === hour && endHour === hour) {
        setRangeData(minutes, startMinute, endMinute + 1, true);
      } else if (startHour !== hour && endHour === hour) {
        setRangeData(minutes, 0, endMinute + 1, true);
      } else if (startHour < hour && endHour > hour) {
        setRangeData(minutes, 0, 60, true);
      }
    });
  } else {
    setRangeData(minutes, 0, 60, true);
  }
  return minutes;
};
var range$1 = dateUtil.range = function range(n) {
  return Array.apply(null, { length: n }).map(function(_, n2) {
    return n2;
  });
};
var modifyDate = dateUtil.modifyDate = function modifyDate2(date3, y, m, d) {
  return new Date(y, m, d, date3.getHours(), date3.getMinutes(), date3.getSeconds(), date3.getMilliseconds());
};
var modifyTime = dateUtil.modifyTime = function modifyTime2(date3, h, m, s) {
  return new Date(date3.getFullYear(), date3.getMonth(), date3.getDate(), h, m, s, date3.getMilliseconds());
};
dateUtil.modifyWithTimeString = function modifyWithTimeString(date3, time) {
  if (date3 == null || !time) {
    return date3;
  }
  time = parseDate2(time, "HH:mm:ss");
  return modifyTime(date3, time.getHours(), time.getMinutes(), time.getSeconds());
};
dateUtil.clearTime = function clearTime(date3) {
  return new Date(date3.getFullYear(), date3.getMonth(), date3.getDate());
};
dateUtil.clearMilliseconds = function clearMilliseconds(date3) {
  return new Date(date3.getFullYear(), date3.getMonth(), date3.getDate(), date3.getHours(), date3.getMinutes(), date3.getSeconds(), 0);
};
var limitTimeRange = dateUtil.limitTimeRange = function limitTimeRange2(date3, ranges) {
  var format2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "HH:mm:ss";
  if (ranges.length === 0)
    return date3;
  var normalizeDate = function normalizeDate2(date4) {
    return _date2.default.parse(_date2.default.format(date4, format2), format2);
  };
  var ndate = normalizeDate(date3);
  var nranges = ranges.map(function(range3) {
    return range3.map(normalizeDate);
  });
  if (nranges.some(function(nrange) {
    return ndate >= nrange[0] && ndate <= nrange[1];
  }))
    return date3;
  var minDate = nranges[0][0];
  var maxDate = nranges[0][0];
  nranges.forEach(function(nrange) {
    minDate = new Date(Math.min(nrange[0], minDate));
    maxDate = new Date(Math.max(nrange[1], minDate));
  });
  var ret = ndate < minDate ? minDate : maxDate;
  return modifyDate(ret, date3.getFullYear(), date3.getMonth(), date3.getDate());
};
dateUtil.timeWithinRange = function timeWithinRange(date3, selectableRange, format2) {
  var limitedDate = limitTimeRange(date3, selectableRange, format2);
  return limitedDate.getTime() === date3.getTime();
};
var changeYearMonthAndClampDate = dateUtil.changeYearMonthAndClampDate = function changeYearMonthAndClampDate2(date3, year, month) {
  var monthDate = Math.min(date3.getDate(), getDayCountOfMonth(year, month));
  return modifyDate(date3, year, month, monthDate);
};
dateUtil.prevMonth = function prevMonth(date3) {
  var year = date3.getFullYear();
  var month = date3.getMonth();
  return month === 0 ? changeYearMonthAndClampDate(date3, year - 1, 11) : changeYearMonthAndClampDate(date3, year, month - 1);
};
dateUtil.nextMonth = function nextMonth(date3) {
  var year = date3.getFullYear();
  var month = date3.getMonth();
  return month === 11 ? changeYearMonthAndClampDate(date3, year + 1, 0) : changeYearMonthAndClampDate(date3, year, month + 1);
};
dateUtil.prevYear = function prevYear(date3) {
  var amount = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
  var year = date3.getFullYear();
  var month = date3.getMonth();
  return changeYearMonthAndClampDate(date3, year - amount, month);
};
dateUtil.nextYear = function nextYear(date3) {
  var amount = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
  var year = date3.getFullYear();
  var month = date3.getMonth();
  return changeYearMonthAndClampDate(date3, year + amount, month);
};
dateUtil.extractDateFormat = function extractDateFormat(format2) {
  return format2.replace(/\W?m{1,2}|\W?ZZ/g, "").replace(/\W?h{1,2}|\W?s{1,3}|\W?a/gi, "").trim();
};
dateUtil.extractTimeFormat = function extractTimeFormat(format2) {
  return format2.replace(/\W?D{1,2}|\W?Do|\W?d{1,4}|\W?M{1,4}|\W?y{2,4}/g, "").trim();
};
dateUtil.validateRangeInOneMonth = function validateRangeInOneMonth(start, end) {
  return start.getMonth() === end.getMonth() && start.getFullYear() === end.getFullYear();
};
var dom = {};
dom.__esModule = true;
dom.isInContainer = dom.getScrollContainer = dom.isScroll = dom.getStyle = dom.once = dom.off = dom.on = void 0;
var _typeof$3 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
  return typeof obj;
} : function(obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};
dom.hasClass = hasClass;
dom.addClass = addClass2;
dom.removeClass = removeClass;
dom.setStyle = setStyle;
var _vue$6 = require$$6;
var _vue2$6 = _interopRequireDefault$a(_vue$6);
function _interopRequireDefault$a(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var isServer$1 = _vue2$6.default.prototype.$isServer;
var SPECIAL_CHARS_REGEXP = /([\:\-\_]+(.))/g;
var MOZ_HACK_REGEXP = /^moz([A-Z])/;
var ieVersion = isServer$1 ? 0 : Number(document.documentMode);
var trim = function trim2(string2) {
  return (string2 || "").replace(/^[\s\uFEFF]+|[\s\uFEFF]+$/g, "");
};
var camelCase = function camelCase2(name) {
  return name.replace(SPECIAL_CHARS_REGEXP, function(_, separator, letter, offset) {
    return offset ? letter.toUpperCase() : letter;
  }).replace(MOZ_HACK_REGEXP, "Moz$1");
};
var on2 = dom.on = function() {
  if (!isServer$1 && document.addEventListener) {
    return function(element, event2, handler2) {
      if (element && event2 && handler2) {
        element.addEventListener(event2, handler2, false);
      }
    };
  } else {
    return function(element, event2, handler2) {
      if (element && event2 && handler2) {
        element.attachEvent("on" + event2, handler2);
      }
    };
  }
}();
var off2 = dom.off = function() {
  if (!isServer$1 && document.removeEventListener) {
    return function(element, event2, handler2) {
      if (element && event2) {
        element.removeEventListener(event2, handler2, false);
      }
    };
  } else {
    return function(element, event2, handler2) {
      if (element && event2) {
        element.detachEvent("on" + event2, handler2);
      }
    };
  }
}();
dom.once = function once2(el, event2, fn) {
  var listener = function listener2() {
    if (fn) {
      fn.apply(this, arguments);
    }
    off2(el, event2, listener2);
  };
  on2(el, event2, listener);
};
function hasClass(el, cls) {
  if (!el || !cls)
    return false;
  if (cls.indexOf(" ") !== -1)
    throw new Error("className should not contain space.");
  if (el.classList) {
    return el.classList.contains(cls);
  } else {
    return (" " + el.className + " ").indexOf(" " + cls + " ") > -1;
  }
}
function addClass2(el, cls) {
  if (!el)
    return;
  var curClass = el.className;
  var classes = (cls || "").split(" ");
  for (var i = 0, j = classes.length; i < j; i++) {
    var clsName = classes[i];
    if (!clsName)
      continue;
    if (el.classList) {
      el.classList.add(clsName);
    } else if (!hasClass(el, clsName)) {
      curClass += " " + clsName;
    }
  }
  if (!el.classList) {
    el.setAttribute("class", curClass);
  }
}
function removeClass(el, cls) {
  if (!el || !cls)
    return;
  var classes = cls.split(" ");
  var curClass = " " + el.className + " ";
  for (var i = 0, j = classes.length; i < j; i++) {
    var clsName = classes[i];
    if (!clsName)
      continue;
    if (el.classList) {
      el.classList.remove(clsName);
    } else if (hasClass(el, clsName)) {
      curClass = curClass.replace(" " + clsName + " ", " ");
    }
  }
  if (!el.classList) {
    el.setAttribute("class", trim(curClass));
  }
}
var getStyle = dom.getStyle = ieVersion < 9 ? function(element, styleName) {
  if (isServer$1)
    return;
  if (!element || !styleName)
    return null;
  styleName = camelCase(styleName);
  if (styleName === "float") {
    styleName = "styleFloat";
  }
  try {
    switch (styleName) {
      case "opacity":
        try {
          return element.filters.item("alpha").opacity / 100;
        } catch (e) {
          return 1;
        }
      default:
        return element.style[styleName] || element.currentStyle ? element.currentStyle[styleName] : null;
    }
  } catch (e) {
    return element.style[styleName];
  }
} : function(element, styleName) {
  if (isServer$1)
    return;
  if (!element || !styleName)
    return null;
  styleName = camelCase(styleName);
  if (styleName === "float") {
    styleName = "cssFloat";
  }
  try {
    var computed = document.defaultView.getComputedStyle(element, "");
    return element.style[styleName] || computed ? computed[styleName] : null;
  } catch (e) {
    return element.style[styleName];
  }
};
function setStyle(element, styleName, value6) {
  if (!element || !styleName)
    return;
  if ((typeof styleName === "undefined" ? "undefined" : _typeof$3(styleName)) === "object") {
    for (var prop in styleName) {
      if (styleName.hasOwnProperty(prop)) {
        setStyle(element, prop, styleName[prop]);
      }
    }
  } else {
    styleName = camelCase(styleName);
    if (styleName === "opacity" && ieVersion < 9) {
      element.style.filter = isNaN(value6) ? "" : "alpha(opacity=" + value6 * 100 + ")";
    } else {
      element.style[styleName] = value6;
    }
  }
}
var isScroll = dom.isScroll = function isScroll2(el, vertical) {
  if (isServer$1)
    return;
  var determinedDirection = vertical !== null && vertical !== void 0;
  var overflow = determinedDirection ? vertical ? getStyle(el, "overflow-y") : getStyle(el, "overflow-x") : getStyle(el, "overflow");
  return overflow.match(/(scroll|auto|overlay)/);
};
dom.getScrollContainer = function getScrollContainer(el, vertical) {
  if (isServer$1)
    return;
  var parent2 = el;
  while (parent2) {
    if ([window, document, document.documentElement].includes(parent2)) {
      return window;
    }
    if (isScroll(parent2, vertical)) {
      return parent2;
    }
    parent2 = parent2.parentNode;
  }
  return parent2;
};
dom.isInContainer = function isInContainer(el, container) {
  if (isServer$1 || !el || !container)
    return false;
  var elRect = el.getBoundingClientRect();
  var containerRect = void 0;
  if ([window, document, document.documentElement, null, void 0].includes(container)) {
    containerRect = {
      top: 0,
      right: window.innerWidth,
      bottom: window.innerHeight,
      left: 0
    };
  } else {
    containerRect = container.getBoundingClientRect();
  }
  return elRect.top < containerRect.bottom && elRect.bottom > containerRect.top && elRect.right > containerRect.left && elRect.left < containerRect.right;
};
var emitter = {};
emitter.__esModule = true;
function _broadcast(componentName, eventName, params) {
  this.$children.forEach(function(child) {
    var name = child.$options.componentName;
    if (name === componentName) {
      child.$emit.apply(child, [eventName].concat(params));
    } else {
      _broadcast.apply(child, [componentName, eventName].concat([params]));
    }
  });
}
emitter.default = {
  methods: {
    dispatch: function dispatch(componentName, eventName, params) {
      var parent2 = this.$parent || this.$root;
      var name = parent2.$options.componentName;
      while (parent2 && (!name || name !== componentName)) {
        parent2 = parent2.$parent;
        if (parent2) {
          name = parent2.$options.componentName;
        }
      }
      if (parent2) {
        parent2.$emit.apply(parent2, [eventName].concat(params));
      }
    },
    broadcast: function broadcast(componentName, eventName, params) {
      _broadcast.call(this, componentName, eventName, params);
    }
  }
};
var locale = {};
locale.__esModule = true;
var _locale = locale$2;
locale.default = {
  methods: {
    t: function t3() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return _locale.t.apply(this, args);
    }
  }
};
var vuePopper = {};
var popup = {};
var merge$2 = {};
merge$2.__esModule = true;
merge$2.default = function(target2) {
  for (var i = 1, j = arguments.length; i < j; i++) {
    var source = arguments[i] || {};
    for (var prop in source) {
      if (source.hasOwnProperty(prop)) {
        var value6 = source[prop];
        if (value6 !== void 0) {
          target2[prop] = value6;
        }
      }
    }
  }
  return target2;
};
var popupManager = {};
popupManager.__esModule = true;
var _vue$5 = require$$6;
var _vue2$5 = _interopRequireDefault$9(_vue$5);
var _dom$3 = dom;
function _interopRequireDefault$9(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var hasModal = false;
var hasInitZIndex = false;
var zIndex = void 0;
var getModal = function getModal2() {
  if (_vue2$5.default.prototype.$isServer)
    return;
  var modalDom = PopupManager.modalDom;
  if (modalDom) {
    hasModal = true;
  } else {
    hasModal = false;
    modalDom = document.createElement("div");
    PopupManager.modalDom = modalDom;
    modalDom.addEventListener("touchmove", function(event2) {
      event2.preventDefault();
      event2.stopPropagation();
    });
    modalDom.addEventListener("click", function() {
      PopupManager.doOnModalClick && PopupManager.doOnModalClick();
    });
  }
  return modalDom;
};
var instances = {};
var PopupManager = {
  modalFade: true,
  getInstance: function getInstance(id2) {
    return instances[id2];
  },
  register: function register(id2, instance) {
    if (id2 && instance) {
      instances[id2] = instance;
    }
  },
  deregister: function deregister(id2) {
    if (id2) {
      instances[id2] = null;
      delete instances[id2];
    }
  },
  nextZIndex: function nextZIndex2() {
    return PopupManager.zIndex++;
  },
  modalStack: [],
  doOnModalClick: function doOnModalClick() {
    var topItem = PopupManager.modalStack[PopupManager.modalStack.length - 1];
    if (!topItem)
      return;
    var instance = PopupManager.getInstance(topItem.id);
    if (instance && instance.closeOnClickModal) {
      instance.close();
    }
  },
  openModal: function openModal2(id2, zIndex2, dom2, modalClass, modalFade) {
    if (_vue2$5.default.prototype.$isServer)
      return;
    if (!id2 || zIndex2 === void 0)
      return;
    this.modalFade = modalFade;
    var modalStack = this.modalStack;
    for (var i = 0, j = modalStack.length; i < j; i++) {
      var item = modalStack[i];
      if (item.id === id2) {
        return;
      }
    }
    var modalDom = getModal();
    (0, _dom$3.addClass)(modalDom, "v-modal");
    if (this.modalFade && !hasModal) {
      (0, _dom$3.addClass)(modalDom, "v-modal-enter");
    }
    if (modalClass) {
      var classArr = modalClass.trim().split(/\s+/);
      classArr.forEach(function(item2) {
        return (0, _dom$3.addClass)(modalDom, item2);
      });
    }
    setTimeout(function() {
      (0, _dom$3.removeClass)(modalDom, "v-modal-enter");
    }, 200);
    if (dom2 && dom2.parentNode && dom2.parentNode.nodeType !== 11) {
      dom2.parentNode.appendChild(modalDom);
    } else {
      document.body.appendChild(modalDom);
    }
    if (zIndex2) {
      modalDom.style.zIndex = zIndex2;
    }
    modalDom.tabIndex = 0;
    modalDom.style.display = "";
    this.modalStack.push({ id: id2, zIndex: zIndex2, modalClass });
  },
  closeModal: function closeModal2(id2) {
    var modalStack = this.modalStack;
    var modalDom = getModal();
    if (modalStack.length > 0) {
      var topItem = modalStack[modalStack.length - 1];
      if (topItem.id === id2) {
        if (topItem.modalClass) {
          var classArr = topItem.modalClass.trim().split(/\s+/);
          classArr.forEach(function(item) {
            return (0, _dom$3.removeClass)(modalDom, item);
          });
        }
        modalStack.pop();
        if (modalStack.length > 0) {
          modalDom.style.zIndex = modalStack[modalStack.length - 1].zIndex;
        }
      } else {
        for (var i = modalStack.length - 1; i >= 0; i--) {
          if (modalStack[i].id === id2) {
            modalStack.splice(i, 1);
            break;
          }
        }
      }
    }
    if (modalStack.length === 0) {
      if (this.modalFade) {
        (0, _dom$3.addClass)(modalDom, "v-modal-leave");
      }
      setTimeout(function() {
        if (modalStack.length === 0) {
          if (modalDom.parentNode)
            modalDom.parentNode.removeChild(modalDom);
          modalDom.style.display = "none";
          PopupManager.modalDom = void 0;
        }
        (0, _dom$3.removeClass)(modalDom, "v-modal-leave");
      }, 200);
    }
  }
};
Object.defineProperty(PopupManager, "zIndex", {
  configurable: true,
  get: function get6() {
    if (!hasInitZIndex) {
      zIndex = zIndex || (_vue2$5.default.prototype.$ELEMENT || {}).zIndex || 2e3;
      hasInitZIndex = true;
    }
    return zIndex;
  },
  set: function set2(value6) {
    zIndex = value6;
  }
});
var getTopPopup = function getTopPopup2() {
  if (_vue2$5.default.prototype.$isServer)
    return;
  if (PopupManager.modalStack.length > 0) {
    var topPopup = PopupManager.modalStack[PopupManager.modalStack.length - 1];
    if (!topPopup)
      return;
    var instance = PopupManager.getInstance(topPopup.id);
    return instance;
  }
};
if (!_vue2$5.default.prototype.$isServer) {
  window.addEventListener("keydown", function(event2) {
    if (event2.keyCode === 27) {
      var topPopup = getTopPopup();
      if (topPopup && topPopup.closeOnPressEscape) {
        topPopup.handleClose ? topPopup.handleClose() : topPopup.handleAction ? topPopup.handleAction("cancel") : topPopup.close();
      }
    }
  });
}
popupManager.default = PopupManager;
var scrollbarWidth = {};
scrollbarWidth.__esModule = true;
scrollbarWidth.default = function() {
  if (_vue2$4.default.prototype.$isServer)
    return 0;
  if (scrollBarWidth$1 !== void 0)
    return scrollBarWidth$1;
  var outer = document.createElement("div");
  outer.className = "el-scrollbar__wrap";
  outer.style.visibility = "hidden";
  outer.style.width = "100px";
  outer.style.position = "absolute";
  outer.style.top = "-9999px";
  document.body.appendChild(outer);
  var widthNoScroll = outer.offsetWidth;
  outer.style.overflow = "scroll";
  var inner = document.createElement("div");
  inner.style.width = "100%";
  outer.appendChild(inner);
  var widthWithScroll = inner.offsetWidth;
  outer.parentNode.removeChild(outer);
  scrollBarWidth$1 = widthNoScroll - widthWithScroll;
  return scrollBarWidth$1;
};
var _vue$4 = require$$6;
var _vue2$4 = _interopRequireDefault$8(_vue$4);
function _interopRequireDefault$8(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var scrollBarWidth$1 = void 0;
popup.__esModule = true;
popup.PopupManager = void 0;
var _vue$3 = require$$6;
var _vue2$3 = _interopRequireDefault$7(_vue$3);
var _merge = merge$2;
var _merge2 = _interopRequireDefault$7(_merge);
var _popupManager = popupManager;
var _popupManager2 = _interopRequireDefault$7(_popupManager);
var _scrollbarWidth = scrollbarWidth;
var _scrollbarWidth2 = _interopRequireDefault$7(_scrollbarWidth);
var _dom$2 = dom;
function _interopRequireDefault$7(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var idSeed = 1;
var scrollBarWidth = void 0;
popup.default = {
  props: {
    visible: {
      type: Boolean,
      default: false
    },
    openDelay: {},
    closeDelay: {},
    zIndex: {},
    modal: {
      type: Boolean,
      default: false
    },
    modalFade: {
      type: Boolean,
      default: true
    },
    modalClass: {},
    modalAppendToBody: {
      type: Boolean,
      default: false
    },
    lockScroll: {
      type: Boolean,
      default: true
    },
    closeOnPressEscape: {
      type: Boolean,
      default: false
    },
    closeOnClickModal: {
      type: Boolean,
      default: false
    }
  },
  beforeMount: function beforeMount2() {
    this._popupId = "popup-" + idSeed++;
    _popupManager2.default.register(this._popupId, this);
  },
  beforeDestroy: function beforeDestroy11() {
    _popupManager2.default.deregister(this._popupId);
    _popupManager2.default.closeModal(this._popupId);
    this.restoreBodyStyle();
  },
  data: function data23() {
    return {
      opened: false,
      bodyPaddingRight: null,
      computedBodyPaddingRight: 0,
      withoutHiddenClass: true,
      rendered: false
    };
  },
  watch: {
    visible: function visible(val) {
      var _this = this;
      if (val) {
        if (this._opening)
          return;
        if (!this.rendered) {
          this.rendered = true;
          _vue2$3.default.nextTick(function() {
            _this.open();
          });
        } else {
          this.open();
        }
      } else {
        this.close();
      }
    }
  },
  methods: {
    open: function open3(options2) {
      var _this2 = this;
      if (!this.rendered) {
        this.rendered = true;
      }
      var props2 = (0, _merge2.default)({}, this.$props || this, options2);
      if (this._closeTimer) {
        clearTimeout(this._closeTimer);
        this._closeTimer = null;
      }
      clearTimeout(this._openTimer);
      var openDelay = Number(props2.openDelay);
      if (openDelay > 0) {
        this._openTimer = setTimeout(function() {
          _this2._openTimer = null;
          _this2.doOpen(props2);
        }, openDelay);
      } else {
        this.doOpen(props2);
      }
    },
    doOpen: function doOpen(props2) {
      if (this.$isServer)
        return;
      if (this.willOpen && !this.willOpen())
        return;
      if (this.opened)
        return;
      this._opening = true;
      var dom2 = this.$el;
      var modal2 = props2.modal;
      var zIndex2 = props2.zIndex;
      if (zIndex2) {
        _popupManager2.default.zIndex = zIndex2;
      }
      if (modal2) {
        if (this._closing) {
          _popupManager2.default.closeModal(this._popupId);
          this._closing = false;
        }
        _popupManager2.default.openModal(this._popupId, _popupManager2.default.nextZIndex(), this.modalAppendToBody ? void 0 : dom2, props2.modalClass, props2.modalFade);
        if (props2.lockScroll) {
          this.withoutHiddenClass = !(0, _dom$2.hasClass)(document.body, "el-popup-parent--hidden");
          if (this.withoutHiddenClass) {
            this.bodyPaddingRight = document.body.style.paddingRight;
            this.computedBodyPaddingRight = parseInt((0, _dom$2.getStyle)(document.body, "paddingRight"), 10);
          }
          scrollBarWidth = (0, _scrollbarWidth2.default)();
          var bodyHasOverflow = document.documentElement.clientHeight < document.body.scrollHeight;
          var bodyOverflowY = (0, _dom$2.getStyle)(document.body, "overflowY");
          if (scrollBarWidth > 0 && (bodyHasOverflow || bodyOverflowY === "scroll") && this.withoutHiddenClass) {
            document.body.style.paddingRight = this.computedBodyPaddingRight + scrollBarWidth + "px";
          }
          (0, _dom$2.addClass)(document.body, "el-popup-parent--hidden");
        }
      }
      if (getComputedStyle(dom2).position === "static") {
        dom2.style.position = "absolute";
      }
      dom2.style.zIndex = _popupManager2.default.nextZIndex();
      this.opened = true;
      this.onOpen && this.onOpen();
      this.doAfterOpen();
    },
    doAfterOpen: function doAfterOpen() {
      this._opening = false;
    },
    close: function close3() {
      var _this3 = this;
      if (this.willClose && !this.willClose())
        return;
      if (this._openTimer !== null) {
        clearTimeout(this._openTimer);
        this._openTimer = null;
      }
      clearTimeout(this._closeTimer);
      var closeDelay = Number(this.closeDelay);
      if (closeDelay > 0) {
        this._closeTimer = setTimeout(function() {
          _this3._closeTimer = null;
          _this3.doClose();
        }, closeDelay);
      } else {
        this.doClose();
      }
    },
    doClose: function doClose() {
      this._closing = true;
      this.onClose && this.onClose();
      if (this.lockScroll) {
        setTimeout(this.restoreBodyStyle, 200);
      }
      this.opened = false;
      this.doAfterClose();
    },
    doAfterClose: function doAfterClose() {
      _popupManager2.default.closeModal(this._popupId);
      this._closing = false;
    },
    restoreBodyStyle: function restoreBodyStyle() {
      if (this.modal && this.withoutHiddenClass) {
        document.body.style.paddingRight = this.bodyPaddingRight;
        (0, _dom$2.removeClass)(document.body, "el-popup-parent--hidden");
      }
      this.withoutHiddenClass = true;
    }
  }
};
popup.PopupManager = _popupManager2.default;
var popper = { exports: {} };
(function(module2) {
  var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
    return typeof obj;
  } : function(obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  };
  (function(root2, factory) {
    if (_typeof2(module2) === "object" && module2.exports) {
      module2.exports = factory();
    } else {
      root2.Popper = factory();
    }
  })(void 0, function() {
    var root2 = window;
    var DEFAULTS = {
      placement: "bottom",
      gpuAcceleration: true,
      offset: 0,
      boundariesElement: "viewport",
      boundariesPadding: 5,
      preventOverflowOrder: ["left", "right", "top", "bottom"],
      flipBehavior: "flip",
      arrowElement: "[x-arrow]",
      arrowOffset: 0,
      modifiers: ["shift", "offset", "preventOverflow", "keepTogether", "arrow", "flip", "applyStyle"],
      modifiersIgnored: [],
      forceAbsolute: false
    };
    function Popper(reference, popper2, options2) {
      this._reference = reference.jquery ? reference[0] : reference;
      this.state = {};
      var isNotDefined = typeof popper2 === "undefined" || popper2 === null;
      var isConfig = popper2 && Object.prototype.toString.call(popper2) === "[object Object]";
      if (isNotDefined || isConfig) {
        this._popper = this.parse(isConfig ? popper2 : {});
      } else {
        this._popper = popper2.jquery ? popper2[0] : popper2;
      }
      this._options = Object.assign({}, DEFAULTS, options2);
      this._options.modifiers = this._options.modifiers.map(function(modifier) {
        if (this._options.modifiersIgnored.indexOf(modifier) !== -1)
          return;
        if (modifier === "applyStyle") {
          this._popper.setAttribute("x-placement", this._options.placement);
        }
        return this.modifiers[modifier] || modifier;
      }.bind(this));
      this.state.position = this._getPosition(this._popper, this._reference);
      setStyle2(this._popper, { position: this.state.position, top: 0 });
      this.update();
      this._setupEventListeners();
      return this;
    }
    Popper.prototype.destroy = function() {
      this._popper.removeAttribute("x-placement");
      this._popper.style.left = "";
      this._popper.style.position = "";
      this._popper.style.top = "";
      this._popper.style[getSupportedPropertyName("transform")] = "";
      this._removeEventListeners();
      if (this._options.removeOnDestroy) {
        this._popper.remove();
      }
      return this;
    };
    Popper.prototype.update = function() {
      var data25 = { instance: this, styles: {} };
      data25.placement = this._options.placement;
      data25._originalPlacement = this._options.placement;
      data25.offsets = this._getOffsets(this._popper, this._reference, data25.placement);
      data25.boundaries = this._getBoundaries(data25, this._options.boundariesPadding, this._options.boundariesElement);
      data25 = this.runModifiers(data25, this._options.modifiers);
      if (typeof this.state.updateCallback === "function") {
        this.state.updateCallback(data25);
      }
    };
    Popper.prototype.onCreate = function(callback) {
      callback(this);
      return this;
    };
    Popper.prototype.onUpdate = function(callback) {
      this.state.updateCallback = callback;
      return this;
    };
    Popper.prototype.parse = function(config2) {
      var defaultConfig = {
        tagName: "div",
        classNames: ["popper"],
        attributes: [],
        parent: root2.document.body,
        content: "",
        contentType: "text",
        arrowTagName: "div",
        arrowClassNames: ["popper__arrow"],
        arrowAttributes: ["x-arrow"]
      };
      config2 = Object.assign({}, defaultConfig, config2);
      var d = root2.document;
      var popper2 = d.createElement(config2.tagName);
      addClassNames(popper2, config2.classNames);
      addAttributes(popper2, config2.attributes);
      if (config2.contentType === "node") {
        popper2.appendChild(config2.content.jquery ? config2.content[0] : config2.content);
      } else if (config2.contentType === "html") {
        popper2.innerHTML = config2.content;
      } else {
        popper2.textContent = config2.content;
      }
      if (config2.arrowTagName) {
        var arrow = d.createElement(config2.arrowTagName);
        addClassNames(arrow, config2.arrowClassNames);
        addAttributes(arrow, config2.arrowAttributes);
        popper2.appendChild(arrow);
      }
      var parent2 = config2.parent.jquery ? config2.parent[0] : config2.parent;
      if (typeof parent2 === "string") {
        parent2 = d.querySelectorAll(config2.parent);
        if (parent2.length > 1) {
          console.warn("WARNING: the given `parent` query(" + config2.parent + ") matched more than one element, the first one will be used");
        }
        if (parent2.length === 0) {
          throw "ERROR: the given `parent` doesn't exists!";
        }
        parent2 = parent2[0];
      }
      if (parent2.length > 1 && parent2 instanceof Element === false) {
        console.warn("WARNING: you have passed as parent a list of elements, the first one will be used");
        parent2 = parent2[0];
      }
      parent2.appendChild(popper2);
      return popper2;
      function addClassNames(element, classNames) {
        classNames.forEach(function(className) {
          element.classList.add(className);
        });
      }
      function addAttributes(element, attributes) {
        attributes.forEach(function(attribute) {
          element.setAttribute(attribute.split(":")[0], attribute.split(":")[1] || "");
        });
      }
    };
    Popper.prototype._getPosition = function(popper2, reference) {
      getOffsetParent(reference);
      if (this._options.forceAbsolute) {
        return "absolute";
      }
      var isParentFixed = isFixed(reference);
      return isParentFixed ? "fixed" : "absolute";
    };
    Popper.prototype._getOffsets = function(popper2, reference, placement) {
      placement = placement.split("-")[0];
      var popperOffsets = {};
      popperOffsets.position = this.state.position;
      var isParentFixed = popperOffsets.position === "fixed";
      var referenceOffsets = getOffsetRectRelativeToCustomParent(reference, getOffsetParent(popper2), isParentFixed);
      var popperRect = getOuterSizes(popper2);
      if (["right", "left"].indexOf(placement) !== -1) {
        popperOffsets.top = referenceOffsets.top + referenceOffsets.height / 2 - popperRect.height / 2;
        if (placement === "left") {
          popperOffsets.left = referenceOffsets.left - popperRect.width;
        } else {
          popperOffsets.left = referenceOffsets.right;
        }
      } else {
        popperOffsets.left = referenceOffsets.left + referenceOffsets.width / 2 - popperRect.width / 2;
        if (placement === "top") {
          popperOffsets.top = referenceOffsets.top - popperRect.height;
        } else {
          popperOffsets.top = referenceOffsets.bottom;
        }
      }
      popperOffsets.width = popperRect.width;
      popperOffsets.height = popperRect.height;
      return {
        popper: popperOffsets,
        reference: referenceOffsets
      };
    };
    Popper.prototype._setupEventListeners = function() {
      this.state.updateBound = this.update.bind(this);
      root2.addEventListener("resize", this.state.updateBound);
      if (this._options.boundariesElement !== "window") {
        var target2 = getScrollParent(this._reference);
        if (target2 === root2.document.body || target2 === root2.document.documentElement) {
          target2 = root2;
        }
        target2.addEventListener("scroll", this.state.updateBound);
        this.state.scrollTarget = target2;
      }
    };
    Popper.prototype._removeEventListeners = function() {
      root2.removeEventListener("resize", this.state.updateBound);
      if (this._options.boundariesElement !== "window" && this.state.scrollTarget) {
        this.state.scrollTarget.removeEventListener("scroll", this.state.updateBound);
        this.state.scrollTarget = null;
      }
      this.state.updateBound = null;
    };
    Popper.prototype._getBoundaries = function(data25, padding, boundariesElement) {
      var boundaries = {};
      var width2, height3;
      if (boundariesElement === "window") {
        var body2 = root2.document.body, html = root2.document.documentElement;
        height3 = Math.max(body2.scrollHeight, body2.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);
        width2 = Math.max(body2.scrollWidth, body2.offsetWidth, html.clientWidth, html.scrollWidth, html.offsetWidth);
        boundaries = {
          top: 0,
          right: width2,
          bottom: height3,
          left: 0
        };
      } else if (boundariesElement === "viewport") {
        var offsetParent = getOffsetParent(this._popper);
        var scrollParent = getScrollParent(this._popper);
        var offsetParentRect = getOffsetRect(offsetParent);
        var getScrollTopValue = function getScrollTopValue2(element) {
          return element == document.body ? Math.max(document.documentElement.scrollTop, document.body.scrollTop) : element.scrollTop;
        };
        var getScrollLeftValue = function getScrollLeftValue2(element) {
          return element == document.body ? Math.max(document.documentElement.scrollLeft, document.body.scrollLeft) : element.scrollLeft;
        };
        var scrollTop = data25.offsets.popper.position === "fixed" ? 0 : getScrollTopValue(scrollParent);
        var scrollLeft = data25.offsets.popper.position === "fixed" ? 0 : getScrollLeftValue(scrollParent);
        boundaries = {
          top: 0 - (offsetParentRect.top - scrollTop),
          right: root2.document.documentElement.clientWidth - (offsetParentRect.left - scrollLeft),
          bottom: root2.document.documentElement.clientHeight - (offsetParentRect.top - scrollTop),
          left: 0 - (offsetParentRect.left - scrollLeft)
        };
      } else {
        if (getOffsetParent(this._popper) === boundariesElement) {
          boundaries = {
            top: 0,
            left: 0,
            right: boundariesElement.clientWidth,
            bottom: boundariesElement.clientHeight
          };
        } else {
          boundaries = getOffsetRect(boundariesElement);
        }
      }
      boundaries.left += padding;
      boundaries.right -= padding;
      boundaries.top = boundaries.top + padding;
      boundaries.bottom = boundaries.bottom - padding;
      return boundaries;
    };
    Popper.prototype.runModifiers = function(data25, modifiers, ends) {
      var modifiersToRun = modifiers.slice();
      if (ends !== void 0) {
        modifiersToRun = this._options.modifiers.slice(0, getArrayKeyIndex(this._options.modifiers, ends));
      }
      modifiersToRun.forEach(function(modifier) {
        if (isFunction3(modifier)) {
          data25 = modifier.call(this, data25);
        }
      }.bind(this));
      return data25;
    };
    Popper.prototype.isModifierRequired = function(requesting, requested) {
      var index2 = getArrayKeyIndex(this._options.modifiers, requesting);
      return !!this._options.modifiers.slice(0, index2).filter(function(modifier) {
        return modifier === requested;
      }).length;
    };
    Popper.prototype.modifiers = {};
    Popper.prototype.modifiers.applyStyle = function(data25) {
      var styles3 = {
        position: data25.offsets.popper.position
      };
      var left = Math.round(data25.offsets.popper.left);
      var top = Math.round(data25.offsets.popper.top);
      var prefixedProperty;
      if (this._options.gpuAcceleration && (prefixedProperty = getSupportedPropertyName("transform"))) {
        styles3[prefixedProperty] = "translate3d(" + left + "px, " + top + "px, 0)";
        styles3.top = 0;
        styles3.left = 0;
      } else {
        styles3.left = left;
        styles3.top = top;
      }
      Object.assign(styles3, data25.styles);
      setStyle2(this._popper, styles3);
      this._popper.setAttribute("x-placement", data25.placement);
      if (this.isModifierRequired(this.modifiers.applyStyle, this.modifiers.arrow) && data25.offsets.arrow) {
        setStyle2(data25.arrowElement, data25.offsets.arrow);
      }
      return data25;
    };
    Popper.prototype.modifiers.shift = function(data25) {
      var placement = data25.placement;
      var basePlacement = placement.split("-")[0];
      var shiftVariation = placement.split("-")[1];
      if (shiftVariation) {
        var reference = data25.offsets.reference;
        var popper2 = getPopperClientRect(data25.offsets.popper);
        var shiftOffsets = {
          y: {
            start: { top: reference.top },
            end: { top: reference.top + reference.height - popper2.height }
          },
          x: {
            start: { left: reference.left },
            end: { left: reference.left + reference.width - popper2.width }
          }
        };
        var axis = ["bottom", "top"].indexOf(basePlacement) !== -1 ? "x" : "y";
        data25.offsets.popper = Object.assign(popper2, shiftOffsets[axis][shiftVariation]);
      }
      return data25;
    };
    Popper.prototype.modifiers.preventOverflow = function(data25) {
      var order = this._options.preventOverflowOrder;
      var popper2 = getPopperClientRect(data25.offsets.popper);
      var check = {
        left: function left() {
          var left2 = popper2.left;
          if (popper2.left < data25.boundaries.left) {
            left2 = Math.max(popper2.left, data25.boundaries.left);
          }
          return { left: left2 };
        },
        right: function right() {
          var left = popper2.left;
          if (popper2.right > data25.boundaries.right) {
            left = Math.min(popper2.left, data25.boundaries.right - popper2.width);
          }
          return { left };
        },
        top: function top() {
          var top2 = popper2.top;
          if (popper2.top < data25.boundaries.top) {
            top2 = Math.max(popper2.top, data25.boundaries.top);
          }
          return { top: top2 };
        },
        bottom: function bottom() {
          var top = popper2.top;
          if (popper2.bottom > data25.boundaries.bottom) {
            top = Math.min(popper2.top, data25.boundaries.bottom - popper2.height);
          }
          return { top };
        }
      };
      order.forEach(function(direction) {
        data25.offsets.popper = Object.assign(popper2, check[direction]());
      });
      return data25;
    };
    Popper.prototype.modifiers.keepTogether = function(data25) {
      var popper2 = getPopperClientRect(data25.offsets.popper);
      var reference = data25.offsets.reference;
      var f = Math.floor;
      if (popper2.right < f(reference.left)) {
        data25.offsets.popper.left = f(reference.left) - popper2.width;
      }
      if (popper2.left > f(reference.right)) {
        data25.offsets.popper.left = f(reference.right);
      }
      if (popper2.bottom < f(reference.top)) {
        data25.offsets.popper.top = f(reference.top) - popper2.height;
      }
      if (popper2.top > f(reference.bottom)) {
        data25.offsets.popper.top = f(reference.bottom);
      }
      return data25;
    };
    Popper.prototype.modifiers.flip = function(data25) {
      if (!this.isModifierRequired(this.modifiers.flip, this.modifiers.preventOverflow)) {
        console.warn("WARNING: preventOverflow modifier is required by flip modifier in order to work, be sure to include it before flip!");
        return data25;
      }
      if (data25.flipped && data25.placement === data25._originalPlacement) {
        return data25;
      }
      var placement = data25.placement.split("-")[0];
      var placementOpposite = getOppositePlacement(placement);
      var variation = data25.placement.split("-")[1] || "";
      var flipOrder = [];
      if (this._options.flipBehavior === "flip") {
        flipOrder = [placement, placementOpposite];
      } else {
        flipOrder = this._options.flipBehavior;
      }
      flipOrder.forEach(function(step2, index2) {
        if (placement !== step2 || flipOrder.length === index2 + 1) {
          return;
        }
        placement = data25.placement.split("-")[0];
        placementOpposite = getOppositePlacement(placement);
        var popperOffsets = getPopperClientRect(data25.offsets.popper);
        var a = ["right", "bottom"].indexOf(placement) !== -1;
        if (a && Math.floor(data25.offsets.reference[placement]) > Math.floor(popperOffsets[placementOpposite]) || !a && Math.floor(data25.offsets.reference[placement]) < Math.floor(popperOffsets[placementOpposite])) {
          data25.flipped = true;
          data25.placement = flipOrder[index2 + 1];
          if (variation) {
            data25.placement += "-" + variation;
          }
          data25.offsets.popper = this._getOffsets(this._popper, this._reference, data25.placement).popper;
          data25 = this.runModifiers(data25, this._options.modifiers, this._flip);
        }
      }.bind(this));
      return data25;
    };
    Popper.prototype.modifiers.offset = function(data25) {
      var offset = this._options.offset;
      var popper2 = data25.offsets.popper;
      if (data25.placement.indexOf("left") !== -1) {
        popper2.top -= offset;
      } else if (data25.placement.indexOf("right") !== -1) {
        popper2.top += offset;
      } else if (data25.placement.indexOf("top") !== -1) {
        popper2.left -= offset;
      } else if (data25.placement.indexOf("bottom") !== -1) {
        popper2.left += offset;
      }
      return data25;
    };
    Popper.prototype.modifiers.arrow = function(data25) {
      var arrow = this._options.arrowElement;
      var arrowOffset = this._options.arrowOffset;
      if (typeof arrow === "string") {
        arrow = this._popper.querySelector(arrow);
      }
      if (!arrow) {
        return data25;
      }
      if (!this._popper.contains(arrow)) {
        console.warn("WARNING: `arrowElement` must be child of its popper element!");
        return data25;
      }
      if (!this.isModifierRequired(this.modifiers.arrow, this.modifiers.keepTogether)) {
        console.warn("WARNING: keepTogether modifier is required by arrow modifier in order to work, be sure to include it before arrow!");
        return data25;
      }
      var arrowStyle = {};
      var placement = data25.placement.split("-")[0];
      var popper2 = getPopperClientRect(data25.offsets.popper);
      var reference = data25.offsets.reference;
      var isVertical = ["left", "right"].indexOf(placement) !== -1;
      var len = isVertical ? "height" : "width";
      var side = isVertical ? "top" : "left";
      var altSide = isVertical ? "left" : "top";
      var opSide = isVertical ? "bottom" : "right";
      var arrowSize = getOuterSizes(arrow)[len];
      if (reference[opSide] - arrowSize < popper2[side]) {
        data25.offsets.popper[side] -= popper2[side] - (reference[opSide] - arrowSize);
      }
      if (reference[side] + arrowSize > popper2[opSide]) {
        data25.offsets.popper[side] += reference[side] + arrowSize - popper2[opSide];
      }
      var center = reference[side] + (arrowOffset || reference[len] / 2 - arrowSize / 2);
      var sideValue = center - popper2[side];
      sideValue = Math.max(Math.min(popper2[len] - arrowSize - 8, sideValue), 8);
      arrowStyle[side] = sideValue;
      arrowStyle[altSide] = "";
      data25.offsets.arrow = arrowStyle;
      data25.arrowElement = arrow;
      return data25;
    };
    function getOuterSizes(element) {
      var _display = element.style.display, _visibility = element.style.visibility;
      element.style.display = "block";
      element.style.visibility = "hidden";
      element.offsetWidth;
      var styles3 = root2.getComputedStyle(element);
      var x = parseFloat(styles3.marginTop) + parseFloat(styles3.marginBottom);
      var y = parseFloat(styles3.marginLeft) + parseFloat(styles3.marginRight);
      var result = { width: element.offsetWidth + y, height: element.offsetHeight + x };
      element.style.display = _display;
      element.style.visibility = _visibility;
      return result;
    }
    function getOppositePlacement(placement) {
      var hash = { left: "right", right: "left", bottom: "top", top: "bottom" };
      return placement.replace(/left|right|bottom|top/g, function(matched) {
        return hash[matched];
      });
    }
    function getPopperClientRect(popperOffsets) {
      var offsets = Object.assign({}, popperOffsets);
      offsets.right = offsets.left + offsets.width;
      offsets.bottom = offsets.top + offsets.height;
      return offsets;
    }
    function getArrayKeyIndex(arr, keyToFind) {
      var i = 0, key;
      for (key in arr) {
        if (arr[key] === keyToFind) {
          return i;
        }
        i++;
      }
      return null;
    }
    function getStyleComputedProperty(element, property2) {
      var css = root2.getComputedStyle(element, null);
      return css[property2];
    }
    function getOffsetParent(element) {
      var offsetParent = element.offsetParent;
      return offsetParent === root2.document.body || !offsetParent ? root2.document.documentElement : offsetParent;
    }
    function getScrollParent(element) {
      var parent2 = element.parentNode;
      if (!parent2) {
        return element;
      }
      if (parent2 === root2.document) {
        if (root2.document.body.scrollTop || root2.document.body.scrollLeft) {
          return root2.document.body;
        } else {
          return root2.document.documentElement;
        }
      }
      if (["scroll", "auto"].indexOf(getStyleComputedProperty(parent2, "overflow")) !== -1 || ["scroll", "auto"].indexOf(getStyleComputedProperty(parent2, "overflow-x")) !== -1 || ["scroll", "auto"].indexOf(getStyleComputedProperty(parent2, "overflow-y")) !== -1) {
        return parent2;
      }
      return getScrollParent(element.parentNode);
    }
    function isFixed(element) {
      if (element === root2.document.body) {
        return false;
      }
      if (getStyleComputedProperty(element, "position") === "fixed") {
        return true;
      }
      return element.parentNode ? isFixed(element.parentNode) : element;
    }
    function setStyle2(element, styles3) {
      function is_numeric(n) {
        return n !== "" && !isNaN(parseFloat(n)) && isFinite(n);
      }
      Object.keys(styles3).forEach(function(prop) {
        var unit = "";
        if (["width", "height", "top", "right", "bottom", "left"].indexOf(prop) !== -1 && is_numeric(styles3[prop])) {
          unit = "px";
        }
        element.style[prop] = styles3[prop] + unit;
      });
    }
    function isFunction3(functionToCheck) {
      var getType3 = {};
      return functionToCheck && getType3.toString.call(functionToCheck) === "[object Function]";
    }
    function getOffsetRect(element) {
      var elementRect = {
        width: element.offsetWidth,
        height: element.offsetHeight,
        left: element.offsetLeft,
        top: element.offsetTop
      };
      elementRect.right = elementRect.left + elementRect.width;
      elementRect.bottom = elementRect.top + elementRect.height;
      return elementRect;
    }
    function getBoundingClientRect(element) {
      var rect = element.getBoundingClientRect();
      var isIE3 = navigator.userAgent.indexOf("MSIE") != -1;
      var rectTop = isIE3 && element.tagName === "HTML" ? -element.scrollTop : rect.top;
      return {
        left: rect.left,
        top: rectTop,
        right: rect.right,
        bottom: rect.bottom,
        width: rect.right - rect.left,
        height: rect.bottom - rectTop
      };
    }
    function getOffsetRectRelativeToCustomParent(element, parent2, fixed) {
      var elementRect = getBoundingClientRect(element);
      var parentRect = getBoundingClientRect(parent2);
      if (fixed) {
        var scrollParent = getScrollParent(parent2);
        parentRect.top += scrollParent.scrollTop;
        parentRect.bottom += scrollParent.scrollTop;
        parentRect.left += scrollParent.scrollLeft;
        parentRect.right += scrollParent.scrollLeft;
      }
      var rect = {
        top: elementRect.top - parentRect.top,
        left: elementRect.left - parentRect.left,
        bottom: elementRect.top - parentRect.top + elementRect.height,
        right: elementRect.left - parentRect.left + elementRect.width,
        width: elementRect.width,
        height: elementRect.height
      };
      return rect;
    }
    function getSupportedPropertyName(property2) {
      var prefixes = ["", "ms", "webkit", "moz", "o"];
      for (var i = 0; i < prefixes.length; i++) {
        var toCheck = prefixes[i] ? prefixes[i] + property2.charAt(0).toUpperCase() + property2.slice(1) : property2;
        if (typeof root2.document.body.style[toCheck] !== "undefined") {
          return toCheck;
        }
      }
      return null;
    }
    if (!Object.assign) {
      Object.defineProperty(Object, "assign", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function value6(target2) {
          if (target2 === void 0 || target2 === null) {
            throw new TypeError("Cannot convert first argument to object");
          }
          var to = Object(target2);
          for (var i = 1; i < arguments.length; i++) {
            var nextSource = arguments[i];
            if (nextSource === void 0 || nextSource === null) {
              continue;
            }
            nextSource = Object(nextSource);
            var keysArray = Object.keys(nextSource);
            for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {
              var nextKey = keysArray[nextIndex];
              var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
              if (desc !== void 0 && desc.enumerable) {
                to[nextKey] = nextSource[nextKey];
              }
            }
          }
          return to;
        }
      });
    }
    return Popper;
  });
})(popper);
vuePopper.__esModule = true;
var _vue$2 = require$$6;
var _vue2$2 = _interopRequireDefault$6(_vue$2);
var _popup = popup;
function _interopRequireDefault$6(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var PopperJS = _vue2$2.default.prototype.$isServer ? function() {
} : popper.exports;
var stop = function stop2(e) {
  return e.stopPropagation();
};
vuePopper.default = {
  props: {
    transformOrigin: {
      type: [Boolean, String],
      default: true
    },
    placement: {
      type: String,
      default: "bottom"
    },
    boundariesPadding: {
      type: Number,
      default: 5
    },
    reference: {},
    popper: {},
    offset: {
      default: 0
    },
    value: Boolean,
    visibleArrow: Boolean,
    arrowOffset: {
      type: Number,
      default: 35
    },
    appendToBody: {
      type: Boolean,
      default: true
    },
    popperOptions: {
      type: Object,
      default: function _default114() {
        return {
          gpuAcceleration: false
        };
      }
    }
  },
  data: function data24() {
    return {
      showPopper: false,
      currentPlacement: ""
    };
  },
  watch: {
    value: {
      immediate: true,
      handler: function handler(val) {
        this.showPopper = val;
        this.$emit("input", val);
      }
    },
    showPopper: function showPopper(val) {
      if (this.disabled)
        return;
      val ? this.updatePopper() : this.destroyPopper();
      this.$emit("input", val);
    }
  },
  methods: {
    createPopper: function createPopper() {
      var _this = this;
      if (this.$isServer)
        return;
      this.currentPlacement = this.currentPlacement || this.placement;
      if (!/^(top|bottom|left|right)(-start|-end)?$/g.test(this.currentPlacement)) {
        return;
      }
      var options2 = this.popperOptions;
      var popper2 = this.popperElm = this.popperElm || this.popper || this.$refs.popper;
      var reference = this.referenceElm = this.referenceElm || this.reference || this.$refs.reference;
      if (!reference && this.$slots.reference && this.$slots.reference[0]) {
        reference = this.referenceElm = this.$slots.reference[0].elm;
      }
      if (!popper2 || !reference)
        return;
      if (this.visibleArrow)
        this.appendArrow(popper2);
      if (this.appendToBody)
        document.body.appendChild(this.popperElm);
      if (this.popperJS && this.popperJS.destroy) {
        this.popperJS.destroy();
      }
      options2.placement = this.currentPlacement;
      options2.offset = this.offset;
      options2.arrowOffset = this.arrowOffset;
      this.popperJS = new PopperJS(reference, popper2, options2);
      this.popperJS.onCreate(function(_) {
        _this.$emit("created", _this);
        _this.resetTransformOrigin();
        _this.$nextTick(_this.updatePopper);
      });
      if (typeof options2.onUpdate === "function") {
        this.popperJS.onUpdate(options2.onUpdate);
      }
      this.popperJS._popper.style.zIndex = _popup.PopupManager.nextZIndex();
      this.popperElm.addEventListener("click", stop);
    },
    updatePopper: function updatePopper() {
      var popperJS = this.popperJS;
      if (popperJS) {
        popperJS.update();
        if (popperJS._popper) {
          popperJS._popper.style.zIndex = _popup.PopupManager.nextZIndex();
        }
      } else {
        this.createPopper();
      }
    },
    doDestroy: function doDestroy(forceDestroy) {
      if (!this.popperJS || this.showPopper && !forceDestroy)
        return;
      this.popperJS.destroy();
      this.popperJS = null;
    },
    destroyPopper: function destroyPopper() {
      if (this.popperJS) {
        this.resetTransformOrigin();
      }
    },
    resetTransformOrigin: function resetTransformOrigin() {
      if (!this.transformOrigin)
        return;
      var placementMap = {
        top: "bottom",
        bottom: "top",
        left: "right",
        right: "left"
      };
      var placement = this.popperJS._popper.getAttribute("x-placement").split("-")[0];
      var origin = placementMap[placement];
      this.popperJS._popper.style.transformOrigin = typeof this.transformOrigin === "string" ? this.transformOrigin : ["top", "bottom"].indexOf(placement) > -1 ? "center " + origin : origin + " center";
    },
    appendArrow: function appendArrow(element) {
      var hash = void 0;
      if (this.appended) {
        return;
      }
      this.appended = true;
      for (var item in element.attributes) {
        if (/^_v-/.test(element.attributes[item].name)) {
          hash = element.attributes[item].name;
          break;
        }
      }
      var arrow = document.createElement("div");
      if (hash) {
        arrow.setAttribute(hash, "");
      }
      arrow.setAttribute("x-arrow", "");
      arrow.className = "popper__arrow";
      element.appendChild(arrow);
    }
  },
  beforeDestroy: function beforeDestroy12() {
    this.doDestroy(true);
    if (this.popperElm && this.popperElm.parentNode === document.body) {
      this.popperElm.removeEventListener("click", stop);
      document.body.removeChild(this.popperElm);
    }
  },
  deactivated: function deactivated2() {
    this.$options.beforeDestroy[0].call(this);
  }
};
var input = { exports: {} };
var migrating = {};
migrating.__esModule = true;
migrating.default = {
  mounted: function mounted17() {
    return;
  },
  methods: {
    getMigratingConfig: function getMigratingConfig() {
      return {
        props: {},
        events: {}
      };
    }
  }
};
var shared$2 = {};
shared$2.__esModule = true;
shared$2.isDef = isDef;
shared$2.isKorean = isKorean;
function isDef(val) {
  return val !== void 0 && val !== null;
}
function isKorean(text) {
  var reg = /([(\uAC00-\uD7AF)|(\u3130-\u318F)])+/gi;
  return reg.test(text);
}
(function(module2) {
  module2.exports = function(modules2) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
      if (installedModules[moduleId]) {
        return installedModules[moduleId].exports;
      }
      var module3 = installedModules[moduleId] = {
        i: moduleId,
        l: false,
        exports: {}
      };
      modules2[moduleId].call(module3.exports, module3, module3.exports, __webpack_require__);
      module3.l = true;
      return module3.exports;
    }
    __webpack_require__.m = modules2;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports2, name, getter) {
      if (!__webpack_require__.o(exports2, name)) {
        Object.defineProperty(exports2, name, { enumerable: true, get: getter });
      }
    };
    __webpack_require__.r = function(exports2) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(exports2, Symbol.toStringTag, { value: "Module" });
      }
      Object.defineProperty(exports2, "__esModule", { value: true });
    };
    __webpack_require__.t = function(value6, mode) {
      if (mode & 1)
        value6 = __webpack_require__(value6);
      if (mode & 8)
        return value6;
      if (mode & 4 && typeof value6 === "object" && value6 && value6.__esModule)
        return value6;
      var ns = /* @__PURE__ */ Object.create(null);
      __webpack_require__.r(ns);
      Object.defineProperty(ns, "default", { enumerable: true, value: value6 });
      if (mode & 2 && typeof value6 != "string")
        for (var key in value6)
          __webpack_require__.d(ns, key, function(key2) {
            return value6[key2];
          }.bind(null, key));
      return ns;
    };
    __webpack_require__.n = function(module3) {
      var getter = module3 && module3.__esModule ? function getDefault() {
        return module3["default"];
      } : function getModuleExports() {
        return module3;
      };
      __webpack_require__.d(getter, "a", getter);
      return getter;
    };
    __webpack_require__.o = function(object3, property2) {
      return Object.prototype.hasOwnProperty.call(object3, property2);
    };
    __webpack_require__.p = "/dist/";
    return __webpack_require__(__webpack_require__.s = 73);
  }({
    0: function(module3, __webpack_exports__, __webpack_require__) {
      __webpack_require__.d(__webpack_exports__, "a", function() {
        return normalizeComponent;
      });
      function normalizeComponent(scriptExports, render37, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
        var options2 = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
        if (render37) {
          options2.render = render37;
          options2.staticRenderFns = staticRenderFns;
          options2._compiled = true;
        }
        if (functionalTemplate) {
          options2.functional = true;
        }
        if (scopeId) {
          options2._scopeId = "data-v-" + scopeId;
        }
        var hook;
        if (moduleIdentifier) {
          hook = function(context) {
            context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
            if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
              context = __VUE_SSR_CONTEXT__;
            }
            if (injectStyles) {
              injectStyles.call(this, context);
            }
            if (context && context._registeredComponents) {
              context._registeredComponents.add(moduleIdentifier);
            }
          };
          options2._ssrRegister = hook;
        } else if (injectStyles) {
          hook = shadowMode ? function() {
            injectStyles.call(this, this.$root.$options.shadowRoot);
          } : injectStyles;
        }
        if (hook) {
          if (options2.functional) {
            options2._injectStyles = hook;
            var originalRender = options2.render;
            options2.render = function renderWithStyleInjection(h, context) {
              hook.call(context);
              return originalRender(h, context);
            };
          } else {
            var existing = options2.beforeCreate;
            options2.beforeCreate = existing ? [].concat(existing, hook) : [hook];
          }
        }
        return {
          exports: scriptExports,
          options: options2
        };
      }
    },
    11: function(module3, exports2) {
      module3.exports = migrating;
    },
    21: function(module3, exports2) {
      module3.exports = shared$2;
    },
    4: function(module3, exports2) {
      module3.exports = emitter;
    },
    73: function(module3, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      var render37 = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", {
          class: [
            _vm.type === "textarea" ? "el-textarea" : "el-input",
            _vm.inputSize ? "el-input--" + _vm.inputSize : "",
            {
              "is-disabled": _vm.inputDisabled,
              "is-exceed": _vm.inputExceed,
              "el-input-group": _vm.$slots.prepend || _vm.$slots.append,
              "el-input-group--append": _vm.$slots.append,
              "el-input-group--prepend": _vm.$slots.prepend,
              "el-input--prefix": _vm.$slots.prefix || _vm.prefixIcon,
              "el-input--suffix": _vm.$slots.suffix || _vm.suffixIcon || _vm.clearable || _vm.showPassword
            }
          ],
          on: {
            mouseenter: function($event) {
              _vm.hovering = true;
            },
            mouseleave: function($event) {
              _vm.hovering = false;
            }
          }
        }, [
          _vm.type !== "textarea" ? [
            _vm.$slots.prepend ? _c("div", { staticClass: "el-input-group__prepend" }, [_vm._t("prepend")], 2) : _vm._e(),
            _vm.type !== "textarea" ? _c("input", _vm._b({
              ref: "input",
              staticClass: "el-input__inner",
              attrs: {
                tabindex: _vm.tabindex,
                type: _vm.showPassword ? _vm.passwordVisible ? "text" : "password" : _vm.type,
                disabled: _vm.inputDisabled,
                readonly: _vm.readonly,
                autocomplete: _vm.autoComplete || _vm.autocomplete,
                "aria-label": _vm.label
              },
              on: {
                compositionstart: _vm.handleCompositionStart,
                compositionupdate: _vm.handleCompositionUpdate,
                compositionend: _vm.handleCompositionEnd,
                input: _vm.handleInput,
                focus: _vm.handleFocus,
                blur: _vm.handleBlur,
                change: _vm.handleChange
              }
            }, "input", _vm.$attrs, false)) : _vm._e(),
            _vm.$slots.prefix || _vm.prefixIcon ? _c("span", { staticClass: "el-input__prefix" }, [
              _vm._t("prefix"),
              _vm.prefixIcon ? _c("i", {
                staticClass: "el-input__icon",
                class: _vm.prefixIcon
              }) : _vm._e()
            ], 2) : _vm._e(),
            _vm.getSuffixVisible() ? _c("span", { staticClass: "el-input__suffix" }, [
              _c("span", { staticClass: "el-input__suffix-inner" }, [
                !_vm.showClear || !_vm.showPwdVisible || !_vm.isWordLimitVisible ? [
                  _vm._t("suffix"),
                  _vm.suffixIcon ? _c("i", {
                    staticClass: "el-input__icon",
                    class: _vm.suffixIcon
                  }) : _vm._e()
                ] : _vm._e(),
                _vm.showClear ? _c("i", {
                  staticClass: "el-input__icon el-icon-circle-close el-input__clear",
                  on: {
                    mousedown: function($event) {
                      $event.preventDefault();
                    },
                    click: _vm.clear
                  }
                }) : _vm._e(),
                _vm.showPwdVisible ? _c("i", {
                  staticClass: "el-input__icon el-icon-view el-input__clear",
                  on: { click: _vm.handlePasswordVisible }
                }) : _vm._e(),
                _vm.isWordLimitVisible ? _c("span", { staticClass: "el-input__count" }, [
                  _c("span", { staticClass: "el-input__count-inner" }, [
                    _vm._v("\n            " + _vm._s(_vm.textLength) + "/" + _vm._s(_vm.upperLimit) + "\n          ")
                  ])
                ]) : _vm._e()
              ], 2),
              _vm.validateState ? _c("i", {
                staticClass: "el-input__icon",
                class: ["el-input__validateIcon", _vm.validateIcon]
              }) : _vm._e()
            ]) : _vm._e(),
            _vm.$slots.append ? _c("div", { staticClass: "el-input-group__append" }, [_vm._t("append")], 2) : _vm._e()
          ] : _c("textarea", _vm._b({
            ref: "textarea",
            staticClass: "el-textarea__inner",
            style: _vm.textareaStyle,
            attrs: {
              tabindex: _vm.tabindex,
              disabled: _vm.inputDisabled,
              readonly: _vm.readonly,
              autocomplete: _vm.autoComplete || _vm.autocomplete,
              "aria-label": _vm.label
            },
            on: {
              compositionstart: _vm.handleCompositionStart,
              compositionupdate: _vm.handleCompositionUpdate,
              compositionend: _vm.handleCompositionEnd,
              input: _vm.handleInput,
              focus: _vm.handleFocus,
              blur: _vm.handleBlur,
              change: _vm.handleChange
            }
          }, "textarea", _vm.$attrs, false)),
          _vm.isWordLimitVisible && _vm.type === "textarea" ? _c("span", { staticClass: "el-input__count" }, [
            _vm._v(_vm._s(_vm.textLength) + "/" + _vm._s(_vm.upperLimit))
          ]) : _vm._e()
        ], 2);
      };
      var staticRenderFns = [];
      render37._withStripped = true;
      var emitter_ = __webpack_require__(4);
      var emitter_default = /* @__PURE__ */ __webpack_require__.n(emitter_);
      var migrating_ = __webpack_require__(11);
      var migrating_default = /* @__PURE__ */ __webpack_require__.n(migrating_);
      var hiddenTextarea = void 0;
      var HIDDEN_STYLE = "\n  height:0 !important;\n  visibility:hidden !important;\n  overflow:hidden !important;\n  position:absolute !important;\n  z-index:-1000 !important;\n  top:0 !important;\n  right:0 !important\n";
      var CONTEXT_STYLE = ["letter-spacing", "line-height", "padding-top", "padding-bottom", "font-family", "font-weight", "font-size", "text-rendering", "text-transform", "width", "text-indent", "padding-left", "padding-right", "border-width", "box-sizing"];
      function calculateNodeStyling(targetElement) {
        var style2 = window.getComputedStyle(targetElement);
        var boxSizing = style2.getPropertyValue("box-sizing");
        var paddingSize = parseFloat(style2.getPropertyValue("padding-bottom")) + parseFloat(style2.getPropertyValue("padding-top"));
        var borderSize = parseFloat(style2.getPropertyValue("border-bottom-width")) + parseFloat(style2.getPropertyValue("border-top-width"));
        var contextStyle = CONTEXT_STYLE.map(function(name) {
          return name + ":" + style2.getPropertyValue(name);
        }).join(";");
        return { contextStyle, paddingSize, borderSize, boxSizing };
      }
      function calcTextareaHeight(targetElement) {
        var minRows = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
        var maxRows = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
        if (!hiddenTextarea) {
          hiddenTextarea = document.createElement("textarea");
          document.body.appendChild(hiddenTextarea);
        }
        var _calculateNodeStyling = calculateNodeStyling(targetElement), paddingSize = _calculateNodeStyling.paddingSize, borderSize = _calculateNodeStyling.borderSize, boxSizing = _calculateNodeStyling.boxSizing, contextStyle = _calculateNodeStyling.contextStyle;
        hiddenTextarea.setAttribute("style", contextStyle + ";" + HIDDEN_STYLE);
        hiddenTextarea.value = targetElement.value || targetElement.placeholder || "";
        var height3 = hiddenTextarea.scrollHeight;
        var result = {};
        if (boxSizing === "border-box") {
          height3 = height3 + borderSize;
        } else if (boxSizing === "content-box") {
          height3 = height3 - paddingSize;
        }
        hiddenTextarea.value = "";
        var singleRowHeight = hiddenTextarea.scrollHeight - paddingSize;
        if (minRows !== null) {
          var minHeight = singleRowHeight * minRows;
          if (boxSizing === "border-box") {
            minHeight = minHeight + paddingSize + borderSize;
          }
          height3 = Math.max(minHeight, height3);
          result.minHeight = minHeight + "px";
        }
        if (maxRows !== null) {
          var maxHeight2 = singleRowHeight * maxRows;
          if (boxSizing === "border-box") {
            maxHeight2 = maxHeight2 + paddingSize + borderSize;
          }
          height3 = Math.min(maxHeight2, height3);
        }
        result.height = height3 + "px";
        hiddenTextarea.parentNode && hiddenTextarea.parentNode.removeChild(hiddenTextarea);
        hiddenTextarea = null;
        return result;
      }
      var merge_ = __webpack_require__(9);
      var merge_default = /* @__PURE__ */ __webpack_require__.n(merge_);
      var shared_ = __webpack_require__(21);
      var inputvue_type_script_lang_js_ = {
        name: "ElInput",
        componentName: "ElInput",
        mixins: [emitter_default.a, migrating_default.a],
        inheritAttrs: false,
        inject: {
          elForm: {
            default: ""
          },
          elFormItem: {
            default: ""
          }
        },
        data: function data25() {
          return {
            textareaCalcStyle: {},
            hovering: false,
            focused: false,
            isComposing: false,
            passwordVisible: false
          };
        },
        props: {
          value: [String, Number],
          size: String,
          resize: String,
          form: String,
          disabled: Boolean,
          readonly: Boolean,
          type: {
            type: String,
            default: "text"
          },
          autosize: {
            type: [Boolean, Object],
            default: false
          },
          autocomplete: {
            type: String,
            default: "off"
          },
          autoComplete: {
            type: String,
            validator: function validator2(val) {
              return true;
            }
          },
          validateEvent: {
            type: Boolean,
            default: true
          },
          suffixIcon: String,
          prefixIcon: String,
          label: String,
          clearable: {
            type: Boolean,
            default: false
          },
          showPassword: {
            type: Boolean,
            default: false
          },
          showWordLimit: {
            type: Boolean,
            default: false
          },
          tabindex: String
        },
        computed: {
          _elFormItemSize: function _elFormItemSize() {
            return (this.elFormItem || {}).elFormItemSize;
          },
          validateState: function validateState() {
            return this.elFormItem ? this.elFormItem.validateState : "";
          },
          needStatusIcon: function needStatusIcon() {
            return this.elForm ? this.elForm.statusIcon : false;
          },
          validateIcon: function validateIcon() {
            return {
              validating: "el-icon-loading",
              success: "el-icon-circle-check",
              error: "el-icon-circle-close"
            }[this.validateState];
          },
          textareaStyle: function textareaStyle() {
            return merge_default()({}, this.textareaCalcStyle, { resize: this.resize });
          },
          inputSize: function inputSize() {
            return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;
          },
          inputDisabled: function inputDisabled() {
            return this.disabled || (this.elForm || {}).disabled;
          },
          nativeInputValue: function nativeInputValue() {
            return this.value === null || this.value === void 0 ? "" : String(this.value);
          },
          showClear: function showClear() {
            return this.clearable && !this.inputDisabled && !this.readonly && this.nativeInputValue && (this.focused || this.hovering);
          },
          showPwdVisible: function showPwdVisible() {
            return this.showPassword && !this.inputDisabled && !this.readonly && (!!this.nativeInputValue || this.focused);
          },
          isWordLimitVisible: function isWordLimitVisible() {
            return this.showWordLimit && this.$attrs.maxlength && (this.type === "text" || this.type === "textarea") && !this.inputDisabled && !this.readonly && !this.showPassword;
          },
          upperLimit: function upperLimit() {
            return this.$attrs.maxlength;
          },
          textLength: function textLength() {
            if (typeof this.value === "number") {
              return String(this.value).length;
            }
            return (this.value || "").length;
          },
          inputExceed: function inputExceed() {
            return this.isWordLimitVisible && this.textLength > this.upperLimit;
          }
        },
        watch: {
          value: function value6(val) {
            this.$nextTick(this.resizeTextarea);
            if (this.validateEvent) {
              this.dispatch("ElFormItem", "el.form.change", [val]);
            }
          },
          nativeInputValue: function nativeInputValue() {
            this.setNativeInputValue();
          },
          type: function type3() {
            var _this = this;
            this.$nextTick(function() {
              _this.setNativeInputValue();
              _this.resizeTextarea();
              _this.updateIconOffset();
            });
          }
        },
        methods: {
          focus: function focus7() {
            this.getInput().focus();
          },
          blur: function blur6() {
            this.getInput().blur();
          },
          getMigratingConfig: function getMigratingConfig2() {
            return {
              props: {
                "icon": "icon is removed, use suffix-icon / prefix-icon instead.",
                "on-icon-click": "on-icon-click is removed."
              },
              events: {
                "click": "click is removed."
              }
            };
          },
          handleBlur: function handleBlur(event2) {
            this.focused = false;
            this.$emit("blur", event2);
            if (this.validateEvent) {
              this.dispatch("ElFormItem", "el.form.blur", [this.value]);
            }
          },
          select: function select2() {
            this.getInput().select();
          },
          resizeTextarea: function resizeTextarea() {
            if (this.$isServer)
              return;
            var autosize = this.autosize, type3 = this.type;
            if (type3 !== "textarea")
              return;
            if (!autosize) {
              this.textareaCalcStyle = {
                minHeight: calcTextareaHeight(this.$refs.textarea).minHeight
              };
              return;
            }
            var minRows = autosize.minRows;
            var maxRows = autosize.maxRows;
            this.textareaCalcStyle = calcTextareaHeight(this.$refs.textarea, minRows, maxRows);
          },
          setNativeInputValue: function setNativeInputValue() {
            var input3 = this.getInput();
            if (!input3)
              return;
            if (input3.value === this.nativeInputValue)
              return;
            input3.value = this.nativeInputValue;
          },
          handleFocus: function handleFocus3(event2) {
            this.focused = true;
            this.$emit("focus", event2);
          },
          handleCompositionStart: function handleCompositionStart() {
            this.isComposing = true;
          },
          handleCompositionUpdate: function handleCompositionUpdate(event2) {
            var text = event2.target.value;
            var lastCharacter = text[text.length - 1] || "";
            this.isComposing = !Object(shared_["isKorean"])(lastCharacter);
          },
          handleCompositionEnd: function handleCompositionEnd(event2) {
            if (this.isComposing) {
              this.isComposing = false;
              this.handleInput(event2);
            }
          },
          handleInput: function handleInput(event2) {
            if (this.isComposing)
              return;
            if (event2.target.value === this.nativeInputValue)
              return;
            this.$emit("input", event2.target.value);
            this.$nextTick(this.setNativeInputValue);
          },
          handleChange: function handleChange(event2) {
            this.$emit("change", event2.target.value);
          },
          calcIconOffset: function calcIconOffset(place2) {
            var elList = [].slice.call(this.$el.querySelectorAll(".el-input__" + place2) || []);
            if (!elList.length)
              return;
            var el = null;
            for (var i = 0; i < elList.length; i++) {
              if (elList[i].parentNode === this.$el) {
                el = elList[i];
                break;
              }
            }
            if (!el)
              return;
            var pendantMap = {
              suffix: "append",
              prefix: "prepend"
            };
            var pendant = pendantMap[place2];
            if (this.$slots[pendant]) {
              el.style.transform = "translateX(" + (place2 === "suffix" ? "-" : "") + this.$el.querySelector(".el-input-group__" + pendant).offsetWidth + "px)";
            } else {
              el.removeAttribute("style");
            }
          },
          updateIconOffset: function updateIconOffset() {
            this.calcIconOffset("prefix");
            this.calcIconOffset("suffix");
          },
          clear: function clear2() {
            this.$emit("input", "");
            this.$emit("change", "");
            this.$emit("clear");
          },
          handlePasswordVisible: function handlePasswordVisible() {
            var _this2 = this;
            this.passwordVisible = !this.passwordVisible;
            this.$nextTick(function() {
              _this2.focus();
            });
          },
          getInput: function getInput() {
            return this.$refs.input || this.$refs.textarea;
          },
          getSuffixVisible: function getSuffixVisible() {
            return this.$slots.suffix || this.suffixIcon || this.showClear || this.showPassword || this.isWordLimitVisible || this.validateState && this.needStatusIcon;
          }
        },
        created: function created20() {
          this.$on("inputSelect", this.select);
        },
        mounted: function mounted18() {
          this.setNativeInputValue();
          this.resizeTextarea();
          this.updateIconOffset();
        },
        updated: function updated3() {
          this.$nextTick(this.updateIconOffset);
        }
      };
      var src_inputvue_type_script_lang_js_ = inputvue_type_script_lang_js_;
      var componentNormalizer = __webpack_require__(0);
      var component = Object(componentNormalizer["a"])(src_inputvue_type_script_lang_js_, render37, staticRenderFns, false, null, null, null);
      component.options.__file = "packages/input/src/input.vue";
      var input2 = component.exports;
      input2.install = function(Vue2) {
        Vue2.component(input2.name, input2);
      };
      __webpack_exports__["default"] = input2;
    },
    9: function(module3, exports2) {
      module3.exports = merge$2;
    }
  });
})(input);
var clickoutside = {};
clickoutside.__esModule = true;
var _vue$1 = require$$6;
var _vue2$1 = _interopRequireDefault$5(_vue$1);
var _dom$1 = dom;
function _interopRequireDefault$5(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var nodeList = [];
var ctx$1 = "@@clickoutsideContext";
var startClick = void 0;
var seed = 0;
!_vue2$1.default.prototype.$isServer && (0, _dom$1.on)(document, "mousedown", function(e) {
  return startClick = e;
});
!_vue2$1.default.prototype.$isServer && (0, _dom$1.on)(document, "mouseup", function(e) {
  nodeList.forEach(function(node) {
    return node[ctx$1].documentHandler(e, startClick);
  });
});
function createDocumentHandler(el, binding, vnode) {
  return function() {
    var mouseup = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var mousedown = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    if (!vnode || !vnode.context || !mouseup.target || !mousedown.target || el.contains(mouseup.target) || el.contains(mousedown.target) || el === mouseup.target || vnode.context.popperElm && (vnode.context.popperElm.contains(mouseup.target) || vnode.context.popperElm.contains(mousedown.target)))
      return;
    if (binding.expression && el[ctx$1].methodName && vnode.context[el[ctx$1].methodName]) {
      vnode.context[el[ctx$1].methodName]();
    } else {
      el[ctx$1].bindingFn && el[ctx$1].bindingFn();
    }
  };
}
clickoutside.default = {
  bind: function bind3(el, binding, vnode) {
    nodeList.push(el);
    var id2 = seed++;
    el[ctx$1] = {
      id: id2,
      documentHandler: createDocumentHandler(el, binding, vnode),
      methodName: binding.expression,
      bindingFn: binding.value
    };
  },
  update: function update4(el, binding, vnode) {
    el[ctx$1].documentHandler = createDocumentHandler(el, binding, vnode);
    el[ctx$1].methodName = binding.expression;
    el[ctx$1].bindingFn = binding.value;
  },
  unbind: function unbind2(el) {
    var len = nodeList.length;
    for (var i = 0; i < len; i++) {
      if (nodeList[i][ctx$1].id === el[ctx$1].id) {
        nodeList.splice(i, 1);
        break;
      }
    }
    delete el[ctx$1];
  }
};
var button = { exports: {} };
(function(module2) {
  module2.exports = function(modules2) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
      if (installedModules[moduleId]) {
        return installedModules[moduleId].exports;
      }
      var module3 = installedModules[moduleId] = {
        i: moduleId,
        l: false,
        exports: {}
      };
      modules2[moduleId].call(module3.exports, module3, module3.exports, __webpack_require__);
      module3.l = true;
      return module3.exports;
    }
    __webpack_require__.m = modules2;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports2, name, getter) {
      if (!__webpack_require__.o(exports2, name)) {
        Object.defineProperty(exports2, name, { enumerable: true, get: getter });
      }
    };
    __webpack_require__.r = function(exports2) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(exports2, Symbol.toStringTag, { value: "Module" });
      }
      Object.defineProperty(exports2, "__esModule", { value: true });
    };
    __webpack_require__.t = function(value6, mode) {
      if (mode & 1)
        value6 = __webpack_require__(value6);
      if (mode & 8)
        return value6;
      if (mode & 4 && typeof value6 === "object" && value6 && value6.__esModule)
        return value6;
      var ns = /* @__PURE__ */ Object.create(null);
      __webpack_require__.r(ns);
      Object.defineProperty(ns, "default", { enumerable: true, value: value6 });
      if (mode & 2 && typeof value6 != "string")
        for (var key in value6)
          __webpack_require__.d(ns, key, function(key2) {
            return value6[key2];
          }.bind(null, key));
      return ns;
    };
    __webpack_require__.n = function(module3) {
      var getter = module3 && module3.__esModule ? function getDefault() {
        return module3["default"];
      } : function getModuleExports() {
        return module3;
      };
      __webpack_require__.d(getter, "a", getter);
      return getter;
    };
    __webpack_require__.o = function(object3, property2) {
      return Object.prototype.hasOwnProperty.call(object3, property2);
    };
    __webpack_require__.p = "/dist/";
    return __webpack_require__(__webpack_require__.s = 86);
  }({
    0: function(module3, __webpack_exports__, __webpack_require__) {
      __webpack_require__.d(__webpack_exports__, "a", function() {
        return normalizeComponent;
      });
      function normalizeComponent(scriptExports, render37, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
        var options2 = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
        if (render37) {
          options2.render = render37;
          options2.staticRenderFns = staticRenderFns;
          options2._compiled = true;
        }
        if (functionalTemplate) {
          options2.functional = true;
        }
        if (scopeId) {
          options2._scopeId = "data-v-" + scopeId;
        }
        var hook;
        if (moduleIdentifier) {
          hook = function(context) {
            context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
            if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
              context = __VUE_SSR_CONTEXT__;
            }
            if (injectStyles) {
              injectStyles.call(this, context);
            }
            if (context && context._registeredComponents) {
              context._registeredComponents.add(moduleIdentifier);
            }
          };
          options2._ssrRegister = hook;
        } else if (injectStyles) {
          hook = shadowMode ? function() {
            injectStyles.call(this, this.$root.$options.shadowRoot);
          } : injectStyles;
        }
        if (hook) {
          if (options2.functional) {
            options2._injectStyles = hook;
            var originalRender = options2.render;
            options2.render = function renderWithStyleInjection(h, context) {
              hook.call(context);
              return originalRender(h, context);
            };
          } else {
            var existing = options2.beforeCreate;
            options2.beforeCreate = existing ? [].concat(existing, hook) : [hook];
          }
        }
        return {
          exports: scriptExports,
          options: options2
        };
      }
    },
    86: function(module3, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      var render37 = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("button", {
          staticClass: "el-button",
          class: [
            _vm.type ? "el-button--" + _vm.type : "",
            _vm.buttonSize ? "el-button--" + _vm.buttonSize : "",
            {
              "is-disabled": _vm.buttonDisabled,
              "is-loading": _vm.loading,
              "is-plain": _vm.plain,
              "is-round": _vm.round,
              "is-circle": _vm.circle
            }
          ],
          attrs: {
            disabled: _vm.buttonDisabled || _vm.loading,
            autofocus: _vm.autofocus,
            type: _vm.nativeType
          },
          on: { click: _vm.handleClick }
        }, [
          _vm.loading ? _c("i", { staticClass: "el-icon-loading" }) : _vm._e(),
          _vm.icon && !_vm.loading ? _c("i", { class: _vm.icon }) : _vm._e(),
          _vm.$slots.default ? _c("span", [_vm._t("default")], 2) : _vm._e()
        ]);
      };
      var staticRenderFns = [];
      render37._withStripped = true;
      var buttonvue_type_script_lang_js_ = {
        name: "ElButton",
        inject: {
          elForm: {
            default: ""
          },
          elFormItem: {
            default: ""
          }
        },
        props: {
          type: {
            type: String,
            default: "default"
          },
          size: String,
          icon: {
            type: String,
            default: ""
          },
          nativeType: {
            type: String,
            default: "button"
          },
          loading: Boolean,
          disabled: Boolean,
          plain: Boolean,
          autofocus: Boolean,
          round: Boolean,
          circle: Boolean
        },
        computed: {
          _elFormItemSize: function _elFormItemSize() {
            return (this.elFormItem || {}).elFormItemSize;
          },
          buttonSize: function buttonSize() {
            return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;
          },
          buttonDisabled: function buttonDisabled() {
            return this.disabled || (this.elForm || {}).disabled;
          }
        },
        methods: {
          handleClick: function handleClick(evt) {
            this.$emit("click", evt);
          }
        }
      };
      var src_buttonvue_type_script_lang_js_ = buttonvue_type_script_lang_js_;
      var componentNormalizer = __webpack_require__(0);
      var component = Object(componentNormalizer["a"])(src_buttonvue_type_script_lang_js_, render37, staticRenderFns, false, null, null, null);
      component.options.__file = "packages/button/src/button.vue";
      var src_button = component.exports;
      src_button.install = function(Vue2) {
        Vue2.component(src_button.name, src_button);
      };
      __webpack_exports__["default"] = src_button;
    }
  });
})(button);
var resizeEvent = {};
var MapShim = function() {
  if (typeof Map !== "undefined") {
    return Map;
  }
  function getIndex(arr, key) {
    var result = -1;
    arr.some(function(entry, index2) {
      if (entry[0] === key) {
        result = index2;
        return true;
      }
      return false;
    });
    return result;
  }
  return function() {
    function class_1() {
      this.__entries__ = [];
    }
    Object.defineProperty(class_1.prototype, "size", {
      get: function() {
        return this.__entries__.length;
      },
      enumerable: true,
      configurable: true
    });
    class_1.prototype.get = function(key) {
      var index2 = getIndex(this.__entries__, key);
      var entry = this.__entries__[index2];
      return entry && entry[1];
    };
    class_1.prototype.set = function(key, value6) {
      var index2 = getIndex(this.__entries__, key);
      if (~index2) {
        this.__entries__[index2][1] = value6;
      } else {
        this.__entries__.push([key, value6]);
      }
    };
    class_1.prototype.delete = function(key) {
      var entries2 = this.__entries__;
      var index2 = getIndex(entries2, key);
      if (~index2) {
        entries2.splice(index2, 1);
      }
    };
    class_1.prototype.has = function(key) {
      return !!~getIndex(this.__entries__, key);
    };
    class_1.prototype.clear = function() {
      this.__entries__.splice(0);
    };
    class_1.prototype.forEach = function(callback, ctx2) {
      if (ctx2 === void 0) {
        ctx2 = null;
      }
      for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {
        var entry = _a[_i];
        callback.call(ctx2, entry[1], entry[0]);
      }
    };
    return class_1;
  }();
}();
var isBrowser = typeof window !== "undefined" && typeof document !== "undefined" && window.document === document;
var global$1$1 = function() {
  if (typeof global !== "undefined" && global.Math === Math) {
    return global;
  }
  if (typeof self !== "undefined" && self.Math === Math) {
    return self;
  }
  if (typeof window !== "undefined" && window.Math === Math) {
    return window;
  }
  return Function("return this")();
}();
var requestAnimationFrame$1 = function() {
  if (typeof requestAnimationFrame === "function") {
    return requestAnimationFrame.bind(global$1$1);
  }
  return function(callback) {
    return setTimeout(function() {
      return callback(Date.now());
    }, 1e3 / 60);
  };
}();
var trailingTimeout = 2;
function throttle$3(callback, delay2) {
  var leadingCall = false, trailingCall = false, lastCallTime = 0;
  function resolvePending() {
    if (leadingCall) {
      leadingCall = false;
      callback();
    }
    if (trailingCall) {
      proxy2();
    }
  }
  function timeoutCallback() {
    requestAnimationFrame$1(resolvePending);
  }
  function proxy2() {
    var timeStamp = Date.now();
    if (leadingCall) {
      if (timeStamp - lastCallTime < trailingTimeout) {
        return;
      }
      trailingCall = true;
    } else {
      leadingCall = true;
      trailingCall = false;
      setTimeout(timeoutCallback, delay2);
    }
    lastCallTime = timeStamp;
  }
  return proxy2;
}
var REFRESH_DELAY = 20;
var transitionKeys = ["top", "right", "bottom", "left", "width", "height", "size", "weight"];
var mutationObserverSupported = typeof MutationObserver !== "undefined";
var ResizeObserverController = function() {
  function ResizeObserverController2() {
    this.connected_ = false;
    this.mutationEventsAdded_ = false;
    this.mutationsObserver_ = null;
    this.observers_ = [];
    this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);
    this.refresh = throttle$3(this.refresh.bind(this), REFRESH_DELAY);
  }
  ResizeObserverController2.prototype.addObserver = function(observer) {
    if (!~this.observers_.indexOf(observer)) {
      this.observers_.push(observer);
    }
    if (!this.connected_) {
      this.connect_();
    }
  };
  ResizeObserverController2.prototype.removeObserver = function(observer) {
    var observers2 = this.observers_;
    var index2 = observers2.indexOf(observer);
    if (~index2) {
      observers2.splice(index2, 1);
    }
    if (!observers2.length && this.connected_) {
      this.disconnect_();
    }
  };
  ResizeObserverController2.prototype.refresh = function() {
    var changesDetected = this.updateObservers_();
    if (changesDetected) {
      this.refresh();
    }
  };
  ResizeObserverController2.prototype.updateObservers_ = function() {
    var activeObservers = this.observers_.filter(function(observer) {
      return observer.gatherActive(), observer.hasActive();
    });
    activeObservers.forEach(function(observer) {
      return observer.broadcastActive();
    });
    return activeObservers.length > 0;
  };
  ResizeObserverController2.prototype.connect_ = function() {
    if (!isBrowser || this.connected_) {
      return;
    }
    document.addEventListener("transitionend", this.onTransitionEnd_);
    window.addEventListener("resize", this.refresh);
    if (mutationObserverSupported) {
      this.mutationsObserver_ = new MutationObserver(this.refresh);
      this.mutationsObserver_.observe(document, {
        attributes: true,
        childList: true,
        characterData: true,
        subtree: true
      });
    } else {
      document.addEventListener("DOMSubtreeModified", this.refresh);
      this.mutationEventsAdded_ = true;
    }
    this.connected_ = true;
  };
  ResizeObserverController2.prototype.disconnect_ = function() {
    if (!isBrowser || !this.connected_) {
      return;
    }
    document.removeEventListener("transitionend", this.onTransitionEnd_);
    window.removeEventListener("resize", this.refresh);
    if (this.mutationsObserver_) {
      this.mutationsObserver_.disconnect();
    }
    if (this.mutationEventsAdded_) {
      document.removeEventListener("DOMSubtreeModified", this.refresh);
    }
    this.mutationsObserver_ = null;
    this.mutationEventsAdded_ = false;
    this.connected_ = false;
  };
  ResizeObserverController2.prototype.onTransitionEnd_ = function(_a) {
    var _b = _a.propertyName, propertyName = _b === void 0 ? "" : _b;
    var isReflowProperty = transitionKeys.some(function(key) {
      return !!~propertyName.indexOf(key);
    });
    if (isReflowProperty) {
      this.refresh();
    }
  };
  ResizeObserverController2.getInstance = function() {
    if (!this.instance_) {
      this.instance_ = new ResizeObserverController2();
    }
    return this.instance_;
  };
  ResizeObserverController2.instance_ = null;
  return ResizeObserverController2;
}();
var defineConfigurable = function(target2, props2) {
  for (var _i = 0, _a = Object.keys(props2); _i < _a.length; _i++) {
    var key = _a[_i];
    Object.defineProperty(target2, key, {
      value: props2[key],
      enumerable: false,
      writable: false,
      configurable: true
    });
  }
  return target2;
};
var getWindowOf = function(target2) {
  var ownerGlobal = target2 && target2.ownerDocument && target2.ownerDocument.defaultView;
  return ownerGlobal || global$1$1;
};
var emptyRect = createRectInit(0, 0, 0, 0);
function toFloat(value6) {
  return parseFloat(value6) || 0;
}
function getBordersSize(styles3) {
  var positions = [];
  for (var _i = 1; _i < arguments.length; _i++) {
    positions[_i - 1] = arguments[_i];
  }
  return positions.reduce(function(size2, position) {
    var value6 = styles3["border-" + position + "-width"];
    return size2 + toFloat(value6);
  }, 0);
}
function getPaddings(styles3) {
  var positions = ["top", "right", "bottom", "left"];
  var paddings = {};
  for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {
    var position = positions_1[_i];
    var value6 = styles3["padding-" + position];
    paddings[position] = toFloat(value6);
  }
  return paddings;
}
function getSVGContentRect(target2) {
  var bbox = target2.getBBox();
  return createRectInit(0, 0, bbox.width, bbox.height);
}
function getHTMLElementContentRect(target2) {
  var clientWidth = target2.clientWidth, clientHeight = target2.clientHeight;
  if (!clientWidth && !clientHeight) {
    return emptyRect;
  }
  var styles3 = getWindowOf(target2).getComputedStyle(target2);
  var paddings = getPaddings(styles3);
  var horizPad = paddings.left + paddings.right;
  var vertPad = paddings.top + paddings.bottom;
  var width2 = toFloat(styles3.width), height3 = toFloat(styles3.height);
  if (styles3.boxSizing === "border-box") {
    if (Math.round(width2 + horizPad) !== clientWidth) {
      width2 -= getBordersSize(styles3, "left", "right") + horizPad;
    }
    if (Math.round(height3 + vertPad) !== clientHeight) {
      height3 -= getBordersSize(styles3, "top", "bottom") + vertPad;
    }
  }
  if (!isDocumentElement(target2)) {
    var vertScrollbar = Math.round(width2 + horizPad) - clientWidth;
    var horizScrollbar = Math.round(height3 + vertPad) - clientHeight;
    if (Math.abs(vertScrollbar) !== 1) {
      width2 -= vertScrollbar;
    }
    if (Math.abs(horizScrollbar) !== 1) {
      height3 -= horizScrollbar;
    }
  }
  return createRectInit(paddings.left, paddings.top, width2, height3);
}
var isSVGGraphicsElement = function() {
  if (typeof SVGGraphicsElement !== "undefined") {
    return function(target2) {
      return target2 instanceof getWindowOf(target2).SVGGraphicsElement;
    };
  }
  return function(target2) {
    return target2 instanceof getWindowOf(target2).SVGElement && typeof target2.getBBox === "function";
  };
}();
function isDocumentElement(target2) {
  return target2 === getWindowOf(target2).document.documentElement;
}
function getContentRect(target2) {
  if (!isBrowser) {
    return emptyRect;
  }
  if (isSVGGraphicsElement(target2)) {
    return getSVGContentRect(target2);
  }
  return getHTMLElementContentRect(target2);
}
function createReadOnlyRect(_a) {
  var x = _a.x, y = _a.y, width2 = _a.width, height3 = _a.height;
  var Constr = typeof DOMRectReadOnly !== "undefined" ? DOMRectReadOnly : Object;
  var rect = Object.create(Constr.prototype);
  defineConfigurable(rect, {
    x,
    y,
    width: width2,
    height: height3,
    top: y,
    right: x + width2,
    bottom: height3 + y,
    left: x
  });
  return rect;
}
function createRectInit(x, y, width2, height3) {
  return { x, y, width: width2, height: height3 };
}
var ResizeObservation = function() {
  function ResizeObservation2(target2) {
    this.broadcastWidth = 0;
    this.broadcastHeight = 0;
    this.contentRect_ = createRectInit(0, 0, 0, 0);
    this.target = target2;
  }
  ResizeObservation2.prototype.isActive = function() {
    var rect = getContentRect(this.target);
    this.contentRect_ = rect;
    return rect.width !== this.broadcastWidth || rect.height !== this.broadcastHeight;
  };
  ResizeObservation2.prototype.broadcastRect = function() {
    var rect = this.contentRect_;
    this.broadcastWidth = rect.width;
    this.broadcastHeight = rect.height;
    return rect;
  };
  return ResizeObservation2;
}();
var ResizeObserverEntry = function() {
  function ResizeObserverEntry2(target2, rectInit) {
    var contentRect = createReadOnlyRect(rectInit);
    defineConfigurable(this, { target: target2, contentRect });
  }
  return ResizeObserverEntry2;
}();
var ResizeObserverSPI = function() {
  function ResizeObserverSPI2(callback, controller, callbackCtx) {
    this.activeObservations_ = [];
    this.observations_ = new MapShim();
    if (typeof callback !== "function") {
      throw new TypeError("The callback provided as parameter 1 is not a function.");
    }
    this.callback_ = callback;
    this.controller_ = controller;
    this.callbackCtx_ = callbackCtx;
  }
  ResizeObserverSPI2.prototype.observe = function(target2) {
    if (!arguments.length) {
      throw new TypeError("1 argument required, but only 0 present.");
    }
    if (typeof Element === "undefined" || !(Element instanceof Object)) {
      return;
    }
    if (!(target2 instanceof getWindowOf(target2).Element)) {
      throw new TypeError('parameter 1 is not of type "Element".');
    }
    var observations = this.observations_;
    if (observations.has(target2)) {
      return;
    }
    observations.set(target2, new ResizeObservation(target2));
    this.controller_.addObserver(this);
    this.controller_.refresh();
  };
  ResizeObserverSPI2.prototype.unobserve = function(target2) {
    if (!arguments.length) {
      throw new TypeError("1 argument required, but only 0 present.");
    }
    if (typeof Element === "undefined" || !(Element instanceof Object)) {
      return;
    }
    if (!(target2 instanceof getWindowOf(target2).Element)) {
      throw new TypeError('parameter 1 is not of type "Element".');
    }
    var observations = this.observations_;
    if (!observations.has(target2)) {
      return;
    }
    observations.delete(target2);
    if (!observations.size) {
      this.controller_.removeObserver(this);
    }
  };
  ResizeObserverSPI2.prototype.disconnect = function() {
    this.clearActive();
    this.observations_.clear();
    this.controller_.removeObserver(this);
  };
  ResizeObserverSPI2.prototype.gatherActive = function() {
    var _this = this;
    this.clearActive();
    this.observations_.forEach(function(observation) {
      if (observation.isActive()) {
        _this.activeObservations_.push(observation);
      }
    });
  };
  ResizeObserverSPI2.prototype.broadcastActive = function() {
    if (!this.hasActive()) {
      return;
    }
    var ctx2 = this.callbackCtx_;
    var entries2 = this.activeObservations_.map(function(observation) {
      return new ResizeObserverEntry(observation.target, observation.broadcastRect());
    });
    this.callback_.call(ctx2, entries2, ctx2);
    this.clearActive();
  };
  ResizeObserverSPI2.prototype.clearActive = function() {
    this.activeObservations_.splice(0);
  };
  ResizeObserverSPI2.prototype.hasActive = function() {
    return this.activeObservations_.length > 0;
  };
  return ResizeObserverSPI2;
}();
var observers = typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : new MapShim();
var ResizeObserver = function() {
  function ResizeObserver2(callback) {
    if (!(this instanceof ResizeObserver2)) {
      throw new TypeError("Cannot call a class as a function.");
    }
    if (!arguments.length) {
      throw new TypeError("1 argument required, but only 0 present.");
    }
    var controller = ResizeObserverController.getInstance();
    var observer = new ResizeObserverSPI(callback, controller, this);
    observers.set(this, observer);
  }
  return ResizeObserver2;
}();
[
  "observe",
  "unobserve",
  "disconnect"
].forEach(function(method3) {
  ResizeObserver.prototype[method3] = function() {
    var _a;
    return (_a = observers.get(this))[method3].apply(_a, arguments);
  };
});
var index = function() {
  if (typeof global$1$1.ResizeObserver !== "undefined") {
    return global$1$1.ResizeObserver;
  }
  return ResizeObserver;
}();
var ResizeObserver_es = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": index
});
var require$$0 = /* @__PURE__ */ getAugmentedNamespace(ResizeObserver_es);
resizeEvent.__esModule = true;
resizeEvent.removeResizeListener = resizeEvent.addResizeListener = void 0;
var _resizeObserverPolyfill = require$$0;
var _resizeObserverPolyfill2 = _interopRequireDefault$4(_resizeObserverPolyfill);
function _interopRequireDefault$4(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var isServer = typeof window === "undefined";
var resizeHandler = function resizeHandler2(entries2) {
  for (var _iterator3 = entries2, _isArray2 = Array.isArray(_iterator3), _i = 0, _iterator3 = _isArray2 ? _iterator3 : _iterator3[Symbol.iterator](); ; ) {
    var _ref;
    if (_isArray2) {
      if (_i >= _iterator3.length)
        break;
      _ref = _iterator3[_i++];
    } else {
      _i = _iterator3.next();
      if (_i.done)
        break;
      _ref = _i.value;
    }
    var entry = _ref;
    var listeners = entry.target.__resizeListeners__ || [];
    if (listeners.length) {
      listeners.forEach(function(fn) {
        fn();
      });
    }
  }
};
resizeEvent.addResizeListener = function addResizeListener(element, fn) {
  if (isServer)
    return;
  if (!element.__resizeListeners__) {
    element.__resizeListeners__ = [];
    element.__ro__ = new _resizeObserverPolyfill2.default(resizeHandler);
    element.__ro__.observe(element);
  }
  element.__resizeListeners__.push(fn);
};
resizeEvent.removeResizeListener = function removeResizeListener(element, fn) {
  if (!element || !element.__resizeListeners__)
    return;
  element.__resizeListeners__.splice(element.__resizeListeners__.indexOf(fn), 1);
  if (!element.__resizeListeners__.length) {
    element.__ro__.disconnect();
  }
};
var throttle$2 = function(delay2, noTrailing, callback, debounceMode) {
  var timeoutID;
  var lastExec = 0;
  if (typeof noTrailing !== "boolean") {
    debounceMode = callback;
    callback = noTrailing;
    noTrailing = void 0;
  }
  function wrapper() {
    var self2 = this;
    var elapsed = Number(new Date()) - lastExec;
    var args = arguments;
    function exec() {
      lastExec = Number(new Date());
      callback.apply(self2, args);
    }
    function clear2() {
      timeoutID = void 0;
    }
    if (debounceMode && !timeoutID) {
      exec();
    }
    if (timeoutID) {
      clearTimeout(timeoutID);
    }
    if (debounceMode === void 0 && elapsed > delay2) {
      exec();
    } else if (noTrailing !== true) {
      timeoutID = setTimeout(debounceMode ? clear2 : exec, debounceMode === void 0 ? delay2 - elapsed : delay2);
    }
  }
  return wrapper;
};
var throttle$1 = throttle$2;
var debounce$2 = function(delay2, atBegin, callback) {
  return callback === void 0 ? throttle$1(delay2, atBegin, false) : throttle$1(delay2, callback, atBegin !== false);
};
var checkbox = { exports: {} };
(function(module2) {
  module2.exports = function(modules2) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
      if (installedModules[moduleId]) {
        return installedModules[moduleId].exports;
      }
      var module3 = installedModules[moduleId] = {
        i: moduleId,
        l: false,
        exports: {}
      };
      modules2[moduleId].call(module3.exports, module3, module3.exports, __webpack_require__);
      module3.l = true;
      return module3.exports;
    }
    __webpack_require__.m = modules2;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports2, name, getter) {
      if (!__webpack_require__.o(exports2, name)) {
        Object.defineProperty(exports2, name, { enumerable: true, get: getter });
      }
    };
    __webpack_require__.r = function(exports2) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(exports2, Symbol.toStringTag, { value: "Module" });
      }
      Object.defineProperty(exports2, "__esModule", { value: true });
    };
    __webpack_require__.t = function(value6, mode) {
      if (mode & 1)
        value6 = __webpack_require__(value6);
      if (mode & 8)
        return value6;
      if (mode & 4 && typeof value6 === "object" && value6 && value6.__esModule)
        return value6;
      var ns = /* @__PURE__ */ Object.create(null);
      __webpack_require__.r(ns);
      Object.defineProperty(ns, "default", { enumerable: true, value: value6 });
      if (mode & 2 && typeof value6 != "string")
        for (var key in value6)
          __webpack_require__.d(ns, key, function(key2) {
            return value6[key2];
          }.bind(null, key));
      return ns;
    };
    __webpack_require__.n = function(module3) {
      var getter = module3 && module3.__esModule ? function getDefault() {
        return module3["default"];
      } : function getModuleExports() {
        return module3;
      };
      __webpack_require__.d(getter, "a", getter);
      return getter;
    };
    __webpack_require__.o = function(object3, property2) {
      return Object.prototype.hasOwnProperty.call(object3, property2);
    };
    __webpack_require__.p = "/dist/";
    return __webpack_require__(__webpack_require__.s = 120);
  }({
    0: function(module3, __webpack_exports__, __webpack_require__) {
      __webpack_require__.d(__webpack_exports__, "a", function() {
        return normalizeComponent;
      });
      function normalizeComponent(scriptExports, render37, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
        var options2 = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
        if (render37) {
          options2.render = render37;
          options2.staticRenderFns = staticRenderFns;
          options2._compiled = true;
        }
        if (functionalTemplate) {
          options2.functional = true;
        }
        if (scopeId) {
          options2._scopeId = "data-v-" + scopeId;
        }
        var hook;
        if (moduleIdentifier) {
          hook = function(context) {
            context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
            if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
              context = __VUE_SSR_CONTEXT__;
            }
            if (injectStyles) {
              injectStyles.call(this, context);
            }
            if (context && context._registeredComponents) {
              context._registeredComponents.add(moduleIdentifier);
            }
          };
          options2._ssrRegister = hook;
        } else if (injectStyles) {
          hook = shadowMode ? function() {
            injectStyles.call(this, this.$root.$options.shadowRoot);
          } : injectStyles;
        }
        if (hook) {
          if (options2.functional) {
            options2._injectStyles = hook;
            var originalRender = options2.render;
            options2.render = function renderWithStyleInjection(h, context) {
              hook.call(context);
              return originalRender(h, context);
            };
          } else {
            var existing = options2.beforeCreate;
            options2.beforeCreate = existing ? [].concat(existing, hook) : [hook];
          }
        }
        return {
          exports: scriptExports,
          options: options2
        };
      }
    },
    120: function(module3, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      var render37 = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("label", {
          staticClass: "el-checkbox",
          class: [
            _vm.border && _vm.checkboxSize ? "el-checkbox--" + _vm.checkboxSize : "",
            { "is-disabled": _vm.isDisabled },
            { "is-bordered": _vm.border },
            { "is-checked": _vm.isChecked }
          ],
          attrs: { id: _vm.id }
        }, [
          _c("span", {
            staticClass: "el-checkbox__input",
            class: {
              "is-disabled": _vm.isDisabled,
              "is-checked": _vm.isChecked,
              "is-indeterminate": _vm.indeterminate,
              "is-focus": _vm.focus
            },
            attrs: {
              tabindex: _vm.indeterminate ? 0 : false,
              role: _vm.indeterminate ? "checkbox" : false,
              "aria-checked": _vm.indeterminate ? "mixed" : false
            }
          }, [
            _c("span", { staticClass: "el-checkbox__inner" }),
            _vm.trueLabel || _vm.falseLabel ? _c("input", {
              directives: [
                {
                  name: "model",
                  rawName: "v-model",
                  value: _vm.model,
                  expression: "model"
                }
              ],
              staticClass: "el-checkbox__original",
              attrs: {
                type: "checkbox",
                "aria-hidden": _vm.indeterminate ? "true" : "false",
                name: _vm.name,
                disabled: _vm.isDisabled,
                "true-value": _vm.trueLabel,
                "false-value": _vm.falseLabel
              },
              domProps: {
                checked: Array.isArray(_vm.model) ? _vm._i(_vm.model, null) > -1 : _vm._q(_vm.model, _vm.trueLabel)
              },
              on: {
                change: [
                  function($event) {
                    var $$a = _vm.model, $$el = $event.target, $$c = $$el.checked ? _vm.trueLabel : _vm.falseLabel;
                    if (Array.isArray($$a)) {
                      var $$v = null, $$i = _vm._i($$a, $$v);
                      if ($$el.checked) {
                        $$i < 0 && (_vm.model = $$a.concat([$$v]));
                      } else {
                        $$i > -1 && (_vm.model = $$a.slice(0, $$i).concat($$a.slice($$i + 1)));
                      }
                    } else {
                      _vm.model = $$c;
                    }
                  },
                  _vm.handleChange
                ],
                focus: function($event) {
                  _vm.focus = true;
                },
                blur: function($event) {
                  _vm.focus = false;
                }
              }
            }) : _c("input", {
              directives: [
                {
                  name: "model",
                  rawName: "v-model",
                  value: _vm.model,
                  expression: "model"
                }
              ],
              staticClass: "el-checkbox__original",
              attrs: {
                type: "checkbox",
                "aria-hidden": _vm.indeterminate ? "true" : "false",
                disabled: _vm.isDisabled,
                name: _vm.name
              },
              domProps: {
                value: _vm.label,
                checked: Array.isArray(_vm.model) ? _vm._i(_vm.model, _vm.label) > -1 : _vm.model
              },
              on: {
                change: [
                  function($event) {
                    var $$a = _vm.model, $$el = $event.target, $$c = $$el.checked ? true : false;
                    if (Array.isArray($$a)) {
                      var $$v = _vm.label, $$i = _vm._i($$a, $$v);
                      if ($$el.checked) {
                        $$i < 0 && (_vm.model = $$a.concat([$$v]));
                      } else {
                        $$i > -1 && (_vm.model = $$a.slice(0, $$i).concat($$a.slice($$i + 1)));
                      }
                    } else {
                      _vm.model = $$c;
                    }
                  },
                  _vm.handleChange
                ],
                focus: function($event) {
                  _vm.focus = true;
                },
                blur: function($event) {
                  _vm.focus = false;
                }
              }
            })
          ]),
          _vm.$slots.default || _vm.label ? _c("span", { staticClass: "el-checkbox__label" }, [
            _vm._t("default"),
            !_vm.$slots.default ? [_vm._v(_vm._s(_vm.label))] : _vm._e()
          ], 2) : _vm._e()
        ]);
      };
      var staticRenderFns = [];
      render37._withStripped = true;
      var emitter_ = __webpack_require__(4);
      var emitter_default = /* @__PURE__ */ __webpack_require__.n(emitter_);
      var checkboxvue_type_script_lang_js_ = {
        name: "ElCheckbox",
        mixins: [emitter_default.a],
        inject: {
          elForm: {
            default: ""
          },
          elFormItem: {
            default: ""
          }
        },
        componentName: "ElCheckbox",
        data: function data25() {
          return {
            selfModel: false,
            focus: false,
            isLimitExceeded: false
          };
        },
        computed: {
          model: {
            get: function get7() {
              return this.isGroup ? this.store : this.value !== void 0 ? this.value : this.selfModel;
            },
            set: function set3(val) {
              if (this.isGroup) {
                this.isLimitExceeded = false;
                this._checkboxGroup.min !== void 0 && val.length < this._checkboxGroup.min && (this.isLimitExceeded = true);
                this._checkboxGroup.max !== void 0 && val.length > this._checkboxGroup.max && (this.isLimitExceeded = true);
                this.isLimitExceeded === false && this.dispatch("ElCheckboxGroup", "input", [val]);
              } else {
                this.$emit("input", val);
                this.selfModel = val;
              }
            }
          },
          isChecked: function isChecked2() {
            if ({}.toString.call(this.model) === "[object Boolean]") {
              return this.model;
            } else if (Array.isArray(this.model)) {
              return this.model.indexOf(this.label) > -1;
            } else if (this.model !== null && this.model !== void 0) {
              return this.model === this.trueLabel;
            }
          },
          isGroup: function isGroup3() {
            var parent2 = this.$parent;
            while (parent2) {
              if (parent2.$options.componentName !== "ElCheckboxGroup") {
                parent2 = parent2.$parent;
              } else {
                this._checkboxGroup = parent2;
                return true;
              }
            }
            return false;
          },
          store: function store2() {
            return this._checkboxGroup ? this._checkboxGroup.value : this.value;
          },
          isLimitDisabled: function isLimitDisabled() {
            var _checkboxGroup = this._checkboxGroup, max2 = _checkboxGroup.max, min2 = _checkboxGroup.min;
            return !!(max2 || min2) && this.model.length >= max2 && !this.isChecked || this.model.length <= min2 && this.isChecked;
          },
          isDisabled: function isDisabled4() {
            return this.isGroup ? this._checkboxGroup.disabled || this.disabled || (this.elForm || {}).disabled || this.isLimitDisabled : this.disabled || (this.elForm || {}).disabled;
          },
          _elFormItemSize: function _elFormItemSize() {
            return (this.elFormItem || {}).elFormItemSize;
          },
          checkboxSize: function checkboxSize() {
            var temCheckboxSize = this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;
            return this.isGroup ? this._checkboxGroup.checkboxGroupSize || temCheckboxSize : temCheckboxSize;
          }
        },
        props: {
          value: {},
          label: {},
          indeterminate: Boolean,
          disabled: Boolean,
          checked: Boolean,
          name: String,
          trueLabel: [String, Number],
          falseLabel: [String, Number],
          id: String,
          controls: String,
          border: Boolean,
          size: String
        },
        methods: {
          addToStore: function addToStore() {
            if (Array.isArray(this.model) && this.model.indexOf(this.label) === -1) {
              this.model.push(this.label);
            } else {
              this.model = this.trueLabel || true;
            }
          },
          handleChange: function handleChange(ev) {
            var _this = this;
            if (this.isLimitExceeded)
              return;
            var value6 = void 0;
            if (ev.target.checked) {
              value6 = this.trueLabel === void 0 ? true : this.trueLabel;
            } else {
              value6 = this.falseLabel === void 0 ? false : this.falseLabel;
            }
            this.$emit("change", value6, ev);
            this.$nextTick(function() {
              if (_this.isGroup) {
                _this.dispatch("ElCheckboxGroup", "change", [_this._checkboxGroup.value]);
              }
            });
          }
        },
        created: function created20() {
          this.checked && this.addToStore();
        },
        mounted: function mounted18() {
          if (this.indeterminate) {
            this.$el.setAttribute("aria-controls", this.controls);
          }
        },
        watch: {
          value: function value6(_value) {
            this.dispatch("ElFormItem", "el.form.change", _value);
          }
        }
      };
      var src_checkboxvue_type_script_lang_js_ = checkboxvue_type_script_lang_js_;
      var componentNormalizer = __webpack_require__(0);
      var component = Object(componentNormalizer["a"])(src_checkboxvue_type_script_lang_js_, render37, staticRenderFns, false, null, null, null);
      component.options.__file = "packages/checkbox/src/checkbox.vue";
      var src_checkbox = component.exports;
      src_checkbox.install = function(Vue2) {
        Vue2.component(src_checkbox.name, src_checkbox);
      };
      __webpack_exports__["default"] = src_checkbox;
    },
    4: function(module3, exports2) {
      module3.exports = emitter;
    }
  });
})(checkbox);
var scrollbar = { exports: {} };
(function(module2) {
  module2.exports = function(modules2) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
      if (installedModules[moduleId]) {
        return installedModules[moduleId].exports;
      }
      var module3 = installedModules[moduleId] = {
        i: moduleId,
        l: false,
        exports: {}
      };
      modules2[moduleId].call(module3.exports, module3, module3.exports, __webpack_require__);
      module3.l = true;
      return module3.exports;
    }
    __webpack_require__.m = modules2;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports2, name, getter) {
      if (!__webpack_require__.o(exports2, name)) {
        Object.defineProperty(exports2, name, { enumerable: true, get: getter });
      }
    };
    __webpack_require__.r = function(exports2) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(exports2, Symbol.toStringTag, { value: "Module" });
      }
      Object.defineProperty(exports2, "__esModule", { value: true });
    };
    __webpack_require__.t = function(value6, mode) {
      if (mode & 1)
        value6 = __webpack_require__(value6);
      if (mode & 8)
        return value6;
      if (mode & 4 && typeof value6 === "object" && value6 && value6.__esModule)
        return value6;
      var ns = /* @__PURE__ */ Object.create(null);
      __webpack_require__.r(ns);
      Object.defineProperty(ns, "default", { enumerable: true, value: value6 });
      if (mode & 2 && typeof value6 != "string")
        for (var key in value6)
          __webpack_require__.d(ns, key, function(key2) {
            return value6[key2];
          }.bind(null, key));
      return ns;
    };
    __webpack_require__.n = function(module3) {
      var getter = module3 && module3.__esModule ? function getDefault() {
        return module3["default"];
      } : function getModuleExports() {
        return module3;
      };
      __webpack_require__.d(getter, "a", getter);
      return getter;
    };
    __webpack_require__.o = function(object3, property2) {
      return Object.prototype.hasOwnProperty.call(object3, property2);
    };
    __webpack_require__.p = "/dist/";
    return __webpack_require__(__webpack_require__.s = 132);
  }({
    132: function(module3, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      var resize_event_ = __webpack_require__(16);
      var scrollbar_width_ = __webpack_require__(38);
      var scrollbar_width_default = /* @__PURE__ */ __webpack_require__.n(scrollbar_width_);
      var util_ = __webpack_require__(3);
      var dom_ = __webpack_require__(2);
      var BAR_MAP = {
        vertical: {
          offset: "offsetHeight",
          scroll: "scrollTop",
          scrollSize: "scrollHeight",
          size: "height",
          key: "vertical",
          axis: "Y",
          client: "clientY",
          direction: "top"
        },
        horizontal: {
          offset: "offsetWidth",
          scroll: "scrollLeft",
          scrollSize: "scrollWidth",
          size: "width",
          key: "horizontal",
          axis: "X",
          client: "clientX",
          direction: "left"
        }
      };
      function renderThumbStyle(_ref) {
        var move = _ref.move, size2 = _ref.size, bar = _ref.bar;
        var style2 = {};
        var translate = "translate" + bar.axis + "(" + move + "%)";
        style2[bar.size] = size2;
        style2.transform = translate;
        style2.msTransform = translate;
        style2.webkitTransform = translate;
        return style2;
      }
      var src_bar = {
        name: "Bar",
        props: {
          vertical: Boolean,
          size: String,
          move: Number
        },
        computed: {
          bar: function bar() {
            return BAR_MAP[this.vertical ? "vertical" : "horizontal"];
          },
          wrap: function wrap2() {
            return this.$parent.wrap;
          }
        },
        render: function render37(h) {
          var size2 = this.size, move = this.move, bar = this.bar;
          return h("div", {
            "class": ["el-scrollbar__bar", "is-" + bar.key],
            on: {
              "mousedown": this.clickTrackHandler
            }
          }, [h("div", {
            ref: "thumb",
            "class": "el-scrollbar__thumb",
            on: {
              "mousedown": this.clickThumbHandler
            },
            style: renderThumbStyle({ size: size2, move, bar })
          })]);
        },
        methods: {
          clickThumbHandler: function clickThumbHandler(e) {
            if (e.ctrlKey || e.button === 2) {
              return;
            }
            this.startDrag(e);
            this[this.bar.axis] = e.currentTarget[this.bar.offset] - (e[this.bar.client] - e.currentTarget.getBoundingClientRect()[this.bar.direction]);
          },
          clickTrackHandler: function clickTrackHandler(e) {
            var offset = Math.abs(e.target.getBoundingClientRect()[this.bar.direction] - e[this.bar.client]);
            var thumbHalf = this.$refs.thumb[this.bar.offset] / 2;
            var thumbPositionPercentage = (offset - thumbHalf) * 100 / this.$el[this.bar.offset];
            this.wrap[this.bar.scroll] = thumbPositionPercentage * this.wrap[this.bar.scrollSize] / 100;
          },
          startDrag: function startDrag(e) {
            e.stopImmediatePropagation();
            this.cursorDown = true;
            Object(dom_["on"])(document, "mousemove", this.mouseMoveDocumentHandler);
            Object(dom_["on"])(document, "mouseup", this.mouseUpDocumentHandler);
            document.onselectstart = function() {
              return false;
            };
          },
          mouseMoveDocumentHandler: function mouseMoveDocumentHandler(e) {
            if (this.cursorDown === false)
              return;
            var prevPage2 = this[this.bar.axis];
            if (!prevPage2)
              return;
            var offset = (this.$el.getBoundingClientRect()[this.bar.direction] - e[this.bar.client]) * -1;
            var thumbClickPosition = this.$refs.thumb[this.bar.offset] - prevPage2;
            var thumbPositionPercentage = (offset - thumbClickPosition) * 100 / this.$el[this.bar.offset];
            this.wrap[this.bar.scroll] = thumbPositionPercentage * this.wrap[this.bar.scrollSize] / 100;
          },
          mouseUpDocumentHandler: function mouseUpDocumentHandler(e) {
            this.cursorDown = false;
            this[this.bar.axis] = 0;
            Object(dom_["off"])(document, "mousemove", this.mouseMoveDocumentHandler);
            document.onselectstart = null;
          }
        },
        destroyed: function destroyed17() {
          Object(dom_["off"])(document, "mouseup", this.mouseUpDocumentHandler);
        }
      };
      var main = {
        name: "ElScrollbar",
        components: { Bar: src_bar },
        props: {
          native: Boolean,
          wrapStyle: {},
          wrapClass: {},
          viewClass: {},
          viewStyle: {},
          noresize: Boolean,
          tag: {
            type: String,
            default: "div"
          }
        },
        data: function data25() {
          return {
            sizeWidth: "0",
            sizeHeight: "0",
            moveX: 0,
            moveY: 0
          };
        },
        computed: {
          wrap: function wrap2() {
            return this.$refs.wrap;
          }
        },
        render: function render37(h) {
          var gutter = scrollbar_width_default()();
          var style2 = this.wrapStyle;
          if (gutter) {
            var gutterWith = "-" + gutter + "px";
            var gutterStyle = "margin-bottom: " + gutterWith + "; margin-right: " + gutterWith + ";";
            if (Array.isArray(this.wrapStyle)) {
              style2 = Object(util_["toObject"])(this.wrapStyle);
              style2.marginRight = style2.marginBottom = gutterWith;
            } else if (typeof this.wrapStyle === "string") {
              style2 += gutterStyle;
            } else {
              style2 = gutterStyle;
            }
          }
          var view = h(this.tag, {
            class: ["el-scrollbar__view", this.viewClass],
            style: this.viewStyle,
            ref: "resize"
          }, this.$slots.default);
          var wrap2 = h("div", {
            ref: "wrap",
            style: style2,
            on: {
              "scroll": this.handleScroll
            },
            "class": [this.wrapClass, "el-scrollbar__wrap", gutter ? "" : "el-scrollbar__wrap--hidden-default"]
          }, [[view]]);
          var nodes = void 0;
          if (!this.native) {
            nodes = [wrap2, h(src_bar, {
              attrs: {
                move: this.moveX,
                size: this.sizeWidth
              }
            }), h(src_bar, {
              attrs: {
                vertical: true,
                move: this.moveY,
                size: this.sizeHeight
              }
            })];
          } else {
            nodes = [h("div", {
              ref: "wrap",
              "class": [this.wrapClass, "el-scrollbar__wrap"],
              style: style2
            }, [[view]])];
          }
          return h("div", { class: "el-scrollbar" }, nodes);
        },
        methods: {
          handleScroll: function handleScroll() {
            var wrap2 = this.wrap;
            this.moveY = wrap2.scrollTop * 100 / wrap2.clientHeight;
            this.moveX = wrap2.scrollLeft * 100 / wrap2.clientWidth;
          },
          update: function update5() {
            var heightPercentage = void 0, widthPercentage = void 0;
            var wrap2 = this.wrap;
            if (!wrap2)
              return;
            heightPercentage = wrap2.clientHeight * 100 / wrap2.scrollHeight;
            widthPercentage = wrap2.clientWidth * 100 / wrap2.scrollWidth;
            this.sizeHeight = heightPercentage < 100 ? heightPercentage + "%" : "";
            this.sizeWidth = widthPercentage < 100 ? widthPercentage + "%" : "";
          }
        },
        mounted: function mounted18() {
          if (this.native)
            return;
          this.$nextTick(this.update);
          !this.noresize && Object(resize_event_["addResizeListener"])(this.$refs.resize, this.update);
        },
        beforeDestroy: function beforeDestroy13() {
          if (this.native)
            return;
          !this.noresize && Object(resize_event_["removeResizeListener"])(this.$refs.resize, this.update);
        }
      };
      main.install = function(Vue2) {
        Vue2.component(main.name, main);
      };
      __webpack_exports__["default"] = main;
    },
    16: function(module3, exports2) {
      module3.exports = resizeEvent;
    },
    2: function(module3, exports2) {
      module3.exports = dom;
    },
    3: function(module3, exports2) {
      module3.exports = util;
    },
    38: function(module3, exports2) {
      module3.exports = scrollbarWidth;
    }
  });
})(scrollbar);
var collapseTransition = {};
collapseTransition.__esModule = true;
var _dom = dom;
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
var Transition = function() {
  function Transition2() {
    _classCallCheck(this, Transition2);
  }
  Transition2.prototype.beforeEnter = function beforeEnter(el) {
    (0, _dom.addClass)(el, "collapse-transition");
    if (!el.dataset)
      el.dataset = {};
    el.dataset.oldPaddingTop = el.style.paddingTop;
    el.dataset.oldPaddingBottom = el.style.paddingBottom;
    el.style.height = "0";
    el.style.paddingTop = 0;
    el.style.paddingBottom = 0;
  };
  Transition2.prototype.enter = function enter2(el) {
    el.dataset.oldOverflow = el.style.overflow;
    if (el.scrollHeight !== 0) {
      el.style.height = el.scrollHeight + "px";
      el.style.paddingTop = el.dataset.oldPaddingTop;
      el.style.paddingBottom = el.dataset.oldPaddingBottom;
    } else {
      el.style.height = "";
      el.style.paddingTop = el.dataset.oldPaddingTop;
      el.style.paddingBottom = el.dataset.oldPaddingBottom;
    }
    el.style.overflow = "hidden";
  };
  Transition2.prototype.afterEnter = function afterEnter(el) {
    (0, _dom.removeClass)(el, "collapse-transition");
    el.style.height = "";
    el.style.overflow = el.dataset.oldOverflow;
  };
  Transition2.prototype.beforeLeave = function beforeLeave(el) {
    if (!el.dataset)
      el.dataset = {};
    el.dataset.oldPaddingTop = el.style.paddingTop;
    el.dataset.oldPaddingBottom = el.style.paddingBottom;
    el.dataset.oldOverflow = el.style.overflow;
    el.style.height = el.scrollHeight + "px";
    el.style.overflow = "hidden";
  };
  Transition2.prototype.leave = function leave2(el) {
    if (el.scrollHeight !== 0) {
      (0, _dom.addClass)(el, "collapse-transition");
      el.style.height = 0;
      el.style.paddingTop = 0;
      el.style.paddingBottom = 0;
    }
  };
  Transition2.prototype.afterLeave = function afterLeave2(el) {
    (0, _dom.removeClass)(el, "collapse-transition");
    el.style.height = "";
    el.style.overflow = el.dataset.oldOverflow;
    el.style.paddingTop = el.dataset.oldPaddingTop;
    el.style.paddingBottom = el.dataset.oldPaddingBottom;
  };
  return Transition2;
}();
collapseTransition.default = {
  name: "ElCollapseTransition",
  functional: true,
  render: function render36(h, _ref) {
    var children = _ref.children;
    var data25 = {
      on: new Transition()
    };
    return h("transition", data25, children);
  }
};
var vdom = {};
vdom.__esModule = true;
var _typeof$2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
  return typeof obj;
} : function(obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};
vdom.isVNode = isVNode;
var _util = util;
function isVNode(node) {
  return node !== null && (typeof node === "undefined" ? "undefined" : _typeof$2(node)) === "object" && (0, _util.hasOwn)(node, "componentOptions");
}
var focus6 = {};
focus6.__esModule = true;
focus6.default = function(ref2) {
  return {
    methods: {
      focus: function focus7() {
        this.$refs[ref2].focus();
      }
    }
  };
};
var nestRE = /^(attrs|props|on|nativeOn|class|style|hook)$/;
var babelHelperVueJsxMergeProps = function mergeJSXProps(objs) {
  return objs.reduce(function(a, b) {
    var aa, bb, key, nestedKey, temp;
    for (key in b) {
      aa = a[key];
      bb = b[key];
      if (aa && nestRE.test(key)) {
        if (key === "class") {
          if (typeof aa === "string") {
            temp = aa;
            a[key] = aa = {};
            aa[temp] = true;
          }
          if (typeof bb === "string") {
            temp = bb;
            b[key] = bb = {};
            bb[temp] = true;
          }
        }
        if (key === "on" || key === "nativeOn" || key === "hook") {
          for (nestedKey in bb) {
            aa[nestedKey] = mergeFn(aa[nestedKey], bb[nestedKey]);
          }
        } else if (Array.isArray(aa)) {
          a[key] = aa.concat(bb);
        } else if (Array.isArray(bb)) {
          a[key] = [aa].concat(bb);
        } else {
          for (nestedKey in bb) {
            aa[nestedKey] = bb[nestedKey];
          }
        }
      } else {
        a[key] = b[key];
      }
    }
    return a;
  }, {});
};
function mergeFn(a, b) {
  return function() {
    a && a.apply(this, arguments);
    b && b.apply(this, arguments);
  };
}
var tooltip = { exports: {} };
(function(module2) {
  module2.exports = function(modules2) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
      if (installedModules[moduleId]) {
        return installedModules[moduleId].exports;
      }
      var module3 = installedModules[moduleId] = {
        i: moduleId,
        l: false,
        exports: {}
      };
      modules2[moduleId].call(module3.exports, module3, module3.exports, __webpack_require__);
      module3.l = true;
      return module3.exports;
    }
    __webpack_require__.m = modules2;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports2, name, getter) {
      if (!__webpack_require__.o(exports2, name)) {
        Object.defineProperty(exports2, name, { enumerable: true, get: getter });
      }
    };
    __webpack_require__.r = function(exports2) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(exports2, Symbol.toStringTag, { value: "Module" });
      }
      Object.defineProperty(exports2, "__esModule", { value: true });
    };
    __webpack_require__.t = function(value6, mode) {
      if (mode & 1)
        value6 = __webpack_require__(value6);
      if (mode & 8)
        return value6;
      if (mode & 4 && typeof value6 === "object" && value6 && value6.__esModule)
        return value6;
      var ns = /* @__PURE__ */ Object.create(null);
      __webpack_require__.r(ns);
      Object.defineProperty(ns, "default", { enumerable: true, value: value6 });
      if (mode & 2 && typeof value6 != "string")
        for (var key in value6)
          __webpack_require__.d(ns, key, function(key2) {
            return value6[key2];
          }.bind(null, key));
      return ns;
    };
    __webpack_require__.n = function(module3) {
      var getter = module3 && module3.__esModule ? function getDefault() {
        return module3["default"];
      } : function getModuleExports() {
        return module3;
      };
      __webpack_require__.d(getter, "a", getter);
      return getter;
    };
    __webpack_require__.o = function(object3, property2) {
      return Object.prototype.hasOwnProperty.call(object3, property2);
    };
    __webpack_require__.p = "/dist/";
    return __webpack_require__(__webpack_require__.s = 140);
  }({
    140: function(module3, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      var vue_popper_ = __webpack_require__(5);
      var vue_popper_default = /* @__PURE__ */ __webpack_require__.n(vue_popper_);
      var debounce_ = __webpack_require__(18);
      var debounce_default = /* @__PURE__ */ __webpack_require__.n(debounce_);
      var dom_ = __webpack_require__(2);
      var util_ = __webpack_require__(3);
      var external_vue_ = __webpack_require__(7);
      var external_vue_default = /* @__PURE__ */ __webpack_require__.n(external_vue_);
      var main = {
        name: "ElTooltip",
        mixins: [vue_popper_default.a],
        props: {
          openDelay: {
            type: Number,
            default: 0
          },
          disabled: Boolean,
          manual: Boolean,
          effect: {
            type: String,
            default: "dark"
          },
          arrowOffset: {
            type: Number,
            default: 0
          },
          popperClass: String,
          content: String,
          visibleArrow: {
            default: true
          },
          transition: {
            type: String,
            default: "el-fade-in-linear"
          },
          popperOptions: {
            default: function _default116() {
              return {
                boundariesPadding: 10,
                gpuAcceleration: false
              };
            }
          },
          enterable: {
            type: Boolean,
            default: true
          },
          hideAfter: {
            type: Number,
            default: 0
          },
          tabindex: {
            type: Number,
            default: 0
          }
        },
        data: function data25() {
          return {
            tooltipId: "el-tooltip-" + Object(util_["generateId"])(),
            timeoutPending: null,
            focusing: false
          };
        },
        beforeCreate: function beforeCreate() {
          var _this = this;
          if (this.$isServer)
            return;
          this.popperVM = new external_vue_default.a({
            data: { node: "" },
            render: function render37(h) {
              return this.node;
            }
          }).$mount();
          this.debounceClose = debounce_default()(200, function() {
            return _this.handleClosePopper();
          });
        },
        render: function render37(h) {
          var _this2 = this;
          if (this.popperVM) {
            this.popperVM.node = h("transition", {
              attrs: {
                name: this.transition
              },
              on: {
                "afterLeave": this.doDestroy
              }
            }, [h("div", {
              on: {
                "mouseleave": function mouseleave() {
                  _this2.setExpectedState(false);
                  _this2.debounceClose();
                },
                "mouseenter": function mouseenter() {
                  _this2.setExpectedState(true);
                }
              },
              ref: "popper",
              attrs: {
                role: "tooltip",
                id: this.tooltipId,
                "aria-hidden": this.disabled || !this.showPopper ? "true" : "false"
              },
              directives: [{
                name: "show",
                value: !this.disabled && this.showPopper
              }],
              "class": ["el-tooltip__popper", "is-" + this.effect, this.popperClass]
            }, [this.$slots.content || this.content])]);
          }
          var firstElement = this.getFirstElement();
          if (!firstElement)
            return null;
          var data25 = firstElement.data = firstElement.data || {};
          data25.staticClass = this.addTooltipClass(data25.staticClass);
          return firstElement;
        },
        mounted: function mounted18() {
          var _this3 = this;
          this.referenceElm = this.$el;
          if (this.$el.nodeType === 1) {
            this.$el.setAttribute("aria-describedby", this.tooltipId);
            this.$el.setAttribute("tabindex", this.tabindex);
            Object(dom_["on"])(this.referenceElm, "mouseenter", this.show);
            Object(dom_["on"])(this.referenceElm, "mouseleave", this.hide);
            Object(dom_["on"])(this.referenceElm, "focus", function() {
              if (!_this3.$slots.default || !_this3.$slots.default.length) {
                _this3.handleFocus();
                return;
              }
              var instance = _this3.$slots.default[0].componentInstance;
              if (instance && instance.focus) {
                instance.focus();
              } else {
                _this3.handleFocus();
              }
            });
            Object(dom_["on"])(this.referenceElm, "blur", this.handleBlur);
            Object(dom_["on"])(this.referenceElm, "click", this.removeFocusing);
          }
          if (this.value && this.popperVM) {
            this.popperVM.$nextTick(function() {
              if (_this3.value) {
                _this3.updatePopper();
              }
            });
          }
        },
        watch: {
          focusing: function focusing(val) {
            if (val) {
              Object(dom_["addClass"])(this.referenceElm, "focusing");
            } else {
              Object(dom_["removeClass"])(this.referenceElm, "focusing");
            }
          }
        },
        methods: {
          show: function show2() {
            this.setExpectedState(true);
            this.handleShowPopper();
          },
          hide: function hide2() {
            this.setExpectedState(false);
            this.debounceClose();
          },
          handleFocus: function handleFocus3() {
            this.focusing = true;
            this.show();
          },
          handleBlur: function handleBlur() {
            this.focusing = false;
            this.hide();
          },
          removeFocusing: function removeFocusing() {
            this.focusing = false;
          },
          addTooltipClass: function addTooltipClass(prev) {
            if (!prev) {
              return "el-tooltip";
            } else {
              return "el-tooltip " + prev.replace("el-tooltip", "");
            }
          },
          handleShowPopper: function handleShowPopper() {
            var _this4 = this;
            if (!this.expectedState || this.manual)
              return;
            clearTimeout(this.timeout);
            this.timeout = setTimeout(function() {
              _this4.showPopper = true;
            }, this.openDelay);
            if (this.hideAfter > 0) {
              this.timeoutPending = setTimeout(function() {
                _this4.showPopper = false;
              }, this.hideAfter);
            }
          },
          handleClosePopper: function handleClosePopper() {
            if (this.enterable && this.expectedState || this.manual)
              return;
            clearTimeout(this.timeout);
            if (this.timeoutPending) {
              clearTimeout(this.timeoutPending);
            }
            this.showPopper = false;
            if (this.disabled) {
              this.doDestroy();
            }
          },
          setExpectedState: function setExpectedState(expectedState) {
            if (expectedState === false) {
              clearTimeout(this.timeoutPending);
            }
            this.expectedState = expectedState;
          },
          getFirstElement: function getFirstElement() {
            var slots = this.$slots.default;
            if (!Array.isArray(slots))
              return null;
            var element = null;
            for (var index2 = 0; index2 < slots.length; index2++) {
              if (slots[index2] && slots[index2].tag) {
                element = slots[index2];
              }
            }
            return element;
          }
        },
        beforeDestroy: function beforeDestroy13() {
          this.popperVM && this.popperVM.$destroy();
        },
        destroyed: function destroyed17() {
          var reference = this.referenceElm;
          if (reference.nodeType === 1) {
            Object(dom_["off"])(reference, "mouseenter", this.show);
            Object(dom_["off"])(reference, "mouseleave", this.hide);
            Object(dom_["off"])(reference, "focus", this.handleFocus);
            Object(dom_["off"])(reference, "blur", this.handleBlur);
            Object(dom_["off"])(reference, "click", this.removeFocusing);
          }
        }
      };
      main.install = function(Vue2) {
        Vue2.component(main.name, main);
      };
      __webpack_exports__["default"] = main;
    },
    18: function(module3, exports2) {
      module3.exports = debounce$2;
    },
    2: function(module3, exports2) {
      module3.exports = dom;
    },
    3: function(module3, exports2) {
      module3.exports = util;
    },
    5: function(module3, exports2) {
      module3.exports = vuePopper;
    },
    7: function(module3, exports2) {
      module3.exports = require$$6;
    }
  });
})(tooltip);
var scrollIntoView$1 = {};
scrollIntoView$1.__esModule = true;
scrollIntoView$1.default = scrollIntoView;
var _vue = require$$6;
var _vue2 = _interopRequireDefault$3(_vue);
function _interopRequireDefault$3(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
function scrollIntoView(container, selected) {
  if (_vue2.default.prototype.$isServer)
    return;
  if (!selected) {
    container.scrollTop = 0;
    return;
  }
  var offsetParents = [];
  var pointer = selected.offsetParent;
  while (pointer && container !== pointer && container.contains(pointer)) {
    offsetParents.push(pointer);
    pointer = pointer.offsetParent;
  }
  var top = selected.offsetTop + offsetParents.reduce(function(prev, curr) {
    return prev + curr.offsetTop;
  }, 0);
  var bottom = top + selected.offsetHeight;
  var viewRectTop = container.scrollTop;
  var viewRectBottom = viewRectTop + container.clientHeight;
  if (top < viewRectTop) {
    container.scrollTop = top;
  } else if (bottom > viewRectBottom) {
    container.scrollTop = bottom - container.clientHeight;
  }
}
var buttonGroup = { exports: {} };
(function(module2) {
  module2.exports = function(modules2) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
      if (installedModules[moduleId]) {
        return installedModules[moduleId].exports;
      }
      var module3 = installedModules[moduleId] = {
        i: moduleId,
        l: false,
        exports: {}
      };
      modules2[moduleId].call(module3.exports, module3, module3.exports, __webpack_require__);
      module3.l = true;
      return module3.exports;
    }
    __webpack_require__.m = modules2;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports2, name, getter) {
      if (!__webpack_require__.o(exports2, name)) {
        Object.defineProperty(exports2, name, { enumerable: true, get: getter });
      }
    };
    __webpack_require__.r = function(exports2) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(exports2, Symbol.toStringTag, { value: "Module" });
      }
      Object.defineProperty(exports2, "__esModule", { value: true });
    };
    __webpack_require__.t = function(value6, mode) {
      if (mode & 1)
        value6 = __webpack_require__(value6);
      if (mode & 8)
        return value6;
      if (mode & 4 && typeof value6 === "object" && value6 && value6.__esModule)
        return value6;
      var ns = /* @__PURE__ */ Object.create(null);
      __webpack_require__.r(ns);
      Object.defineProperty(ns, "default", { enumerable: true, value: value6 });
      if (mode & 2 && typeof value6 != "string")
        for (var key in value6)
          __webpack_require__.d(ns, key, function(key2) {
            return value6[key2];
          }.bind(null, key));
      return ns;
    };
    __webpack_require__.n = function(module3) {
      var getter = module3 && module3.__esModule ? function getDefault() {
        return module3["default"];
      } : function getModuleExports() {
        return module3;
      };
      __webpack_require__.d(getter, "a", getter);
      return getter;
    };
    __webpack_require__.o = function(object3, property2) {
      return Object.prototype.hasOwnProperty.call(object3, property2);
    };
    __webpack_require__.p = "/dist/";
    return __webpack_require__(__webpack_require__.s = 87);
  }({
    0: function(module3, __webpack_exports__, __webpack_require__) {
      __webpack_require__.d(__webpack_exports__, "a", function() {
        return normalizeComponent;
      });
      function normalizeComponent(scriptExports, render37, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
        var options2 = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
        if (render37) {
          options2.render = render37;
          options2.staticRenderFns = staticRenderFns;
          options2._compiled = true;
        }
        if (functionalTemplate) {
          options2.functional = true;
        }
        if (scopeId) {
          options2._scopeId = "data-v-" + scopeId;
        }
        var hook;
        if (moduleIdentifier) {
          hook = function(context) {
            context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
            if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
              context = __VUE_SSR_CONTEXT__;
            }
            if (injectStyles) {
              injectStyles.call(this, context);
            }
            if (context && context._registeredComponents) {
              context._registeredComponents.add(moduleIdentifier);
            }
          };
          options2._ssrRegister = hook;
        } else if (injectStyles) {
          hook = shadowMode ? function() {
            injectStyles.call(this, this.$root.$options.shadowRoot);
          } : injectStyles;
        }
        if (hook) {
          if (options2.functional) {
            options2._injectStyles = hook;
            var originalRender = options2.render;
            options2.render = function renderWithStyleInjection(h, context) {
              hook.call(context);
              return originalRender(h, context);
            };
          } else {
            var existing = options2.beforeCreate;
            options2.beforeCreate = existing ? [].concat(existing, hook) : [hook];
          }
        }
        return {
          exports: scriptExports,
          options: options2
        };
      }
    },
    87: function(module3, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      var render37 = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", { staticClass: "el-button-group" }, [_vm._t("default")], 2);
      };
      var staticRenderFns = [];
      render37._withStripped = true;
      var button_groupvue_type_script_lang_js_ = {
        name: "ElButtonGroup"
      };
      var src_button_groupvue_type_script_lang_js_ = button_groupvue_type_script_lang_js_;
      var componentNormalizer = __webpack_require__(0);
      var component = Object(componentNormalizer["a"])(src_button_groupvue_type_script_lang_js_, render37, staticRenderFns, false, null, null, null);
      component.options.__file = "packages/button/src/button-group.vue";
      var button_group = component.exports;
      button_group.install = function(Vue2) {
        Vue2.component(button_group.name, button_group);
      };
      __webpack_exports__["default"] = button_group;
    }
  });
})(buttonGroup);
var tag = { exports: {} };
(function(module2) {
  module2.exports = function(modules2) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
      if (installedModules[moduleId]) {
        return installedModules[moduleId].exports;
      }
      var module3 = installedModules[moduleId] = {
        i: moduleId,
        l: false,
        exports: {}
      };
      modules2[moduleId].call(module3.exports, module3, module3.exports, __webpack_require__);
      module3.l = true;
      return module3.exports;
    }
    __webpack_require__.m = modules2;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports2, name, getter) {
      if (!__webpack_require__.o(exports2, name)) {
        Object.defineProperty(exports2, name, { enumerable: true, get: getter });
      }
    };
    __webpack_require__.r = function(exports2) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(exports2, Symbol.toStringTag, { value: "Module" });
      }
      Object.defineProperty(exports2, "__esModule", { value: true });
    };
    __webpack_require__.t = function(value6, mode) {
      if (mode & 1)
        value6 = __webpack_require__(value6);
      if (mode & 8)
        return value6;
      if (mode & 4 && typeof value6 === "object" && value6 && value6.__esModule)
        return value6;
      var ns = /* @__PURE__ */ Object.create(null);
      __webpack_require__.r(ns);
      Object.defineProperty(ns, "default", { enumerable: true, value: value6 });
      if (mode & 2 && typeof value6 != "string")
        for (var key in value6)
          __webpack_require__.d(ns, key, function(key2) {
            return value6[key2];
          }.bind(null, key));
      return ns;
    };
    __webpack_require__.n = function(module3) {
      var getter = module3 && module3.__esModule ? function getDefault() {
        return module3["default"];
      } : function getModuleExports() {
        return module3;
      };
      __webpack_require__.d(getter, "a", getter);
      return getter;
    };
    __webpack_require__.o = function(object3, property2) {
      return Object.prototype.hasOwnProperty.call(object3, property2);
    };
    __webpack_require__.p = "/dist/";
    return __webpack_require__(__webpack_require__.s = 130);
  }({
    0: function(module3, __webpack_exports__, __webpack_require__) {
      __webpack_require__.d(__webpack_exports__, "a", function() {
        return normalizeComponent;
      });
      function normalizeComponent(scriptExports, render37, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
        var options2 = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
        if (render37) {
          options2.render = render37;
          options2.staticRenderFns = staticRenderFns;
          options2._compiled = true;
        }
        if (functionalTemplate) {
          options2.functional = true;
        }
        if (scopeId) {
          options2._scopeId = "data-v-" + scopeId;
        }
        var hook;
        if (moduleIdentifier) {
          hook = function(context) {
            context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
            if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
              context = __VUE_SSR_CONTEXT__;
            }
            if (injectStyles) {
              injectStyles.call(this, context);
            }
            if (context && context._registeredComponents) {
              context._registeredComponents.add(moduleIdentifier);
            }
          };
          options2._ssrRegister = hook;
        } else if (injectStyles) {
          hook = shadowMode ? function() {
            injectStyles.call(this, this.$root.$options.shadowRoot);
          } : injectStyles;
        }
        if (hook) {
          if (options2.functional) {
            options2._injectStyles = hook;
            var originalRender = options2.render;
            options2.render = function renderWithStyleInjection(h, context) {
              hook.call(context);
              return originalRender(h, context);
            };
          } else {
            var existing = options2.beforeCreate;
            options2.beforeCreate = existing ? [].concat(existing, hook) : [hook];
          }
        }
        return {
          exports: scriptExports,
          options: options2
        };
      }
    },
    130: function(module3, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      var tagvue_type_script_lang_js_ = {
        name: "ElTag",
        props: {
          text: String,
          closable: Boolean,
          type: String,
          hit: Boolean,
          disableTransitions: Boolean,
          color: String,
          size: String,
          effect: {
            type: String,
            default: "light",
            validator: function validator2(val) {
              return ["dark", "light", "plain"].indexOf(val) !== -1;
            }
          }
        },
        methods: {
          handleClose: function handleClose(event2) {
            event2.stopPropagation();
            this.$emit("close", event2);
          },
          handleClick: function handleClick(event2) {
            this.$emit("click", event2);
          }
        },
        computed: {
          tagSize: function tagSize() {
            return this.size || (this.$ELEMENT || {}).size;
          }
        },
        render: function render38(h) {
          var type3 = this.type, tagSize = this.tagSize, hit = this.hit, effect = this.effect;
          var classes = ["el-tag", type3 ? "el-tag--" + type3 : "", tagSize ? "el-tag--" + tagSize : "", effect ? "el-tag--" + effect : "", hit && "is-hit"];
          var tagEl = h("span", {
            "class": classes,
            style: { backgroundColor: this.color },
            on: {
              "click": this.handleClick
            }
          }, [this.$slots.default, this.closable && h("i", {
            "class": "el-tag__close el-icon-close",
            on: {
              "click": this.handleClose
            }
          })]);
          return this.disableTransitions ? tagEl : h("transition", {
            attrs: { name: "el-zoom-in-center" }
          }, [tagEl]);
        }
      };
      var src_tagvue_type_script_lang_js_ = tagvue_type_script_lang_js_;
      var componentNormalizer = __webpack_require__(0);
      var render37, staticRenderFns;
      var component = Object(componentNormalizer["a"])(src_tagvue_type_script_lang_js_, render37, staticRenderFns, false, null, null, null);
      component.options.__file = "packages/tag/src/tag.vue";
      var tag2 = component.exports;
      tag2.install = function(Vue2) {
        Vue2.component(tag2.name, tag2);
      };
      __webpack_exports__["default"] = tag2;
    }
  });
})(tag);
var checkboxGroup = { exports: {} };
(function(module2) {
  module2.exports = function(modules2) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
      if (installedModules[moduleId]) {
        return installedModules[moduleId].exports;
      }
      var module3 = installedModules[moduleId] = {
        i: moduleId,
        l: false,
        exports: {}
      };
      modules2[moduleId].call(module3.exports, module3, module3.exports, __webpack_require__);
      module3.l = true;
      return module3.exports;
    }
    __webpack_require__.m = modules2;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports2, name, getter) {
      if (!__webpack_require__.o(exports2, name)) {
        Object.defineProperty(exports2, name, { enumerable: true, get: getter });
      }
    };
    __webpack_require__.r = function(exports2) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(exports2, Symbol.toStringTag, { value: "Module" });
      }
      Object.defineProperty(exports2, "__esModule", { value: true });
    };
    __webpack_require__.t = function(value6, mode) {
      if (mode & 1)
        value6 = __webpack_require__(value6);
      if (mode & 8)
        return value6;
      if (mode & 4 && typeof value6 === "object" && value6 && value6.__esModule)
        return value6;
      var ns = /* @__PURE__ */ Object.create(null);
      __webpack_require__.r(ns);
      Object.defineProperty(ns, "default", { enumerable: true, value: value6 });
      if (mode & 2 && typeof value6 != "string")
        for (var key in value6)
          __webpack_require__.d(ns, key, function(key2) {
            return value6[key2];
          }.bind(null, key));
      return ns;
    };
    __webpack_require__.n = function(module3) {
      var getter = module3 && module3.__esModule ? function getDefault() {
        return module3["default"];
      } : function getModuleExports() {
        return module3;
      };
      __webpack_require__.d(getter, "a", getter);
      return getter;
    };
    __webpack_require__.o = function(object3, property2) {
      return Object.prototype.hasOwnProperty.call(object3, property2);
    };
    __webpack_require__.p = "/dist/";
    return __webpack_require__(__webpack_require__.s = 126);
  }({
    0: function(module3, __webpack_exports__, __webpack_require__) {
      __webpack_require__.d(__webpack_exports__, "a", function() {
        return normalizeComponent;
      });
      function normalizeComponent(scriptExports, render37, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
        var options2 = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
        if (render37) {
          options2.render = render37;
          options2.staticRenderFns = staticRenderFns;
          options2._compiled = true;
        }
        if (functionalTemplate) {
          options2.functional = true;
        }
        if (scopeId) {
          options2._scopeId = "data-v-" + scopeId;
        }
        var hook;
        if (moduleIdentifier) {
          hook = function(context) {
            context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
            if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
              context = __VUE_SSR_CONTEXT__;
            }
            if (injectStyles) {
              injectStyles.call(this, context);
            }
            if (context && context._registeredComponents) {
              context._registeredComponents.add(moduleIdentifier);
            }
          };
          options2._ssrRegister = hook;
        } else if (injectStyles) {
          hook = shadowMode ? function() {
            injectStyles.call(this, this.$root.$options.shadowRoot);
          } : injectStyles;
        }
        if (hook) {
          if (options2.functional) {
            options2._injectStyles = hook;
            var originalRender = options2.render;
            options2.render = function renderWithStyleInjection(h, context) {
              hook.call(context);
              return originalRender(h, context);
            };
          } else {
            var existing = options2.beforeCreate;
            options2.beforeCreate = existing ? [].concat(existing, hook) : [hook];
          }
        }
        return {
          exports: scriptExports,
          options: options2
        };
      }
    },
    126: function(module3, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      var render37 = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", {
          staticClass: "el-checkbox-group",
          attrs: { role: "group", "aria-label": "checkbox-group" }
        }, [_vm._t("default")], 2);
      };
      var staticRenderFns = [];
      render37._withStripped = true;
      var emitter_ = __webpack_require__(4);
      var emitter_default = /* @__PURE__ */ __webpack_require__.n(emitter_);
      var checkbox_groupvue_type_script_lang_js_ = {
        name: "ElCheckboxGroup",
        componentName: "ElCheckboxGroup",
        mixins: [emitter_default.a],
        inject: {
          elFormItem: {
            default: ""
          }
        },
        props: {
          value: {},
          disabled: Boolean,
          min: Number,
          max: Number,
          size: String,
          fill: String,
          textColor: String
        },
        computed: {
          _elFormItemSize: function _elFormItemSize() {
            return (this.elFormItem || {}).elFormItemSize;
          },
          checkboxGroupSize: function checkboxGroupSize() {
            return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;
          }
        },
        watch: {
          value: function value6(_value) {
            this.dispatch("ElFormItem", "el.form.change", [_value]);
          }
        }
      };
      var src_checkbox_groupvue_type_script_lang_js_ = checkbox_groupvue_type_script_lang_js_;
      var componentNormalizer = __webpack_require__(0);
      var component = Object(componentNormalizer["a"])(src_checkbox_groupvue_type_script_lang_js_, render37, staticRenderFns, false, null, null, null);
      component.options.__file = "packages/checkbox/src/checkbox-group.vue";
      var checkbox_group = component.exports;
      checkbox_group.install = function(Vue2) {
        Vue2.component(checkbox_group.name, checkbox_group);
      };
      __webpack_exports__["default"] = checkbox_group;
    },
    4: function(module3, exports2) {
      module3.exports = emitter;
    }
  });
})(checkboxGroup);
var afterLeave = {};
afterLeave.__esModule = true;
afterLeave.default = function(instance, callback) {
  var speed = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 300;
  var once3 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
  if (!instance || !callback)
    throw new Error("instance & callback is required");
  var called = false;
  var afterLeaveCallback = function afterLeaveCallback2() {
    if (called)
      return;
    called = true;
    if (callback) {
      callback.apply(null, arguments);
    }
  };
  if (once3) {
    instance.$once("after-leave", afterLeaveCallback);
  } else {
    instance.$on("after-leave", afterLeaveCallback);
  }
  setTimeout(function() {
    afterLeaveCallback();
  }, speed + 100);
};
var progress = { exports: {} };
(function(module2) {
  module2.exports = function(modules2) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
      if (installedModules[moduleId]) {
        return installedModules[moduleId].exports;
      }
      var module3 = installedModules[moduleId] = {
        i: moduleId,
        l: false,
        exports: {}
      };
      modules2[moduleId].call(module3.exports, module3, module3.exports, __webpack_require__);
      module3.l = true;
      return module3.exports;
    }
    __webpack_require__.m = modules2;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports2, name, getter) {
      if (!__webpack_require__.o(exports2, name)) {
        Object.defineProperty(exports2, name, { enumerable: true, get: getter });
      }
    };
    __webpack_require__.r = function(exports2) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(exports2, Symbol.toStringTag, { value: "Module" });
      }
      Object.defineProperty(exports2, "__esModule", { value: true });
    };
    __webpack_require__.t = function(value6, mode) {
      if (mode & 1)
        value6 = __webpack_require__(value6);
      if (mode & 8)
        return value6;
      if (mode & 4 && typeof value6 === "object" && value6 && value6.__esModule)
        return value6;
      var ns = /* @__PURE__ */ Object.create(null);
      __webpack_require__.r(ns);
      Object.defineProperty(ns, "default", { enumerable: true, value: value6 });
      if (mode & 2 && typeof value6 != "string")
        for (var key in value6)
          __webpack_require__.d(ns, key, function(key2) {
            return value6[key2];
          }.bind(null, key));
      return ns;
    };
    __webpack_require__.n = function(module3) {
      var getter = module3 && module3.__esModule ? function getDefault() {
        return module3["default"];
      } : function getModuleExports() {
        return module3;
      };
      __webpack_require__.d(getter, "a", getter);
      return getter;
    };
    __webpack_require__.o = function(object3, property2) {
      return Object.prototype.hasOwnProperty.call(object3, property2);
    };
    __webpack_require__.p = "/dist/";
    return __webpack_require__(__webpack_require__.s = 90);
  }({
    0: function(module3, __webpack_exports__, __webpack_require__) {
      __webpack_require__.d(__webpack_exports__, "a", function() {
        return normalizeComponent;
      });
      function normalizeComponent(scriptExports, render37, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
        var options2 = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
        if (render37) {
          options2.render = render37;
          options2.staticRenderFns = staticRenderFns;
          options2._compiled = true;
        }
        if (functionalTemplate) {
          options2.functional = true;
        }
        if (scopeId) {
          options2._scopeId = "data-v-" + scopeId;
        }
        var hook;
        if (moduleIdentifier) {
          hook = function(context) {
            context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
            if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
              context = __VUE_SSR_CONTEXT__;
            }
            if (injectStyles) {
              injectStyles.call(this, context);
            }
            if (context && context._registeredComponents) {
              context._registeredComponents.add(moduleIdentifier);
            }
          };
          options2._ssrRegister = hook;
        } else if (injectStyles) {
          hook = shadowMode ? function() {
            injectStyles.call(this, this.$root.$options.shadowRoot);
          } : injectStyles;
        }
        if (hook) {
          if (options2.functional) {
            options2._injectStyles = hook;
            var originalRender = options2.render;
            options2.render = function renderWithStyleInjection(h, context) {
              hook.call(context);
              return originalRender(h, context);
            };
          } else {
            var existing = options2.beforeCreate;
            options2.beforeCreate = existing ? [].concat(existing, hook) : [hook];
          }
        }
        return {
          exports: scriptExports,
          options: options2
        };
      }
    },
    90: function(module3, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      var render37 = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", {
          staticClass: "el-progress",
          class: [
            "el-progress--" + _vm.type,
            _vm.status ? "is-" + _vm.status : "",
            {
              "el-progress--without-text": !_vm.showText,
              "el-progress--text-inside": _vm.textInside
            }
          ],
          attrs: {
            role: "progressbar",
            "aria-valuenow": _vm.percentage,
            "aria-valuemin": "0",
            "aria-valuemax": "100"
          }
        }, [
          _vm.type === "line" ? _c("div", { staticClass: "el-progress-bar" }, [
            _c("div", {
              staticClass: "el-progress-bar__outer",
              style: { height: _vm.strokeWidth + "px" }
            }, [
              _c("div", {
                staticClass: "el-progress-bar__inner",
                style: _vm.barStyle
              }, [
                _vm.showText && _vm.textInside ? _c("div", { staticClass: "el-progress-bar__innerText" }, [_vm._v(_vm._s(_vm.content))]) : _vm._e()
              ])
            ])
          ]) : _c("div", {
            staticClass: "el-progress-circle",
            style: { height: _vm.width + "px", width: _vm.width + "px" }
          }, [
            _c("svg", { attrs: { viewBox: "0 0 100 100" } }, [
              _c("path", {
                staticClass: "el-progress-circle__track",
                style: _vm.trailPathStyle,
                attrs: {
                  d: _vm.trackPath,
                  stroke: "#e5e9f2",
                  "stroke-width": _vm.relativeStrokeWidth,
                  fill: "none"
                }
              }),
              _c("path", {
                staticClass: "el-progress-circle__path",
                style: _vm.circlePathStyle,
                attrs: {
                  d: _vm.trackPath,
                  stroke: _vm.stroke,
                  fill: "none",
                  "stroke-linecap": _vm.strokeLinecap,
                  "stroke-width": _vm.percentage ? _vm.relativeStrokeWidth : 0
                }
              })
            ])
          ]),
          _vm.showText && !_vm.textInside ? _c("div", {
            staticClass: "el-progress__text",
            style: { fontSize: _vm.progressTextSize + "px" }
          }, [
            !_vm.status ? [_vm._v(_vm._s(_vm.content))] : _c("i", { class: _vm.iconClass })
          ], 2) : _vm._e()
        ]);
      };
      var staticRenderFns = [];
      render37._withStripped = true;
      var progressvue_type_script_lang_js_ = {
        name: "ElProgress",
        props: {
          type: {
            type: String,
            default: "line",
            validator: function validator2(val) {
              return ["line", "circle", "dashboard"].indexOf(val) > -1;
            }
          },
          percentage: {
            type: Number,
            default: 0,
            required: true,
            validator: function validator2(val) {
              return val >= 0 && val <= 100;
            }
          },
          status: {
            type: String,
            validator: function validator2(val) {
              return ["success", "exception", "warning"].indexOf(val) > -1;
            }
          },
          strokeWidth: {
            type: Number,
            default: 6
          },
          strokeLinecap: {
            type: String,
            default: "round"
          },
          textInside: {
            type: Boolean,
            default: false
          },
          width: {
            type: Number,
            default: 126
          },
          showText: {
            type: Boolean,
            default: true
          },
          color: {
            type: [String, Array, Function],
            default: ""
          },
          format: Function
        },
        computed: {
          barStyle: function barStyle() {
            var style2 = {};
            style2.width = this.percentage + "%";
            style2.backgroundColor = this.getCurrentColor(this.percentage);
            return style2;
          },
          relativeStrokeWidth: function relativeStrokeWidth() {
            return (this.strokeWidth / this.width * 100).toFixed(1);
          },
          radius: function radius() {
            if (this.type === "circle" || this.type === "dashboard") {
              return parseInt(50 - parseFloat(this.relativeStrokeWidth) / 2, 10);
            } else {
              return 0;
            }
          },
          trackPath: function trackPath() {
            var radius = this.radius;
            var isDashboard = this.type === "dashboard";
            return "\n        M 50 50\n        m 0 " + (isDashboard ? "" : "-") + radius + "\n        a " + radius + " " + radius + " 0 1 1 0 " + (isDashboard ? "-" : "") + radius * 2 + "\n        a " + radius + " " + radius + " 0 1 1 0 " + (isDashboard ? "" : "-") + radius * 2 + "\n        ";
          },
          perimeter: function perimeter() {
            return 2 * Math.PI * this.radius;
          },
          rate: function rate() {
            return this.type === "dashboard" ? 0.75 : 1;
          },
          strokeDashoffset: function strokeDashoffset() {
            var offset = -1 * this.perimeter * (1 - this.rate) / 2;
            return offset + "px";
          },
          trailPathStyle: function trailPathStyle() {
            return {
              strokeDasharray: this.perimeter * this.rate + "px, " + this.perimeter + "px",
              strokeDashoffset: this.strokeDashoffset
            };
          },
          circlePathStyle: function circlePathStyle() {
            return {
              strokeDasharray: this.perimeter * this.rate * (this.percentage / 100) + "px, " + this.perimeter + "px",
              strokeDashoffset: this.strokeDashoffset,
              transition: "stroke-dasharray 0.6s ease 0s, stroke 0.6s ease"
            };
          },
          stroke: function stroke() {
            var ret = void 0;
            if (this.color) {
              ret = this.getCurrentColor(this.percentage);
            } else {
              switch (this.status) {
                case "success":
                  ret = "#13ce66";
                  break;
                case "exception":
                  ret = "#ff4949";
                  break;
                case "warning":
                  ret = "#e6a23c";
                  break;
                default:
                  ret = "#20a0ff";
              }
            }
            return ret;
          },
          iconClass: function iconClass() {
            if (this.status === "warning") {
              return "el-icon-warning";
            }
            if (this.type === "line") {
              return this.status === "success" ? "el-icon-circle-check" : "el-icon-circle-close";
            } else {
              return this.status === "success" ? "el-icon-check" : "el-icon-close";
            }
          },
          progressTextSize: function progressTextSize() {
            return this.type === "line" ? 12 + this.strokeWidth * 0.4 : this.width * 0.111111 + 2;
          },
          content: function content2() {
            if (typeof this.format === "function") {
              return this.format(this.percentage) || "";
            } else {
              return this.percentage + "%";
            }
          }
        },
        methods: {
          getCurrentColor: function getCurrentColor(percentage) {
            if (typeof this.color === "function") {
              return this.color(percentage);
            } else if (typeof this.color === "string") {
              return this.color;
            } else {
              return this.getLevelColor(percentage);
            }
          },
          getLevelColor: function getLevelColor(percentage) {
            var colorArray = this.getColorArray().sort(function(a, b) {
              return a.percentage - b.percentage;
            });
            for (var i = 0; i < colorArray.length; i++) {
              if (colorArray[i].percentage > percentage) {
                return colorArray[i].color;
              }
            }
            return colorArray[colorArray.length - 1].color;
          },
          getColorArray: function getColorArray() {
            var color = this.color;
            var span = 100 / color.length;
            return color.map(function(seriesColor, index2) {
              if (typeof seriesColor === "string") {
                return {
                  color: seriesColor,
                  percentage: (index2 + 1) * span
                };
              }
              return seriesColor;
            });
          }
        }
      };
      var src_progressvue_type_script_lang_js_ = progressvue_type_script_lang_js_;
      var componentNormalizer = __webpack_require__(0);
      var component = Object(componentNormalizer["a"])(src_progressvue_type_script_lang_js_, render37, staticRenderFns, false, null, null, null);
      component.options.__file = "packages/progress/src/progress.vue";
      var progress2 = component.exports;
      progress2.install = function(Vue2) {
        Vue2.component(progress2.name, progress2);
      };
      __webpack_exports__["default"] = progress2;
    }
  });
})(progress);
var ariaUtils = {};
ariaUtils.__esModule = true;
var aria$1 = aria$1 || {};
aria$1.Utils = aria$1.Utils || {};
aria$1.Utils.focusFirstDescendant = function(element) {
  for (var i = 0; i < element.childNodes.length; i++) {
    var child = element.childNodes[i];
    if (aria$1.Utils.attemptFocus(child) || aria$1.Utils.focusFirstDescendant(child)) {
      return true;
    }
  }
  return false;
};
aria$1.Utils.focusLastDescendant = function(element) {
  for (var i = element.childNodes.length - 1; i >= 0; i--) {
    var child = element.childNodes[i];
    if (aria$1.Utils.attemptFocus(child) || aria$1.Utils.focusLastDescendant(child)) {
      return true;
    }
  }
  return false;
};
aria$1.Utils.attemptFocus = function(element) {
  if (!aria$1.Utils.isFocusable(element)) {
    return false;
  }
  aria$1.Utils.IgnoreUtilFocusChanges = true;
  try {
    element.focus();
  } catch (e) {
  }
  aria$1.Utils.IgnoreUtilFocusChanges = false;
  return document.activeElement === element;
};
aria$1.Utils.isFocusable = function(element) {
  if (element.tabIndex > 0 || element.tabIndex === 0 && element.getAttribute("tabIndex") !== null) {
    return true;
  }
  if (element.disabled) {
    return false;
  }
  switch (element.nodeName) {
    case "A":
      return !!element.href && element.rel !== "ignore";
    case "INPUT":
      return element.type !== "hidden" && element.type !== "file";
    case "BUTTON":
    case "SELECT":
    case "TEXTAREA":
      return true;
    default:
      return false;
  }
};
aria$1.Utils.triggerEvent = function(elm, name) {
  var eventName = void 0;
  if (/^mouse|click/.test(name)) {
    eventName = "MouseEvents";
  } else if (/^key/.test(name)) {
    eventName = "KeyboardEvent";
  } else {
    eventName = "HTMLEvents";
  }
  var evt = document.createEvent(eventName);
  for (var _len = arguments.length, opts = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    opts[_key - 2] = arguments[_key];
  }
  evt.initEvent.apply(evt, [name].concat(opts));
  elm.dispatchEvent ? elm.dispatchEvent(evt) : elm.fireEvent("on" + name, evt);
  return elm;
};
aria$1.Utils.keys = {
  tab: 9,
  enter: 13,
  space: 32,
  left: 37,
  up: 38,
  right: 39,
  down: 40,
  esc: 27
};
ariaUtils.default = aria$1.Utils;
var throttle = throttle$2;
var debounce$1 = debounce$2;
var throttleDebounce = {
  throttle,
  debounce: debounce$1
};
var select = { exports: {} };
(function(module2) {
  module2.exports = function(modules2) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
      if (installedModules[moduleId]) {
        return installedModules[moduleId].exports;
      }
      var module3 = installedModules[moduleId] = {
        i: moduleId,
        l: false,
        exports: {}
      };
      modules2[moduleId].call(module3.exports, module3, module3.exports, __webpack_require__);
      module3.l = true;
      return module3.exports;
    }
    __webpack_require__.m = modules2;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports2, name, getter) {
      if (!__webpack_require__.o(exports2, name)) {
        Object.defineProperty(exports2, name, { enumerable: true, get: getter });
      }
    };
    __webpack_require__.r = function(exports2) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(exports2, Symbol.toStringTag, { value: "Module" });
      }
      Object.defineProperty(exports2, "__esModule", { value: true });
    };
    __webpack_require__.t = function(value6, mode) {
      if (mode & 1)
        value6 = __webpack_require__(value6);
      if (mode & 8)
        return value6;
      if (mode & 4 && typeof value6 === "object" && value6 && value6.__esModule)
        return value6;
      var ns = /* @__PURE__ */ Object.create(null);
      __webpack_require__.r(ns);
      Object.defineProperty(ns, "default", { enumerable: true, value: value6 });
      if (mode & 2 && typeof value6 != "string")
        for (var key in value6)
          __webpack_require__.d(ns, key, function(key2) {
            return value6[key2];
          }.bind(null, key));
      return ns;
    };
    __webpack_require__.n = function(module3) {
      var getter = module3 && module3.__esModule ? function getDefault() {
        return module3["default"];
      } : function getModuleExports() {
        return module3;
      };
      __webpack_require__.d(getter, "a", getter);
      return getter;
    };
    __webpack_require__.o = function(object3, property2) {
      return Object.prototype.hasOwnProperty.call(object3, property2);
    };
    __webpack_require__.p = "/dist/";
    return __webpack_require__(__webpack_require__.s = 61);
  }({
    0: function(module3, __webpack_exports__, __webpack_require__) {
      __webpack_require__.d(__webpack_exports__, "a", function() {
        return normalizeComponent;
      });
      function normalizeComponent(scriptExports, render37, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
        var options2 = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
        if (render37) {
          options2.render = render37;
          options2.staticRenderFns = staticRenderFns;
          options2._compiled = true;
        }
        if (functionalTemplate) {
          options2.functional = true;
        }
        if (scopeId) {
          options2._scopeId = "data-v-" + scopeId;
        }
        var hook;
        if (moduleIdentifier) {
          hook = function(context) {
            context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
            if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
              context = __VUE_SSR_CONTEXT__;
            }
            if (injectStyles) {
              injectStyles.call(this, context);
            }
            if (context && context._registeredComponents) {
              context._registeredComponents.add(moduleIdentifier);
            }
          };
          options2._ssrRegister = hook;
        } else if (injectStyles) {
          hook = shadowMode ? function() {
            injectStyles.call(this, this.$root.$options.shadowRoot);
          } : injectStyles;
        }
        if (hook) {
          if (options2.functional) {
            options2._injectStyles = hook;
            var originalRender = options2.render;
            options2.render = function renderWithStyleInjection(h, context) {
              hook.call(context);
              return originalRender(h, context);
            };
          } else {
            var existing = options2.beforeCreate;
            options2.beforeCreate = existing ? [].concat(existing, hook) : [hook];
          }
        }
        return {
          exports: scriptExports,
          options: options2
        };
      }
    },
    10: function(module3, exports2) {
      module3.exports = input.exports;
    },
    12: function(module3, exports2) {
      module3.exports = clickoutside;
    },
    15: function(module3, exports2) {
      module3.exports = scrollbar.exports;
    },
    16: function(module3, exports2) {
      module3.exports = resizeEvent;
    },
    18: function(module3, exports2) {
      module3.exports = debounce$2;
    },
    21: function(module3, exports2) {
      module3.exports = shared$2;
    },
    22: function(module3, exports2) {
      module3.exports = focus6;
    },
    3: function(module3, exports2) {
      module3.exports = util;
    },
    31: function(module3, exports2) {
      module3.exports = scrollIntoView$1;
    },
    33: function(module3, __webpack_exports__, __webpack_require__) {
      var render37 = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("li", {
          directives: [
            {
              name: "show",
              rawName: "v-show",
              value: _vm.visible,
              expression: "visible"
            }
          ],
          staticClass: "el-select-dropdown__item",
          class: {
            selected: _vm.itemSelected,
            "is-disabled": _vm.disabled || _vm.groupDisabled || _vm.limitReached,
            hover: _vm.hover
          },
          on: {
            mouseenter: _vm.hoverItem,
            click: function($event) {
              $event.stopPropagation();
              return _vm.selectOptionClick($event);
            }
          }
        }, [_vm._t("default", [_c("span", [_vm._v(_vm._s(_vm.currentLabel))])])], 2);
      };
      var staticRenderFns = [];
      render37._withStripped = true;
      var emitter_ = __webpack_require__(4);
      var emitter_default = /* @__PURE__ */ __webpack_require__.n(emitter_);
      var util_ = __webpack_require__(3);
      var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
        return typeof obj;
      } : function(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
      var optionvue_type_script_lang_js_ = {
        mixins: [emitter_default.a],
        name: "ElOption",
        componentName: "ElOption",
        inject: ["select"],
        props: {
          value: {
            required: true
          },
          label: [String, Number],
          created: Boolean,
          disabled: {
            type: Boolean,
            default: false
          }
        },
        data: function data25() {
          return {
            index: -1,
            groupDisabled: false,
            visible: true,
            hitState: false,
            hover: false
          };
        },
        computed: {
          isObject: function isObject2() {
            return Object.prototype.toString.call(this.value).toLowerCase() === "[object object]";
          },
          currentLabel: function currentLabel() {
            return this.label || (this.isObject ? "" : this.value);
          },
          currentValue: function currentValue() {
            return this.value || this.label || "";
          },
          itemSelected: function itemSelected() {
            if (!this.select.multiple) {
              return this.isEqual(this.value, this.select.value);
            } else {
              return this.contains(this.select.value, this.value);
            }
          },
          limitReached: function limitReached() {
            if (this.select.multiple) {
              return !this.itemSelected && (this.select.value || []).length >= this.select.multipleLimit && this.select.multipleLimit > 0;
            } else {
              return false;
            }
          }
        },
        watch: {
          currentLabel: function currentLabel() {
            if (!this.created && !this.select.remote)
              this.dispatch("ElSelect", "setSelected");
          },
          value: function value6(val, oldVal) {
            var _select2 = this.select, remote = _select2.remote, valueKey = _select2.valueKey;
            if (!this.created && !remote) {
              if (valueKey && (typeof val === "undefined" ? "undefined" : _typeof2(val)) === "object" && (typeof oldVal === "undefined" ? "undefined" : _typeof2(oldVal)) === "object" && val[valueKey] === oldVal[valueKey]) {
                return;
              }
              this.dispatch("ElSelect", "setSelected");
            }
          }
        },
        methods: {
          isEqual: function isEqual3(a, b) {
            if (!this.isObject) {
              return a === b;
            } else {
              var valueKey = this.select.valueKey;
              return Object(util_["getValueByPath"])(a, valueKey) === Object(util_["getValueByPath"])(b, valueKey);
            }
          },
          contains: function contains() {
            var arr = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
            var target2 = arguments[1];
            if (!this.isObject) {
              return arr && arr.indexOf(target2) > -1;
            } else {
              var valueKey = this.select.valueKey;
              return arr && arr.some(function(item) {
                return Object(util_["getValueByPath"])(item, valueKey) === Object(util_["getValueByPath"])(target2, valueKey);
              });
            }
          },
          handleGroupDisabled: function handleGroupDisabled(val) {
            this.groupDisabled = val;
          },
          hoverItem: function hoverItem() {
            if (!this.disabled && !this.groupDisabled) {
              this.select.hoverIndex = this.select.options.indexOf(this);
            }
          },
          selectOptionClick: function selectOptionClick() {
            if (this.disabled !== true && this.groupDisabled !== true) {
              this.dispatch("ElSelect", "handleOptionClick", [this, true]);
            }
          },
          queryChange: function queryChange(query2) {
            this.visible = new RegExp(Object(util_["escapeRegexpString"])(query2), "i").test(this.currentLabel) || this.created;
            if (!this.visible) {
              this.select.filteredOptionsCount--;
            }
          }
        },
        created: function created20() {
          this.select.options.push(this);
          this.select.cachedOptions.push(this);
          this.select.optionsCount++;
          this.select.filteredOptionsCount++;
          this.$on("queryChange", this.queryChange);
          this.$on("handleGroupDisabled", this.handleGroupDisabled);
        },
        beforeDestroy: function beforeDestroy13() {
          var _select2 = this.select, selected = _select2.selected, multiple = _select2.multiple;
          var selectedOptions = multiple ? selected : [selected];
          var index2 = this.select.cachedOptions.indexOf(this);
          var selectedIndex = selectedOptions.indexOf(this);
          if (index2 > -1 && selectedIndex < 0) {
            this.select.cachedOptions.splice(index2, 1);
          }
          this.select.onOptionDestroy(this.select.options.indexOf(this));
        }
      };
      var src_optionvue_type_script_lang_js_ = optionvue_type_script_lang_js_;
      var componentNormalizer = __webpack_require__(0);
      var component = Object(componentNormalizer["a"])(src_optionvue_type_script_lang_js_, render37, staticRenderFns, false, null, null, null);
      component.options.__file = "packages/select/src/option.vue";
      __webpack_exports__["a"] = component.exports;
    },
    37: function(module3, exports2) {
      module3.exports = tag.exports;
    },
    4: function(module3, exports2) {
      module3.exports = emitter;
    },
    5: function(module3, exports2) {
      module3.exports = vuePopper;
    },
    6: function(module3, exports2) {
      module3.exports = locale;
    },
    61: function(module3, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      var render37 = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", {
          directives: [
            {
              name: "clickoutside",
              rawName: "v-clickoutside",
              value: _vm.handleClose,
              expression: "handleClose"
            }
          ],
          staticClass: "el-select",
          class: [_vm.selectSize ? "el-select--" + _vm.selectSize : ""],
          on: {
            click: function($event) {
              $event.stopPropagation();
              return _vm.toggleMenu($event);
            }
          }
        }, [
          _vm.multiple ? _c("div", {
            ref: "tags",
            staticClass: "el-select__tags",
            style: { "max-width": _vm.inputWidth - 32 + "px", width: "100%" }
          }, [
            _vm.collapseTags && _vm.selected.length ? _c("span", [
              _c("el-tag", {
                attrs: {
                  closable: !_vm.selectDisabled,
                  size: _vm.collapseTagSize,
                  hit: _vm.selected[0].hitState,
                  type: "info",
                  "disable-transitions": ""
                },
                on: {
                  close: function($event) {
                    _vm.deleteTag($event, _vm.selected[0]);
                  }
                }
              }, [
                _c("span", { staticClass: "el-select__tags-text" }, [
                  _vm._v(_vm._s(_vm.selected[0].currentLabel))
                ])
              ]),
              _vm.selected.length > 1 ? _c("el-tag", {
                attrs: {
                  closable: false,
                  size: _vm.collapseTagSize,
                  type: "info",
                  "disable-transitions": ""
                }
              }, [
                _c("span", { staticClass: "el-select__tags-text" }, [_vm._v("+ " + _vm._s(_vm.selected.length - 1))])
              ]) : _vm._e()
            ], 1) : _vm._e(),
            !_vm.collapseTags ? _c("transition-group", { on: { "after-leave": _vm.resetInputHeight } }, _vm._l(_vm.selected, function(item) {
              return _c("el-tag", {
                key: _vm.getValueKey(item),
                attrs: {
                  closable: !_vm.selectDisabled,
                  size: _vm.collapseTagSize,
                  hit: item.hitState,
                  type: "info",
                  "disable-transitions": ""
                },
                on: {
                  close: function($event) {
                    _vm.deleteTag($event, item);
                  }
                }
              }, [
                _c("span", { staticClass: "el-select__tags-text" }, [
                  _vm._v(_vm._s(item.currentLabel))
                ])
              ]);
            }), 1) : _vm._e(),
            _vm.filterable ? _c("input", {
              directives: [
                {
                  name: "model",
                  rawName: "v-model",
                  value: _vm.query,
                  expression: "query"
                }
              ],
              ref: "input",
              staticClass: "el-select__input",
              class: [_vm.selectSize ? "is-" + _vm.selectSize : ""],
              style: {
                "flex-grow": "1",
                width: _vm.inputLength / (_vm.inputWidth - 32) + "%",
                "max-width": _vm.inputWidth - 42 + "px"
              },
              attrs: {
                type: "text",
                disabled: _vm.selectDisabled,
                autocomplete: _vm.autoComplete || _vm.autocomplete
              },
              domProps: { value: _vm.query },
              on: {
                focus: _vm.handleFocus,
                blur: function($event) {
                  _vm.softFocus = false;
                },
                keyup: _vm.managePlaceholder,
                keydown: [
                  _vm.resetInputState,
                  function($event) {
                    if (!("button" in $event) && _vm._k($event.keyCode, "down", 40, $event.key, [
                      "Down",
                      "ArrowDown"
                    ])) {
                      return null;
                    }
                    $event.preventDefault();
                    _vm.navigateOptions("next");
                  },
                  function($event) {
                    if (!("button" in $event) && _vm._k($event.keyCode, "up", 38, $event.key, [
                      "Up",
                      "ArrowUp"
                    ])) {
                      return null;
                    }
                    $event.preventDefault();
                    _vm.navigateOptions("prev");
                  },
                  function($event) {
                    if (!("button" in $event) && _vm._k($event.keyCode, "enter", 13, $event.key, "Enter")) {
                      return null;
                    }
                    $event.preventDefault();
                    return _vm.selectOption($event);
                  },
                  function($event) {
                    if (!("button" in $event) && _vm._k($event.keyCode, "esc", 27, $event.key, [
                      "Esc",
                      "Escape"
                    ])) {
                      return null;
                    }
                    $event.stopPropagation();
                    $event.preventDefault();
                    _vm.visible = false;
                  },
                  function($event) {
                    if (!("button" in $event) && _vm._k($event.keyCode, "delete", [8, 46], $event.key, ["Backspace", "Delete", "Del"])) {
                      return null;
                    }
                    return _vm.deletePrevTag($event);
                  },
                  function($event) {
                    if (!("button" in $event) && _vm._k($event.keyCode, "tab", 9, $event.key, "Tab")) {
                      return null;
                    }
                    _vm.visible = false;
                  }
                ],
                compositionstart: _vm.handleComposition,
                compositionupdate: _vm.handleComposition,
                compositionend: _vm.handleComposition,
                input: [
                  function($event) {
                    if ($event.target.composing) {
                      return;
                    }
                    _vm.query = $event.target.value;
                  },
                  _vm.debouncedQueryChange
                ]
              }
            }) : _vm._e()
          ], 1) : _vm._e(),
          _c("el-input", {
            ref: "reference",
            class: { "is-focus": _vm.visible },
            attrs: {
              type: "text",
              placeholder: _vm.currentPlaceholder,
              name: _vm.name,
              id: _vm.id,
              autocomplete: _vm.autoComplete || _vm.autocomplete,
              size: _vm.selectSize,
              disabled: _vm.selectDisabled,
              readonly: _vm.readonly,
              "validate-event": false,
              tabindex: _vm.multiple && _vm.filterable ? "-1" : null
            },
            on: {
              focus: _vm.handleFocus,
              blur: _vm.handleBlur,
              input: _vm.debouncedOnInputChange
            },
            nativeOn: {
              keydown: [
                function($event) {
                  if (!("button" in $event) && _vm._k($event.keyCode, "down", 40, $event.key, [
                    "Down",
                    "ArrowDown"
                  ])) {
                    return null;
                  }
                  $event.stopPropagation();
                  $event.preventDefault();
                  _vm.navigateOptions("next");
                },
                function($event) {
                  if (!("button" in $event) && _vm._k($event.keyCode, "up", 38, $event.key, [
                    "Up",
                    "ArrowUp"
                  ])) {
                    return null;
                  }
                  $event.stopPropagation();
                  $event.preventDefault();
                  _vm.navigateOptions("prev");
                },
                function($event) {
                  if (!("button" in $event) && _vm._k($event.keyCode, "enter", 13, $event.key, "Enter")) {
                    return null;
                  }
                  $event.preventDefault();
                  return _vm.selectOption($event);
                },
                function($event) {
                  if (!("button" in $event) && _vm._k($event.keyCode, "esc", 27, $event.key, [
                    "Esc",
                    "Escape"
                  ])) {
                    return null;
                  }
                  $event.stopPropagation();
                  $event.preventDefault();
                  _vm.visible = false;
                },
                function($event) {
                  if (!("button" in $event) && _vm._k($event.keyCode, "tab", 9, $event.key, "Tab")) {
                    return null;
                  }
                  _vm.visible = false;
                }
              ],
              mouseenter: function($event) {
                _vm.inputHovering = true;
              },
              mouseleave: function($event) {
                _vm.inputHovering = false;
              }
            },
            model: {
              value: _vm.selectedLabel,
              callback: function($$v) {
                _vm.selectedLabel = $$v;
              },
              expression: "selectedLabel"
            }
          }, [
            _vm.$slots.prefix ? _c("template", { slot: "prefix" }, [_vm._t("prefix")], 2) : _vm._e(),
            _c("template", { slot: "suffix" }, [
              _c("i", {
                directives: [
                  {
                    name: "show",
                    rawName: "v-show",
                    value: !_vm.showClose,
                    expression: "!showClose"
                  }
                ],
                class: [
                  "el-select__caret",
                  "el-input__icon",
                  "el-icon-" + _vm.iconClass
                ]
              }),
              _vm.showClose ? _c("i", {
                staticClass: "el-select__caret el-input__icon el-icon-circle-close",
                on: { click: _vm.handleClearClick }
              }) : _vm._e()
            ])
          ], 2),
          _c("transition", {
            attrs: { name: "el-zoom-in-top" },
            on: {
              "before-enter": _vm.handleMenuEnter,
              "after-leave": _vm.doDestroy
            }
          }, [
            _c("el-select-menu", {
              directives: [
                {
                  name: "show",
                  rawName: "v-show",
                  value: _vm.visible && _vm.emptyText !== false,
                  expression: "visible && emptyText !== false"
                }
              ],
              ref: "popper",
              attrs: { "append-to-body": _vm.popperAppendToBody }
            }, [
              _c("el-scrollbar", {
                directives: [
                  {
                    name: "show",
                    rawName: "v-show",
                    value: _vm.options.length > 0 && !_vm.loading,
                    expression: "options.length > 0 && !loading"
                  }
                ],
                ref: "scrollbar",
                class: {
                  "is-empty": !_vm.allowCreate && _vm.query && _vm.filteredOptionsCount === 0
                },
                attrs: {
                  tag: "ul",
                  "wrap-class": "el-select-dropdown__wrap",
                  "view-class": "el-select-dropdown__list"
                }
              }, [
                _vm.showNewOption ? _c("el-option", {
                  attrs: { value: _vm.query, created: "" }
                }) : _vm._e(),
                _vm._t("default")
              ], 2),
              _vm.emptyText && (!_vm.allowCreate || _vm.loading || _vm.allowCreate && _vm.options.length === 0) ? [
                _vm.$slots.empty ? _vm._t("empty") : _c("p", { staticClass: "el-select-dropdown__empty" }, [
                  _vm._v("\n          " + _vm._s(_vm.emptyText) + "\n        ")
                ])
              ] : _vm._e()
            ], 2)
          ], 1)
        ], 1);
      };
      var staticRenderFns = [];
      render37._withStripped = true;
      var emitter_ = __webpack_require__(4);
      var emitter_default = /* @__PURE__ */ __webpack_require__.n(emitter_);
      var focus_ = __webpack_require__(22);
      var focus_default = /* @__PURE__ */ __webpack_require__.n(focus_);
      var locale_ = __webpack_require__(6);
      var locale_default = /* @__PURE__ */ __webpack_require__.n(locale_);
      var input_ = __webpack_require__(10);
      var input_default = /* @__PURE__ */ __webpack_require__.n(input_);
      var select_dropdownvue_type_template_id_06828748_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", {
          staticClass: "el-select-dropdown el-popper",
          class: [{ "is-multiple": _vm.$parent.multiple }, _vm.popperClass],
          style: { minWidth: _vm.minWidth }
        }, [_vm._t("default")], 2);
      };
      var select_dropdownvue_type_template_id_06828748_staticRenderFns = [];
      select_dropdownvue_type_template_id_06828748_render._withStripped = true;
      var vue_popper_ = __webpack_require__(5);
      var vue_popper_default = /* @__PURE__ */ __webpack_require__.n(vue_popper_);
      var select_dropdownvue_type_script_lang_js_ = {
        name: "ElSelectDropdown",
        componentName: "ElSelectDropdown",
        mixins: [vue_popper_default.a],
        props: {
          placement: {
            default: "bottom-start"
          },
          boundariesPadding: {
            default: 0
          },
          popperOptions: {
            default: function _default116() {
              return {
                gpuAcceleration: false
              };
            }
          },
          visibleArrow: {
            default: true
          },
          appendToBody: {
            type: Boolean,
            default: true
          }
        },
        data: function data25() {
          return {
            minWidth: ""
          };
        },
        computed: {
          popperClass: function popperClass() {
            return this.$parent.popperClass;
          }
        },
        watch: {
          "$parent.inputWidth": function $parentInputWidth() {
            this.minWidth = this.$parent.$el.getBoundingClientRect().width + "px";
          }
        },
        mounted: function mounted18() {
          var _this = this;
          this.referenceElm = this.$parent.$refs.reference.$el;
          this.$parent.popperElm = this.popperElm = this.$el;
          this.$on("updatePopper", function() {
            if (_this.$parent.visible)
              _this.updatePopper();
          });
          this.$on("destroyPopper", this.destroyPopper);
        }
      };
      var src_select_dropdownvue_type_script_lang_js_ = select_dropdownvue_type_script_lang_js_;
      var componentNormalizer = __webpack_require__(0);
      var component = Object(componentNormalizer["a"])(src_select_dropdownvue_type_script_lang_js_, select_dropdownvue_type_template_id_06828748_render, select_dropdownvue_type_template_id_06828748_staticRenderFns, false, null, null, null);
      component.options.__file = "packages/select/src/select-dropdown.vue";
      var select_dropdown = component.exports;
      var src_option = __webpack_require__(33);
      var tag_ = __webpack_require__(37);
      var tag_default = /* @__PURE__ */ __webpack_require__.n(tag_);
      var scrollbar_ = __webpack_require__(15);
      var scrollbar_default = /* @__PURE__ */ __webpack_require__.n(scrollbar_);
      var debounce_ = __webpack_require__(18);
      var debounce_default = /* @__PURE__ */ __webpack_require__.n(debounce_);
      var clickoutside_ = __webpack_require__(12);
      var clickoutside_default = /* @__PURE__ */ __webpack_require__.n(clickoutside_);
      var resize_event_ = __webpack_require__(16);
      var scroll_into_view_ = __webpack_require__(31);
      var scroll_into_view_default = /* @__PURE__ */ __webpack_require__.n(scroll_into_view_);
      var util_ = __webpack_require__(3);
      var navigation_mixin = {
        data: function data25() {
          return {
            hoverOption: -1
          };
        },
        computed: {
          optionsAllDisabled: function optionsAllDisabled() {
            return this.options.filter(function(option2) {
              return option2.visible;
            }).every(function(option2) {
              return option2.disabled;
            });
          }
        },
        watch: {
          hoverIndex: function hoverIndex(val) {
            var _this = this;
            if (typeof val === "number" && val > -1) {
              this.hoverOption = this.options[val] || {};
            }
            this.options.forEach(function(option2) {
              option2.hover = _this.hoverOption === option2;
            });
          }
        },
        methods: {
          navigateOptions: function navigateOptions(direction) {
            var _this2 = this;
            if (!this.visible) {
              this.visible = true;
              return;
            }
            if (this.options.length === 0 || this.filteredOptionsCount === 0)
              return;
            if (!this.optionsAllDisabled) {
              if (direction === "next") {
                this.hoverIndex++;
                if (this.hoverIndex === this.options.length) {
                  this.hoverIndex = 0;
                }
              } else if (direction === "prev") {
                this.hoverIndex--;
                if (this.hoverIndex < 0) {
                  this.hoverIndex = this.options.length - 1;
                }
              }
              var option2 = this.options[this.hoverIndex];
              if (option2.disabled === true || option2.groupDisabled === true || !option2.visible) {
                this.navigateOptions(direction);
              }
              this.$nextTick(function() {
                return _this2.scrollToOption(_this2.hoverOption);
              });
            }
          }
        }
      };
      var shared_ = __webpack_require__(21);
      var selectvue_type_script_lang_js_ = {
        mixins: [emitter_default.a, locale_default.a, focus_default()("reference"), navigation_mixin],
        name: "ElSelect",
        componentName: "ElSelect",
        inject: {
          elForm: {
            default: ""
          },
          elFormItem: {
            default: ""
          }
        },
        provide: function provide11() {
          return {
            "select": this
          };
        },
        computed: {
          _elFormItemSize: function _elFormItemSize() {
            return (this.elFormItem || {}).elFormItemSize;
          },
          readonly: function readonly() {
            return !this.filterable || this.multiple || !Object(util_["isIE"])() && !Object(util_["isEdge"])() && !this.visible;
          },
          showClose: function showClose() {
            var hasValue = this.multiple ? Array.isArray(this.value) && this.value.length > 0 : this.value !== void 0 && this.value !== null && this.value !== "";
            var criteria = this.clearable && !this.selectDisabled && this.inputHovering && hasValue;
            return criteria;
          },
          iconClass: function iconClass() {
            return this.remote && this.filterable ? "" : this.visible ? "arrow-up is-reverse" : "arrow-up";
          },
          debounce: function debounce2() {
            return this.remote ? 300 : 0;
          },
          emptyText: function emptyText() {
            if (this.loading) {
              return this.loadingText || this.t("el.select.loading");
            } else {
              if (this.remote && this.query === "" && this.options.length === 0)
                return false;
              if (this.filterable && this.query && this.options.length > 0 && this.filteredOptionsCount === 0) {
                return this.noMatchText || this.t("el.select.noMatch");
              }
              if (this.options.length === 0) {
                return this.noDataText || this.t("el.select.noData");
              }
            }
            return null;
          },
          showNewOption: function showNewOption() {
            var _this = this;
            var hasExistingOption = this.options.filter(function(option2) {
              return !option2.created;
            }).some(function(option2) {
              return option2.currentLabel === _this.query;
            });
            return this.filterable && this.allowCreate && this.query !== "" && !hasExistingOption;
          },
          selectSize: function selectSize() {
            return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;
          },
          selectDisabled: function selectDisabled() {
            return this.disabled || (this.elForm || {}).disabled;
          },
          collapseTagSize: function collapseTagSize() {
            return ["small", "mini"].indexOf(this.selectSize) > -1 ? "mini" : "small";
          },
          propPlaceholder: function propPlaceholder() {
            return typeof this.placeholder !== "undefined" ? this.placeholder : this.t("el.select.placeholder");
          }
        },
        components: {
          ElInput: input_default.a,
          ElSelectMenu: select_dropdown,
          ElOption: src_option["a"],
          ElTag: tag_default.a,
          ElScrollbar: scrollbar_default.a
        },
        directives: { Clickoutside: clickoutside_default.a },
        props: {
          name: String,
          id: String,
          value: {
            required: true
          },
          autocomplete: {
            type: String,
            default: "off"
          },
          autoComplete: {
            type: String,
            validator: function validator2(val) {
              return true;
            }
          },
          automaticDropdown: Boolean,
          size: String,
          disabled: Boolean,
          clearable: Boolean,
          filterable: Boolean,
          allowCreate: Boolean,
          loading: Boolean,
          popperClass: String,
          remote: Boolean,
          loadingText: String,
          noMatchText: String,
          noDataText: String,
          remoteMethod: Function,
          filterMethod: Function,
          multiple: Boolean,
          multipleLimit: {
            type: Number,
            default: 0
          },
          placeholder: {
            type: String,
            required: false
          },
          defaultFirstOption: Boolean,
          reserveKeyword: Boolean,
          valueKey: {
            type: String,
            default: "value"
          },
          collapseTags: Boolean,
          popperAppendToBody: {
            type: Boolean,
            default: true
          }
        },
        data: function data25() {
          return {
            options: [],
            cachedOptions: [],
            createdLabel: null,
            createdSelected: false,
            selected: this.multiple ? [] : {},
            inputLength: 20,
            inputWidth: 0,
            initialInputHeight: 0,
            cachedPlaceHolder: "",
            optionsCount: 0,
            filteredOptionsCount: 0,
            visible: false,
            softFocus: false,
            selectedLabel: "",
            hoverIndex: -1,
            query: "",
            previousQuery: null,
            inputHovering: false,
            currentPlaceholder: "",
            menuVisibleOnFocus: false,
            isOnComposition: false,
            isSilentBlur: false
          };
        },
        watch: {
          selectDisabled: function selectDisabled() {
            var _this2 = this;
            this.$nextTick(function() {
              _this2.resetInputHeight();
            });
          },
          propPlaceholder: function propPlaceholder(val) {
            this.cachedPlaceHolder = this.currentPlaceholder = val;
          },
          value: function value6(val, oldVal) {
            if (this.multiple) {
              this.resetInputHeight();
              if (val && val.length > 0 || this.$refs.input && this.query !== "") {
                this.currentPlaceholder = "";
              } else {
                this.currentPlaceholder = this.cachedPlaceHolder;
              }
              if (this.filterable && !this.reserveKeyword) {
                this.query = "";
                this.handleQueryChange(this.query);
              }
            }
            this.setSelected();
            if (this.filterable && !this.multiple) {
              this.inputLength = 20;
            }
            if (!Object(util_["valueEquals"])(val, oldVal)) {
              this.dispatch("ElFormItem", "el.form.change", val);
            }
          },
          visible: function visible2(val) {
            var _this3 = this;
            if (!val) {
              this.broadcast("ElSelectDropdown", "destroyPopper");
              if (this.$refs.input) {
                this.$refs.input.blur();
              }
              this.query = "";
              this.previousQuery = null;
              this.selectedLabel = "";
              this.inputLength = 20;
              this.menuVisibleOnFocus = false;
              this.resetHoverIndex();
              this.$nextTick(function() {
                if (_this3.$refs.input && _this3.$refs.input.value === "" && _this3.selected.length === 0) {
                  _this3.currentPlaceholder = _this3.cachedPlaceHolder;
                }
              });
              if (!this.multiple) {
                if (this.selected) {
                  if (this.filterable && this.allowCreate && this.createdSelected && this.createdLabel) {
                    this.selectedLabel = this.createdLabel;
                  } else {
                    this.selectedLabel = this.selected.currentLabel;
                  }
                  if (this.filterable)
                    this.query = this.selectedLabel;
                }
                if (this.filterable) {
                  this.currentPlaceholder = this.cachedPlaceHolder;
                }
              }
            } else {
              this.broadcast("ElSelectDropdown", "updatePopper");
              if (this.filterable) {
                this.query = this.remote ? "" : this.selectedLabel;
                this.handleQueryChange(this.query);
                if (this.multiple) {
                  this.$refs.input.focus();
                } else {
                  if (!this.remote) {
                    this.broadcast("ElOption", "queryChange", "");
                    this.broadcast("ElOptionGroup", "queryChange");
                  }
                  if (this.selectedLabel) {
                    this.currentPlaceholder = this.selectedLabel;
                    this.selectedLabel = "";
                  }
                }
              }
            }
            this.$emit("visible-change", val);
          },
          options: function options2() {
            var _this4 = this;
            if (this.$isServer)
              return;
            this.$nextTick(function() {
              _this4.broadcast("ElSelectDropdown", "updatePopper");
            });
            if (this.multiple) {
              this.resetInputHeight();
            }
            var inputs = this.$el.querySelectorAll("input");
            if ([].indexOf.call(inputs, document.activeElement) === -1) {
              this.setSelected();
            }
            if (this.defaultFirstOption && (this.filterable || this.remote) && this.filteredOptionsCount) {
              this.checkDefaultFirstOption();
            }
          }
        },
        methods: {
          handleComposition: function handleComposition(event2) {
            var _this5 = this;
            var text = event2.target.value;
            if (event2.type === "compositionend") {
              this.isOnComposition = false;
              this.$nextTick(function(_) {
                return _this5.handleQueryChange(text);
              });
            } else {
              var lastCharacter = text[text.length - 1] || "";
              this.isOnComposition = !Object(shared_["isKorean"])(lastCharacter);
            }
          },
          handleQueryChange: function handleQueryChange(val) {
            var _this6 = this;
            if (this.previousQuery === val || this.isOnComposition)
              return;
            if (this.previousQuery === null && (typeof this.filterMethod === "function" || typeof this.remoteMethod === "function")) {
              this.previousQuery = val;
              return;
            }
            this.previousQuery = val;
            this.$nextTick(function() {
              if (_this6.visible)
                _this6.broadcast("ElSelectDropdown", "updatePopper");
            });
            this.hoverIndex = -1;
            if (this.multiple && this.filterable) {
              this.$nextTick(function() {
                var length = _this6.$refs.input.value.length * 15 + 20;
                _this6.inputLength = _this6.collapseTags ? Math.min(50, length) : length;
                _this6.managePlaceholder();
                _this6.resetInputHeight();
              });
            }
            if (this.remote && typeof this.remoteMethod === "function") {
              this.hoverIndex = -1;
              this.remoteMethod(val);
            } else if (typeof this.filterMethod === "function") {
              this.filterMethod(val);
              this.broadcast("ElOptionGroup", "queryChange");
            } else {
              this.filteredOptionsCount = this.optionsCount;
              this.broadcast("ElOption", "queryChange", val);
              this.broadcast("ElOptionGroup", "queryChange");
            }
            if (this.defaultFirstOption && (this.filterable || this.remote) && this.filteredOptionsCount) {
              this.checkDefaultFirstOption();
            }
          },
          scrollToOption: function scrollToOption2(option2) {
            var target2 = Array.isArray(option2) && option2[0] ? option2[0].$el : option2.$el;
            if (this.$refs.popper && target2) {
              var menu2 = this.$refs.popper.$el.querySelector(".el-select-dropdown__wrap");
              scroll_into_view_default()(menu2, target2);
            }
            this.$refs.scrollbar && this.$refs.scrollbar.handleScroll();
          },
          handleMenuEnter: function handleMenuEnter() {
            var _this7 = this;
            this.$nextTick(function() {
              return _this7.scrollToOption(_this7.selected);
            });
          },
          emitChange: function emitChange(val) {
            if (!Object(util_["valueEquals"])(this.value, val)) {
              this.$emit("change", val);
            }
          },
          getOption: function getOption(value6) {
            var option2 = void 0;
            var isObject2 = Object.prototype.toString.call(value6).toLowerCase() === "[object object]";
            var isNull2 = Object.prototype.toString.call(value6).toLowerCase() === "[object null]";
            var isUndefined3 = Object.prototype.toString.call(value6).toLowerCase() === "[object undefined]";
            for (var i = this.cachedOptions.length - 1; i >= 0; i--) {
              var cachedOption = this.cachedOptions[i];
              var isEqual3 = isObject2 ? Object(util_["getValueByPath"])(cachedOption.value, this.valueKey) === Object(util_["getValueByPath"])(value6, this.valueKey) : cachedOption.value === value6;
              if (isEqual3) {
                option2 = cachedOption;
                break;
              }
            }
            if (option2)
              return option2;
            var label = !isObject2 && !isNull2 && !isUndefined3 ? String(value6) : "";
            var newOption = {
              value: value6,
              currentLabel: label
            };
            if (this.multiple) {
              newOption.hitState = false;
            }
            return newOption;
          },
          setSelected: function setSelected2() {
            var _this8 = this;
            if (!this.multiple) {
              var option2 = this.getOption(this.value);
              if (option2.created) {
                this.createdLabel = option2.currentLabel;
                this.createdSelected = true;
              } else {
                this.createdSelected = false;
              }
              this.selectedLabel = option2.currentLabel;
              this.selected = option2;
              if (this.filterable)
                this.query = this.selectedLabel;
              return;
            }
            var result = [];
            if (Array.isArray(this.value)) {
              this.value.forEach(function(value6) {
                result.push(_this8.getOption(value6));
              });
            }
            this.selected = result;
            this.$nextTick(function() {
              _this8.resetInputHeight();
            });
          },
          handleFocus: function handleFocus3(event2) {
            if (!this.softFocus) {
              if (this.automaticDropdown || this.filterable) {
                this.visible = true;
                if (this.filterable) {
                  this.menuVisibleOnFocus = true;
                }
              }
              this.$emit("focus", event2);
            } else {
              this.softFocus = false;
            }
          },
          blur: function blur6() {
            this.visible = false;
            this.$refs.reference.blur();
          },
          handleBlur: function handleBlur(event2) {
            var _this9 = this;
            setTimeout(function() {
              if (_this9.isSilentBlur) {
                _this9.isSilentBlur = false;
              } else {
                _this9.$emit("blur", event2);
              }
            }, 50);
            this.softFocus = false;
          },
          handleClearClick: function handleClearClick(event2) {
            this.deleteSelected(event2);
          },
          doDestroy: function doDestroy2() {
            this.$refs.popper && this.$refs.popper.doDestroy();
          },
          handleClose: function handleClose() {
            this.visible = false;
          },
          toggleLastOptionHitState: function toggleLastOptionHitState(hit) {
            if (!Array.isArray(this.selected))
              return;
            var option2 = this.selected[this.selected.length - 1];
            if (!option2)
              return;
            if (hit === true || hit === false) {
              option2.hitState = hit;
              return hit;
            }
            option2.hitState = !option2.hitState;
            return option2.hitState;
          },
          deletePrevTag: function deletePrevTag(e) {
            if (e.target.value.length <= 0 && !this.toggleLastOptionHitState()) {
              var value6 = this.value.slice();
              value6.pop();
              this.$emit("input", value6);
              this.emitChange(value6);
            }
          },
          managePlaceholder: function managePlaceholder() {
            if (this.currentPlaceholder !== "") {
              this.currentPlaceholder = this.$refs.input.value ? "" : this.cachedPlaceHolder;
            }
          },
          resetInputState: function resetInputState(e) {
            if (e.keyCode !== 8)
              this.toggleLastOptionHitState(false);
            this.inputLength = this.$refs.input.value.length * 15 + 20;
            this.resetInputHeight();
          },
          resetInputHeight: function resetInputHeight() {
            var _this10 = this;
            if (this.collapseTags && !this.filterable)
              return;
            this.$nextTick(function() {
              if (!_this10.$refs.reference)
                return;
              var inputChildNodes = _this10.$refs.reference.$el.childNodes;
              var input2 = [].filter.call(inputChildNodes, function(item) {
                return item.tagName === "INPUT";
              })[0];
              var tags = _this10.$refs.tags;
              var tagsHeight = tags ? Math.round(tags.getBoundingClientRect().height) : 0;
              var sizeInMap = _this10.initialInputHeight || 40;
              input2.style.height = _this10.selected.length === 0 ? sizeInMap + "px" : Math.max(tags ? tagsHeight + (tagsHeight > sizeInMap ? 6 : 0) : 0, sizeInMap) + "px";
              if (_this10.visible && _this10.emptyText !== false) {
                _this10.broadcast("ElSelectDropdown", "updatePopper");
              }
            });
          },
          resetHoverIndex: function resetHoverIndex() {
            var _this11 = this;
            setTimeout(function() {
              if (!_this11.multiple) {
                _this11.hoverIndex = _this11.options.indexOf(_this11.selected);
              } else {
                if (_this11.selected.length > 0) {
                  _this11.hoverIndex = Math.min.apply(null, _this11.selected.map(function(item) {
                    return _this11.options.indexOf(item);
                  }));
                } else {
                  _this11.hoverIndex = -1;
                }
              }
            }, 300);
          },
          handleOptionSelect: function handleOptionSelect(option2, byClick) {
            var _this12 = this;
            if (this.multiple) {
              var value6 = (this.value || []).slice();
              var optionIndex = this.getValueIndex(value6, option2.value);
              if (optionIndex > -1) {
                value6.splice(optionIndex, 1);
              } else if (this.multipleLimit <= 0 || value6.length < this.multipleLimit) {
                value6.push(option2.value);
              }
              this.$emit("input", value6);
              this.emitChange(value6);
              if (option2.created) {
                this.query = "";
                this.handleQueryChange("");
                this.inputLength = 20;
              }
              if (this.filterable)
                this.$refs.input.focus();
            } else {
              this.$emit("input", option2.value);
              this.emitChange(option2.value);
              this.visible = false;
            }
            this.isSilentBlur = byClick;
            this.setSoftFocus();
            if (this.visible)
              return;
            this.$nextTick(function() {
              _this12.scrollToOption(option2);
            });
          },
          setSoftFocus: function setSoftFocus() {
            this.softFocus = true;
            var input2 = this.$refs.input || this.$refs.reference;
            if (input2) {
              input2.focus();
            }
          },
          getValueIndex: function getValueIndex() {
            var arr = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
            var value6 = arguments[1];
            var isObject2 = Object.prototype.toString.call(value6).toLowerCase() === "[object object]";
            if (!isObject2) {
              return arr.indexOf(value6);
            } else {
              var valueKey = this.valueKey;
              var index2 = -1;
              arr.some(function(item, i) {
                if (Object(util_["getValueByPath"])(item, valueKey) === Object(util_["getValueByPath"])(value6, valueKey)) {
                  index2 = i;
                  return true;
                }
                return false;
              });
              return index2;
            }
          },
          toggleMenu: function toggleMenu() {
            if (!this.selectDisabled) {
              if (this.menuVisibleOnFocus) {
                this.menuVisibleOnFocus = false;
              } else {
                this.visible = !this.visible;
              }
              if (this.visible) {
                (this.$refs.input || this.$refs.reference).focus();
              }
            }
          },
          selectOption: function selectOption() {
            if (!this.visible) {
              this.toggleMenu();
            } else {
              if (this.options[this.hoverIndex]) {
                this.handleOptionSelect(this.options[this.hoverIndex]);
              }
            }
          },
          deleteSelected: function deleteSelected(event2) {
            event2.stopPropagation();
            var value6 = this.multiple ? [] : "";
            this.$emit("input", value6);
            this.emitChange(value6);
            this.visible = false;
            this.$emit("clear");
          },
          deleteTag: function deleteTag(event2, tag2) {
            var index2 = this.selected.indexOf(tag2);
            if (index2 > -1 && !this.selectDisabled) {
              var value6 = this.value.slice();
              value6.splice(index2, 1);
              this.$emit("input", value6);
              this.emitChange(value6);
              this.$emit("remove-tag", tag2.value);
            }
            event2.stopPropagation();
          },
          onInputChange: function onInputChange() {
            if (this.filterable && this.query !== this.selectedLabel) {
              this.query = this.selectedLabel;
              this.handleQueryChange(this.query);
            }
          },
          onOptionDestroy: function onOptionDestroy(index2) {
            if (index2 > -1) {
              this.optionsCount--;
              this.filteredOptionsCount--;
              this.options.splice(index2, 1);
            }
          },
          resetInputWidth: function resetInputWidth() {
            this.inputWidth = this.$refs.reference.$el.getBoundingClientRect().width;
          },
          handleResize: function handleResize2() {
            this.resetInputWidth();
            if (this.multiple)
              this.resetInputHeight();
          },
          checkDefaultFirstOption: function checkDefaultFirstOption() {
            this.hoverIndex = -1;
            var hasCreated = false;
            for (var i = this.options.length - 1; i >= 0; i--) {
              if (this.options[i].created) {
                hasCreated = true;
                this.hoverIndex = i;
                break;
              }
            }
            if (hasCreated)
              return;
            for (var _i = 0; _i !== this.options.length; ++_i) {
              var option2 = this.options[_i];
              if (this.query) {
                if (!option2.disabled && !option2.groupDisabled && option2.visible) {
                  this.hoverIndex = _i;
                  break;
                }
              } else {
                if (option2.itemSelected) {
                  this.hoverIndex = _i;
                  break;
                }
              }
            }
          },
          getValueKey: function getValueKey(item) {
            if (Object.prototype.toString.call(item.value).toLowerCase() !== "[object object]") {
              return item.value;
            } else {
              return Object(util_["getValueByPath"])(item.value, this.valueKey);
            }
          }
        },
        created: function created20() {
          var _this13 = this;
          this.cachedPlaceHolder = this.currentPlaceholder = this.propPlaceholder;
          if (this.multiple && !Array.isArray(this.value)) {
            this.$emit("input", []);
          }
          if (!this.multiple && Array.isArray(this.value)) {
            this.$emit("input", "");
          }
          this.debouncedOnInputChange = debounce_default()(this.debounce, function() {
            _this13.onInputChange();
          });
          this.debouncedQueryChange = debounce_default()(this.debounce, function(e) {
            _this13.handleQueryChange(e.target.value);
          });
          this.$on("handleOptionClick", this.handleOptionSelect);
          this.$on("setSelected", this.setSelected);
        },
        mounted: function mounted18() {
          var _this14 = this;
          if (this.multiple && Array.isArray(this.value) && this.value.length > 0) {
            this.currentPlaceholder = "";
          }
          Object(resize_event_["addResizeListener"])(this.$el, this.handleResize);
          var reference = this.$refs.reference;
          if (reference && reference.$el) {
            var sizeMap = {
              medium: 36,
              small: 32,
              mini: 28
            };
            var input2 = reference.$el.querySelector("input");
            this.initialInputHeight = input2.getBoundingClientRect().height || sizeMap[this.selectSize];
          }
          if (this.remote && this.multiple) {
            this.resetInputHeight();
          }
          this.$nextTick(function() {
            if (reference && reference.$el) {
              _this14.inputWidth = reference.$el.getBoundingClientRect().width;
            }
          });
          this.setSelected();
        },
        beforeDestroy: function beforeDestroy13() {
          if (this.$el && this.handleResize)
            Object(resize_event_["removeResizeListener"])(this.$el, this.handleResize);
        }
      };
      var src_selectvue_type_script_lang_js_ = selectvue_type_script_lang_js_;
      var select_component = Object(componentNormalizer["a"])(src_selectvue_type_script_lang_js_, render37, staticRenderFns, false, null, null, null);
      select_component.options.__file = "packages/select/src/select.vue";
      var src_select = select_component.exports;
      src_select.install = function(Vue2) {
        Vue2.component(src_select.name, src_select);
      };
      __webpack_exports__["default"] = src_select;
    }
  });
})(select);
var option = { exports: {} };
(function(module2) {
  module2.exports = function(modules2) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
      if (installedModules[moduleId]) {
        return installedModules[moduleId].exports;
      }
      var module3 = installedModules[moduleId] = {
        i: moduleId,
        l: false,
        exports: {}
      };
      modules2[moduleId].call(module3.exports, module3, module3.exports, __webpack_require__);
      module3.l = true;
      return module3.exports;
    }
    __webpack_require__.m = modules2;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports2, name, getter) {
      if (!__webpack_require__.o(exports2, name)) {
        Object.defineProperty(exports2, name, { enumerable: true, get: getter });
      }
    };
    __webpack_require__.r = function(exports2) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(exports2, Symbol.toStringTag, { value: "Module" });
      }
      Object.defineProperty(exports2, "__esModule", { value: true });
    };
    __webpack_require__.t = function(value6, mode) {
      if (mode & 1)
        value6 = __webpack_require__(value6);
      if (mode & 8)
        return value6;
      if (mode & 4 && typeof value6 === "object" && value6 && value6.__esModule)
        return value6;
      var ns = /* @__PURE__ */ Object.create(null);
      __webpack_require__.r(ns);
      Object.defineProperty(ns, "default", { enumerable: true, value: value6 });
      if (mode & 2 && typeof value6 != "string")
        for (var key in value6)
          __webpack_require__.d(ns, key, function(key2) {
            return value6[key2];
          }.bind(null, key));
      return ns;
    };
    __webpack_require__.n = function(module3) {
      var getter = module3 && module3.__esModule ? function getDefault() {
        return module3["default"];
      } : function getModuleExports() {
        return module3;
      };
      __webpack_require__.d(getter, "a", getter);
      return getter;
    };
    __webpack_require__.o = function(object3, property2) {
      return Object.prototype.hasOwnProperty.call(object3, property2);
    };
    __webpack_require__.p = "/dist/";
    return __webpack_require__(__webpack_require__.s = 53);
  }({
    0: function(module3, __webpack_exports__, __webpack_require__) {
      __webpack_require__.d(__webpack_exports__, "a", function() {
        return normalizeComponent;
      });
      function normalizeComponent(scriptExports, render37, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
        var options2 = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
        if (render37) {
          options2.render = render37;
          options2.staticRenderFns = staticRenderFns;
          options2._compiled = true;
        }
        if (functionalTemplate) {
          options2.functional = true;
        }
        if (scopeId) {
          options2._scopeId = "data-v-" + scopeId;
        }
        var hook;
        if (moduleIdentifier) {
          hook = function(context) {
            context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
            if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
              context = __VUE_SSR_CONTEXT__;
            }
            if (injectStyles) {
              injectStyles.call(this, context);
            }
            if (context && context._registeredComponents) {
              context._registeredComponents.add(moduleIdentifier);
            }
          };
          options2._ssrRegister = hook;
        } else if (injectStyles) {
          hook = shadowMode ? function() {
            injectStyles.call(this, this.$root.$options.shadowRoot);
          } : injectStyles;
        }
        if (hook) {
          if (options2.functional) {
            options2._injectStyles = hook;
            var originalRender = options2.render;
            options2.render = function renderWithStyleInjection(h, context) {
              hook.call(context);
              return originalRender(h, context);
            };
          } else {
            var existing = options2.beforeCreate;
            options2.beforeCreate = existing ? [].concat(existing, hook) : [hook];
          }
        }
        return {
          exports: scriptExports,
          options: options2
        };
      }
    },
    3: function(module3, exports2) {
      module3.exports = util;
    },
    33: function(module3, __webpack_exports__, __webpack_require__) {
      var render37 = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("li", {
          directives: [
            {
              name: "show",
              rawName: "v-show",
              value: _vm.visible,
              expression: "visible"
            }
          ],
          staticClass: "el-select-dropdown__item",
          class: {
            selected: _vm.itemSelected,
            "is-disabled": _vm.disabled || _vm.groupDisabled || _vm.limitReached,
            hover: _vm.hover
          },
          on: {
            mouseenter: _vm.hoverItem,
            click: function($event) {
              $event.stopPropagation();
              return _vm.selectOptionClick($event);
            }
          }
        }, [_vm._t("default", [_c("span", [_vm._v(_vm._s(_vm.currentLabel))])])], 2);
      };
      var staticRenderFns = [];
      render37._withStripped = true;
      var emitter_ = __webpack_require__(4);
      var emitter_default = /* @__PURE__ */ __webpack_require__.n(emitter_);
      var util_ = __webpack_require__(3);
      var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
        return typeof obj;
      } : function(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
      var optionvue_type_script_lang_js_ = {
        mixins: [emitter_default.a],
        name: "ElOption",
        componentName: "ElOption",
        inject: ["select"],
        props: {
          value: {
            required: true
          },
          label: [String, Number],
          created: Boolean,
          disabled: {
            type: Boolean,
            default: false
          }
        },
        data: function data25() {
          return {
            index: -1,
            groupDisabled: false,
            visible: true,
            hitState: false,
            hover: false
          };
        },
        computed: {
          isObject: function isObject2() {
            return Object.prototype.toString.call(this.value).toLowerCase() === "[object object]";
          },
          currentLabel: function currentLabel() {
            return this.label || (this.isObject ? "" : this.value);
          },
          currentValue: function currentValue() {
            return this.value || this.label || "";
          },
          itemSelected: function itemSelected() {
            if (!this.select.multiple) {
              return this.isEqual(this.value, this.select.value);
            } else {
              return this.contains(this.select.value, this.value);
            }
          },
          limitReached: function limitReached() {
            if (this.select.multiple) {
              return !this.itemSelected && (this.select.value || []).length >= this.select.multipleLimit && this.select.multipleLimit > 0;
            } else {
              return false;
            }
          }
        },
        watch: {
          currentLabel: function currentLabel() {
            if (!this.created && !this.select.remote)
              this.dispatch("ElSelect", "setSelected");
          },
          value: function value6(val, oldVal) {
            var _select2 = this.select, remote = _select2.remote, valueKey = _select2.valueKey;
            if (!this.created && !remote) {
              if (valueKey && (typeof val === "undefined" ? "undefined" : _typeof2(val)) === "object" && (typeof oldVal === "undefined" ? "undefined" : _typeof2(oldVal)) === "object" && val[valueKey] === oldVal[valueKey]) {
                return;
              }
              this.dispatch("ElSelect", "setSelected");
            }
          }
        },
        methods: {
          isEqual: function isEqual3(a, b) {
            if (!this.isObject) {
              return a === b;
            } else {
              var valueKey = this.select.valueKey;
              return Object(util_["getValueByPath"])(a, valueKey) === Object(util_["getValueByPath"])(b, valueKey);
            }
          },
          contains: function contains() {
            var arr = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
            var target2 = arguments[1];
            if (!this.isObject) {
              return arr && arr.indexOf(target2) > -1;
            } else {
              var valueKey = this.select.valueKey;
              return arr && arr.some(function(item) {
                return Object(util_["getValueByPath"])(item, valueKey) === Object(util_["getValueByPath"])(target2, valueKey);
              });
            }
          },
          handleGroupDisabled: function handleGroupDisabled(val) {
            this.groupDisabled = val;
          },
          hoverItem: function hoverItem() {
            if (!this.disabled && !this.groupDisabled) {
              this.select.hoverIndex = this.select.options.indexOf(this);
            }
          },
          selectOptionClick: function selectOptionClick() {
            if (this.disabled !== true && this.groupDisabled !== true) {
              this.dispatch("ElSelect", "handleOptionClick", [this, true]);
            }
          },
          queryChange: function queryChange(query2) {
            this.visible = new RegExp(Object(util_["escapeRegexpString"])(query2), "i").test(this.currentLabel) || this.created;
            if (!this.visible) {
              this.select.filteredOptionsCount--;
            }
          }
        },
        created: function created20() {
          this.select.options.push(this);
          this.select.cachedOptions.push(this);
          this.select.optionsCount++;
          this.select.filteredOptionsCount++;
          this.$on("queryChange", this.queryChange);
          this.$on("handleGroupDisabled", this.handleGroupDisabled);
        },
        beforeDestroy: function beforeDestroy13() {
          var _select2 = this.select, selected = _select2.selected, multiple = _select2.multiple;
          var selectedOptions = multiple ? selected : [selected];
          var index2 = this.select.cachedOptions.indexOf(this);
          var selectedIndex = selectedOptions.indexOf(this);
          if (index2 > -1 && selectedIndex < 0) {
            this.select.cachedOptions.splice(index2, 1);
          }
          this.select.onOptionDestroy(this.select.options.indexOf(this));
        }
      };
      var src_optionvue_type_script_lang_js_ = optionvue_type_script_lang_js_;
      var componentNormalizer = __webpack_require__(0);
      var component = Object(componentNormalizer["a"])(src_optionvue_type_script_lang_js_, render37, staticRenderFns, false, null, null, null);
      component.options.__file = "packages/select/src/option.vue";
      __webpack_exports__["a"] = component.exports;
    },
    4: function(module3, exports2) {
      module3.exports = emitter;
    },
    53: function(module3, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      var _select_src_option__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(33);
      _select_src_option__WEBPACK_IMPORTED_MODULE_0__["a"].install = function(Vue2) {
        Vue2.component(_select_src_option__WEBPACK_IMPORTED_MODULE_0__["a"].name, _select_src_option__WEBPACK_IMPORTED_MODULE_0__["a"]);
      };
      __webpack_exports__["default"] = _select_src_option__WEBPACK_IMPORTED_MODULE_0__["a"];
    }
  });
})(option);
var _populated = false;
var _ie, _firefox, _opera, _webkit, _chrome;
var _ie_real_version;
var _osx, _windows, _linux, _android;
var _win64;
var _iphone, _ipad, _native;
var _mobile;
function _populate() {
  if (_populated) {
    return;
  }
  _populated = true;
  var uas = navigator.userAgent;
  var agent = /(?:MSIE.(\d+\.\d+))|(?:(?:Firefox|GranParadiso|Iceweasel).(\d+\.\d+))|(?:Opera(?:.+Version.|.)(\d+\.\d+))|(?:AppleWebKit.(\d+(?:\.\d+)?))|(?:Trident\/\d+\.\d+.*rv:(\d+\.\d+))/.exec(uas);
  var os = /(Mac OS X)|(Windows)|(Linux)/.exec(uas);
  _iphone = /\b(iPhone|iP[ao]d)/.exec(uas);
  _ipad = /\b(iP[ao]d)/.exec(uas);
  _android = /Android/i.exec(uas);
  _native = /FBAN\/\w+;/i.exec(uas);
  _mobile = /Mobile/i.exec(uas);
  _win64 = !!/Win64/.exec(uas);
  if (agent) {
    _ie = agent[1] ? parseFloat(agent[1]) : agent[5] ? parseFloat(agent[5]) : NaN;
    if (_ie && document && document.documentMode) {
      _ie = document.documentMode;
    }
    var trident = /(?:Trident\/(\d+.\d+))/.exec(uas);
    _ie_real_version = trident ? parseFloat(trident[1]) + 4 : _ie;
    _firefox = agent[2] ? parseFloat(agent[2]) : NaN;
    _opera = agent[3] ? parseFloat(agent[3]) : NaN;
    _webkit = agent[4] ? parseFloat(agent[4]) : NaN;
    if (_webkit) {
      agent = /(?:Chrome\/(\d+\.\d+))/.exec(uas);
      _chrome = agent && agent[1] ? parseFloat(agent[1]) : NaN;
    } else {
      _chrome = NaN;
    }
  } else {
    _ie = _firefox = _opera = _chrome = _webkit = NaN;
  }
  if (os) {
    if (os[1]) {
      var ver = /(?:Mac OS X (\d+(?:[._]\d+)?))/.exec(uas);
      _osx = ver ? parseFloat(ver[1].replace("_", ".")) : true;
    } else {
      _osx = false;
    }
    _windows = !!os[2];
    _linux = !!os[3];
  } else {
    _osx = _windows = _linux = false;
  }
}
var UserAgent_DEPRECATED$1 = {
  ie: function() {
    return _populate() || _ie;
  },
  ieCompatibilityMode: function() {
    return _populate() || _ie_real_version > _ie;
  },
  ie64: function() {
    return UserAgent_DEPRECATED$1.ie() && _win64;
  },
  firefox: function() {
    return _populate() || _firefox;
  },
  opera: function() {
    return _populate() || _opera;
  },
  webkit: function() {
    return _populate() || _webkit;
  },
  safari: function() {
    return UserAgent_DEPRECATED$1.webkit();
  },
  chrome: function() {
    return _populate() || _chrome;
  },
  windows: function() {
    return _populate() || _windows;
  },
  osx: function() {
    return _populate() || _osx;
  },
  linux: function() {
    return _populate() || _linux;
  },
  iphone: function() {
    return _populate() || _iphone;
  },
  mobile: function() {
    return _populate() || (_iphone || _ipad || _android || _mobile);
  },
  nativeApp: function() {
    return _populate() || _native;
  },
  android: function() {
    return _populate() || _android;
  },
  ipad: function() {
    return _populate() || _ipad;
  }
};
var UserAgent_DEPRECATED_1 = UserAgent_DEPRECATED$1;
var canUseDOM = !!(typeof window !== "undefined" && window.document && window.document.createElement);
var ExecutionEnvironment$1 = {
  canUseDOM,
  canUseWorkers: typeof Worker !== "undefined",
  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),
  canUseViewport: canUseDOM && !!window.screen,
  isInWorker: !canUseDOM
};
var ExecutionEnvironment_1 = ExecutionEnvironment$1;
var ExecutionEnvironment = ExecutionEnvironment_1;
var useHasFeature;
if (ExecutionEnvironment.canUseDOM) {
  useHasFeature = document.implementation && document.implementation.hasFeature && document.implementation.hasFeature("", "") !== true;
}
/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
function isEventSupported$1(eventNameSuffix, capture) {
  if (!ExecutionEnvironment.canUseDOM || capture && !("addEventListener" in document)) {
    return false;
  }
  var eventName = "on" + eventNameSuffix;
  var isSupported = eventName in document;
  if (!isSupported) {
    var element = document.createElement("div");
    element.setAttribute(eventName, "return;");
    isSupported = typeof element[eventName] === "function";
  }
  if (!isSupported && useHasFeature && eventNameSuffix === "wheel") {
    isSupported = document.implementation.hasFeature("Events.wheel", "3.0");
  }
  return isSupported;
}
var isEventSupported_1 = isEventSupported$1;
var UserAgent_DEPRECATED = UserAgent_DEPRECATED_1;
var isEventSupported = isEventSupported_1;
var PIXEL_STEP = 10;
var LINE_HEIGHT = 40;
var PAGE_HEIGHT = 800;
function normalizeWheel$1(event2) {
  var sX = 0, sY = 0, pX = 0, pY = 0;
  if ("detail" in event2) {
    sY = event2.detail;
  }
  if ("wheelDelta" in event2) {
    sY = -event2.wheelDelta / 120;
  }
  if ("wheelDeltaY" in event2) {
    sY = -event2.wheelDeltaY / 120;
  }
  if ("wheelDeltaX" in event2) {
    sX = -event2.wheelDeltaX / 120;
  }
  if ("axis" in event2 && event2.axis === event2.HORIZONTAL_AXIS) {
    sX = sY;
    sY = 0;
  }
  pX = sX * PIXEL_STEP;
  pY = sY * PIXEL_STEP;
  if ("deltaY" in event2) {
    pY = event2.deltaY;
  }
  if ("deltaX" in event2) {
    pX = event2.deltaX;
  }
  if ((pX || pY) && event2.deltaMode) {
    if (event2.deltaMode == 1) {
      pX *= LINE_HEIGHT;
      pY *= LINE_HEIGHT;
    } else {
      pX *= PAGE_HEIGHT;
      pY *= PAGE_HEIGHT;
    }
  }
  if (pX && !sX) {
    sX = pX < 1 ? -1 : 1;
  }
  if (pY && !sY) {
    sY = pY < 1 ? -1 : 1;
  }
  return {
    spinX: sX,
    spinY: sY,
    pixelX: pX,
    pixelY: pY
  };
}
normalizeWheel$1.getEventType = function() {
  return UserAgent_DEPRECATED.firefox() ? "DOMMouseScroll" : isEventSupported("wheel") ? "wheel" : "mousewheel";
};
var normalizeWheel_1 = normalizeWheel$1;
var normalizeWheel = normalizeWheel_1;
var ariaDialog = {};
ariaDialog.__esModule = true;
var _typeof$1 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
  return typeof obj;
} : function(obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};
var _ariaUtils = ariaUtils;
var _ariaUtils2 = _interopRequireDefault$2(_ariaUtils);
function _interopRequireDefault$2(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var aria = aria || {};
var tabEvent;
aria.Dialog = function(dialog, focusAfterClosed, focusFirst) {
  var _this = this;
  this.dialogNode = dialog;
  if (this.dialogNode === null || this.dialogNode.getAttribute("role") !== "dialog") {
    throw new Error("Dialog() requires a DOM element with ARIA role of dialog.");
  }
  if (typeof focusAfterClosed === "string") {
    this.focusAfterClosed = document.getElementById(focusAfterClosed);
  } else if ((typeof focusAfterClosed === "undefined" ? "undefined" : _typeof$1(focusAfterClosed)) === "object") {
    this.focusAfterClosed = focusAfterClosed;
  } else {
    this.focusAfterClosed = null;
  }
  if (typeof focusFirst === "string") {
    this.focusFirst = document.getElementById(focusFirst);
  } else if ((typeof focusFirst === "undefined" ? "undefined" : _typeof$1(focusFirst)) === "object") {
    this.focusFirst = focusFirst;
  } else {
    this.focusFirst = null;
  }
  if (this.focusFirst) {
    this.focusFirst.focus();
  } else {
    _ariaUtils2.default.focusFirstDescendant(this.dialogNode);
  }
  this.lastFocus = document.activeElement;
  tabEvent = function tabEvent2(e) {
    _this.trapFocus(e);
  };
  this.addListeners();
};
aria.Dialog.prototype.addListeners = function() {
  document.addEventListener("focus", tabEvent, true);
};
aria.Dialog.prototype.removeListeners = function() {
  document.removeEventListener("focus", tabEvent, true);
};
aria.Dialog.prototype.closeDialog = function() {
  var _this2 = this;
  this.removeListeners();
  if (this.focusAfterClosed) {
    setTimeout(function() {
      _this2.focusAfterClosed.focus();
    });
  }
};
aria.Dialog.prototype.trapFocus = function(event2) {
  if (_ariaUtils2.default.IgnoreUtilFocusChanges) {
    return;
  }
  if (this.dialogNode.contains(event2.target)) {
    this.lastFocus = event2.target;
  } else {
    _ariaUtils2.default.focusFirstDescendant(this.dialogNode);
    if (this.lastFocus === document.activeElement) {
      _ariaUtils2.default.focusLastDescendant(this.dialogNode);
    }
    this.lastFocus = document.activeElement;
  }
};
ariaDialog.default = aria.Dialog;
var assign$1 = { exports: {} };
var _global = { exports: {} };
var global$5 = _global.exports = typeof window != "undefined" && window.Math == Math ? window : typeof self != "undefined" && self.Math == Math ? self : Function("return this")();
if (typeof __g == "number")
  __g = global$5;
var _core = { exports: {} };
var core$3 = _core.exports = { version: "2.6.12" };
if (typeof __e == "number")
  __e = core$3;
var _aFunction = function(it) {
  if (typeof it != "function")
    throw TypeError(it + " is not a function!");
  return it;
};
var aFunction = _aFunction;
var _ctx = function(fn, that, length) {
  aFunction(fn);
  if (that === void 0)
    return fn;
  switch (length) {
    case 1:
      return function(a) {
        return fn.call(that, a);
      };
    case 2:
      return function(a, b) {
        return fn.call(that, a, b);
      };
    case 3:
      return function(a, b, c) {
        return fn.call(that, a, b, c);
      };
  }
  return function() {
    return fn.apply(that, arguments);
  };
};
var _objectDp = {};
var _isObject = function(it) {
  return typeof it === "object" ? it !== null : typeof it === "function";
};
var isObject$5 = _isObject;
var _anObject = function(it) {
  if (!isObject$5(it))
    throw TypeError(it + " is not an object!");
  return it;
};
var _fails = function(exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};
var _descriptors = !_fails(function() {
  return Object.defineProperty({}, "a", { get: function() {
    return 7;
  } }).a != 7;
});
var isObject$4 = _isObject;
var document$2 = _global.exports.document;
var is = isObject$4(document$2) && isObject$4(document$2.createElement);
var _domCreate = function(it) {
  return is ? document$2.createElement(it) : {};
};
var _ie8DomDefine = !_descriptors && !_fails(function() {
  return Object.defineProperty(_domCreate("div"), "a", { get: function() {
    return 7;
  } }).a != 7;
});
var isObject$3 = _isObject;
var _toPrimitive = function(it, S) {
  if (!isObject$3(it))
    return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == "function" && !isObject$3(val = fn.call(it)))
    return val;
  if (typeof (fn = it.valueOf) == "function" && !isObject$3(val = fn.call(it)))
    return val;
  if (!S && typeof (fn = it.toString) == "function" && !isObject$3(val = fn.call(it)))
    return val;
  throw TypeError("Can't convert object to primitive value");
};
var anObject$3 = _anObject;
var IE8_DOM_DEFINE$1 = _ie8DomDefine;
var toPrimitive$2 = _toPrimitive;
var dP$3 = Object.defineProperty;
_objectDp.f = _descriptors ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject$3(O);
  P = toPrimitive$2(P, true);
  anObject$3(Attributes);
  if (IE8_DOM_DEFINE$1)
    try {
      return dP$3(O, P, Attributes);
    } catch (e) {
    }
  if ("get" in Attributes || "set" in Attributes)
    throw TypeError("Accessors not supported!");
  if ("value" in Attributes)
    O[P] = Attributes.value;
  return O;
};
var _propertyDesc = function(bitmap, value6) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value6
  };
};
var dP$2 = _objectDp;
var createDesc$2 = _propertyDesc;
var _hide = _descriptors ? function(object3, key, value6) {
  return dP$2.f(object3, key, createDesc$2(1, value6));
} : function(object3, key, value6) {
  object3[key] = value6;
  return object3;
};
var hasOwnProperty$b = {}.hasOwnProperty;
var _has = function(it, key) {
  return hasOwnProperty$b.call(it, key);
};
var global$4 = _global.exports;
var core$2 = _core.exports;
var ctx = _ctx;
var hide$2 = _hide;
var has$6 = _has;
var PROTOTYPE$2 = "prototype";
var $export$3 = function(type3, name, source) {
  var IS_FORCED = type3 & $export$3.F;
  var IS_GLOBAL = type3 & $export$3.G;
  var IS_STATIC = type3 & $export$3.S;
  var IS_PROTO = type3 & $export$3.P;
  var IS_BIND = type3 & $export$3.B;
  var IS_WRAP = type3 & $export$3.W;
  var exports2 = IS_GLOBAL ? core$2 : core$2[name] || (core$2[name] = {});
  var expProto = exports2[PROTOTYPE$2];
  var target2 = IS_GLOBAL ? global$4 : IS_STATIC ? global$4[name] : (global$4[name] || {})[PROTOTYPE$2];
  var key, own, out;
  if (IS_GLOBAL)
    source = name;
  for (key in source) {
    own = !IS_FORCED && target2 && target2[key] !== void 0;
    if (own && has$6(exports2, key))
      continue;
    out = own ? target2[key] : source[key];
    exports2[key] = IS_GLOBAL && typeof target2[key] != "function" ? source[key] : IS_BIND && own ? ctx(out, global$4) : IS_WRAP && target2[key] == out ? function(C) {
      var F = function(a, b, c) {
        if (this instanceof C) {
          switch (arguments.length) {
            case 0:
              return new C();
            case 1:
              return new C(a);
            case 2:
              return new C(a, b);
          }
          return new C(a, b, c);
        }
        return C.apply(this, arguments);
      };
      F[PROTOTYPE$2] = C[PROTOTYPE$2];
      return F;
    }(out) : IS_PROTO && typeof out == "function" ? ctx(Function.call, out) : out;
    if (IS_PROTO) {
      (exports2.virtual || (exports2.virtual = {}))[key] = out;
      if (type3 & $export$3.R && expProto && !expProto[key])
        hide$2(expProto, key, out);
    }
  }
};
$export$3.F = 1;
$export$3.G = 2;
$export$3.S = 4;
$export$3.P = 8;
$export$3.B = 16;
$export$3.W = 32;
$export$3.U = 64;
$export$3.R = 128;
var _export = $export$3;
var toString$1 = {}.toString;
var _cof = function(it) {
  return toString$1.call(it).slice(8, -1);
};
var cof$1 = _cof;
var _iobject = Object("z").propertyIsEnumerable(0) ? Object : function(it) {
  return cof$1(it) == "String" ? it.split("") : Object(it);
};
var _defined = function(it) {
  if (it == void 0)
    throw TypeError("Can't call method on  " + it);
  return it;
};
var IObject$1 = _iobject;
var defined$2 = _defined;
var _toIobject = function(it) {
  return IObject$1(defined$2(it));
};
var ceil = Math.ceil;
var floor = Math.floor;
var _toInteger = function(it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};
var toInteger$2 = _toInteger;
var min$1 = Math.min;
var _toLength = function(it) {
  return it > 0 ? min$1(toInteger$2(it), 9007199254740991) : 0;
};
var toInteger$1 = _toInteger;
var max = Math.max;
var min = Math.min;
var _toAbsoluteIndex = function(index2, length) {
  index2 = toInteger$1(index2);
  return index2 < 0 ? max(index2 + length, 0) : min(index2, length);
};
var toIObject$5 = _toIobject;
var toLength = _toLength;
var toAbsoluteIndex = _toAbsoluteIndex;
var _arrayIncludes = function(IS_INCLUDES) {
  return function($this, el, fromIndex) {
    var O = toIObject$5($this);
    var length = toLength(O.length);
    var index2 = toAbsoluteIndex(fromIndex, length);
    var value6;
    if (IS_INCLUDES && el != el)
      while (length > index2) {
        value6 = O[index2++];
        if (value6 != value6)
          return true;
      }
    else
      for (; length > index2; index2++)
        if (IS_INCLUDES || index2 in O) {
          if (O[index2] === el)
            return IS_INCLUDES || index2 || 0;
        }
    return !IS_INCLUDES && -1;
  };
};
var _shared = { exports: {} };
var _library = true;
var core$1 = _core.exports;
var global$3 = _global.exports;
var SHARED = "__core-js_shared__";
var store$1 = global$3[SHARED] || (global$3[SHARED] = {});
(_shared.exports = function(key, value6) {
  return store$1[key] || (store$1[key] = value6 !== void 0 ? value6 : {});
})("versions", []).push({
  version: core$1.version,
  mode: "pure",
  copyright: "\xA9 2020 Denis Pushkarev (zloirock.ru)"
});
var id$1 = 0;
var px = Math.random();
var _uid = function(key) {
  return "Symbol(".concat(key === void 0 ? "" : key, ")_", (++id$1 + px).toString(36));
};
var shared$1 = _shared.exports("keys");
var uid$2 = _uid;
var _sharedKey = function(key) {
  return shared$1[key] || (shared$1[key] = uid$2(key));
};
var has$5 = _has;
var toIObject$4 = _toIobject;
var arrayIndexOf = _arrayIncludes(false);
var IE_PROTO$2 = _sharedKey("IE_PROTO");
var _objectKeysInternal = function(object3, names) {
  var O = toIObject$4(object3);
  var i = 0;
  var result = [];
  var key;
  for (key in O)
    if (key != IE_PROTO$2)
      has$5(O, key) && result.push(key);
  while (names.length > i)
    if (has$5(O, key = names[i++])) {
      ~arrayIndexOf(result, key) || result.push(key);
    }
  return result;
};
var _enumBugKeys = "constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",");
var $keys$2 = _objectKeysInternal;
var enumBugKeys$1 = _enumBugKeys;
var _objectKeys = Object.keys || function keys(O) {
  return $keys$2(O, enumBugKeys$1);
};
var _objectGops = {};
_objectGops.f = Object.getOwnPropertySymbols;
var _objectPie = {};
_objectPie.f = {}.propertyIsEnumerable;
var defined$1 = _defined;
var _toObject = function(it) {
  return Object(defined$1(it));
};
var DESCRIPTORS$1 = _descriptors;
var getKeys$2 = _objectKeys;
var gOPS$1 = _objectGops;
var pIE$2 = _objectPie;
var toObject$2 = _toObject;
var IObject = _iobject;
var $assign = Object.assign;
var _objectAssign = !$assign || _fails(function() {
  var A = {};
  var B = {};
  var S = Symbol();
  var K = "abcdefghijklmnopqrst";
  A[S] = 7;
  K.split("").forEach(function(k) {
    B[k] = k;
  });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join("") != K;
}) ? function assign(target2, source) {
  var T = toObject$2(target2);
  var aLen = arguments.length;
  var index2 = 1;
  var getSymbols2 = gOPS$1.f;
  var isEnum2 = pIE$2.f;
  while (aLen > index2) {
    var S = IObject(arguments[index2++]);
    var keys3 = getSymbols2 ? getKeys$2(S).concat(getSymbols2(S)) : getKeys$2(S);
    var length = keys3.length;
    var j = 0;
    var key;
    while (length > j) {
      key = keys3[j++];
      if (!DESCRIPTORS$1 || isEnum2.call(S, key))
        T[key] = S[key];
    }
  }
  return T;
} : $assign;
var $export$2 = _export;
$export$2($export$2.S + $export$2.F, "Object", { assign: _objectAssign });
var assign2 = _core.exports.Object.assign;
(function(module2) {
  module2.exports = { "default": assign2, __esModule: true };
})(assign$1);
var _assign = assign$1.exports;
var _assign2 = _interopRequireDefault$1(_assign);
function _interopRequireDefault$1(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var _default$1 = _assign2.default || function(target2) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];
    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target2[key] = source[key];
      }
    }
  }
  return target2;
};
var iterator$1 = { exports: {} };
var toInteger = _toInteger;
var defined = _defined;
var _stringAt = function(TO_STRING) {
  return function(that, pos) {
    var s = String(defined(that));
    var i = toInteger(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l)
      return TO_STRING ? "" : void 0;
    a = s.charCodeAt(i);
    return a < 55296 || a > 56319 || i + 1 === l || (b = s.charCodeAt(i + 1)) < 56320 || b > 57343 ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 55296 << 10) + (b - 56320) + 65536;
  };
};
var _redefine = _hide;
var _iterators = {};
var dP$1 = _objectDp;
var anObject$2 = _anObject;
var getKeys$1 = _objectKeys;
var _objectDps = _descriptors ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject$2(O);
  var keys3 = getKeys$1(Properties);
  var length = keys3.length;
  var i = 0;
  var P;
  while (length > i)
    dP$1.f(O, P = keys3[i++], Properties[P]);
  return O;
};
var document$1 = _global.exports.document;
var _html = document$1 && document$1.documentElement;
var anObject$1 = _anObject;
var dPs = _objectDps;
var enumBugKeys = _enumBugKeys;
var IE_PROTO$1 = _sharedKey("IE_PROTO");
var Empty = function() {
};
var PROTOTYPE$1 = "prototype";
var createDict = function() {
  var iframe = _domCreate("iframe");
  var i = enumBugKeys.length;
  var lt = "<";
  var gt = ">";
  var iframeDocument;
  iframe.style.display = "none";
  _html.appendChild(iframe);
  iframe.src = "javascript:";
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + "script" + gt + "document.F=Object" + lt + "/script" + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (i--)
    delete createDict[PROTOTYPE$1][enumBugKeys[i]];
  return createDict();
};
var _objectCreate = Object.create || function create2(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE$1] = anObject$1(O);
    result = new Empty();
    Empty[PROTOTYPE$1] = null;
    result[IE_PROTO$1] = O;
  } else
    result = createDict();
  return Properties === void 0 ? result : dPs(result, Properties);
};
var _wks = { exports: {} };
var store = _shared.exports("wks");
var uid$1 = _uid;
var Symbol$3 = _global.exports.Symbol;
var USE_SYMBOL = typeof Symbol$3 == "function";
var $exports = _wks.exports = function(name) {
  return store[name] || (store[name] = USE_SYMBOL && Symbol$3[name] || (USE_SYMBOL ? Symbol$3 : uid$1)("Symbol." + name));
};
$exports.store = store;
var def = _objectDp.f;
var has$4 = _has;
var TAG = _wks.exports("toStringTag");
var _setToStringTag = function(it, tag2, stat) {
  if (it && !has$4(it = stat ? it : it.prototype, TAG))
    def(it, TAG, { configurable: true, value: tag2 });
};
var create3 = _objectCreate;
var descriptor = _propertyDesc;
var setToStringTag$2 = _setToStringTag;
var IteratorPrototype = {};
_hide(IteratorPrototype, _wks.exports("iterator"), function() {
  return this;
});
var _iterCreate = function(Constructor, NAME, next) {
  Constructor.prototype = create3(IteratorPrototype, { next: descriptor(1, next) });
  setToStringTag$2(Constructor, NAME + " Iterator");
};
var has$3 = _has;
var toObject$1 = _toObject;
var IE_PROTO = _sharedKey("IE_PROTO");
var ObjectProto$1 = Object.prototype;
var _objectGpo = Object.getPrototypeOf || function(O) {
  O = toObject$1(O);
  if (has$3(O, IE_PROTO))
    return O[IE_PROTO];
  if (typeof O.constructor == "function" && O instanceof O.constructor) {
    return O.constructor.prototype;
  }
  return O instanceof Object ? ObjectProto$1 : null;
};
var $export$1 = _export;
var redefine$1 = _redefine;
var hide$1 = _hide;
var Iterators$2 = _iterators;
var $iterCreate = _iterCreate;
var setToStringTag$1 = _setToStringTag;
var getPrototypeOf = _objectGpo;
var ITERATOR = _wks.exports("iterator");
var BUGGY = !([].keys && "next" in [].keys());
var FF_ITERATOR = "@@iterator";
var KEYS = "keys";
var VALUES = "values";
var returnThis = function() {
  return this;
};
var _iterDefine = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);
  var getMethod = function(kind) {
    if (!BUGGY && kind in proto)
      return proto[kind];
    switch (kind) {
      case KEYS:
        return function keys3() {
          return new Constructor(this, kind);
        };
      case VALUES:
        return function values2() {
          return new Constructor(this, kind);
        };
    }
    return function entries2() {
      return new Constructor(this, kind);
    };
  };
  var TAG2 = NAME + " Iterator";
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod("entries") : void 0;
  var $anyNative = NAME == "Array" ? proto.entries || $native : $native;
  var methods2, key, IteratorPrototype2;
  if ($anyNative) {
    IteratorPrototype2 = getPrototypeOf($anyNative.call(new Base()));
    if (IteratorPrototype2 !== Object.prototype && IteratorPrototype2.next) {
      setToStringTag$1(IteratorPrototype2, TAG2, true);
    }
  }
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values2() {
      return $native.call(this);
    };
  }
  if (FORCED && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    hide$1(proto, ITERATOR, $default);
  }
  Iterators$2[NAME] = $default;
  Iterators$2[TAG2] = returnThis;
  if (DEFAULT) {
    methods2 = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED)
      for (key in methods2) {
        if (!(key in proto))
          redefine$1(proto, key, methods2[key]);
      }
    else
      $export$1($export$1.P + $export$1.F * (BUGGY || VALUES_BUG), NAME, methods2);
  }
  return methods2;
};
var $at = _stringAt(true);
_iterDefine(String, "String", function(iterated) {
  this._t = String(iterated);
  this._i = 0;
}, function() {
  var O = this._t;
  var index2 = this._i;
  var point;
  if (index2 >= O.length)
    return { value: void 0, done: true };
  point = $at(O, index2);
  this._i += point.length;
  return { value: point, done: false };
});
var _iterStep = function(done, value6) {
  return { value: value6, done: !!done };
};
var step = _iterStep;
var Iterators$1 = _iterators;
var toIObject$3 = _toIobject;
_iterDefine(Array, "Array", function(iterated, kind) {
  this._t = toIObject$3(iterated);
  this._i = 0;
  this._k = kind;
}, function() {
  var O = this._t;
  var kind = this._k;
  var index2 = this._i++;
  if (!O || index2 >= O.length) {
    this._t = void 0;
    return step(1);
  }
  if (kind == "keys")
    return step(0, index2);
  if (kind == "values")
    return step(0, O[index2]);
  return step(0, [index2, O[index2]]);
}, "values");
Iterators$1.Arguments = Iterators$1.Array;
var global$2 = _global.exports;
var hide = _hide;
var Iterators = _iterators;
var TO_STRING_TAG = _wks.exports("toStringTag");
var DOMIterables = "CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList".split(",");
for (var i = 0; i < DOMIterables.length; i++) {
  var NAME = DOMIterables[i];
  var Collection = global$2[NAME];
  var proto = Collection && Collection.prototype;
  if (proto && !proto[TO_STRING_TAG])
    hide(proto, TO_STRING_TAG, NAME);
  Iterators[NAME] = Iterators.Array;
}
var _wksExt = {};
_wksExt.f = _wks.exports;
var iterator = _wksExt.f("iterator");
(function(module2) {
  module2.exports = { "default": iterator, __esModule: true };
})(iterator$1);
var symbol$1 = { exports: {} };
var _meta = { exports: {} };
var META$1 = _uid("meta");
var isObject$2 = _isObject;
var has$2 = _has;
var setDesc = _objectDp.f;
var id = 0;
var isExtensible = Object.isExtensible || function() {
  return true;
};
var FREEZE = !_fails(function() {
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function(it) {
  setDesc(it, META$1, { value: {
    i: "O" + ++id,
    w: {}
  } });
};
var fastKey = function(it, create5) {
  if (!isObject$2(it))
    return typeof it == "symbol" ? it : (typeof it == "string" ? "S" : "P") + it;
  if (!has$2(it, META$1)) {
    if (!isExtensible(it))
      return "F";
    if (!create5)
      return "E";
    setMeta(it);
  }
  return it[META$1].i;
};
var getWeak = function(it, create5) {
  if (!has$2(it, META$1)) {
    if (!isExtensible(it))
      return true;
    if (!create5)
      return false;
    setMeta(it);
  }
  return it[META$1].w;
};
var onFreeze = function(it) {
  if (FREEZE && meta.NEED && isExtensible(it) && !has$2(it, META$1))
    setMeta(it);
  return it;
};
var meta = _meta.exports = {
  KEY: META$1,
  NEED: false,
  fastKey,
  getWeak,
  onFreeze
};
var core = _core.exports;
var wksExt$1 = _wksExt;
var defineProperty$2 = _objectDp.f;
var _wksDefine = function(name) {
  var $Symbol2 = core.Symbol || (core.Symbol = {});
  if (name.charAt(0) != "_" && !(name in $Symbol2))
    defineProperty$2($Symbol2, name, { value: wksExt$1.f(name) });
};
var getKeys = _objectKeys;
var gOPS = _objectGops;
var pIE$1 = _objectPie;
var _enumKeys = function(it) {
  var result = getKeys(it);
  var getSymbols2 = gOPS.f;
  if (getSymbols2) {
    var symbols = getSymbols2(it);
    var isEnum2 = pIE$1.f;
    var i = 0;
    var key;
    while (symbols.length > i)
      if (isEnum2.call(it, key = symbols[i++]))
        result.push(key);
  }
  return result;
};
var cof = _cof;
var _isArray = Array.isArray || function isArray(arg) {
  return cof(arg) == "Array";
};
var _objectGopnExt = {};
var _objectGopn = {};
var $keys$1 = _objectKeysInternal;
var hiddenKeys = _enumBugKeys.concat("length", "prototype");
_objectGopn.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return $keys$1(O, hiddenKeys);
};
var toIObject$2 = _toIobject;
var gOPN$1 = _objectGopn.f;
var toString = {}.toString;
var windowNames = typeof window == "object" && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
var getWindowNames = function(it) {
  try {
    return gOPN$1(it);
  } catch (e) {
    return windowNames.slice();
  }
};
_objectGopnExt.f = function getOwnPropertyNames2(it) {
  return windowNames && toString.call(it) == "[object Window]" ? getWindowNames(it) : gOPN$1(toIObject$2(it));
};
var _objectGopd = {};
var pIE = _objectPie;
var createDesc$1 = _propertyDesc;
var toIObject$1 = _toIobject;
var toPrimitive$1 = _toPrimitive;
var has$1 = _has;
var IE8_DOM_DEFINE = _ie8DomDefine;
var gOPD$1 = Object.getOwnPropertyDescriptor;
_objectGopd.f = _descriptors ? gOPD$1 : function getOwnPropertyDescriptor(O, P) {
  O = toIObject$1(O);
  P = toPrimitive$1(P, true);
  if (IE8_DOM_DEFINE)
    try {
      return gOPD$1(O, P);
    } catch (e) {
    }
  if (has$1(O, P))
    return createDesc$1(!pIE.f.call(O, P), O[P]);
};
var global$1 = _global.exports;
var has = _has;
var DESCRIPTORS = _descriptors;
var $export = _export;
var redefine = _redefine;
var META = _meta.exports.KEY;
var $fails = _fails;
var shared = _shared.exports;
var setToStringTag = _setToStringTag;
var uid = _uid;
var wks = _wks.exports;
var wksExt = _wksExt;
var wksDefine = _wksDefine;
var enumKeys = _enumKeys;
var isArray$2 = _isArray;
var anObject = _anObject;
var isObject$1 = _isObject;
var toObject = _toObject;
var toIObject = _toIobject;
var toPrimitive = _toPrimitive;
var createDesc = _propertyDesc;
var _create = _objectCreate;
var gOPNExt = _objectGopnExt;
var $GOPD = _objectGopd;
var $GOPS = _objectGops;
var $DP = _objectDp;
var $keys = _objectKeys;
var gOPD = $GOPD.f;
var dP = $DP.f;
var gOPN = gOPNExt.f;
var $Symbol = global$1.Symbol;
var $JSON = global$1.JSON;
var _stringify = $JSON && $JSON.stringify;
var PROTOTYPE = "prototype";
var HIDDEN = wks("_hidden");
var TO_PRIMITIVE = wks("toPrimitive");
var isEnum = {}.propertyIsEnumerable;
var SymbolRegistry = shared("symbol-registry");
var AllSymbols = shared("symbols");
var OPSymbols = shared("op-symbols");
var ObjectProto = Object[PROTOTYPE];
var USE_NATIVE = typeof $Symbol == "function" && !!$GOPS.f;
var QObject = global$1.QObject;
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
var setSymbolDesc = DESCRIPTORS && $fails(function() {
  return _create(dP({}, "a", {
    get: function() {
      return dP(this, "a", { value: 7 }).a;
    }
  })).a != 7;
}) ? function(it, key, D) {
  var protoDesc = gOPD(ObjectProto, key);
  if (protoDesc)
    delete ObjectProto[key];
  dP(it, key, D);
  if (protoDesc && it !== ObjectProto)
    dP(ObjectProto, key, protoDesc);
} : dP;
var wrap = function(tag2) {
  var sym = AllSymbols[tag2] = _create($Symbol[PROTOTYPE]);
  sym._k = tag2;
  return sym;
};
var isSymbol$1 = USE_NATIVE && typeof $Symbol.iterator == "symbol" ? function(it) {
  return typeof it == "symbol";
} : function(it) {
  return it instanceof $Symbol;
};
var $defineProperty = function defineProperty2(it, key, D) {
  if (it === ObjectProto)
    $defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if (has(AllSymbols, key)) {
    if (!D.enumerable) {
      if (!has(it, HIDDEN))
        dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if (has(it, HIDDEN) && it[HIDDEN][key])
        it[HIDDEN][key] = false;
      D = _create(D, { enumerable: createDesc(0, false) });
    }
    return setSymbolDesc(it, key, D);
  }
  return dP(it, key, D);
};
var $defineProperties = function defineProperties2(it, P) {
  anObject(it);
  var keys3 = enumKeys(P = toIObject(P));
  var i = 0;
  var l = keys3.length;
  var key;
  while (l > i)
    $defineProperty(it, key = keys3[i++], P[key]);
  return it;
};
var $create = function create4(it, P) {
  return P === void 0 ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key) {
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))
    return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor2(it, key) {
  it = toIObject(it);
  key = toPrimitive(key, true);
  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))
    return;
  var D = gOPD(it, key);
  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))
    D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames3(it) {
  var names = gOPN(toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)
      result.push(key);
  }
  return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectProto;
  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))
      result.push(AllSymbols[key]);
  }
  return result;
};
if (!USE_NATIVE) {
  $Symbol = function Symbol2() {
    if (this instanceof $Symbol)
      throw TypeError("Symbol is not a constructor!");
    var tag2 = uid(arguments.length > 0 ? arguments[0] : void 0);
    var $set = function(value6) {
      if (this === ObjectProto)
        $set.call(OPSymbols, value6);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag2))
        this[HIDDEN][tag2] = false;
      setSymbolDesc(this, tag2, createDesc(1, value6));
    };
    if (DESCRIPTORS && setter)
      setSymbolDesc(ObjectProto, tag2, { configurable: true, set: $set });
    return wrap(tag2);
  };
  redefine($Symbol[PROTOTYPE], "toString", function toString2() {
    return this._k;
  });
  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f = $defineProperty;
  _objectGopn.f = gOPNExt.f = $getOwnPropertyNames;
  _objectPie.f = $propertyIsEnumerable;
  $GOPS.f = $getOwnPropertySymbols;
  if (DESCRIPTORS && !_library) {
    redefine(ObjectProto, "propertyIsEnumerable", $propertyIsEnumerable);
  }
  wksExt.f = function(name) {
    return wrap(wks(name));
  };
}
$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });
for (var es6Symbols = "hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","), j = 0; es6Symbols.length > j; )
  wks(es6Symbols[j++]);
for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k; )
  wksDefine(wellKnownSymbols[k++]);
$export($export.S + $export.F * !USE_NATIVE, "Symbol", {
  "for": function(key) {
    return has(SymbolRegistry, key += "") ? SymbolRegistry[key] : SymbolRegistry[key] = $Symbol(key);
  },
  keyFor: function keyFor(sym) {
    if (!isSymbol$1(sym))
      throw TypeError(sym + " is not a symbol!");
    for (var key in SymbolRegistry)
      if (SymbolRegistry[key] === sym)
        return key;
  },
  useSetter: function() {
    setter = true;
  },
  useSimple: function() {
    setter = false;
  }
});
$export($export.S + $export.F * !USE_NATIVE, "Object", {
  create: $create,
  defineProperty: $defineProperty,
  defineProperties: $defineProperties,
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  getOwnPropertyNames: $getOwnPropertyNames,
  getOwnPropertySymbols: $getOwnPropertySymbols
});
var FAILS_ON_PRIMITIVES = $fails(function() {
  $GOPS.f(1);
});
$export($export.S + $export.F * FAILS_ON_PRIMITIVES, "Object", {
  getOwnPropertySymbols: function getOwnPropertySymbols2(it) {
    return $GOPS.f(toObject(it));
  }
});
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function() {
  var S = $Symbol();
  return _stringify([S]) != "[null]" || _stringify({ a: S }) != "{}" || _stringify(Object(S)) != "{}";
})), "JSON", {
  stringify: function stringify(it) {
    var args = [it];
    var i = 1;
    var replacer, $replacer;
    while (arguments.length > i)
      args.push(arguments[i++]);
    $replacer = replacer = args[1];
    if (!isObject$1(replacer) && it === void 0 || isSymbol$1(it))
      return;
    if (!isArray$2(replacer))
      replacer = function(key, value6) {
        if (typeof $replacer == "function")
          value6 = $replacer.call(this, key, value6);
        if (!isSymbol$1(value6))
          return value6;
      };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});
$Symbol[PROTOTYPE][TO_PRIMITIVE] || _hide($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
setToStringTag($Symbol, "Symbol");
setToStringTag(Math, "Math", true);
setToStringTag(global$1.JSON, "JSON", true);
_wksDefine("asyncIterator");
_wksDefine("observable");
var symbol = _core.exports.Symbol;
(function(module2) {
  module2.exports = { "default": symbol, __esModule: true };
})(symbol$1);
var _iterator = iterator$1.exports;
var _iterator2 = _interopRequireDefault(_iterator);
var _symbol = symbol$1.exports;
var _symbol2 = _interopRequireDefault(_symbol);
var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function(obj) {
  return typeof obj;
} : function(obj) {
  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj;
};
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var _default115 = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function(obj) {
  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
} : function(obj) {
  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
};
var formatRegExp = /%[sdj%]/g;
function format() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  var i = 1;
  var f = args[0];
  var len = args.length;
  if (typeof f === "function") {
    return f.apply(null, args.slice(1));
  }
  if (typeof f === "string") {
    var str = String(f).replace(formatRegExp, function(x) {
      if (x === "%%") {
        return "%";
      }
      if (i >= len) {
        return x;
      }
      switch (x) {
        case "%s":
          return String(args[i++]);
        case "%d":
          return Number(args[i++]);
        case "%j":
          try {
            return JSON.stringify(args[i++]);
          } catch (_) {
            return "[Circular]";
          }
          break;
        default:
          return x;
      }
    });
    for (var arg = args[i]; i < len; arg = args[++i]) {
      str += " " + arg;
    }
    return str;
  }
  return f;
}
function isNativeStringType(type3) {
  return type3 === "string" || type3 === "url" || type3 === "hex" || type3 === "email" || type3 === "pattern";
}
function isEmptyValue(value6, type3) {
  if (value6 === void 0 || value6 === null) {
    return true;
  }
  if (type3 === "array" && Array.isArray(value6) && !value6.length) {
    return true;
  }
  if (isNativeStringType(type3) && typeof value6 === "string" && !value6) {
    return true;
  }
  return false;
}
function asyncParallelArray(arr, func, callback) {
  var results = [];
  var total = 0;
  var arrLength = arr.length;
  function count(errors) {
    results.push.apply(results, errors);
    total++;
    if (total === arrLength) {
      callback(results);
    }
  }
  arr.forEach(function(a) {
    func(a, count);
  });
}
function asyncSerialArray(arr, func, callback) {
  var index2 = 0;
  var arrLength = arr.length;
  function next(errors) {
    if (errors && errors.length) {
      callback(errors);
      return;
    }
    var original = index2;
    index2 = index2 + 1;
    if (original < arrLength) {
      func(arr[original], next);
    } else {
      callback([]);
    }
  }
  next([]);
}
function flattenObjArr(objArr) {
  var ret = [];
  Object.keys(objArr).forEach(function(k) {
    ret.push.apply(ret, objArr[k]);
  });
  return ret;
}
function asyncMap(objArr, option2, func, callback) {
  if (option2.first) {
    var flattenArr = flattenObjArr(objArr);
    return asyncSerialArray(flattenArr, func, callback);
  }
  var firstFields = option2.firstFields || [];
  if (firstFields === true) {
    firstFields = Object.keys(objArr);
  }
  var objArrKeys = Object.keys(objArr);
  var objArrLength = objArrKeys.length;
  var total = 0;
  var results = [];
  var next = function next2(errors) {
    results.push.apply(results, errors);
    total++;
    if (total === objArrLength) {
      callback(results);
    }
  };
  objArrKeys.forEach(function(key) {
    var arr = objArr[key];
    if (firstFields.indexOf(key) !== -1) {
      asyncSerialArray(arr, func, next);
    } else {
      asyncParallelArray(arr, func, next);
    }
  });
}
function complementError(rule) {
  return function(oe) {
    if (oe && oe.message) {
      oe.field = oe.field || rule.fullField;
      return oe;
    }
    return {
      message: oe,
      field: oe.field || rule.fullField
    };
  };
}
function deepMerge(target2, source) {
  if (source) {
    for (var s in source) {
      if (source.hasOwnProperty(s)) {
        var value6 = source[s];
        if ((typeof value6 === "undefined" ? "undefined" : _default115(value6)) === "object" && _default115(target2[s]) === "object") {
          target2[s] = _default$1({}, target2[s], value6);
        } else {
          target2[s] = value6;
        }
      }
    }
  }
  return target2;
}
function required$1(rule, value6, source, errors, options2, type3) {
  if (rule.required && (!source.hasOwnProperty(rule.field) || isEmptyValue(value6, type3 || rule.type))) {
    errors.push(format(options2.messages.required, rule.fullField));
  }
}
function whitespace(rule, value6, source, errors, options2) {
  if (/^\s+$/.test(value6) || value6 === "") {
    errors.push(format(options2.messages.whitespace, rule.fullField));
  }
}
var pattern$2 = {
  email: /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,
  url: new RegExp("^(?!mailto:)(?:(?:http|https|ftp)://|//)(?:\\S+(?::\\S*)?@)?(?:(?:(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[0-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]+-?)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]+-?)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))|localhost)(?::\\d{2,5})?(?:(/|\\?|#)[^\\s]*)?$", "i"),
  hex: /^#?([a-f0-9]{6}|[a-f0-9]{3})$/i
};
var types = {
  integer: function integer(value6) {
    return types.number(value6) && parseInt(value6, 10) === value6;
  },
  float: function float(value6) {
    return types.number(value6) && !types.integer(value6);
  },
  array: function array(value6) {
    return Array.isArray(value6);
  },
  regexp: function regexp(value6) {
    if (value6 instanceof RegExp) {
      return true;
    }
    try {
      return !!new RegExp(value6);
    } catch (e) {
      return false;
    }
  },
  date: function date(value6) {
    return typeof value6.getTime === "function" && typeof value6.getMonth === "function" && typeof value6.getYear === "function";
  },
  number: function number(value6) {
    if (isNaN(value6)) {
      return false;
    }
    return typeof value6 === "number";
  },
  object: function object(value6) {
    return (typeof value6 === "undefined" ? "undefined" : _default115(value6)) === "object" && !types.array(value6);
  },
  method: function method(value6) {
    return typeof value6 === "function";
  },
  email: function email(value6) {
    return typeof value6 === "string" && !!value6.match(pattern$2.email) && value6.length < 255;
  },
  url: function url(value6) {
    return typeof value6 === "string" && !!value6.match(pattern$2.url);
  },
  hex: function hex(value6) {
    return typeof value6 === "string" && !!value6.match(pattern$2.hex);
  }
};
function type$1(rule, value6, source, errors, options2) {
  if (rule.required && value6 === void 0) {
    required$1(rule, value6, source, errors, options2);
    return;
  }
  var custom = ["integer", "float", "array", "regexp", "object", "method", "email", "number", "date", "url", "hex"];
  var ruleType = rule.type;
  if (custom.indexOf(ruleType) > -1) {
    if (!types[ruleType](value6)) {
      errors.push(format(options2.messages.types[ruleType], rule.fullField, rule.type));
    }
  } else if (ruleType && (typeof value6 === "undefined" ? "undefined" : _default115(value6)) !== rule.type) {
    errors.push(format(options2.messages.types[ruleType], rule.fullField, rule.type));
  }
}
function range2(rule, value6, source, errors, options2) {
  var len = typeof rule.len === "number";
  var min2 = typeof rule.min === "number";
  var max2 = typeof rule.max === "number";
  var spRegexp = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
  var val = value6;
  var key = null;
  var num = typeof value6 === "number";
  var str = typeof value6 === "string";
  var arr = Array.isArray(value6);
  if (num) {
    key = "number";
  } else if (str) {
    key = "string";
  } else if (arr) {
    key = "array";
  }
  if (!key) {
    return false;
  }
  if (arr) {
    val = value6.length;
  }
  if (str) {
    val = value6.replace(spRegexp, "_").length;
  }
  if (len) {
    if (val !== rule.len) {
      errors.push(format(options2.messages[key].len, rule.fullField, rule.len));
    }
  } else if (min2 && !max2 && val < rule.min) {
    errors.push(format(options2.messages[key].min, rule.fullField, rule.min));
  } else if (max2 && !min2 && val > rule.max) {
    errors.push(format(options2.messages[key].max, rule.fullField, rule.max));
  } else if (min2 && max2 && (val < rule.min || val > rule.max)) {
    errors.push(format(options2.messages[key].range, rule.fullField, rule.min, rule.max));
  }
}
var ENUM$1 = "enum";
function enumerable$1(rule, value6, source, errors, options2) {
  rule[ENUM$1] = Array.isArray(rule[ENUM$1]) ? rule[ENUM$1] : [];
  if (rule[ENUM$1].indexOf(value6) === -1) {
    errors.push(format(options2.messages[ENUM$1], rule.fullField, rule[ENUM$1].join(", ")));
  }
}
function pattern$1(rule, value6, source, errors, options2) {
  if (rule.pattern) {
    if (rule.pattern instanceof RegExp) {
      rule.pattern.lastIndex = 0;
      if (!rule.pattern.test(value6)) {
        errors.push(format(options2.messages.pattern.mismatch, rule.fullField, value6, rule.pattern));
      }
    } else if (typeof rule.pattern === "string") {
      var _pattern = new RegExp(rule.pattern);
      if (!_pattern.test(value6)) {
        errors.push(format(options2.messages.pattern.mismatch, rule.fullField, value6, rule.pattern));
      }
    }
  }
}
var rules = {
  required: required$1,
  whitespace,
  type: type$1,
  range: range2,
  "enum": enumerable$1,
  pattern: pattern$1
};
function string(rule, value6, callback, source, options2) {
  var errors = [];
  var validate3 = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate3) {
    if (isEmptyValue(value6, "string") && !rule.required) {
      return callback();
    }
    rules.required(rule, value6, source, errors, options2, "string");
    if (!isEmptyValue(value6, "string")) {
      rules.type(rule, value6, source, errors, options2);
      rules.range(rule, value6, source, errors, options2);
      rules.pattern(rule, value6, source, errors, options2);
      if (rule.whitespace === true) {
        rules.whitespace(rule, value6, source, errors, options2);
      }
    }
  }
  callback(errors);
}
function method2(rule, value6, callback, source, options2) {
  var errors = [];
  var validate3 = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate3) {
    if (isEmptyValue(value6) && !rule.required) {
      return callback();
    }
    rules.required(rule, value6, source, errors, options2);
    if (value6 !== void 0) {
      rules.type(rule, value6, source, errors, options2);
    }
  }
  callback(errors);
}
function number2(rule, value6, callback, source, options2) {
  var errors = [];
  var validate3 = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate3) {
    if (isEmptyValue(value6) && !rule.required) {
      return callback();
    }
    rules.required(rule, value6, source, errors, options2);
    if (value6 !== void 0) {
      rules.type(rule, value6, source, errors, options2);
      rules.range(rule, value6, source, errors, options2);
    }
  }
  callback(errors);
}
function boolean(rule, value6, callback, source, options2) {
  var errors = [];
  var validate3 = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate3) {
    if (isEmptyValue(value6) && !rule.required) {
      return callback();
    }
    rules.required(rule, value6, source, errors, options2);
    if (value6 !== void 0) {
      rules.type(rule, value6, source, errors, options2);
    }
  }
  callback(errors);
}
function regexp2(rule, value6, callback, source, options2) {
  var errors = [];
  var validate3 = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate3) {
    if (isEmptyValue(value6) && !rule.required) {
      return callback();
    }
    rules.required(rule, value6, source, errors, options2);
    if (!isEmptyValue(value6)) {
      rules.type(rule, value6, source, errors, options2);
    }
  }
  callback(errors);
}
function integer2(rule, value6, callback, source, options2) {
  var errors = [];
  var validate3 = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate3) {
    if (isEmptyValue(value6) && !rule.required) {
      return callback();
    }
    rules.required(rule, value6, source, errors, options2);
    if (value6 !== void 0) {
      rules.type(rule, value6, source, errors, options2);
      rules.range(rule, value6, source, errors, options2);
    }
  }
  callback(errors);
}
function floatFn(rule, value6, callback, source, options2) {
  var errors = [];
  var validate3 = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate3) {
    if (isEmptyValue(value6) && !rule.required) {
      return callback();
    }
    rules.required(rule, value6, source, errors, options2);
    if (value6 !== void 0) {
      rules.type(rule, value6, source, errors, options2);
      rules.range(rule, value6, source, errors, options2);
    }
  }
  callback(errors);
}
function array2(rule, value6, callback, source, options2) {
  var errors = [];
  var validate3 = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate3) {
    if (isEmptyValue(value6, "array") && !rule.required) {
      return callback();
    }
    rules.required(rule, value6, source, errors, options2, "array");
    if (!isEmptyValue(value6, "array")) {
      rules.type(rule, value6, source, errors, options2);
      rules.range(rule, value6, source, errors, options2);
    }
  }
  callback(errors);
}
function object2(rule, value6, callback, source, options2) {
  var errors = [];
  var validate3 = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate3) {
    if (isEmptyValue(value6) && !rule.required) {
      return callback();
    }
    rules.required(rule, value6, source, errors, options2);
    if (value6 !== void 0) {
      rules.type(rule, value6, source, errors, options2);
    }
  }
  callback(errors);
}
var ENUM = "enum";
function enumerable(rule, value6, callback, source, options2) {
  var errors = [];
  var validate3 = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate3) {
    if (isEmptyValue(value6) && !rule.required) {
      return callback();
    }
    rules.required(rule, value6, source, errors, options2);
    if (value6) {
      rules[ENUM](rule, value6, source, errors, options2);
    }
  }
  callback(errors);
}
function pattern(rule, value6, callback, source, options2) {
  var errors = [];
  var validate3 = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate3) {
    if (isEmptyValue(value6, "string") && !rule.required) {
      return callback();
    }
    rules.required(rule, value6, source, errors, options2);
    if (!isEmptyValue(value6, "string")) {
      rules.pattern(rule, value6, source, errors, options2);
    }
  }
  callback(errors);
}
function date2(rule, value6, callback, source, options2) {
  var errors = [];
  var validate3 = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate3) {
    if (isEmptyValue(value6) && !rule.required) {
      return callback();
    }
    rules.required(rule, value6, source, errors, options2);
    if (!isEmptyValue(value6)) {
      var dateObject = void 0;
      if (typeof value6 === "number") {
        dateObject = new Date(value6);
      } else {
        dateObject = value6;
      }
      rules.type(rule, dateObject, source, errors, options2);
      if (dateObject) {
        rules.range(rule, dateObject.getTime(), source, errors, options2);
      }
    }
  }
  callback(errors);
}
function required(rule, value6, callback, source, options2) {
  var errors = [];
  var type3 = Array.isArray(value6) ? "array" : typeof value6 === "undefined" ? "undefined" : _default115(value6);
  rules.required(rule, value6, source, errors, options2, type3);
  callback(errors);
}
function type2(rule, value6, callback, source, options2) {
  var ruleType = rule.type;
  var errors = [];
  var validate3 = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate3) {
    if (isEmptyValue(value6, ruleType) && !rule.required) {
      return callback();
    }
    rules.required(rule, value6, source, errors, options2, ruleType);
    if (!isEmptyValue(value6, ruleType)) {
      rules.type(rule, value6, source, errors, options2);
    }
  }
  callback(errors);
}
var validators = {
  string,
  method: method2,
  number: number2,
  boolean,
  regexp: regexp2,
  integer: integer2,
  float: floatFn,
  array: array2,
  object: object2,
  "enum": enumerable,
  pattern,
  date: date2,
  url: type2,
  hex: type2,
  email: type2,
  required
};
function newMessages() {
  return {
    "default": "Validation error on field %s",
    required: "%s is required",
    "enum": "%s must be one of %s",
    whitespace: "%s cannot be empty",
    date: {
      format: "%s date %s is invalid for format %s",
      parse: "%s date could not be parsed, %s is invalid ",
      invalid: "%s date %s is invalid"
    },
    types: {
      string: "%s is not a %s",
      method: "%s is not a %s (function)",
      array: "%s is not an %s",
      object: "%s is not an %s",
      number: "%s is not a %s",
      date: "%s is not a %s",
      boolean: "%s is not a %s",
      integer: "%s is not an %s",
      float: "%s is not a %s",
      regexp: "%s is not a valid %s",
      email: "%s is not a valid %s",
      url: "%s is not a valid %s",
      hex: "%s is not a valid %s"
    },
    string: {
      len: "%s must be exactly %s characters",
      min: "%s must be at least %s characters",
      max: "%s cannot be longer than %s characters",
      range: "%s must be between %s and %s characters"
    },
    number: {
      len: "%s must equal %s",
      min: "%s cannot be less than %s",
      max: "%s cannot be greater than %s",
      range: "%s must be between %s and %s"
    },
    array: {
      len: "%s must be exactly %s in length",
      min: "%s cannot be less than %s in length",
      max: "%s cannot be greater than %s in length",
      range: "%s must be between %s and %s in length"
    },
    pattern: {
      mismatch: "%s value %s does not match pattern %s"
    },
    clone: function clone2() {
      var cloned = JSON.parse(JSON.stringify(this));
      cloned.clone = this.clone;
      return cloned;
    }
  };
}
var messages = newMessages();
function Schema(descriptor2) {
  this.rules = null;
  this._messages = messages;
  this.define(descriptor2);
}
Schema.prototype = {
  messages: function messages2(_messages) {
    if (_messages) {
      this._messages = deepMerge(newMessages(), _messages);
    }
    return this._messages;
  },
  define: function define(rules2) {
    if (!rules2) {
      throw new Error("Cannot configure a schema with no rules");
    }
    if ((typeof rules2 === "undefined" ? "undefined" : _default115(rules2)) !== "object" || Array.isArray(rules2)) {
      throw new Error("Rules must be an object");
    }
    this.rules = {};
    var z = void 0;
    var item = void 0;
    for (z in rules2) {
      if (rules2.hasOwnProperty(z)) {
        item = rules2[z];
        this.rules[z] = Array.isArray(item) ? item : [item];
      }
    }
  },
  validate: function validate2(source_) {
    var _this = this;
    var o = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var oc = arguments[2];
    var source = source_;
    var options2 = o;
    var callback = oc;
    if (typeof options2 === "function") {
      callback = options2;
      options2 = {};
    }
    if (!this.rules || Object.keys(this.rules).length === 0) {
      if (callback) {
        callback();
      }
      return;
    }
    function complete(results) {
      var i = void 0;
      var field = void 0;
      var errors = [];
      var fields = {};
      function add4(e) {
        if (Array.isArray(e)) {
          errors = errors.concat.apply(errors, e);
        } else {
          errors.push(e);
        }
      }
      for (i = 0; i < results.length; i++) {
        add4(results[i]);
      }
      if (!errors.length) {
        errors = null;
        fields = null;
      } else {
        for (i = 0; i < errors.length; i++) {
          field = errors[i].field;
          fields[field] = fields[field] || [];
          fields[field].push(errors[i]);
        }
      }
      callback(errors, fields);
    }
    if (options2.messages) {
      var messages$1 = this.messages();
      if (messages$1 === messages) {
        messages$1 = newMessages();
      }
      deepMerge(messages$1, options2.messages);
      options2.messages = messages$1;
    } else {
      options2.messages = this.messages();
    }
    var arr = void 0;
    var value6 = void 0;
    var series = {};
    var keys3 = options2.keys || Object.keys(this.rules);
    keys3.forEach(function(z) {
      arr = _this.rules[z];
      value6 = source[z];
      arr.forEach(function(r) {
        var rule = r;
        if (typeof rule.transform === "function") {
          if (source === source_) {
            source = _default$1({}, source);
          }
          value6 = source[z] = rule.transform(value6);
        }
        if (typeof rule === "function") {
          rule = {
            validator: rule
          };
        } else {
          rule = _default$1({}, rule);
        }
        rule.validator = _this.getValidationMethod(rule);
        rule.field = z;
        rule.fullField = rule.fullField || z;
        rule.type = _this.getType(rule);
        if (!rule.validator) {
          return;
        }
        series[z] = series[z] || [];
        series[z].push({
          rule,
          value: value6,
          source,
          field: z
        });
      });
    });
    var errorFields = {};
    asyncMap(series, options2, function(data25, doIt) {
      var rule = data25.rule;
      var deep = (rule.type === "object" || rule.type === "array") && (_default115(rule.fields) === "object" || _default115(rule.defaultField) === "object");
      deep = deep && (rule.required || !rule.required && data25.value);
      rule.field = data25.field;
      function addFullfield(key, schema) {
        return _default$1({}, schema, {
          fullField: rule.fullField + "." + key
        });
      }
      function cb() {
        var e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
        var errors = e;
        if (!Array.isArray(errors)) {
          errors = [errors];
        }
        if (errors.length)
          ;
        if (errors.length && rule.message) {
          errors = [].concat(rule.message);
        }
        errors = errors.map(complementError(rule));
        if (options2.first && errors.length) {
          errorFields[rule.field] = 1;
          return doIt(errors);
        }
        if (!deep) {
          doIt(errors);
        } else {
          if (rule.required && !data25.value) {
            if (rule.message) {
              errors = [].concat(rule.message).map(complementError(rule));
            } else if (options2.error) {
              errors = [options2.error(rule, format(options2.messages.required, rule.field))];
            } else {
              errors = [];
            }
            return doIt(errors);
          }
          var fieldsSchema = {};
          if (rule.defaultField) {
            for (var k in data25.value) {
              if (data25.value.hasOwnProperty(k)) {
                fieldsSchema[k] = rule.defaultField;
              }
            }
          }
          fieldsSchema = _default$1({}, fieldsSchema, data25.rule.fields);
          for (var f in fieldsSchema) {
            if (fieldsSchema.hasOwnProperty(f)) {
              var fieldSchema = Array.isArray(fieldsSchema[f]) ? fieldsSchema[f] : [fieldsSchema[f]];
              fieldsSchema[f] = fieldSchema.map(addFullfield.bind(null, f));
            }
          }
          var schema = new Schema(fieldsSchema);
          schema.messages(options2.messages);
          if (data25.rule.options) {
            data25.rule.options.messages = options2.messages;
            data25.rule.options.error = options2.error;
          }
          schema.validate(data25.value, data25.rule.options || options2, function(errs) {
            doIt(errs && errs.length ? errors.concat(errs) : errs);
          });
        }
      }
      var res = rule.validator(rule, data25.value, cb, data25.source, options2);
      if (res && res.then) {
        res.then(function() {
          return cb();
        }, function(e) {
          return cb(e);
        });
      }
    }, function(results) {
      complete(results);
    });
  },
  getType: function getType2(rule) {
    if (rule.type === void 0 && rule.pattern instanceof RegExp) {
      rule.type = "pattern";
    }
    if (typeof rule.validator !== "function" && rule.type && !validators.hasOwnProperty(rule.type)) {
      throw new Error(format("Unknown rule type %s", rule.type));
    }
    return rule.type || "string";
  },
  getValidationMethod: function getValidationMethod(rule) {
    if (typeof rule.validator === "function") {
      return rule.validator;
    }
    var keys3 = Object.keys(rule);
    var messageIndex = keys3.indexOf("message");
    if (messageIndex !== -1) {
      keys3.splice(messageIndex, 1);
    }
    if (keys3.length === 1 && keys3[0] === "required") {
      return validators.required;
    }
    return validators[this.getType(rule)] || false;
  }
};
Schema.register = function register2(type3, validator2) {
  if (typeof validator2 !== "function") {
    throw new Error("Cannot register a validator by type, validator is not a function");
  }
  validators[type3] = validator2;
};
Schema.messages = messages;
var es = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Schema
});
var require$$40 = /* @__PURE__ */ getAugmentedNamespace(es);
var inputNumber = { exports: {} };
(function(module2) {
  module2.exports = function(modules2) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
      if (installedModules[moduleId]) {
        return installedModules[moduleId].exports;
      }
      var module3 = installedModules[moduleId] = {
        i: moduleId,
        l: false,
        exports: {}
      };
      modules2[moduleId].call(module3.exports, module3, module3.exports, __webpack_require__);
      module3.l = true;
      return module3.exports;
    }
    __webpack_require__.m = modules2;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports2, name, getter) {
      if (!__webpack_require__.o(exports2, name)) {
        Object.defineProperty(exports2, name, { enumerable: true, get: getter });
      }
    };
    __webpack_require__.r = function(exports2) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(exports2, Symbol.toStringTag, { value: "Module" });
      }
      Object.defineProperty(exports2, "__esModule", { value: true });
    };
    __webpack_require__.t = function(value6, mode) {
      if (mode & 1)
        value6 = __webpack_require__(value6);
      if (mode & 8)
        return value6;
      if (mode & 4 && typeof value6 === "object" && value6 && value6.__esModule)
        return value6;
      var ns = /* @__PURE__ */ Object.create(null);
      __webpack_require__.r(ns);
      Object.defineProperty(ns, "default", { enumerable: true, value: value6 });
      if (mode & 2 && typeof value6 != "string")
        for (var key in value6)
          __webpack_require__.d(ns, key, function(key2) {
            return value6[key2];
          }.bind(null, key));
      return ns;
    };
    __webpack_require__.n = function(module3) {
      var getter = module3 && module3.__esModule ? function getDefault() {
        return module3["default"];
      } : function getModuleExports() {
        return module3;
      };
      __webpack_require__.d(getter, "a", getter);
      return getter;
    };
    __webpack_require__.o = function(object3, property2) {
      return Object.prototype.hasOwnProperty.call(object3, property2);
    };
    __webpack_require__.p = "/dist/";
    return __webpack_require__(__webpack_require__.s = 104);
  }({
    0: function(module3, __webpack_exports__, __webpack_require__) {
      __webpack_require__.d(__webpack_exports__, "a", function() {
        return normalizeComponent;
      });
      function normalizeComponent(scriptExports, render37, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
        var options2 = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
        if (render37) {
          options2.render = render37;
          options2.staticRenderFns = staticRenderFns;
          options2._compiled = true;
        }
        if (functionalTemplate) {
          options2.functional = true;
        }
        if (scopeId) {
          options2._scopeId = "data-v-" + scopeId;
        }
        var hook;
        if (moduleIdentifier) {
          hook = function(context) {
            context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
            if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
              context = __VUE_SSR_CONTEXT__;
            }
            if (injectStyles) {
              injectStyles.call(this, context);
            }
            if (context && context._registeredComponents) {
              context._registeredComponents.add(moduleIdentifier);
            }
          };
          options2._ssrRegister = hook;
        } else if (injectStyles) {
          hook = shadowMode ? function() {
            injectStyles.call(this, this.$root.$options.shadowRoot);
          } : injectStyles;
        }
        if (hook) {
          if (options2.functional) {
            options2._injectStyles = hook;
            var originalRender = options2.render;
            options2.render = function renderWithStyleInjection(h, context) {
              hook.call(context);
              return originalRender(h, context);
            };
          } else {
            var existing = options2.beforeCreate;
            options2.beforeCreate = existing ? [].concat(existing, hook) : [hook];
          }
        }
        return {
          exports: scriptExports,
          options: options2
        };
      }
    },
    10: function(module3, exports2) {
      module3.exports = input.exports;
    },
    104: function(module3, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      var render37 = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", {
          class: [
            "el-input-number",
            _vm.inputNumberSize ? "el-input-number--" + _vm.inputNumberSize : "",
            { "is-disabled": _vm.inputNumberDisabled },
            { "is-without-controls": !_vm.controls },
            { "is-controls-right": _vm.controlsAtRight }
          ],
          on: {
            dragstart: function($event) {
              $event.preventDefault();
            }
          }
        }, [
          _vm.controls ? _c("span", {
            directives: [
              {
                name: "repeat-click",
                rawName: "v-repeat-click",
                value: _vm.decrease,
                expression: "decrease"
              }
            ],
            staticClass: "el-input-number__decrease",
            class: { "is-disabled": _vm.minDisabled },
            attrs: { role: "button" },
            on: {
              keydown: function($event) {
                if (!("button" in $event) && _vm._k($event.keyCode, "enter", 13, $event.key, "Enter")) {
                  return null;
                }
                return _vm.decrease($event);
              }
            }
          }, [
            _c("i", {
              class: "el-icon-" + (_vm.controlsAtRight ? "arrow-down" : "minus")
            })
          ]) : _vm._e(),
          _vm.controls ? _c("span", {
            directives: [
              {
                name: "repeat-click",
                rawName: "v-repeat-click",
                value: _vm.increase,
                expression: "increase"
              }
            ],
            staticClass: "el-input-number__increase",
            class: { "is-disabled": _vm.maxDisabled },
            attrs: { role: "button" },
            on: {
              keydown: function($event) {
                if (!("button" in $event) && _vm._k($event.keyCode, "enter", 13, $event.key, "Enter")) {
                  return null;
                }
                return _vm.increase($event);
              }
            }
          }, [
            _c("i", {
              class: "el-icon-" + (_vm.controlsAtRight ? "arrow-up" : "plus")
            })
          ]) : _vm._e(),
          _c("el-input", {
            ref: "input",
            attrs: {
              value: _vm.displayValue,
              placeholder: _vm.placeholder,
              disabled: _vm.inputNumberDisabled,
              size: _vm.inputNumberSize,
              max: _vm.max,
              min: _vm.min,
              name: _vm.name,
              label: _vm.label
            },
            on: {
              blur: _vm.handleBlur,
              focus: _vm.handleFocus,
              input: _vm.handleInput,
              change: _vm.handleInputChange
            },
            nativeOn: {
              keydown: [
                function($event) {
                  if (!("button" in $event) && _vm._k($event.keyCode, "up", 38, $event.key, ["Up", "ArrowUp"])) {
                    return null;
                  }
                  $event.preventDefault();
                  return _vm.increase($event);
                },
                function($event) {
                  if (!("button" in $event) && _vm._k($event.keyCode, "down", 40, $event.key, [
                    "Down",
                    "ArrowDown"
                  ])) {
                    return null;
                  }
                  $event.preventDefault();
                  return _vm.decrease($event);
                }
              ]
            }
          })
        ], 1);
      };
      var staticRenderFns = [];
      render37._withStripped = true;
      var input_ = __webpack_require__(10);
      var input_default = /* @__PURE__ */ __webpack_require__.n(input_);
      var focus_ = __webpack_require__(22);
      var focus_default = /* @__PURE__ */ __webpack_require__.n(focus_);
      var repeat_click = __webpack_require__(30);
      var input_numbervue_type_script_lang_js_ = {
        name: "ElInputNumber",
        mixins: [focus_default()("input")],
        inject: {
          elForm: {
            default: ""
          },
          elFormItem: {
            default: ""
          }
        },
        directives: {
          repeatClick: repeat_click["a"]
        },
        components: {
          ElInput: input_default.a
        },
        props: {
          step: {
            type: Number,
            default: 1
          },
          stepStrictly: {
            type: Boolean,
            default: false
          },
          max: {
            type: Number,
            default: Infinity
          },
          min: {
            type: Number,
            default: -Infinity
          },
          value: {},
          disabled: Boolean,
          size: String,
          controls: {
            type: Boolean,
            default: true
          },
          controlsPosition: {
            type: String,
            default: ""
          },
          name: String,
          label: String,
          placeholder: String,
          precision: {
            type: Number,
            validator: function validator2(val) {
              return val >= 0 && val === parseInt(val, 10);
            }
          }
        },
        data: function data25() {
          return {
            currentValue: 0,
            userInput: null
          };
        },
        watch: {
          value: {
            immediate: true,
            handler: function handler2(value6) {
              var newVal = value6 === void 0 ? value6 : Number(value6);
              if (newVal !== void 0) {
                if (isNaN(newVal)) {
                  return;
                }
                if (this.stepStrictly) {
                  var stepPrecision = this.getPrecision(this.step);
                  var precisionFactor = Math.pow(10, stepPrecision);
                  newVal = Math.round(newVal / this.step) * precisionFactor * this.step / precisionFactor;
                }
                if (this.precision !== void 0) {
                  newVal = this.toPrecision(newVal, this.precision);
                }
              }
              if (newVal >= this.max)
                newVal = this.max;
              if (newVal <= this.min)
                newVal = this.min;
              this.currentValue = newVal;
              this.userInput = null;
              this.$emit("input", newVal);
            }
          }
        },
        computed: {
          minDisabled: function minDisabled() {
            return this._decrease(this.value, this.step) < this.min;
          },
          maxDisabled: function maxDisabled() {
            return this._increase(this.value, this.step) > this.max;
          },
          numPrecision: function numPrecision() {
            var value6 = this.value, step2 = this.step, getPrecision = this.getPrecision, precision = this.precision;
            var stepPrecision = getPrecision(step2);
            if (precision !== void 0) {
              if (stepPrecision > precision) {
                console.warn("[Element Warn][InputNumber]precision should not be less than the decimal places of step");
              }
              return precision;
            } else {
              return Math.max(getPrecision(value6), stepPrecision);
            }
          },
          controlsAtRight: function controlsAtRight() {
            return this.controls && this.controlsPosition === "right";
          },
          _elFormItemSize: function _elFormItemSize() {
            return (this.elFormItem || {}).elFormItemSize;
          },
          inputNumberSize: function inputNumberSize() {
            return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;
          },
          inputNumberDisabled: function inputNumberDisabled() {
            return this.disabled || !!(this.elForm || {}).disabled;
          },
          displayValue: function displayValue() {
            if (this.userInput !== null) {
              return this.userInput;
            }
            var currentValue = this.currentValue;
            if (typeof currentValue === "number") {
              if (this.stepStrictly) {
                var stepPrecision = this.getPrecision(this.step);
                var precisionFactor = Math.pow(10, stepPrecision);
                currentValue = Math.round(currentValue / this.step) * precisionFactor * this.step / precisionFactor;
              }
              if (this.precision !== void 0) {
                currentValue = currentValue.toFixed(this.precision);
              }
            }
            return currentValue;
          }
        },
        methods: {
          toPrecision: function toPrecision(num, precision) {
            if (precision === void 0)
              precision = this.numPrecision;
            return parseFloat(Math.round(num * Math.pow(10, precision)) / Math.pow(10, precision));
          },
          getPrecision: function getPrecision(value6) {
            if (value6 === void 0)
              return 0;
            var valueString = value6.toString();
            var dotPosition = valueString.indexOf(".");
            var precision = 0;
            if (dotPosition !== -1) {
              precision = valueString.length - dotPosition - 1;
            }
            return precision;
          },
          _increase: function _increase(val, step2) {
            if (typeof val !== "number" && val !== void 0)
              return this.currentValue;
            var precisionFactor = Math.pow(10, this.numPrecision);
            return this.toPrecision((precisionFactor * val + precisionFactor * step2) / precisionFactor);
          },
          _decrease: function _decrease(val, step2) {
            if (typeof val !== "number" && val !== void 0)
              return this.currentValue;
            var precisionFactor = Math.pow(10, this.numPrecision);
            return this.toPrecision((precisionFactor * val - precisionFactor * step2) / precisionFactor);
          },
          increase: function increase() {
            if (this.inputNumberDisabled || this.maxDisabled)
              return;
            var value6 = this.value || 0;
            var newVal = this._increase(value6, this.step);
            this.setCurrentValue(newVal);
          },
          decrease: function decrease() {
            if (this.inputNumberDisabled || this.minDisabled)
              return;
            var value6 = this.value || 0;
            var newVal = this._decrease(value6, this.step);
            this.setCurrentValue(newVal);
          },
          handleBlur: function handleBlur(event2) {
            this.$emit("blur", event2);
          },
          handleFocus: function handleFocus3(event2) {
            this.$emit("focus", event2);
          },
          setCurrentValue: function setCurrentValue(newVal) {
            var oldVal = this.currentValue;
            if (typeof newVal === "number" && this.precision !== void 0) {
              newVal = this.toPrecision(newVal, this.precision);
            }
            if (newVal >= this.max)
              newVal = this.max;
            if (newVal <= this.min)
              newVal = this.min;
            if (oldVal === newVal)
              return;
            this.userInput = null;
            this.$emit("input", newVal);
            this.$emit("change", newVal, oldVal);
            this.currentValue = newVal;
          },
          handleInput: function handleInput(value6) {
            this.userInput = value6;
          },
          handleInputChange: function handleInputChange(value6) {
            var newVal = value6 === "" ? void 0 : Number(value6);
            if (!isNaN(newVal) || value6 === "") {
              this.setCurrentValue(newVal);
            }
            this.userInput = null;
          },
          select: function select2() {
            this.$refs.input.select();
          }
        },
        mounted: function mounted18() {
          var innerInput = this.$refs.input.$refs.input;
          innerInput.setAttribute("role", "spinbutton");
          innerInput.setAttribute("aria-valuemax", this.max);
          innerInput.setAttribute("aria-valuemin", this.min);
          innerInput.setAttribute("aria-valuenow", this.currentValue);
          innerInput.setAttribute("aria-disabled", this.inputNumberDisabled);
        },
        updated: function updated3() {
          if (!this.$refs || !this.$refs.input)
            return;
          var innerInput = this.$refs.input.$refs.input;
          innerInput.setAttribute("aria-valuenow", this.currentValue);
        }
      };
      var src_input_numbervue_type_script_lang_js_ = input_numbervue_type_script_lang_js_;
      var componentNormalizer = __webpack_require__(0);
      var component = Object(componentNormalizer["a"])(src_input_numbervue_type_script_lang_js_, render37, staticRenderFns, false, null, null, null);
      component.options.__file = "packages/input-number/src/input-number.vue";
      var input_number = component.exports;
      input_number.install = function(Vue2) {
        Vue2.component(input_number.name, input_number);
      };
      __webpack_exports__["default"] = input_number;
    },
    2: function(module3, exports2) {
      module3.exports = dom;
    },
    22: function(module3, exports2) {
      module3.exports = focus6;
    },
    30: function(module3, __webpack_exports__, __webpack_require__) {
      var element_ui_src_utils_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
      __webpack_exports__["a"] = {
        bind: function bind4(el, binding, vnode) {
          var interval = null;
          var startTime = void 0;
          var handler2 = function handler3() {
            return vnode.context[binding.expression].apply();
          };
          var clear2 = function clear3() {
            if (Date.now() - startTime < 100) {
              handler2();
            }
            clearInterval(interval);
            interval = null;
          };
          Object(element_ui_src_utils_dom__WEBPACK_IMPORTED_MODULE_0__["on"])(el, "mousedown", function(e) {
            if (e.button !== 0)
              return;
            startTime = Date.now();
            Object(element_ui_src_utils_dom__WEBPACK_IMPORTED_MODULE_0__["once"])(document, "mouseup", clear2);
            clearInterval(interval);
            interval = setInterval(handler2, 100);
          });
        }
      };
    }
  });
})(inputNumber);
var cascaderPanel = { exports: {} };
var radio = { exports: {} };
(function(module2) {
  module2.exports = function(modules2) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
      if (installedModules[moduleId]) {
        return installedModules[moduleId].exports;
      }
      var module3 = installedModules[moduleId] = {
        i: moduleId,
        l: false,
        exports: {}
      };
      modules2[moduleId].call(module3.exports, module3, module3.exports, __webpack_require__);
      module3.l = true;
      return module3.exports;
    }
    __webpack_require__.m = modules2;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports2, name, getter) {
      if (!__webpack_require__.o(exports2, name)) {
        Object.defineProperty(exports2, name, { enumerable: true, get: getter });
      }
    };
    __webpack_require__.r = function(exports2) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(exports2, Symbol.toStringTag, { value: "Module" });
      }
      Object.defineProperty(exports2, "__esModule", { value: true });
    };
    __webpack_require__.t = function(value6, mode) {
      if (mode & 1)
        value6 = __webpack_require__(value6);
      if (mode & 8)
        return value6;
      if (mode & 4 && typeof value6 === "object" && value6 && value6.__esModule)
        return value6;
      var ns = /* @__PURE__ */ Object.create(null);
      __webpack_require__.r(ns);
      Object.defineProperty(ns, "default", { enumerable: true, value: value6 });
      if (mode & 2 && typeof value6 != "string")
        for (var key in value6)
          __webpack_require__.d(ns, key, function(key2) {
            return value6[key2];
          }.bind(null, key));
      return ns;
    };
    __webpack_require__.n = function(module3) {
      var getter = module3 && module3.__esModule ? function getDefault() {
        return module3["default"];
      } : function getModuleExports() {
        return module3;
      };
      __webpack_require__.d(getter, "a", getter);
      return getter;
    };
    __webpack_require__.o = function(object3, property2) {
      return Object.prototype.hasOwnProperty.call(object3, property2);
    };
    __webpack_require__.p = "/dist/";
    return __webpack_require__(__webpack_require__.s = 108);
  }({
    0: function(module3, __webpack_exports__, __webpack_require__) {
      __webpack_require__.d(__webpack_exports__, "a", function() {
        return normalizeComponent;
      });
      function normalizeComponent(scriptExports, render37, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
        var options2 = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
        if (render37) {
          options2.render = render37;
          options2.staticRenderFns = staticRenderFns;
          options2._compiled = true;
        }
        if (functionalTemplate) {
          options2.functional = true;
        }
        if (scopeId) {
          options2._scopeId = "data-v-" + scopeId;
        }
        var hook;
        if (moduleIdentifier) {
          hook = function(context) {
            context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
            if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
              context = __VUE_SSR_CONTEXT__;
            }
            if (injectStyles) {
              injectStyles.call(this, context);
            }
            if (context && context._registeredComponents) {
              context._registeredComponents.add(moduleIdentifier);
            }
          };
          options2._ssrRegister = hook;
        } else if (injectStyles) {
          hook = shadowMode ? function() {
            injectStyles.call(this, this.$root.$options.shadowRoot);
          } : injectStyles;
        }
        if (hook) {
          if (options2.functional) {
            options2._injectStyles = hook;
            var originalRender = options2.render;
            options2.render = function renderWithStyleInjection(h, context) {
              hook.call(context);
              return originalRender(h, context);
            };
          } else {
            var existing = options2.beforeCreate;
            options2.beforeCreate = existing ? [].concat(existing, hook) : [hook];
          }
        }
        return {
          exports: scriptExports,
          options: options2
        };
      }
    },
    108: function(module3, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      var render37 = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("label", {
          staticClass: "el-radio",
          class: [
            _vm.border && _vm.radioSize ? "el-radio--" + _vm.radioSize : "",
            { "is-disabled": _vm.isDisabled },
            { "is-focus": _vm.focus },
            { "is-bordered": _vm.border },
            { "is-checked": _vm.model === _vm.label }
          ],
          attrs: {
            role: "radio",
            "aria-checked": _vm.model === _vm.label,
            "aria-disabled": _vm.isDisabled,
            tabindex: _vm.tabIndex
          },
          on: {
            keydown: function($event) {
              if (!("button" in $event) && _vm._k($event.keyCode, "space", 32, $event.key, [" ", "Spacebar"])) {
                return null;
              }
              $event.stopPropagation();
              $event.preventDefault();
              _vm.model = _vm.isDisabled ? _vm.model : _vm.label;
            }
          }
        }, [
          _c("span", {
            staticClass: "el-radio__input",
            class: {
              "is-disabled": _vm.isDisabled,
              "is-checked": _vm.model === _vm.label
            }
          }, [
            _c("span", { staticClass: "el-radio__inner" }),
            _c("input", {
              directives: [
                {
                  name: "model",
                  rawName: "v-model",
                  value: _vm.model,
                  expression: "model"
                }
              ],
              ref: "radio",
              staticClass: "el-radio__original",
              attrs: {
                type: "radio",
                "aria-hidden": "true",
                name: _vm.name,
                disabled: _vm.isDisabled,
                tabindex: "-1",
                autocomplete: "off"
              },
              domProps: {
                value: _vm.label,
                checked: _vm._q(_vm.model, _vm.label)
              },
              on: {
                focus: function($event) {
                  _vm.focus = true;
                },
                blur: function($event) {
                  _vm.focus = false;
                },
                change: [
                  function($event) {
                    _vm.model = _vm.label;
                  },
                  _vm.handleChange
                ]
              }
            })
          ]),
          _c("span", {
            staticClass: "el-radio__label",
            on: {
              keydown: function($event) {
                $event.stopPropagation();
              }
            }
          }, [
            _vm._t("default"),
            !_vm.$slots.default ? [_vm._v(_vm._s(_vm.label))] : _vm._e()
          ], 2)
        ]);
      };
      var staticRenderFns = [];
      render37._withStripped = true;
      var emitter_ = __webpack_require__(4);
      var emitter_default = /* @__PURE__ */ __webpack_require__.n(emitter_);
      var radiovue_type_script_lang_js_ = {
        name: "ElRadio",
        mixins: [emitter_default.a],
        inject: {
          elForm: {
            default: ""
          },
          elFormItem: {
            default: ""
          }
        },
        componentName: "ElRadio",
        props: {
          value: {},
          label: {},
          disabled: Boolean,
          name: String,
          border: Boolean,
          size: String
        },
        data: function data25() {
          return {
            focus: false
          };
        },
        computed: {
          isGroup: function isGroup3() {
            var parent2 = this.$parent;
            while (parent2) {
              if (parent2.$options.componentName !== "ElRadioGroup") {
                parent2 = parent2.$parent;
              } else {
                this._radioGroup = parent2;
                return true;
              }
            }
            return false;
          },
          model: {
            get: function get7() {
              return this.isGroup ? this._radioGroup.value : this.value;
            },
            set: function set3(val) {
              if (this.isGroup) {
                this.dispatch("ElRadioGroup", "input", [val]);
              } else {
                this.$emit("input", val);
              }
              this.$refs.radio && (this.$refs.radio.checked = this.model === this.label);
            }
          },
          _elFormItemSize: function _elFormItemSize() {
            return (this.elFormItem || {}).elFormItemSize;
          },
          radioSize: function radioSize() {
            var temRadioSize = this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;
            return this.isGroup ? this._radioGroup.radioGroupSize || temRadioSize : temRadioSize;
          },
          isDisabled: function isDisabled4() {
            return this.isGroup ? this._radioGroup.disabled || this.disabled || (this.elForm || {}).disabled : this.disabled || (this.elForm || {}).disabled;
          },
          tabIndex: function tabIndex() {
            return this.isDisabled || this.isGroup && this.model !== this.label ? -1 : 0;
          }
        },
        methods: {
          handleChange: function handleChange() {
            var _this = this;
            this.$nextTick(function() {
              _this.$emit("change", _this.model);
              _this.isGroup && _this.dispatch("ElRadioGroup", "handleChange", _this.model);
            });
          }
        }
      };
      var src_radiovue_type_script_lang_js_ = radiovue_type_script_lang_js_;
      var componentNormalizer = __webpack_require__(0);
      var component = Object(componentNormalizer["a"])(src_radiovue_type_script_lang_js_, render37, staticRenderFns, false, null, null, null);
      component.options.__file = "packages/radio/src/radio.vue";
      var src_radio = component.exports;
      src_radio.install = function(Vue2) {
        Vue2.component(src_radio.name, src_radio);
      };
      __webpack_exports__["default"] = src_radio;
    },
    4: function(module3, exports2) {
      module3.exports = emitter;
    }
  });
})(radio);
(function(module2) {
  module2.exports = function(modules2) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
      if (installedModules[moduleId]) {
        return installedModules[moduleId].exports;
      }
      var module3 = installedModules[moduleId] = {
        i: moduleId,
        l: false,
        exports: {}
      };
      modules2[moduleId].call(module3.exports, module3, module3.exports, __webpack_require__);
      module3.l = true;
      return module3.exports;
    }
    __webpack_require__.m = modules2;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports2, name, getter) {
      if (!__webpack_require__.o(exports2, name)) {
        Object.defineProperty(exports2, name, { enumerable: true, get: getter });
      }
    };
    __webpack_require__.r = function(exports2) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(exports2, Symbol.toStringTag, { value: "Module" });
      }
      Object.defineProperty(exports2, "__esModule", { value: true });
    };
    __webpack_require__.t = function(value6, mode) {
      if (mode & 1)
        value6 = __webpack_require__(value6);
      if (mode & 8)
        return value6;
      if (mode & 4 && typeof value6 === "object" && value6 && value6.__esModule)
        return value6;
      var ns = /* @__PURE__ */ Object.create(null);
      __webpack_require__.r(ns);
      Object.defineProperty(ns, "default", { enumerable: true, value: value6 });
      if (mode & 2 && typeof value6 != "string")
        for (var key in value6)
          __webpack_require__.d(ns, key, function(key2) {
            return value6[key2];
          }.bind(null, key));
      return ns;
    };
    __webpack_require__.n = function(module3) {
      var getter = module3 && module3.__esModule ? function getDefault() {
        return module3["default"];
      } : function getModuleExports() {
        return module3;
      };
      __webpack_require__.d(getter, "a", getter);
      return getter;
    };
    __webpack_require__.o = function(object3, property2) {
      return Object.prototype.hasOwnProperty.call(object3, property2);
    };
    __webpack_require__.p = "/dist/";
    return __webpack_require__(__webpack_require__.s = 59);
  }({
    0: function(module3, __webpack_exports__, __webpack_require__) {
      __webpack_require__.d(__webpack_exports__, "a", function() {
        return normalizeComponent;
      });
      function normalizeComponent(scriptExports, render37, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
        var options2 = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
        if (render37) {
          options2.render = render37;
          options2.staticRenderFns = staticRenderFns;
          options2._compiled = true;
        }
        if (functionalTemplate) {
          options2.functional = true;
        }
        if (scopeId) {
          options2._scopeId = "data-v-" + scopeId;
        }
        var hook;
        if (moduleIdentifier) {
          hook = function(context) {
            context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
            if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
              context = __VUE_SSR_CONTEXT__;
            }
            if (injectStyles) {
              injectStyles.call(this, context);
            }
            if (context && context._registeredComponents) {
              context._registeredComponents.add(moduleIdentifier);
            }
          };
          options2._ssrRegister = hook;
        } else if (injectStyles) {
          hook = shadowMode ? function() {
            injectStyles.call(this, this.$root.$options.shadowRoot);
          } : injectStyles;
        }
        if (hook) {
          if (options2.functional) {
            options2._injectStyles = hook;
            var originalRender = options2.render;
            options2.render = function renderWithStyleInjection(h, context) {
              hook.call(context);
              return originalRender(h, context);
            };
          } else {
            var existing = options2.beforeCreate;
            options2.beforeCreate = existing ? [].concat(existing, hook) : [hook];
          }
        }
        return {
          exports: scriptExports,
          options: options2
        };
      }
    },
    15: function(module3, exports2) {
      module3.exports = scrollbar.exports;
    },
    19: function(module3, exports2) {
      module3.exports = checkbox.exports;
    },
    21: function(module3, exports2) {
      module3.exports = shared$2;
    },
    26: function(module3, exports2) {
      module3.exports = babelHelperVueJsxMergeProps;
    },
    3: function(module3, exports2) {
      module3.exports = util;
    },
    31: function(module3, exports2) {
      module3.exports = scrollIntoView$1;
    },
    40: function(module3, exports2) {
      module3.exports = ariaUtils;
    },
    51: function(module3, exports2) {
      module3.exports = radio.exports;
    },
    59: function(module3, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      var cascader_panelvue_type_template_id_34932346_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", {
          class: ["el-cascader-panel", _vm.border && "is-bordered"],
          on: { keydown: _vm.handleKeyDown }
        }, _vm._l(_vm.menus, function(menu2, index2) {
          return _c("cascader-menu", {
            key: index2,
            ref: "menu",
            refInFor: true,
            attrs: { index: index2, nodes: menu2 }
          });
        }), 1);
      };
      var staticRenderFns = [];
      cascader_panelvue_type_template_id_34932346_render._withStripped = true;
      var external_babel_helper_vue_jsx_merge_props_ = __webpack_require__(26);
      var external_babel_helper_vue_jsx_merge_props_default = /* @__PURE__ */ __webpack_require__.n(external_babel_helper_vue_jsx_merge_props_);
      var scrollbar_ = __webpack_require__(15);
      var scrollbar_default = /* @__PURE__ */ __webpack_require__.n(scrollbar_);
      var checkbox_ = __webpack_require__(19);
      var checkbox_default = /* @__PURE__ */ __webpack_require__.n(checkbox_);
      var radio_ = __webpack_require__(51);
      var radio_default = /* @__PURE__ */ __webpack_require__.n(radio_);
      var util_ = __webpack_require__(3);
      var stopPropagation = function stopPropagation2(e) {
        return e.stopPropagation();
      };
      var cascader_nodevue_type_script_lang_js_ = {
        inject: ["panel"],
        components: {
          ElCheckbox: checkbox_default.a,
          ElRadio: radio_default.a
        },
        props: {
          node: {
            required: true
          },
          nodeId: String
        },
        computed: {
          config: function config2() {
            return this.panel.config;
          },
          isLeaf: function isLeaf() {
            return this.node.isLeaf;
          },
          isDisabled: function isDisabled4() {
            return this.node.isDisabled;
          },
          checkedValue: function checkedValue() {
            return this.panel.checkedValue;
          },
          isChecked: function isChecked2() {
            return this.node.isSameNode(this.checkedValue);
          },
          inActivePath: function inActivePath() {
            return this.isInPath(this.panel.activePath);
          },
          inCheckedPath: function inCheckedPath() {
            var _this = this;
            if (!this.config.checkStrictly)
              return false;
            return this.panel.checkedNodePaths.some(function(checkedPath) {
              return _this.isInPath(checkedPath);
            });
          },
          value: function value6() {
            return this.node.getValueByOption();
          }
        },
        methods: {
          handleExpand: function handleExpand() {
            var _this2 = this;
            var panel2 = this.panel, node = this.node, isDisabled4 = this.isDisabled, config2 = this.config;
            var multiple = config2.multiple, checkStrictly = config2.checkStrictly;
            if (!checkStrictly && isDisabled4 || node.loading)
              return;
            if (config2.lazy && !node.loaded) {
              panel2.lazyLoad(node, function() {
                var isLeaf = _this2.isLeaf;
                if (!isLeaf)
                  _this2.handleExpand();
                if (multiple) {
                  var checked = isLeaf ? node.checked : false;
                  _this2.handleMultiCheckChange(checked);
                }
              });
            } else {
              panel2.handleExpand(node);
            }
          },
          handleCheckChange: function handleCheckChange() {
            var panel2 = this.panel, value6 = this.value, node = this.node;
            panel2.handleCheckChange(value6);
            panel2.handleExpand(node);
          },
          handleMultiCheckChange: function handleMultiCheckChange(checked) {
            this.node.doCheck(checked);
            this.panel.calculateMultiCheckedValue();
          },
          isInPath: function isInPath(pathNodes) {
            var node = this.node;
            var selectedPathNode = pathNodes[node.level - 1] || {};
            return selectedPathNode.uid === node.uid;
          },
          renderPrefix: function renderPrefix(h) {
            var isLeaf = this.isLeaf, isChecked2 = this.isChecked, config2 = this.config;
            var checkStrictly = config2.checkStrictly, multiple = config2.multiple;
            if (multiple) {
              return this.renderCheckbox(h);
            } else if (checkStrictly) {
              return this.renderRadio(h);
            } else if (isLeaf && isChecked2) {
              return this.renderCheckIcon(h);
            }
            return null;
          },
          renderPostfix: function renderPostfix(h) {
            var node = this.node, isLeaf = this.isLeaf;
            if (node.loading) {
              return this.renderLoadingIcon(h);
            } else if (!isLeaf) {
              return this.renderExpandIcon(h);
            }
            return null;
          },
          renderCheckbox: function renderCheckbox(h) {
            var node = this.node, config2 = this.config, isDisabled4 = this.isDisabled;
            var events2 = {
              on: { change: this.handleMultiCheckChange },
              nativeOn: {}
            };
            if (config2.checkStrictly) {
              events2.nativeOn.click = stopPropagation;
            }
            return h("el-checkbox", external_babel_helper_vue_jsx_merge_props_default()([{
              attrs: {
                value: node.checked,
                indeterminate: node.indeterminate,
                disabled: isDisabled4
              }
            }, events2]));
          },
          renderRadio: function renderRadio(h) {
            var checkedValue = this.checkedValue, value6 = this.value, isDisabled4 = this.isDisabled;
            if (Object(util_["isEqual"])(value6, checkedValue)) {
              value6 = checkedValue;
            }
            return h("el-radio", {
              attrs: {
                value: checkedValue,
                label: value6,
                disabled: isDisabled4
              },
              on: {
                "change": this.handleCheckChange
              },
              nativeOn: {
                "click": stopPropagation
              }
            }, [h("span")]);
          },
          renderCheckIcon: function renderCheckIcon(h) {
            return h("i", { "class": "el-icon-check el-cascader-node__prefix" });
          },
          renderLoadingIcon: function renderLoadingIcon(h) {
            return h("i", { "class": "el-icon-loading el-cascader-node__postfix" });
          },
          renderExpandIcon: function renderExpandIcon(h) {
            return h("i", { "class": "el-icon-arrow-right el-cascader-node__postfix" });
          },
          renderContent: function renderContent2(h) {
            var panel2 = this.panel, node = this.node;
            var render37 = panel2.renderLabelFn;
            var vnode = render37 ? render37({ node, data: node.data }) : null;
            return h("span", { "class": "el-cascader-node__label" }, [vnode || node.label]);
          }
        },
        render: function render37(h) {
          var _this3 = this;
          var inActivePath = this.inActivePath, inCheckedPath = this.inCheckedPath, isChecked2 = this.isChecked, isLeaf = this.isLeaf, isDisabled4 = this.isDisabled, config2 = this.config, nodeId = this.nodeId;
          var expandTrigger = config2.expandTrigger, checkStrictly = config2.checkStrictly, multiple = config2.multiple;
          var disabled = !checkStrictly && isDisabled4;
          var events2 = { on: {} };
          if (expandTrigger === "click") {
            events2.on.click = this.handleExpand;
          } else {
            events2.on.mouseenter = function(e) {
              _this3.handleExpand();
              _this3.$emit("expand", e);
            };
            events2.on.focus = function(e) {
              _this3.handleExpand();
              _this3.$emit("expand", e);
            };
          }
          if (isLeaf && !isDisabled4 && !checkStrictly && !multiple) {
            events2.on.click = this.handleCheckChange;
          }
          return h("li", external_babel_helper_vue_jsx_merge_props_default()([{
            attrs: {
              role: "menuitem",
              id: nodeId,
              "aria-expanded": inActivePath,
              tabindex: disabled ? null : -1
            },
            "class": {
              "el-cascader-node": true,
              "is-selectable": checkStrictly,
              "in-active-path": inActivePath,
              "in-checked-path": inCheckedPath,
              "is-active": isChecked2,
              "is-disabled": disabled
            }
          }, events2]), [this.renderPrefix(h), this.renderContent(h), this.renderPostfix(h)]);
        }
      };
      var src_cascader_nodevue_type_script_lang_js_ = cascader_nodevue_type_script_lang_js_;
      var componentNormalizer = __webpack_require__(0);
      var cascader_node_render, cascader_node_staticRenderFns;
      var component = Object(componentNormalizer["a"])(src_cascader_nodevue_type_script_lang_js_, cascader_node_render, cascader_node_staticRenderFns, false, null, null, null);
      component.options.__file = "packages/cascader-panel/src/cascader-node.vue";
      var cascader_node = component.exports;
      var locale_ = __webpack_require__(6);
      var locale_default = /* @__PURE__ */ __webpack_require__.n(locale_);
      var cascader_menuvue_type_script_lang_js_ = {
        name: "ElCascaderMenu",
        mixins: [locale_default.a],
        inject: ["panel"],
        components: {
          ElScrollbar: scrollbar_default.a,
          CascaderNode: cascader_node
        },
        props: {
          nodes: {
            type: Array,
            required: true
          },
          index: Number
        },
        data: function data25() {
          return {
            activeNode: null,
            hoverTimer: null,
            id: Object(util_["generateId"])()
          };
        },
        computed: {
          isEmpty: function isEmpty3() {
            return !this.nodes.length;
          },
          menuId: function menuId() {
            return "cascader-menu-" + this.id + "-" + this.index;
          }
        },
        methods: {
          handleExpand: function handleExpand(e) {
            this.activeNode = e.target;
          },
          handleMouseMove: function handleMouseMove(e) {
            var activeNode = this.activeNode, hoverTimer = this.hoverTimer;
            var hoverZone = this.$refs.hoverZone;
            if (!activeNode || !hoverZone)
              return;
            if (activeNode.contains(e.target)) {
              clearTimeout(hoverTimer);
              var _$el$getBoundingClien = this.$el.getBoundingClientRect(), left = _$el$getBoundingClien.left;
              var startX = e.clientX - left;
              var _$el = this.$el, offsetWidth = _$el.offsetWidth, offsetHeight = _$el.offsetHeight;
              var top = activeNode.offsetTop;
              var bottom = top + activeNode.offsetHeight;
              hoverZone.innerHTML = '\n          <path style="pointer-events: auto;" fill="transparent" d="M' + startX + " " + top + " L" + offsetWidth + " 0 V" + top + ' Z" />\n          <path style="pointer-events: auto;" fill="transparent" d="M' + startX + " " + bottom + " L" + offsetWidth + " " + offsetHeight + " V" + bottom + ' Z" />\n        ';
            } else if (!hoverTimer) {
              this.hoverTimer = setTimeout(this.clearHoverZone, this.panel.config.hoverThreshold);
            }
          },
          clearHoverZone: function clearHoverZone() {
            var hoverZone = this.$refs.hoverZone;
            if (!hoverZone)
              return;
            hoverZone.innerHTML = "";
          },
          renderEmptyText: function renderEmptyText(h) {
            return h("div", { "class": "el-cascader-menu__empty-text" }, [this.t("el.cascader.noData")]);
          },
          renderNodeList: function renderNodeList(h) {
            var menuId = this.menuId;
            var isHoverMenu = this.panel.isHoverMenu;
            var events2 = { on: {} };
            if (isHoverMenu) {
              events2.on.expand = this.handleExpand;
            }
            var nodes = this.nodes.map(function(node, index2) {
              var hasChildren = node.hasChildren;
              return h("cascader-node", external_babel_helper_vue_jsx_merge_props_default()([{
                key: node.uid,
                attrs: {
                  node,
                  "node-id": menuId + "-" + index2,
                  "aria-haspopup": hasChildren,
                  "aria-owns": hasChildren ? menuId : null
                }
              }, events2]));
            });
            return [].concat(nodes, [isHoverMenu ? h("svg", { ref: "hoverZone", "class": "el-cascader-menu__hover-zone" }) : null]);
          }
        },
        render: function render37(h) {
          var isEmpty3 = this.isEmpty, menuId = this.menuId;
          var events2 = { nativeOn: {} };
          if (this.panel.isHoverMenu) {
            events2.nativeOn.mousemove = this.handleMouseMove;
          }
          return h("el-scrollbar", external_babel_helper_vue_jsx_merge_props_default()([{
            attrs: {
              tag: "ul",
              role: "menu",
              id: menuId,
              "wrap-class": "el-cascader-menu__wrap",
              "view-class": {
                "el-cascader-menu__list": true,
                "is-empty": isEmpty3
              }
            },
            "class": "el-cascader-menu"
          }, events2]), [isEmpty3 ? this.renderEmptyText(h) : this.renderNodeList(h)]);
        }
      };
      var src_cascader_menuvue_type_script_lang_js_ = cascader_menuvue_type_script_lang_js_;
      var cascader_menu_render, cascader_menu_staticRenderFns;
      var cascader_menu_component = Object(componentNormalizer["a"])(src_cascader_menuvue_type_script_lang_js_, cascader_menu_render, cascader_menu_staticRenderFns, false, null, null, null);
      cascader_menu_component.options.__file = "packages/cascader-panel/src/cascader-menu.vue";
      var cascader_menu = cascader_menu_component.exports;
      var shared_ = __webpack_require__(21);
      var _createClass2 = function() {
        function defineProperties3(target2, props2) {
          for (var i = 0; i < props2.length; i++) {
            var descriptor2 = props2[i];
            descriptor2.enumerable = descriptor2.enumerable || false;
            descriptor2.configurable = true;
            if ("value" in descriptor2)
              descriptor2.writable = true;
            Object.defineProperty(target2, descriptor2.key, descriptor2);
          }
        }
        return function(Constructor, protoProps, staticProps) {
          if (protoProps)
            defineProperties3(Constructor.prototype, protoProps);
          if (staticProps)
            defineProperties3(Constructor, staticProps);
          return Constructor;
        };
      }();
      function _classCallCheck2(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      var uid2 = 0;
      var node_Node = function() {
        function Node2(data25, config2, parentNode2) {
          _classCallCheck2(this, Node2);
          this.data = data25;
          this.config = config2;
          this.parent = parentNode2 || null;
          this.level = !this.parent ? 1 : this.parent.level + 1;
          this.uid = uid2++;
          this.initState();
          this.initChildren();
        }
        Node2.prototype.initState = function initState2() {
          var _config = this.config, valueKey = _config.value, labelKey = _config.label;
          this.value = this.data[valueKey];
          this.label = this.data[labelKey];
          this.pathNodes = this.calculatePathNodes();
          this.path = this.pathNodes.map(function(node) {
            return node.value;
          });
          this.pathLabels = this.pathNodes.map(function(node) {
            return node.label;
          });
          this.loading = false;
          this.loaded = false;
        };
        Node2.prototype.initChildren = function initChildren() {
          var _this = this;
          var config2 = this.config;
          var childrenKey = config2.children;
          var childrenData = this.data[childrenKey];
          this.hasChildren = Array.isArray(childrenData);
          this.children = (childrenData || []).map(function(child) {
            return new Node2(child, config2, _this);
          });
        };
        Node2.prototype.calculatePathNodes = function calculatePathNodes() {
          var nodes = [this];
          var parent2 = this.parent;
          while (parent2) {
            nodes.unshift(parent2);
            parent2 = parent2.parent;
          }
          return nodes;
        };
        Node2.prototype.getPath = function getPath() {
          return this.path;
        };
        Node2.prototype.getValue = function getValue2() {
          return this.value;
        };
        Node2.prototype.getValueByOption = function getValueByOption() {
          return this.config.emitPath ? this.getPath() : this.getValue();
        };
        Node2.prototype.getText = function getText(allLevels, separator) {
          return allLevels ? this.pathLabels.join(separator) : this.label;
        };
        Node2.prototype.isSameNode = function isSameNode(checkedValue) {
          var value6 = this.getValueByOption();
          return this.config.multiple && Array.isArray(checkedValue) ? checkedValue.some(function(val) {
            return Object(util_["isEqual"])(val, value6);
          }) : Object(util_["isEqual"])(checkedValue, value6);
        };
        Node2.prototype.broadcast = function broadcast2(event2) {
          for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          var handlerName = "onParent" + Object(util_["capitalize"])(event2);
          this.children.forEach(function(child) {
            if (child) {
              child.broadcast.apply(child, [event2].concat(args));
              child[handlerName] && child[handlerName].apply(child, args);
            }
          });
        };
        Node2.prototype.emit = function emit(event2) {
          var parent2 = this.parent;
          var handlerName = "onChild" + Object(util_["capitalize"])(event2);
          if (parent2) {
            for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            parent2[handlerName] && parent2[handlerName].apply(parent2, args);
            parent2.emit.apply(parent2, [event2].concat(args));
          }
        };
        Node2.prototype.onParentCheck = function onParentCheck(checked) {
          if (!this.isDisabled) {
            this.setCheckState(checked);
          }
        };
        Node2.prototype.onChildCheck = function onChildCheck() {
          var children = this.children;
          var validChildren = children.filter(function(child) {
            return !child.isDisabled;
          });
          var checked = validChildren.length ? validChildren.every(function(child) {
            return child.checked;
          }) : false;
          this.setCheckState(checked);
        };
        Node2.prototype.setCheckState = function setCheckState(checked) {
          var totalNum = this.children.length;
          var checkedNum = this.children.reduce(function(c, p) {
            var num = p.checked ? 1 : p.indeterminate ? 0.5 : 0;
            return c + num;
          }, 0);
          this.checked = checked;
          this.indeterminate = checkedNum !== totalNum && checkedNum > 0;
        };
        Node2.prototype.syncCheckState = function syncCheckState(checkedValue) {
          var value6 = this.getValueByOption();
          var checked = this.isSameNode(checkedValue, value6);
          this.doCheck(checked);
        };
        Node2.prototype.doCheck = function doCheck(checked) {
          if (this.checked !== checked) {
            if (this.config.checkStrictly) {
              this.checked = checked;
            } else {
              this.broadcast("check", checked);
              this.setCheckState(checked);
              this.emit("check");
            }
          }
        };
        _createClass2(Node2, [{
          key: "isDisabled",
          get: function get7() {
            var data25 = this.data, parent2 = this.parent, config2 = this.config;
            var disabledKey = config2.disabled;
            var checkStrictly = config2.checkStrictly;
            return data25[disabledKey] || !checkStrictly && parent2 && parent2.isDisabled;
          }
        }, {
          key: "isLeaf",
          get: function get7() {
            var data25 = this.data, loaded = this.loaded, hasChildren = this.hasChildren, children = this.children;
            var _config2 = this.config, lazy = _config2.lazy, leafKey = _config2.leaf;
            if (lazy) {
              var isLeaf = Object(shared_["isDef"])(data25[leafKey]) ? data25[leafKey] : loaded ? !children.length : false;
              this.hasChildren = !isLeaf;
              return isLeaf;
            }
            return !hasChildren;
          }
        }]);
        return Node2;
      }();
      var src_node = node_Node;
      function store_classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      var flatNodes = function flatNodes2(data25, leafOnly) {
        return data25.reduce(function(res, node) {
          if (node.isLeaf) {
            res.push(node);
          } else {
            !leafOnly && res.push(node);
            res = res.concat(flatNodes2(node.children, leafOnly));
          }
          return res;
        }, []);
      };
      var store_Store = function() {
        function Store2(data25, config2) {
          store_classCallCheck(this, Store2);
          this.config = config2;
          this.initNodes(data25);
        }
        Store2.prototype.initNodes = function initNodes(data25) {
          var _this = this;
          data25 = Object(util_["coerceTruthyValueToArray"])(data25);
          this.nodes = data25.map(function(nodeData) {
            return new src_node(nodeData, _this.config);
          });
          this.flattedNodes = this.getFlattedNodes(false, false);
          this.leafNodes = this.getFlattedNodes(true, false);
        };
        Store2.prototype.appendNode = function appendNode(nodeData, parentNode2) {
          var node = new src_node(nodeData, this.config, parentNode2);
          var children = parentNode2 ? parentNode2.children : this.nodes;
          children.push(node);
        };
        Store2.prototype.appendNodes = function appendNodes(nodeDataList, parentNode2) {
          var _this2 = this;
          nodeDataList = Object(util_["coerceTruthyValueToArray"])(nodeDataList);
          nodeDataList.forEach(function(nodeData) {
            return _this2.appendNode(nodeData, parentNode2);
          });
        };
        Store2.prototype.getNodes = function getNodes() {
          return this.nodes;
        };
        Store2.prototype.getFlattedNodes = function getFlattedNodes(leafOnly) {
          var cached2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
          var cachedNodes = leafOnly ? this.leafNodes : this.flattedNodes;
          return cached2 ? cachedNodes : flatNodes(this.nodes, leafOnly);
        };
        Store2.prototype.getNodeByValue = function getNodeByValue(value6) {
          var nodes = this.getFlattedNodes(false, !this.config.lazy).filter(function(node) {
            return Object(util_["valueEquals"])(node.path, value6) || node.value === value6;
          });
          return nodes && nodes.length ? nodes[0] : null;
        };
        return Store2;
      }();
      var src_store = store_Store;
      var merge_ = __webpack_require__(9);
      var merge_default = /* @__PURE__ */ __webpack_require__.n(merge_);
      var aria_utils_ = __webpack_require__(40);
      var aria_utils_default = /* @__PURE__ */ __webpack_require__.n(aria_utils_);
      var scroll_into_view_ = __webpack_require__(31);
      var scroll_into_view_default = /* @__PURE__ */ __webpack_require__.n(scroll_into_view_);
      var _extends2 = Object.assign || function(target2) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target2[key] = source[key];
            }
          }
        }
        return target2;
      };
      var KeyCode = aria_utils_default.a.keys;
      var DefaultProps = {
        expandTrigger: "click",
        multiple: false,
        checkStrictly: false,
        emitPath: true,
        lazy: false,
        lazyLoad: util_["noop"],
        value: "value",
        label: "label",
        children: "children",
        leaf: "leaf",
        disabled: "disabled",
        hoverThreshold: 500
      };
      var cascader_panelvue_type_script_lang_js_isLeaf = function isLeaf(el) {
        return !el.getAttribute("aria-owns");
      };
      var getSibling = function getSibling2(el, distance) {
        var parentNode2 = el.parentNode;
        if (parentNode2) {
          var siblings = parentNode2.querySelectorAll('.el-cascader-node[tabindex="-1"]');
          var index2 = Array.prototype.indexOf.call(siblings, el);
          return siblings[index2 + distance] || null;
        }
        return null;
      };
      var getMenuIndex = function getMenuIndex2(el, distance) {
        if (!el)
          return;
        var pieces = el.id.split("-");
        return Number(pieces[pieces.length - 2]);
      };
      var focusNode = function focusNode2(el) {
        if (!el)
          return;
        el.focus();
        !cascader_panelvue_type_script_lang_js_isLeaf(el) && el.click();
      };
      var checkNode = function checkNode2(el) {
        if (!el)
          return;
        var input2 = el.querySelector("input");
        if (input2) {
          input2.click();
        } else if (cascader_panelvue_type_script_lang_js_isLeaf(el)) {
          el.click();
        }
      };
      var cascader_panelvue_type_script_lang_js_ = {
        name: "ElCascaderPanel",
        components: {
          CascaderMenu: cascader_menu
        },
        props: {
          value: {},
          options: Array,
          props: Object,
          border: {
            type: Boolean,
            default: true
          },
          renderLabel: Function
        },
        provide: function provide11() {
          return {
            panel: this
          };
        },
        data: function data25() {
          return {
            checkedValue: null,
            checkedNodePaths: [],
            store: [],
            menus: [],
            activePath: [],
            loadCount: 0
          };
        },
        computed: {
          config: function config2() {
            return merge_default()(_extends2({}, DefaultProps), this.props || {});
          },
          multiple: function multiple() {
            return this.config.multiple;
          },
          checkStrictly: function checkStrictly() {
            return this.config.checkStrictly;
          },
          leafOnly: function leafOnly() {
            return !this.checkStrictly;
          },
          isHoverMenu: function isHoverMenu() {
            return this.config.expandTrigger === "hover";
          },
          renderLabelFn: function renderLabelFn() {
            return this.renderLabel || this.$scopedSlots.default;
          }
        },
        watch: {
          options: {
            handler: function handler2() {
              this.initStore();
            },
            immediate: true,
            deep: true
          },
          value: function value6() {
            this.syncCheckedValue();
            this.checkStrictly && this.calculateCheckedNodePaths();
          },
          checkedValue: function checkedValue(val) {
            if (!Object(util_["isEqual"])(val, this.value)) {
              this.checkStrictly && this.calculateCheckedNodePaths();
              this.$emit("input", val);
              this.$emit("change", val);
            }
          }
        },
        mounted: function mounted18() {
          if (!this.isEmptyValue(this.value)) {
            this.syncCheckedValue();
          }
        },
        methods: {
          initStore: function initStore() {
            var config2 = this.config, options2 = this.options;
            if (config2.lazy && Object(util_["isEmpty"])(options2)) {
              this.lazyLoad();
            } else {
              this.store = new src_store(options2, config2);
              this.menus = [this.store.getNodes()];
              this.syncMenuState();
            }
          },
          syncCheckedValue: function syncCheckedValue() {
            var value6 = this.value, checkedValue = this.checkedValue;
            if (!Object(util_["isEqual"])(value6, checkedValue)) {
              this.activePath = [];
              this.checkedValue = value6;
              this.syncMenuState();
            }
          },
          syncMenuState: function syncMenuState() {
            var multiple = this.multiple, checkStrictly = this.checkStrictly;
            this.syncActivePath();
            multiple && this.syncMultiCheckState();
            checkStrictly && this.calculateCheckedNodePaths();
            this.$nextTick(this.scrollIntoView);
          },
          syncMultiCheckState: function syncMultiCheckState() {
            var _this = this;
            var nodes = this.getFlattedNodes(this.leafOnly);
            nodes.forEach(function(node) {
              node.syncCheckState(_this.checkedValue);
            });
          },
          isEmptyValue: function isEmptyValue2(val) {
            var multiple = this.multiple, config2 = this.config;
            var emitPath = config2.emitPath;
            if (multiple || emitPath) {
              return Object(util_["isEmpty"])(val);
            }
            return false;
          },
          syncActivePath: function syncActivePath() {
            var _this2 = this;
            var store2 = this.store, multiple = this.multiple, activePath = this.activePath, checkedValue = this.checkedValue;
            if (!Object(util_["isEmpty"])(activePath)) {
              var nodes = activePath.map(function(node) {
                return _this2.getNodeByValue(node.getValue());
              });
              this.expandNodes(nodes);
            } else if (!this.isEmptyValue(checkedValue)) {
              var value6 = multiple ? checkedValue[0] : checkedValue;
              var checkedNode = this.getNodeByValue(value6) || {};
              var _nodes = (checkedNode.pathNodes || []).slice(0, -1);
              this.expandNodes(_nodes);
            } else {
              this.activePath = [];
              this.menus = [store2.getNodes()];
            }
          },
          expandNodes: function expandNodes(nodes) {
            var _this3 = this;
            nodes.forEach(function(node) {
              return _this3.handleExpand(node, true);
            });
          },
          calculateCheckedNodePaths: function calculateCheckedNodePaths() {
            var _this4 = this;
            var checkedValue = this.checkedValue, multiple = this.multiple;
            var checkedValues = multiple ? Object(util_["coerceTruthyValueToArray"])(checkedValue) : [checkedValue];
            this.checkedNodePaths = checkedValues.map(function(v) {
              var checkedNode = _this4.getNodeByValue(v);
              return checkedNode ? checkedNode.pathNodes : [];
            });
          },
          handleKeyDown: function handleKeyDown(e) {
            var target2 = e.target, keyCode = e.keyCode;
            switch (keyCode) {
              case KeyCode.up:
                var prev = getSibling(target2, -1);
                focusNode(prev);
                break;
              case KeyCode.down:
                var next = getSibling(target2, 1);
                focusNode(next);
                break;
              case KeyCode.left:
                var preMenu = this.$refs.menu[getMenuIndex(target2) - 1];
                if (preMenu) {
                  var expandedNode = preMenu.$el.querySelector('.el-cascader-node[aria-expanded="true"]');
                  focusNode(expandedNode);
                }
                break;
              case KeyCode.right:
                var nextMenu = this.$refs.menu[getMenuIndex(target2) + 1];
                if (nextMenu) {
                  var firstNode = nextMenu.$el.querySelector('.el-cascader-node[tabindex="-1"]');
                  focusNode(firstNode);
                }
                break;
              case KeyCode.enter:
                checkNode(target2);
                break;
              case KeyCode.esc:
              case KeyCode.tab:
                this.$emit("close");
                break;
              default:
                return;
            }
          },
          handleExpand: function handleExpand(node, silent) {
            var activePath = this.activePath;
            var level = node.level;
            var path = activePath.slice(0, level - 1);
            var menus2 = this.menus.slice(0, level);
            if (!node.isLeaf) {
              path.push(node);
              menus2.push(node.children);
            }
            this.activePath = path;
            this.menus = menus2;
            if (!silent) {
              var pathValues = path.map(function(node2) {
                return node2.getValue();
              });
              var activePathValues = activePath.map(function(node2) {
                return node2.getValue();
              });
              if (!Object(util_["valueEquals"])(pathValues, activePathValues)) {
                this.$emit("active-item-change", pathValues);
                this.$emit("expand-change", pathValues);
              }
            }
          },
          handleCheckChange: function handleCheckChange(value6) {
            this.checkedValue = value6;
          },
          lazyLoad: function lazyLoad(node, onFullfiled) {
            var _this5 = this;
            var config2 = this.config;
            if (!node) {
              node = node || { root: true, level: 0 };
              this.store = new src_store([], config2);
              this.menus = [this.store.getNodes()];
            }
            node.loading = true;
            var resolve = function resolve2(dataList) {
              var parent2 = node.root ? null : node;
              dataList && dataList.length && _this5.store.appendNodes(dataList, parent2);
              node.loading = false;
              node.loaded = true;
              if (Array.isArray(_this5.checkedValue)) {
                var nodeValue = _this5.checkedValue[_this5.loadCount++];
                var valueKey = _this5.config.value;
                var leafKey = _this5.config.leaf;
                if (Array.isArray(dataList) && dataList.filter(function(item) {
                  return item[valueKey] === nodeValue;
                }).length > 0) {
                  var checkedNode = _this5.store.getNodeByValue(nodeValue);
                  if (!checkedNode.data[leafKey]) {
                    _this5.lazyLoad(checkedNode, function() {
                      _this5.handleExpand(checkedNode);
                    });
                  }
                  if (_this5.loadCount === _this5.checkedValue.length) {
                    _this5.$parent.computePresentText();
                  }
                }
              }
              onFullfiled && onFullfiled(dataList);
            };
            config2.lazyLoad(node, resolve);
          },
          calculateMultiCheckedValue: function calculateMultiCheckedValue() {
            this.checkedValue = this.getCheckedNodes(this.leafOnly).map(function(node) {
              return node.getValueByOption();
            });
          },
          scrollIntoView: function scrollIntoView2() {
            if (this.$isServer)
              return;
            var menus2 = this.$refs.menu || [];
            menus2.forEach(function(menu2) {
              var menuElement = menu2.$el;
              if (menuElement) {
                var container = menuElement.querySelector(".el-scrollbar__wrap");
                var activeNode = menuElement.querySelector(".el-cascader-node.is-active") || menuElement.querySelector(".el-cascader-node.in-active-path");
                scroll_into_view_default()(container, activeNode);
              }
            });
          },
          getNodeByValue: function getNodeByValue(val) {
            return this.store.getNodeByValue(val);
          },
          getFlattedNodes: function getFlattedNodes(leafOnly) {
            var cached2 = !this.config.lazy;
            return this.store.getFlattedNodes(leafOnly, cached2);
          },
          getCheckedNodes: function getCheckedNodes(leafOnly) {
            var checkedValue = this.checkedValue, multiple = this.multiple;
            if (multiple) {
              var nodes = this.getFlattedNodes(leafOnly);
              return nodes.filter(function(node) {
                return node.checked;
              });
            } else {
              return this.isEmptyValue(checkedValue) ? [] : [this.getNodeByValue(checkedValue)];
            }
          },
          clearCheckedNodes: function clearCheckedNodes() {
            var config2 = this.config, leafOnly = this.leafOnly;
            var multiple = config2.multiple, emitPath = config2.emitPath;
            if (multiple) {
              this.getCheckedNodes(leafOnly).filter(function(node) {
                return !node.isDisabled;
              }).forEach(function(node) {
                return node.doCheck(false);
              });
              this.calculateMultiCheckedValue();
            } else {
              this.checkedValue = emitPath ? [] : null;
            }
          }
        }
      };
      var src_cascader_panelvue_type_script_lang_js_ = cascader_panelvue_type_script_lang_js_;
      var cascader_panel_component = Object(componentNormalizer["a"])(src_cascader_panelvue_type_script_lang_js_, cascader_panelvue_type_template_id_34932346_render, staticRenderFns, false, null, null, null);
      cascader_panel_component.options.__file = "packages/cascader-panel/src/cascader-panel.vue";
      var cascader_panel = cascader_panel_component.exports;
      cascader_panel.install = function(Vue2) {
        Vue2.component(cascader_panel.name, cascader_panel);
      };
      __webpack_exports__["default"] = cascader_panel;
    },
    6: function(module3, exports2) {
      module3.exports = locale;
    },
    9: function(module3, exports2) {
      module3.exports = merge$2;
    }
  });
})(cascaderPanel);
var popover = { exports: {} };
(function(module2) {
  module2.exports = function(modules2) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
      if (installedModules[moduleId]) {
        return installedModules[moduleId].exports;
      }
      var module3 = installedModules[moduleId] = {
        i: moduleId,
        l: false,
        exports: {}
      };
      modules2[moduleId].call(module3.exports, module3, module3.exports, __webpack_require__);
      module3.l = true;
      return module3.exports;
    }
    __webpack_require__.m = modules2;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports2, name, getter) {
      if (!__webpack_require__.o(exports2, name)) {
        Object.defineProperty(exports2, name, { enumerable: true, get: getter });
      }
    };
    __webpack_require__.r = function(exports2) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(exports2, Symbol.toStringTag, { value: "Module" });
      }
      Object.defineProperty(exports2, "__esModule", { value: true });
    };
    __webpack_require__.t = function(value6, mode) {
      if (mode & 1)
        value6 = __webpack_require__(value6);
      if (mode & 8)
        return value6;
      if (mode & 4 && typeof value6 === "object" && value6 && value6.__esModule)
        return value6;
      var ns = /* @__PURE__ */ Object.create(null);
      __webpack_require__.r(ns);
      Object.defineProperty(ns, "default", { enumerable: true, value: value6 });
      if (mode & 2 && typeof value6 != "string")
        for (var key in value6)
          __webpack_require__.d(ns, key, function(key2) {
            return value6[key2];
          }.bind(null, key));
      return ns;
    };
    __webpack_require__.n = function(module3) {
      var getter = module3 && module3.__esModule ? function getDefault() {
        return module3["default"];
      } : function getModuleExports() {
        return module3;
      };
      __webpack_require__.d(getter, "a", getter);
      return getter;
    };
    __webpack_require__.o = function(object3, property2) {
      return Object.prototype.hasOwnProperty.call(object3, property2);
    };
    __webpack_require__.p = "/dist/";
    return __webpack_require__(__webpack_require__.s = 79);
  }({
    0: function(module3, __webpack_exports__, __webpack_require__) {
      __webpack_require__.d(__webpack_exports__, "a", function() {
        return normalizeComponent;
      });
      function normalizeComponent(scriptExports, render37, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
        var options2 = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
        if (render37) {
          options2.render = render37;
          options2.staticRenderFns = staticRenderFns;
          options2._compiled = true;
        }
        if (functionalTemplate) {
          options2.functional = true;
        }
        if (scopeId) {
          options2._scopeId = "data-v-" + scopeId;
        }
        var hook;
        if (moduleIdentifier) {
          hook = function(context) {
            context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
            if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
              context = __VUE_SSR_CONTEXT__;
            }
            if (injectStyles) {
              injectStyles.call(this, context);
            }
            if (context && context._registeredComponents) {
              context._registeredComponents.add(moduleIdentifier);
            }
          };
          options2._ssrRegister = hook;
        } else if (injectStyles) {
          hook = shadowMode ? function() {
            injectStyles.call(this, this.$root.$options.shadowRoot);
          } : injectStyles;
        }
        if (hook) {
          if (options2.functional) {
            options2._injectStyles = hook;
            var originalRender = options2.render;
            options2.render = function renderWithStyleInjection(h, context) {
              hook.call(context);
              return originalRender(h, context);
            };
          } else {
            var existing = options2.beforeCreate;
            options2.beforeCreate = existing ? [].concat(existing, hook) : [hook];
          }
        }
        return {
          exports: scriptExports,
          options: options2
        };
      }
    },
    2: function(module3, exports2) {
      module3.exports = dom;
    },
    3: function(module3, exports2) {
      module3.exports = util;
    },
    5: function(module3, exports2) {
      module3.exports = vuePopper;
    },
    7: function(module3, exports2) {
      module3.exports = require$$6;
    },
    79: function(module3, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      var render37 = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("span", [
          _c("transition", {
            attrs: { name: _vm.transition },
            on: {
              "after-enter": _vm.handleAfterEnter,
              "after-leave": _vm.handleAfterLeave
            }
          }, [
            _c("div", {
              directives: [
                {
                  name: "show",
                  rawName: "v-show",
                  value: !_vm.disabled && _vm.showPopper,
                  expression: "!disabled && showPopper"
                }
              ],
              ref: "popper",
              staticClass: "el-popover el-popper",
              class: [_vm.popperClass, _vm.content && "el-popover--plain"],
              style: { width: _vm.width + "px" },
              attrs: {
                role: "tooltip",
                id: _vm.tooltipId,
                "aria-hidden": _vm.disabled || !_vm.showPopper ? "true" : "false"
              }
            }, [
              _vm.title ? _c("div", {
                staticClass: "el-popover__title",
                domProps: { textContent: _vm._s(_vm.title) }
              }) : _vm._e(),
              _vm._t("default", [_vm._v(_vm._s(_vm.content))])
            ], 2)
          ]),
          _c("span", { ref: "wrapper", staticClass: "el-popover__reference-wrapper" }, [_vm._t("reference")], 2)
        ], 1);
      };
      var staticRenderFns = [];
      render37._withStripped = true;
      var vue_popper_ = __webpack_require__(5);
      var vue_popper_default = /* @__PURE__ */ __webpack_require__.n(vue_popper_);
      var dom_ = __webpack_require__(2);
      var util_ = __webpack_require__(3);
      var mainvue_type_script_lang_js_ = {
        name: "ElPopover",
        mixins: [vue_popper_default.a],
        props: {
          trigger: {
            type: String,
            default: "click",
            validator: function validator2(value6) {
              return ["click", "focus", "hover", "manual"].indexOf(value6) > -1;
            }
          },
          openDelay: {
            type: Number,
            default: 0
          },
          closeDelay: {
            type: Number,
            default: 200
          },
          title: String,
          disabled: Boolean,
          content: String,
          reference: {},
          popperClass: String,
          width: {},
          visibleArrow: {
            default: true
          },
          arrowOffset: {
            type: Number,
            default: 0
          },
          transition: {
            type: String,
            default: "fade-in-linear"
          },
          tabindex: {
            type: Number,
            default: 0
          }
        },
        computed: {
          tooltipId: function tooltipId() {
            return "el-popover-" + Object(util_["generateId"])();
          }
        },
        watch: {
          showPopper: function showPopper2(val) {
            if (this.disabled) {
              return;
            }
            val ? this.$emit("show") : this.$emit("hide");
          }
        },
        mounted: function mounted18() {
          var _this = this;
          var reference = this.referenceElm = this.reference || this.$refs.reference;
          var popper2 = this.popper || this.$refs.popper;
          if (!reference && this.$refs.wrapper.children) {
            reference = this.referenceElm = this.$refs.wrapper.children[0];
          }
          if (reference) {
            Object(dom_["addClass"])(reference, "el-popover__reference");
            reference.setAttribute("aria-describedby", this.tooltipId);
            reference.setAttribute("tabindex", this.tabindex);
            popper2.setAttribute("tabindex", 0);
            if (this.trigger !== "click") {
              Object(dom_["on"])(reference, "focusin", function() {
                _this.handleFocus();
                var instance = reference.__vue__;
                if (instance && typeof instance.focus === "function") {
                  instance.focus();
                }
              });
              Object(dom_["on"])(popper2, "focusin", this.handleFocus);
              Object(dom_["on"])(reference, "focusout", this.handleBlur);
              Object(dom_["on"])(popper2, "focusout", this.handleBlur);
            }
            Object(dom_["on"])(reference, "keydown", this.handleKeydown);
            Object(dom_["on"])(reference, "click", this.handleClick);
          }
          if (this.trigger === "click") {
            Object(dom_["on"])(reference, "click", this.doToggle);
            Object(dom_["on"])(document, "click", this.handleDocumentClick);
          } else if (this.trigger === "hover") {
            Object(dom_["on"])(reference, "mouseenter", this.handleMouseEnter);
            Object(dom_["on"])(popper2, "mouseenter", this.handleMouseEnter);
            Object(dom_["on"])(reference, "mouseleave", this.handleMouseLeave);
            Object(dom_["on"])(popper2, "mouseleave", this.handleMouseLeave);
          } else if (this.trigger === "focus") {
            if (this.tabindex < 0) {
              console.warn("[Element Warn][Popover]a negative taindex means that the element cannot be focused by tab key");
            }
            if (reference.querySelector("input, textarea")) {
              Object(dom_["on"])(reference, "focusin", this.doShow);
              Object(dom_["on"])(reference, "focusout", this.doClose);
            } else {
              Object(dom_["on"])(reference, "mousedown", this.doShow);
              Object(dom_["on"])(reference, "mouseup", this.doClose);
            }
          }
        },
        beforeDestroy: function beforeDestroy13() {
          this.cleanup();
        },
        deactivated: function deactivated3() {
          this.cleanup();
        },
        methods: {
          doToggle: function doToggle() {
            this.showPopper = !this.showPopper;
          },
          doShow: function doShow() {
            this.showPopper = true;
          },
          doClose: function doClose2() {
            this.showPopper = false;
          },
          handleFocus: function handleFocus3() {
            Object(dom_["addClass"])(this.referenceElm, "focusing");
            if (this.trigger === "click" || this.trigger === "focus")
              this.showPopper = true;
          },
          handleClick: function handleClick() {
            Object(dom_["removeClass"])(this.referenceElm, "focusing");
          },
          handleBlur: function handleBlur() {
            Object(dom_["removeClass"])(this.referenceElm, "focusing");
            if (this.trigger === "click" || this.trigger === "focus")
              this.showPopper = false;
          },
          handleMouseEnter: function handleMouseEnter() {
            var _this2 = this;
            clearTimeout(this._timer);
            if (this.openDelay) {
              this._timer = setTimeout(function() {
                _this2.showPopper = true;
              }, this.openDelay);
            } else {
              this.showPopper = true;
            }
          },
          handleKeydown: function handleKeydown(ev) {
            if (ev.keyCode === 27 && this.trigger !== "manual") {
              this.doClose();
            }
          },
          handleMouseLeave: function handleMouseLeave() {
            var _this3 = this;
            clearTimeout(this._timer);
            if (this.closeDelay) {
              this._timer = setTimeout(function() {
                _this3.showPopper = false;
              }, this.closeDelay);
            } else {
              this.showPopper = false;
            }
          },
          handleDocumentClick: function handleDocumentClick(e) {
            var reference = this.reference || this.$refs.reference;
            var popper2 = this.popper || this.$refs.popper;
            if (!reference && this.$refs.wrapper.children) {
              reference = this.referenceElm = this.$refs.wrapper.children[0];
            }
            if (!this.$el || !reference || this.$el.contains(e.target) || reference.contains(e.target) || !popper2 || popper2.contains(e.target))
              return;
            this.showPopper = false;
          },
          handleAfterEnter: function handleAfterEnter() {
            this.$emit("after-enter");
          },
          handleAfterLeave: function handleAfterLeave() {
            this.$emit("after-leave");
            this.doDestroy();
          },
          cleanup: function cleanup() {
            if (this.openDelay || this.closeDelay) {
              clearTimeout(this._timer);
            }
          }
        },
        destroyed: function destroyed17() {
          var reference = this.reference;
          Object(dom_["off"])(reference, "click", this.doToggle);
          Object(dom_["off"])(reference, "mouseup", this.doClose);
          Object(dom_["off"])(reference, "mousedown", this.doShow);
          Object(dom_["off"])(reference, "focusin", this.doShow);
          Object(dom_["off"])(reference, "focusout", this.doClose);
          Object(dom_["off"])(reference, "mousedown", this.doShow);
          Object(dom_["off"])(reference, "mouseup", this.doClose);
          Object(dom_["off"])(reference, "mouseleave", this.handleMouseLeave);
          Object(dom_["off"])(reference, "mouseenter", this.handleMouseEnter);
          Object(dom_["off"])(document, "click", this.handleDocumentClick);
        }
      };
      var src_mainvue_type_script_lang_js_ = mainvue_type_script_lang_js_;
      var componentNormalizer = __webpack_require__(0);
      var component = Object(componentNormalizer["a"])(src_mainvue_type_script_lang_js_, render37, staticRenderFns, false, null, null, null);
      component.options.__file = "packages/popover/src/main.vue";
      var main = component.exports;
      var getReference = function getReference2(el, binding, vnode) {
        var _ref = binding.expression ? binding.value : binding.arg;
        var popper2 = vnode.context.$refs[_ref];
        if (popper2) {
          if (Array.isArray(popper2)) {
            popper2[0].$refs.reference = el;
          } else {
            popper2.$refs.reference = el;
          }
        }
      };
      var directive2 = {
        bind: function bind4(el, binding, vnode) {
          getReference(el, binding, vnode);
        },
        inserted: function inserted2(el, binding, vnode) {
          getReference(el, binding, vnode);
        }
      };
      var external_vue_ = __webpack_require__(7);
      var external_vue_default = /* @__PURE__ */ __webpack_require__.n(external_vue_);
      external_vue_default.a.directive("popover", directive2);
      main.install = function(Vue2) {
        Vue2.directive("popover", directive2);
        Vue2.component(main.name, main);
      };
      main.directive = directive2;
      __webpack_exports__["default"] = main;
    }
  });
})(popover);
(function(module2) {
  module2.exports = function(modules2) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
      if (installedModules[moduleId]) {
        return installedModules[moduleId].exports;
      }
      var module3 = installedModules[moduleId] = {
        i: moduleId,
        l: false,
        exports: {}
      };
      modules2[moduleId].call(module3.exports, module3, module3.exports, __webpack_require__);
      module3.l = true;
      return module3.exports;
    }
    __webpack_require__.m = modules2;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports2, name, getter) {
      if (!__webpack_require__.o(exports2, name)) {
        Object.defineProperty(exports2, name, { enumerable: true, get: getter });
      }
    };
    __webpack_require__.r = function(exports2) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(exports2, Symbol.toStringTag, { value: "Module" });
      }
      Object.defineProperty(exports2, "__esModule", { value: true });
    };
    __webpack_require__.t = function(value6, mode) {
      if (mode & 1)
        value6 = __webpack_require__(value6);
      if (mode & 8)
        return value6;
      if (mode & 4 && typeof value6 === "object" && value6 && value6.__esModule)
        return value6;
      var ns = /* @__PURE__ */ Object.create(null);
      __webpack_require__.r(ns);
      Object.defineProperty(ns, "default", { enumerable: true, value: value6 });
      if (mode & 2 && typeof value6 != "string")
        for (var key in value6)
          __webpack_require__.d(ns, key, function(key2) {
            return value6[key2];
          }.bind(null, key));
      return ns;
    };
    __webpack_require__.n = function(module3) {
      var getter = module3 && module3.__esModule ? function getDefault() {
        return module3["default"];
      } : function getModuleExports() {
        return module3;
      };
      __webpack_require__.d(getter, "a", getter);
      return getter;
    };
    __webpack_require__.o = function(object3, property2) {
      return Object.prototype.hasOwnProperty.call(object3, property2);
    };
    __webpack_require__.p = "/dist/";
    return __webpack_require__(__webpack_require__.s = 45);
  }([
    function(module3, exports2) {
      module3.exports = dateUtil;
    },
    function(module3, exports2) {
      module3.exports = dom;
    },
    function(module3, exports2) {
      module3.exports = util;
    },
    function(module3, exports2) {
      module3.exports = emitter;
    },
    function(module3, exports2) {
      module3.exports = locale;
    },
    function(module3, exports2) {
      module3.exports = vuePopper;
    },
    function(module3, exports2) {
      module3.exports = require$$6;
    },
    function(module3, exports2) {
      module3.exports = merge$2;
    },
    function(module3, exports2) {
      module3.exports = input.exports;
    },
    function(module3, exports2) {
      module3.exports = migrating;
    },
    function(module3, exports2) {
      module3.exports = clickoutside;
    },
    function(module3, exports2) {
      module3.exports = popup;
    },
    function(module3, exports2) {
      module3.exports = locale$2;
    },
    function(module3, exports2) {
      module3.exports = button.exports;
    },
    function(module3, exports2) {
      module3.exports = resizeEvent;
    },
    function(module3, exports2) {
      module3.exports = types$1;
    },
    function(module3, exports2) {
      module3.exports = debounce$2;
    },
    function(module3, exports2) {
      module3.exports = checkbox.exports;
    },
    function(module3, exports2) {
      module3.exports = scrollbar.exports;
    },
    function(module3, exports2) {
      module3.exports = shared$2;
    },
    function(module3, exports2) {
      module3.exports = date$1.exports;
    },
    function(module3, exports2) {
      module3.exports = collapseTransition;
    },
    function(module3, exports2) {
      module3.exports = vdom;
    },
    function(module3, exports2) {
      module3.exports = focus6;
    },
    function(module3, exports2) {
      module3.exports = babelHelperVueJsxMergeProps;
    },
    function(module3, exports2) {
      module3.exports = throttle$2;
    },
    function(module3, exports2) {
      module3.exports = tooltip.exports;
    },
    function(module3, exports2) {
      module3.exports = scrollIntoView$1;
    },
    function(module3, exports2) {
      module3.exports = buttonGroup.exports;
    },
    function(module3, exports2) {
      module3.exports = tag.exports;
    },
    function(module3, exports2) {
      module3.exports = scrollbarWidth;
    },
    function(module3, exports2) {
      module3.exports = checkboxGroup.exports;
    },
    function(module3, exports2) {
      module3.exports = afterLeave;
    },
    function(module3, exports2) {
      module3.exports = progress.exports;
    },
    function(module3, exports2) {
      module3.exports = ariaUtils;
    },
    function(module3, exports2) {
      module3.exports = throttleDebounce;
    },
    function(module3, exports2) {
      module3.exports = select.exports;
    },
    function(module3, exports2) {
      module3.exports = option.exports;
    },
    function(module3, exports2) {
      module3.exports = normalizeWheel;
    },
    function(module3, exports2) {
      module3.exports = ariaDialog;
    },
    function(module3, exports2) {
      module3.exports = require$$40;
    },
    function(module3, exports2) {
      module3.exports = inputNumber.exports;
    },
    function(module3, exports2) {
      module3.exports = cascaderPanel.exports;
    },
    function(module3, exports2) {
      module3.exports = radio.exports;
    },
    function(module3, exports2) {
      module3.exports = popover.exports;
    },
    function(module3, exports2, __webpack_require__) {
      module3.exports = __webpack_require__(46);
    },
    function(module3, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      var pagervue_type_template_id_7274f267_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("ul", { staticClass: "el-pager", on: { click: _vm.onPagerClick } }, [
          _vm.pageCount > 0 ? _c("li", {
            staticClass: "number",
            class: { active: _vm.currentPage === 1, disabled: _vm.disabled }
          }, [_vm._v("1")]) : _vm._e(),
          _vm.showPrevMore ? _c("li", {
            staticClass: "el-icon more btn-quickprev",
            class: [_vm.quickprevIconClass, { disabled: _vm.disabled }],
            on: {
              mouseenter: function($event) {
                _vm.onMouseenter("left");
              },
              mouseleave: function($event) {
                _vm.quickprevIconClass = "el-icon-more";
              }
            }
          }) : _vm._e(),
          _vm._l(_vm.pagers, function(pager3) {
            return _c("li", {
              key: pager3,
              staticClass: "number",
              class: { active: _vm.currentPage === pager3, disabled: _vm.disabled }
            }, [_vm._v(_vm._s(pager3))]);
          }),
          _vm.showNextMore ? _c("li", {
            staticClass: "el-icon more btn-quicknext",
            class: [_vm.quicknextIconClass, { disabled: _vm.disabled }],
            on: {
              mouseenter: function($event) {
                _vm.onMouseenter("right");
              },
              mouseleave: function($event) {
                _vm.quicknextIconClass = "el-icon-more";
              }
            }
          }) : _vm._e(),
          _vm.pageCount > 1 ? _c("li", {
            staticClass: "number",
            class: {
              active: _vm.currentPage === _vm.pageCount,
              disabled: _vm.disabled
            }
          }, [_vm._v(_vm._s(_vm.pageCount))]) : _vm._e()
        ], 2);
      };
      var staticRenderFns = [];
      pagervue_type_template_id_7274f267_render._withStripped = true;
      var pagervue_type_script_lang_js_ = {
        name: "ElPager",
        props: {
          currentPage: Number,
          pageCount: Number,
          pagerCount: Number,
          disabled: Boolean
        },
        watch: {
          showPrevMore: function showPrevMore(val) {
            if (!val)
              this.quickprevIconClass = "el-icon-more";
          },
          showNextMore: function showNextMore(val) {
            if (!val)
              this.quicknextIconClass = "el-icon-more";
          }
        },
        methods: {
          onPagerClick: function onPagerClick(event2) {
            var target2 = event2.target;
            if (target2.tagName === "UL" || this.disabled) {
              return;
            }
            var newPage = Number(event2.target.textContent);
            var pageCount2 = this.pageCount;
            var currentPage2 = this.currentPage;
            var pagerCountOffset = this.pagerCount - 2;
            if (target2.className.indexOf("more") !== -1) {
              if (target2.className.indexOf("quickprev") !== -1) {
                newPage = currentPage2 - pagerCountOffset;
              } else if (target2.className.indexOf("quicknext") !== -1) {
                newPage = currentPage2 + pagerCountOffset;
              }
            }
            if (!isNaN(newPage)) {
              if (newPage < 1) {
                newPage = 1;
              }
              if (newPage > pageCount2) {
                newPage = pageCount2;
              }
            }
            if (newPage !== currentPage2) {
              this.$emit("change", newPage);
            }
          },
          onMouseenter: function onMouseenter(direction) {
            if (this.disabled)
              return;
            if (direction === "left") {
              this.quickprevIconClass = "el-icon-d-arrow-left";
            } else {
              this.quicknextIconClass = "el-icon-d-arrow-right";
            }
          }
        },
        computed: {
          pagers: function pagers() {
            var pagerCount = this.pagerCount;
            var halfPagerCount = (pagerCount - 1) / 2;
            var currentPage2 = Number(this.currentPage);
            var pageCount2 = Number(this.pageCount);
            var showPrevMore = false;
            var showNextMore = false;
            if (pageCount2 > pagerCount) {
              if (currentPage2 > pagerCount - halfPagerCount) {
                showPrevMore = true;
              }
              if (currentPage2 < pageCount2 - halfPagerCount) {
                showNextMore = true;
              }
            }
            var array3 = [];
            if (showPrevMore && !showNextMore) {
              var startPage = pageCount2 - (pagerCount - 2);
              for (var i = startPage; i < pageCount2; i++) {
                array3.push(i);
              }
            } else if (!showPrevMore && showNextMore) {
              for (var _i = 2; _i < pagerCount; _i++) {
                array3.push(_i);
              }
            } else if (showPrevMore && showNextMore) {
              var offset = Math.floor(pagerCount / 2) - 1;
              for (var _i2 = currentPage2 - offset; _i2 <= currentPage2 + offset; _i2++) {
                array3.push(_i2);
              }
            } else {
              for (var _i3 = 2; _i3 < pageCount2; _i3++) {
                array3.push(_i3);
              }
            }
            this.showPrevMore = showPrevMore;
            this.showNextMore = showNextMore;
            return array3;
          }
        },
        data: function data25() {
          return {
            current: null,
            showPrevMore: false,
            showNextMore: false,
            quicknextIconClass: "el-icon-more",
            quickprevIconClass: "el-icon-more"
          };
        }
      };
      var src_pagervue_type_script_lang_js_ = pagervue_type_script_lang_js_;
      function normalizeComponent(scriptExports, render37, staticRenderFns2, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
        var options2 = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
        if (render37) {
          options2.render = render37;
          options2.staticRenderFns = staticRenderFns2;
          options2._compiled = true;
        }
        if (functionalTemplate) {
          options2.functional = true;
        }
        if (scopeId) {
          options2._scopeId = "data-v-" + scopeId;
        }
        var hook;
        if (moduleIdentifier) {
          hook = function(context) {
            context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
            if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
              context = __VUE_SSR_CONTEXT__;
            }
            if (injectStyles) {
              injectStyles.call(this, context);
            }
            if (context && context._registeredComponents) {
              context._registeredComponents.add(moduleIdentifier);
            }
          };
          options2._ssrRegister = hook;
        } else if (injectStyles) {
          hook = shadowMode ? function() {
            injectStyles.call(this, this.$root.$options.shadowRoot);
          } : injectStyles;
        }
        if (hook) {
          if (options2.functional) {
            options2._injectStyles = hook;
            var originalRender = options2.render;
            options2.render = function renderWithStyleInjection(h, context) {
              hook.call(context);
              return originalRender(h, context);
            };
          } else {
            var existing = options2.beforeCreate;
            options2.beforeCreate = existing ? [].concat(existing, hook) : [hook];
          }
        }
        return {
          exports: scriptExports,
          options: options2
        };
      }
      var component = normalizeComponent(src_pagervue_type_script_lang_js_, pagervue_type_template_id_7274f267_render, staticRenderFns, false, null, null, null);
      component.options.__file = "packages/pagination/src/pager.vue";
      var pager2 = component.exports;
      var select_ = __webpack_require__(36);
      var select_default = /* @__PURE__ */ __webpack_require__.n(select_);
      var option_ = __webpack_require__(37);
      var option_default = /* @__PURE__ */ __webpack_require__.n(option_);
      var input_ = __webpack_require__(8);
      var input_default = /* @__PURE__ */ __webpack_require__.n(input_);
      var locale_ = __webpack_require__(4);
      var locale_default = /* @__PURE__ */ __webpack_require__.n(locale_);
      var util_ = __webpack_require__(2);
      var pagination = {
        name: "ElPagination",
        props: {
          pageSize: {
            type: Number,
            default: 10
          },
          small: Boolean,
          total: Number,
          pageCount: Number,
          pagerCount: {
            type: Number,
            validator: function validator2(value6) {
              return (value6 | 0) === value6 && value6 > 4 && value6 < 22 && value6 % 2 === 1;
            },
            default: 7
          },
          currentPage: {
            type: Number,
            default: 1
          },
          layout: {
            default: "prev, pager, next, jumper, ->, total"
          },
          pageSizes: {
            type: Array,
            default: function _default116() {
              return [10, 20, 30, 40, 50, 100];
            }
          },
          popperClass: String,
          prevText: String,
          nextText: String,
          background: Boolean,
          disabled: Boolean,
          hideOnSinglePage: Boolean
        },
        data: function data25() {
          return {
            internalCurrentPage: 1,
            internalPageSize: 0,
            lastEmittedPage: -1,
            userChangePageSize: false
          };
        },
        render: function render37(h) {
          var layout = this.layout;
          if (!layout)
            return null;
          if (this.hideOnSinglePage && (!this.internalPageCount || this.internalPageCount === 1))
            return null;
          var template2 = h("div", { "class": ["el-pagination", {
            "is-background": this.background,
            "el-pagination--small": this.small
          }] });
          var TEMPLATE_MAP = {
            prev: h("prev"),
            jumper: h("jumper"),
            pager: h("pager", {
              attrs: { currentPage: this.internalCurrentPage, pageCount: this.internalPageCount, pagerCount: this.pagerCount, disabled: this.disabled },
              on: {
                "change": this.handleCurrentChange
              }
            }),
            next: h("next"),
            sizes: h("sizes", {
              attrs: { pageSizes: this.pageSizes }
            }),
            slot: h("slot", [this.$slots.default ? this.$slots.default : ""]),
            total: h("total")
          };
          var components2 = layout.split(",").map(function(item) {
            return item.trim();
          });
          var rightWrapper = h("div", { "class": "el-pagination__rightwrapper" });
          var haveRightWrapper = false;
          template2.children = template2.children || [];
          rightWrapper.children = rightWrapper.children || [];
          components2.forEach(function(compo) {
            if (compo === "->") {
              haveRightWrapper = true;
              return;
            }
            if (!haveRightWrapper) {
              template2.children.push(TEMPLATE_MAP[compo]);
            } else {
              rightWrapper.children.push(TEMPLATE_MAP[compo]);
            }
          });
          if (haveRightWrapper) {
            template2.children.unshift(rightWrapper);
          }
          return template2;
        },
        components: {
          Prev: {
            render: function render37(h) {
              return h("button", {
                attrs: {
                  type: "button",
                  disabled: this.$parent.disabled || this.$parent.internalCurrentPage <= 1
                },
                "class": "btn-prev",
                on: {
                  "click": this.$parent.prev
                }
              }, [this.$parent.prevText ? h("span", [this.$parent.prevText]) : h("i", { "class": "el-icon el-icon-arrow-left" })]);
            }
          },
          Next: {
            render: function render37(h) {
              return h("button", {
                attrs: {
                  type: "button",
                  disabled: this.$parent.disabled || this.$parent.internalCurrentPage === this.$parent.internalPageCount || this.$parent.internalPageCount === 0
                },
                "class": "btn-next",
                on: {
                  "click": this.$parent.next
                }
              }, [this.$parent.nextText ? h("span", [this.$parent.nextText]) : h("i", { "class": "el-icon el-icon-arrow-right" })]);
            }
          },
          Sizes: {
            mixins: [locale_default.a],
            props: {
              pageSizes: Array
            },
            watch: {
              pageSizes: {
                immediate: true,
                handler: function handler2(newVal, oldVal) {
                  if (Object(util_["valueEquals"])(newVal, oldVal))
                    return;
                  if (Array.isArray(newVal)) {
                    this.$parent.internalPageSize = newVal.indexOf(this.$parent.pageSize) > -1 ? this.$parent.pageSize : this.pageSizes[0];
                  }
                }
              }
            },
            render: function render37(h) {
              var _this = this;
              return h("span", { "class": "el-pagination__sizes" }, [h("el-select", {
                attrs: {
                  value: this.$parent.internalPageSize,
                  popperClass: this.$parent.popperClass || "",
                  size: "mini",
                  disabled: this.$parent.disabled
                },
                on: {
                  "input": this.handleChange
                }
              }, [this.pageSizes.map(function(item) {
                return h("el-option", {
                  attrs: {
                    value: item,
                    label: item + _this.t("el.pagination.pagesize")
                  }
                });
              })])]);
            },
            components: {
              ElSelect: select_default.a,
              ElOption: option_default.a
            },
            methods: {
              handleChange: function handleChange(val) {
                if (val !== this.$parent.internalPageSize) {
                  this.$parent.internalPageSize = val = parseInt(val, 10);
                  this.$parent.userChangePageSize = true;
                  this.$parent.$emit("update:pageSize", val);
                  this.$parent.$emit("size-change", val);
                }
              }
            }
          },
          Jumper: {
            mixins: [locale_default.a],
            components: { ElInput: input_default.a },
            data: function data25() {
              return {
                userInput: null
              };
            },
            watch: {
              "$parent.internalCurrentPage": function $parentInternalCurrentPage() {
                this.userInput = null;
              }
            },
            methods: {
              handleKeyup: function handleKeyup(_ref) {
                var keyCode2 = _ref.keyCode, target2 = _ref.target;
                if (keyCode2 === 13) {
                  this.handleChange(target2.value);
                }
              },
              handleInput: function handleInput(value6) {
                this.userInput = value6;
              },
              handleChange: function handleChange(value6) {
                this.$parent.internalCurrentPage = this.$parent.getValidCurrentPage(value6);
                this.$parent.emitChange();
                this.userInput = null;
              }
            },
            render: function render37(h) {
              return h("span", { "class": "el-pagination__jump" }, [this.t("el.pagination.goto"), h("el-input", {
                "class": "el-pagination__editor is-in-pagination",
                attrs: {
                  min: 1,
                  max: this.$parent.internalPageCount,
                  value: this.userInput !== null ? this.userInput : this.$parent.internalCurrentPage,
                  type: "number",
                  disabled: this.$parent.disabled
                },
                nativeOn: {
                  "keyup": this.handleKeyup
                },
                on: {
                  "input": this.handleInput,
                  "change": this.handleChange
                }
              }), this.t("el.pagination.pageClassifier")]);
            }
          },
          Total: {
            mixins: [locale_default.a],
            render: function render37(h) {
              return typeof this.$parent.total === "number" ? h("span", { "class": "el-pagination__total" }, [this.t("el.pagination.total", { total: this.$parent.total })]) : "";
            }
          },
          Pager: pager2
        },
        methods: {
          handleCurrentChange: function handleCurrentChange(val) {
            this.internalCurrentPage = this.getValidCurrentPage(val);
            this.userChangePageSize = true;
            this.emitChange();
          },
          prev: function prev() {
            if (this.disabled)
              return;
            var newVal = this.internalCurrentPage - 1;
            this.internalCurrentPage = this.getValidCurrentPage(newVal);
            this.$emit("prev-click", this.internalCurrentPage);
            this.emitChange();
          },
          next: function next() {
            if (this.disabled)
              return;
            var newVal = this.internalCurrentPage + 1;
            this.internalCurrentPage = this.getValidCurrentPage(newVal);
            this.$emit("next-click", this.internalCurrentPage);
            this.emitChange();
          },
          getValidCurrentPage: function getValidCurrentPage(value6) {
            value6 = parseInt(value6, 10);
            var havePageCount = typeof this.internalPageCount === "number";
            var resetValue = void 0;
            if (!havePageCount) {
              if (isNaN(value6) || value6 < 1)
                resetValue = 1;
            } else {
              if (value6 < 1) {
                resetValue = 1;
              } else if (value6 > this.internalPageCount) {
                resetValue = this.internalPageCount;
              }
            }
            if (resetValue === void 0 && isNaN(value6)) {
              resetValue = 1;
            } else if (resetValue === 0) {
              resetValue = 1;
            }
            return resetValue === void 0 ? value6 : resetValue;
          },
          emitChange: function emitChange() {
            var _this2 = this;
            this.$nextTick(function() {
              if (_this2.internalCurrentPage !== _this2.lastEmittedPage || _this2.userChangePageSize) {
                _this2.$emit("current-change", _this2.internalCurrentPage);
                _this2.lastEmittedPage = _this2.internalCurrentPage;
                _this2.userChangePageSize = false;
              }
            });
          }
        },
        computed: {
          internalPageCount: function internalPageCount() {
            if (typeof this.total === "number") {
              return Math.max(1, Math.ceil(this.total / this.internalPageSize));
            } else if (typeof this.pageCount === "number") {
              return Math.max(1, this.pageCount);
            }
            return null;
          }
        },
        watch: {
          currentPage: {
            immediate: true,
            handler: function handler2(val) {
              this.internalCurrentPage = this.getValidCurrentPage(val);
            }
          },
          pageSize: {
            immediate: true,
            handler: function handler2(val) {
              this.internalPageSize = isNaN(val) ? 10 : val;
            }
          },
          internalCurrentPage: {
            immediate: true,
            handler: function handler2(newVal) {
              this.$emit("update:currentPage", newVal);
              this.lastEmittedPage = -1;
            }
          },
          internalPageCount: function internalPageCount(newVal) {
            var oldPage = this.internalCurrentPage;
            if (newVal > 0 && oldPage === 0) {
              this.internalCurrentPage = 1;
            } else if (oldPage > newVal) {
              this.internalCurrentPage = newVal === 0 ? 1 : newVal;
              this.userChangePageSize && this.emitChange();
            }
            this.userChangePageSize = false;
          }
        }
      };
      pagination.install = function(Vue2) {
        Vue2.component(pagination.name, pagination);
      };
      var packages_pagination = pagination;
      var componentvue_type_template_id_60140e62_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("transition", {
          attrs: { name: "dialog-fade" },
          on: { "after-enter": _vm.afterEnter, "after-leave": _vm.afterLeave }
        }, [
          _c("div", {
            directives: [
              {
                name: "show",
                rawName: "v-show",
                value: _vm.visible,
                expression: "visible"
              }
            ],
            staticClass: "el-dialog__wrapper",
            on: {
              click: function($event) {
                if ($event.target !== $event.currentTarget) {
                  return null;
                }
                return _vm.handleWrapperClick($event);
              }
            }
          }, [
            _c("div", {
              key: _vm.key,
              ref: "dialog",
              class: [
                "el-dialog",
                {
                  "is-fullscreen": _vm.fullscreen,
                  "el-dialog--center": _vm.center
                },
                _vm.customClass
              ],
              style: _vm.style,
              attrs: {
                role: "dialog",
                "aria-modal": "true",
                "aria-label": _vm.title || "dialog"
              }
            }, [
              _c("div", { staticClass: "el-dialog__header" }, [
                _vm._t("title", [
                  _c("span", { staticClass: "el-dialog__title" }, [
                    _vm._v(_vm._s(_vm.title))
                  ])
                ]),
                _vm.showClose ? _c("button", {
                  staticClass: "el-dialog__headerbtn",
                  attrs: { type: "button", "aria-label": "Close" },
                  on: { click: _vm.handleClose }
                }, [
                  _c("i", {
                    staticClass: "el-dialog__close el-icon el-icon-close"
                  })
                ]) : _vm._e()
              ], 2),
              _vm.rendered ? _c("div", { staticClass: "el-dialog__body" }, [_vm._t("default")], 2) : _vm._e(),
              _vm.$slots.footer ? _c("div", { staticClass: "el-dialog__footer" }, [_vm._t("footer")], 2) : _vm._e()
            ])
          ])
        ]);
      };
      var componentvue_type_template_id_60140e62_staticRenderFns = [];
      componentvue_type_template_id_60140e62_render._withStripped = true;
      var popup_ = __webpack_require__(11);
      var popup_default = /* @__PURE__ */ __webpack_require__.n(popup_);
      var migrating_ = __webpack_require__(9);
      var migrating_default = /* @__PURE__ */ __webpack_require__.n(migrating_);
      var emitter_ = __webpack_require__(3);
      var emitter_default = /* @__PURE__ */ __webpack_require__.n(emitter_);
      var componentvue_type_script_lang_js_ = {
        name: "ElDialog",
        mixins: [popup_default.a, emitter_default.a, migrating_default.a],
        props: {
          title: {
            type: String,
            default: ""
          },
          modal: {
            type: Boolean,
            default: true
          },
          modalAppendToBody: {
            type: Boolean,
            default: true
          },
          appendToBody: {
            type: Boolean,
            default: false
          },
          lockScroll: {
            type: Boolean,
            default: true
          },
          closeOnClickModal: {
            type: Boolean,
            default: true
          },
          closeOnPressEscape: {
            type: Boolean,
            default: true
          },
          showClose: {
            type: Boolean,
            default: true
          },
          width: String,
          fullscreen: Boolean,
          customClass: {
            type: String,
            default: ""
          },
          top: {
            type: String,
            default: "15vh"
          },
          beforeClose: Function,
          center: {
            type: Boolean,
            default: false
          },
          destroyOnClose: Boolean
        },
        data: function data25() {
          return {
            closed: false,
            key: 0
          };
        },
        watch: {
          visible: function visible2(val) {
            var _this = this;
            if (val) {
              this.closed = false;
              this.$emit("open");
              this.$el.addEventListener("scroll", this.updatePopper);
              this.$nextTick(function() {
                _this.$refs.dialog.scrollTop = 0;
              });
              if (this.appendToBody) {
                document.body.appendChild(this.$el);
              }
            } else {
              this.$el.removeEventListener("scroll", this.updatePopper);
              if (!this.closed)
                this.$emit("close");
              if (this.destroyOnClose) {
                this.$nextTick(function() {
                  _this.key++;
                });
              }
            }
          }
        },
        computed: {
          style: function style2() {
            var style3 = {};
            if (!this.fullscreen) {
              style3.marginTop = this.top;
              if (this.width) {
                style3.width = this.width;
              }
            }
            return style3;
          }
        },
        methods: {
          getMigratingConfig: function getMigratingConfig2() {
            return {
              props: {
                "size": "size is removed."
              }
            };
          },
          handleWrapperClick: function handleWrapperClick() {
            if (!this.closeOnClickModal)
              return;
            this.handleClose();
          },
          handleClose: function handleClose() {
            if (typeof this.beforeClose === "function") {
              this.beforeClose(this.hide);
            } else {
              this.hide();
            }
          },
          hide: function hide2(cancel) {
            if (cancel !== false) {
              this.$emit("update:visible", false);
              this.$emit("close");
              this.closed = true;
            }
          },
          updatePopper: function updatePopper2() {
            this.broadcast("ElSelectDropdown", "updatePopper");
            this.broadcast("ElDropdownMenu", "updatePopper");
          },
          afterEnter: function afterEnter() {
            this.$emit("opened");
          },
          afterLeave: function afterLeave2() {
            this.$emit("closed");
          }
        },
        mounted: function mounted18() {
          if (this.visible) {
            this.rendered = true;
            this.open();
            if (this.appendToBody) {
              document.body.appendChild(this.$el);
            }
          }
        },
        destroyed: function destroyed17() {
          if (this.appendToBody && this.$el && this.$el.parentNode) {
            this.$el.parentNode.removeChild(this.$el);
          }
        }
      };
      var src_componentvue_type_script_lang_js_ = componentvue_type_script_lang_js_;
      var component_component = normalizeComponent(src_componentvue_type_script_lang_js_, componentvue_type_template_id_60140e62_render, componentvue_type_template_id_60140e62_staticRenderFns, false, null, null, null);
      component_component.options.__file = "packages/dialog/src/component.vue";
      var src_component = component_component.exports;
      src_component.install = function(Vue2) {
        Vue2.component(src_component.name, src_component);
      };
      var dialog = src_component;
      var autocompletevue_type_template_id_152f2ee6_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", {
          directives: [
            {
              name: "clickoutside",
              rawName: "v-clickoutside",
              value: _vm.close,
              expression: "close"
            }
          ],
          staticClass: "el-autocomplete",
          attrs: {
            "aria-haspopup": "listbox",
            role: "combobox",
            "aria-expanded": _vm.suggestionVisible,
            "aria-owns": _vm.id
          }
        }, [
          _c("el-input", _vm._b({
            ref: "input",
            on: {
              input: _vm.handleInput,
              change: _vm.handleChange,
              focus: _vm.handleFocus,
              blur: _vm.handleBlur,
              clear: _vm.handleClear
            },
            nativeOn: {
              keydown: [
                function($event) {
                  if (!("button" in $event) && _vm._k($event.keyCode, "up", 38, $event.key, [
                    "Up",
                    "ArrowUp"
                  ])) {
                    return null;
                  }
                  $event.preventDefault();
                  _vm.highlight(_vm.highlightedIndex - 1);
                },
                function($event) {
                  if (!("button" in $event) && _vm._k($event.keyCode, "down", 40, $event.key, [
                    "Down",
                    "ArrowDown"
                  ])) {
                    return null;
                  }
                  $event.preventDefault();
                  _vm.highlight(_vm.highlightedIndex + 1);
                },
                function($event) {
                  if (!("button" in $event) && _vm._k($event.keyCode, "enter", 13, $event.key, "Enter")) {
                    return null;
                  }
                  return _vm.handleKeyEnter($event);
                },
                function($event) {
                  if (!("button" in $event) && _vm._k($event.keyCode, "tab", 9, $event.key, "Tab")) {
                    return null;
                  }
                  return _vm.close($event);
                }
              ]
            }
          }, "el-input", [_vm.$props, _vm.$attrs], false), [
            _vm.$slots.prepend ? _c("template", { slot: "prepend" }, [_vm._t("prepend")], 2) : _vm._e(),
            _vm.$slots.append ? _c("template", { slot: "append" }, [_vm._t("append")], 2) : _vm._e(),
            _vm.$slots.prefix ? _c("template", { slot: "prefix" }, [_vm._t("prefix")], 2) : _vm._e(),
            _vm.$slots.suffix ? _c("template", { slot: "suffix" }, [_vm._t("suffix")], 2) : _vm._e()
          ], 2),
          _c("el-autocomplete-suggestions", {
            ref: "suggestions",
            class: [_vm.popperClass ? _vm.popperClass : ""],
            attrs: {
              "visible-arrow": "",
              "popper-options": _vm.popperOptions,
              "append-to-body": _vm.popperAppendToBody,
              placement: _vm.placement,
              id: _vm.id
            }
          }, _vm._l(_vm.suggestions, function(item, index2) {
            return _c("li", {
              key: index2,
              class: { highlighted: _vm.highlightedIndex === index2 },
              attrs: {
                id: _vm.id + "-item-" + index2,
                role: "option",
                "aria-selected": _vm.highlightedIndex === index2
              },
              on: {
                click: function($event) {
                  _vm.select(item);
                }
              }
            }, [
              _vm._t("default", [
                _vm._v("\n        " + _vm._s(item[_vm.valueKey]) + "\n      ")
              ], { item })
            ], 2);
          }), 0)
        ], 1);
      };
      var autocompletevue_type_template_id_152f2ee6_staticRenderFns = [];
      autocompletevue_type_template_id_152f2ee6_render._withStripped = true;
      var debounce_ = __webpack_require__(16);
      var debounce_default = /* @__PURE__ */ __webpack_require__.n(debounce_);
      var clickoutside_ = __webpack_require__(10);
      var clickoutside_default = /* @__PURE__ */ __webpack_require__.n(clickoutside_);
      var autocomplete_suggestionsvue_type_template_id_cd10dcf0_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("transition", { attrs: { name: "el-zoom-in-top" }, on: { "after-leave": _vm.doDestroy } }, [
          _c("div", {
            directives: [
              {
                name: "show",
                rawName: "v-show",
                value: _vm.showPopper,
                expression: "showPopper"
              }
            ],
            staticClass: "el-autocomplete-suggestion el-popper",
            class: {
              "is-loading": !_vm.parent.hideLoading && _vm.parent.loading
            },
            style: { width: _vm.dropdownWidth },
            attrs: { role: "region" }
          }, [
            _c("el-scrollbar", {
              attrs: {
                tag: "ul",
                "wrap-class": "el-autocomplete-suggestion__wrap",
                "view-class": "el-autocomplete-suggestion__list"
              }
            }, [
              !_vm.parent.hideLoading && _vm.parent.loading ? _c("li", [_c("i", { staticClass: "el-icon-loading" })]) : _vm._t("default")
            ], 2)
          ], 1)
        ]);
      };
      var autocomplete_suggestionsvue_type_template_id_cd10dcf0_staticRenderFns = [];
      autocomplete_suggestionsvue_type_template_id_cd10dcf0_render._withStripped = true;
      var vue_popper_ = __webpack_require__(5);
      var vue_popper_default = /* @__PURE__ */ __webpack_require__.n(vue_popper_);
      var scrollbar_ = __webpack_require__(18);
      var scrollbar_default = /* @__PURE__ */ __webpack_require__.n(scrollbar_);
      var autocomplete_suggestionsvue_type_script_lang_js_ = {
        components: { ElScrollbar: scrollbar_default.a },
        mixins: [vue_popper_default.a, emitter_default.a],
        componentName: "ElAutocompleteSuggestions",
        data: function data25() {
          return {
            parent: this.$parent,
            dropdownWidth: ""
          };
        },
        props: {
          options: {
            default: function _default116() {
              return {
                gpuAcceleration: false
              };
            }
          },
          id: String
        },
        methods: {
          select: function select2(item) {
            this.dispatch("ElAutocomplete", "item-click", item);
          }
        },
        updated: function updated3() {
          var _this = this;
          this.$nextTick(function(_) {
            _this.popperJS && _this.updatePopper();
          });
        },
        mounted: function mounted18() {
          this.$parent.popperElm = this.popperElm = this.$el;
          this.referenceElm = this.$parent.$refs.input.$refs.input || this.$parent.$refs.input.$refs.textarea;
          this.referenceList = this.$el.querySelector(".el-autocomplete-suggestion__list");
          this.referenceList.setAttribute("role", "listbox");
          this.referenceList.setAttribute("id", this.id);
        },
        created: function created20() {
          var _this2 = this;
          this.$on("visible", function(val, inputWidth) {
            _this2.dropdownWidth = inputWidth + "px";
            _this2.showPopper = val;
          });
        }
      };
      var src_autocomplete_suggestionsvue_type_script_lang_js_ = autocomplete_suggestionsvue_type_script_lang_js_;
      var autocomplete_suggestions_component = normalizeComponent(src_autocomplete_suggestionsvue_type_script_lang_js_, autocomplete_suggestionsvue_type_template_id_cd10dcf0_render, autocomplete_suggestionsvue_type_template_id_cd10dcf0_staticRenderFns, false, null, null, null);
      autocomplete_suggestions_component.options.__file = "packages/autocomplete/src/autocomplete-suggestions.vue";
      var autocomplete_suggestions = autocomplete_suggestions_component.exports;
      var focus_ = __webpack_require__(23);
      var focus_default = /* @__PURE__ */ __webpack_require__.n(focus_);
      var autocompletevue_type_script_lang_js_ = {
        name: "ElAutocomplete",
        mixins: [emitter_default.a, focus_default()("input"), migrating_default.a],
        inheritAttrs: false,
        componentName: "ElAutocomplete",
        components: {
          ElInput: input_default.a,
          ElAutocompleteSuggestions: autocomplete_suggestions
        },
        directives: { Clickoutside: clickoutside_default.a },
        props: {
          valueKey: {
            type: String,
            default: "value"
          },
          popperClass: String,
          popperOptions: Object,
          placeholder: String,
          clearable: {
            type: Boolean,
            default: false
          },
          disabled: Boolean,
          name: String,
          size: String,
          value: String,
          maxlength: Number,
          minlength: Number,
          autofocus: Boolean,
          fetchSuggestions: Function,
          triggerOnFocus: {
            type: Boolean,
            default: true
          },
          customItem: String,
          selectWhenUnmatched: {
            type: Boolean,
            default: false
          },
          prefixIcon: String,
          suffixIcon: String,
          label: String,
          debounce: {
            type: Number,
            default: 300
          },
          placement: {
            type: String,
            default: "bottom-start"
          },
          hideLoading: Boolean,
          popperAppendToBody: {
            type: Boolean,
            default: true
          },
          highlightFirstItem: {
            type: Boolean,
            default: false
          }
        },
        data: function data25() {
          return {
            activated: false,
            suggestions: [],
            loading: false,
            highlightedIndex: -1,
            suggestionDisabled: false
          };
        },
        computed: {
          suggestionVisible: function suggestionVisible() {
            var suggestions = this.suggestions;
            var isValidData = Array.isArray(suggestions) && suggestions.length > 0;
            return (isValidData || this.loading) && this.activated;
          },
          id: function id2() {
            return "el-autocomplete-" + Object(util_["generateId"])();
          }
        },
        watch: {
          suggestionVisible: function suggestionVisible(val) {
            var $input = this.getInput();
            if ($input) {
              this.broadcast("ElAutocompleteSuggestions", "visible", [val, $input.offsetWidth]);
            }
          }
        },
        methods: {
          getMigratingConfig: function getMigratingConfig2() {
            return {
              props: {
                "custom-item": "custom-item is removed, use scoped slot instead.",
                "props": "props is removed, use value-key instead."
              }
            };
          },
          getData: function getData3(queryString) {
            var _this = this;
            if (this.suggestionDisabled) {
              return;
            }
            this.loading = true;
            this.fetchSuggestions(queryString, function(suggestions) {
              _this.loading = false;
              if (_this.suggestionDisabled) {
                return;
              }
              if (Array.isArray(suggestions)) {
                _this.suggestions = suggestions;
                _this.highlightedIndex = _this.highlightFirstItem ? 0 : -1;
              } else {
                console.error("[Element Error][Autocomplete]autocomplete suggestions must be an array");
              }
            });
          },
          handleInput: function handleInput(value6) {
            this.$emit("input", value6);
            this.suggestionDisabled = false;
            if (!this.triggerOnFocus && !value6) {
              this.suggestionDisabled = true;
              this.suggestions = [];
              return;
            }
            this.debouncedGetData(value6);
          },
          handleChange: function handleChange(value6) {
            this.$emit("change", value6);
          },
          handleFocus: function handleFocus3(event2) {
            this.activated = true;
            this.$emit("focus", event2);
            if (this.triggerOnFocus) {
              this.debouncedGetData(this.value);
            }
          },
          handleBlur: function handleBlur(event2) {
            this.$emit("blur", event2);
          },
          handleClear: function handleClear() {
            this.activated = false;
            this.$emit("clear");
          },
          close: function close4(e) {
            this.activated = false;
          },
          handleKeyEnter: function handleKeyEnter(e) {
            var _this2 = this;
            if (this.suggestionVisible && this.highlightedIndex >= 0 && this.highlightedIndex < this.suggestions.length) {
              e.preventDefault();
              this.select(this.suggestions[this.highlightedIndex]);
            } else if (this.selectWhenUnmatched) {
              this.$emit("select", { value: this.value });
              this.$nextTick(function(_) {
                _this2.suggestions = [];
                _this2.highlightedIndex = -1;
              });
            }
          },
          select: function select2(item) {
            var _this3 = this;
            this.$emit("input", item[this.valueKey]);
            this.$emit("select", item);
            this.$nextTick(function(_) {
              _this3.suggestions = [];
              _this3.highlightedIndex = -1;
            });
          },
          highlight: function highlight(index2) {
            if (!this.suggestionVisible || this.loading) {
              return;
            }
            if (index2 < 0) {
              this.highlightedIndex = -1;
              return;
            }
            if (index2 >= this.suggestions.length) {
              index2 = this.suggestions.length - 1;
            }
            var suggestion = this.$refs.suggestions.$el.querySelector(".el-autocomplete-suggestion__wrap");
            var suggestionList = suggestion.querySelectorAll(".el-autocomplete-suggestion__list li");
            var highlightItem = suggestionList[index2];
            var scrollTop = suggestion.scrollTop;
            var offsetTop = highlightItem.offsetTop;
            if (offsetTop + highlightItem.scrollHeight > scrollTop + suggestion.clientHeight) {
              suggestion.scrollTop += highlightItem.scrollHeight;
            }
            if (offsetTop < scrollTop) {
              suggestion.scrollTop -= highlightItem.scrollHeight;
            }
            this.highlightedIndex = index2;
            var $input = this.getInput();
            $input.setAttribute("aria-activedescendant", this.id + "-item-" + this.highlightedIndex);
          },
          getInput: function getInput() {
            return this.$refs.input.getInput();
          }
        },
        mounted: function mounted18() {
          var _this4 = this;
          this.debouncedGetData = debounce_default()(this.debounce, this.getData);
          this.$on("item-click", function(item) {
            _this4.select(item);
          });
          var $input = this.getInput();
          $input.setAttribute("role", "textbox");
          $input.setAttribute("aria-autocomplete", "list");
          $input.setAttribute("aria-controls", "id");
          $input.setAttribute("aria-activedescendant", this.id + "-item-" + this.highlightedIndex);
        },
        beforeDestroy: function beforeDestroy13() {
          this.$refs.suggestions.$destroy();
        }
      };
      var src_autocompletevue_type_script_lang_js_ = autocompletevue_type_script_lang_js_;
      var autocomplete_component = normalizeComponent(src_autocompletevue_type_script_lang_js_, autocompletevue_type_template_id_152f2ee6_render, autocompletevue_type_template_id_152f2ee6_staticRenderFns, false, null, null, null);
      autocomplete_component.options.__file = "packages/autocomplete/src/autocomplete.vue";
      var autocomplete = autocomplete_component.exports;
      autocomplete.install = function(Vue2) {
        Vue2.component(autocomplete.name, autocomplete);
      };
      var packages_autocomplete = autocomplete;
      var button_ = __webpack_require__(13);
      var button_default = /* @__PURE__ */ __webpack_require__.n(button_);
      var button_group_ = __webpack_require__(28);
      var button_group_default = /* @__PURE__ */ __webpack_require__.n(button_group_);
      var dropdownvue_type_script_lang_js_ = {
        name: "ElDropdown",
        componentName: "ElDropdown",
        mixins: [emitter_default.a, migrating_default.a],
        directives: { Clickoutside: clickoutside_default.a },
        components: {
          ElButton: button_default.a,
          ElButtonGroup: button_group_default.a
        },
        provide: function provide11() {
          return {
            dropdown: this
          };
        },
        props: {
          trigger: {
            type: String,
            default: "hover"
          },
          type: String,
          size: {
            type: String,
            default: ""
          },
          splitButton: Boolean,
          hideOnClick: {
            type: Boolean,
            default: true
          },
          placement: {
            type: String,
            default: "bottom-end"
          },
          visibleArrow: {
            default: true
          },
          showTimeout: {
            type: Number,
            default: 250
          },
          hideTimeout: {
            type: Number,
            default: 150
          },
          tabindex: {
            type: Number,
            default: 0
          },
          disabled: {
            type: Boolean,
            default: false
          }
        },
        data: function data25() {
          return {
            timeout: null,
            visible: false,
            triggerElm: null,
            menuItems: null,
            menuItemsArray: null,
            dropdownElm: null,
            focusing: false,
            listId: "dropdown-menu-" + Object(util_["generateId"])()
          };
        },
        computed: {
          dropdownSize: function dropdownSize() {
            return this.size || (this.$ELEMENT || {}).size;
          }
        },
        mounted: function mounted18() {
          this.$on("menu-item-click", this.handleMenuItemClick);
        },
        watch: {
          visible: function visible2(val) {
            this.broadcast("ElDropdownMenu", "visible", val);
            this.$emit("visible-change", val);
          },
          focusing: function focusing(val) {
            var selfDefine = this.$el.querySelector(".el-dropdown-selfdefine");
            if (selfDefine) {
              if (val) {
                selfDefine.className += " focusing";
              } else {
                selfDefine.className = selfDefine.className.replace("focusing", "");
              }
            }
          }
        },
        methods: {
          getMigratingConfig: function getMigratingConfig2() {
            return {
              props: {
                "menu-align": "menu-align is renamed to placement."
              }
            };
          },
          show: function show2() {
            var _this = this;
            if (this.disabled)
              return;
            clearTimeout(this.timeout);
            this.timeout = setTimeout(function() {
              _this.visible = true;
            }, this.trigger === "click" ? 0 : this.showTimeout);
          },
          hide: function hide2() {
            var _this2 = this;
            if (this.disabled)
              return;
            this.removeTabindex();
            if (this.tabindex >= 0) {
              this.resetTabindex(this.triggerElm);
            }
            clearTimeout(this.timeout);
            this.timeout = setTimeout(function() {
              _this2.visible = false;
            }, this.trigger === "click" ? 0 : this.hideTimeout);
          },
          handleClick: function handleClick() {
            if (this.disabled)
              return;
            if (this.visible) {
              this.hide();
            } else {
              this.show();
            }
          },
          handleTriggerKeyDown: function handleTriggerKeyDown(ev) {
            var keyCode2 = ev.keyCode;
            if ([38, 40].indexOf(keyCode2) > -1) {
              this.removeTabindex();
              this.resetTabindex(this.menuItems[0]);
              this.menuItems[0].focus();
              ev.preventDefault();
              ev.stopPropagation();
            } else if (keyCode2 === 13) {
              this.handleClick();
            } else if ([9, 27].indexOf(keyCode2) > -1) {
              this.hide();
            }
          },
          handleItemKeyDown: function handleItemKeyDown(ev) {
            var keyCode2 = ev.keyCode;
            var target2 = ev.target;
            var currentIndex = this.menuItemsArray.indexOf(target2);
            var max2 = this.menuItemsArray.length - 1;
            var nextIndex = void 0;
            if ([38, 40].indexOf(keyCode2) > -1) {
              if (keyCode2 === 38) {
                nextIndex = currentIndex !== 0 ? currentIndex - 1 : 0;
              } else {
                nextIndex = currentIndex < max2 ? currentIndex + 1 : max2;
              }
              this.removeTabindex();
              this.resetTabindex(this.menuItems[nextIndex]);
              this.menuItems[nextIndex].focus();
              ev.preventDefault();
              ev.stopPropagation();
            } else if (keyCode2 === 13) {
              this.triggerElmFocus();
              target2.click();
              if (this.hideOnClick) {
                this.visible = false;
              }
            } else if ([9, 27].indexOf(keyCode2) > -1) {
              this.hide();
              this.triggerElmFocus();
            }
          },
          resetTabindex: function resetTabindex(ele) {
            this.removeTabindex();
            ele.setAttribute("tabindex", "0");
          },
          removeTabindex: function removeTabindex() {
            this.triggerElm.setAttribute("tabindex", "-1");
            this.menuItemsArray.forEach(function(item) {
              item.setAttribute("tabindex", "-1");
            });
          },
          initAria: function initAria() {
            this.dropdownElm.setAttribute("id", this.listId);
            this.triggerElm.setAttribute("aria-haspopup", "list");
            this.triggerElm.setAttribute("aria-controls", this.listId);
            if (!this.splitButton) {
              this.triggerElm.setAttribute("role", "button");
              this.triggerElm.setAttribute("tabindex", this.tabindex);
              this.triggerElm.setAttribute("class", (this.triggerElm.getAttribute("class") || "") + " el-dropdown-selfdefine");
            }
          },
          initEvent: function initEvent() {
            var _this3 = this;
            var trigger3 = this.trigger, show2 = this.show, hide2 = this.hide, handleClick = this.handleClick, splitButton = this.splitButton, handleTriggerKeyDown = this.handleTriggerKeyDown, handleItemKeyDown = this.handleItemKeyDown;
            this.triggerElm = splitButton ? this.$refs.trigger.$el : this.$slots.default[0].elm;
            var dropdownElm = this.dropdownElm;
            this.triggerElm.addEventListener("keydown", handleTriggerKeyDown);
            dropdownElm.addEventListener("keydown", handleItemKeyDown, true);
            if (!splitButton) {
              this.triggerElm.addEventListener("focus", function() {
                _this3.focusing = true;
              });
              this.triggerElm.addEventListener("blur", function() {
                _this3.focusing = false;
              });
              this.triggerElm.addEventListener("click", function() {
                _this3.focusing = false;
              });
            }
            if (trigger3 === "hover") {
              this.triggerElm.addEventListener("mouseenter", show2);
              this.triggerElm.addEventListener("mouseleave", hide2);
              dropdownElm.addEventListener("mouseenter", show2);
              dropdownElm.addEventListener("mouseleave", hide2);
            } else if (trigger3 === "click") {
              this.triggerElm.addEventListener("click", handleClick);
            }
          },
          handleMenuItemClick: function handleMenuItemClick(command, instance) {
            if (this.hideOnClick) {
              this.visible = false;
            }
            this.$emit("command", command, instance);
          },
          triggerElmFocus: function triggerElmFocus() {
            this.triggerElm.focus && this.triggerElm.focus();
          },
          initDomOperation: function initDomOperation() {
            this.dropdownElm = this.popperElm;
            this.menuItems = this.dropdownElm.querySelectorAll("[tabindex='-1']");
            this.menuItemsArray = [].slice.call(this.menuItems);
            this.initEvent();
            this.initAria();
          }
        },
        render: function render37(h) {
          var _this4 = this;
          var hide2 = this.hide, splitButton = this.splitButton, type3 = this.type, dropdownSize = this.dropdownSize, disabled = this.disabled;
          var handleMainButtonClick = function handleMainButtonClick2(event2) {
            _this4.$emit("click", event2);
            hide2();
          };
          var triggerElm = null;
          if (splitButton) {
            triggerElm = h("el-button-group", [h("el-button", {
              attrs: { type: type3, size: dropdownSize, disabled },
              nativeOn: {
                "click": handleMainButtonClick
              }
            }, [this.$slots.default]), h("el-button", {
              ref: "trigger",
              attrs: { type: type3, size: dropdownSize, disabled },
              "class": "el-dropdown__caret-button"
            }, [h("i", { "class": "el-dropdown__icon el-icon-arrow-down" })])]);
          } else {
            triggerElm = this.$slots.default;
            var vnodeData = triggerElm[0].data || {};
            var _vnodeData$attrs = vnodeData.attrs, attrs2 = _vnodeData$attrs === void 0 ? {} : _vnodeData$attrs;
            if (disabled && !attrs2.disabled) {
              attrs2.disabled = true;
              vnodeData.attrs = attrs2;
            }
          }
          var menuElm = disabled ? null : this.$slots.dropdown;
          return h("div", {
            "class": "el-dropdown",
            directives: [{
              name: "clickoutside",
              value: hide2
            }],
            attrs: { "aria-disabled": disabled }
          }, [triggerElm, menuElm]);
        }
      };
      var src_dropdownvue_type_script_lang_js_ = dropdownvue_type_script_lang_js_;
      var dropdown_render, dropdown_staticRenderFns;
      var dropdown_component = normalizeComponent(src_dropdownvue_type_script_lang_js_, dropdown_render, dropdown_staticRenderFns, false, null, null, null);
      dropdown_component.options.__file = "packages/dropdown/src/dropdown.vue";
      var dropdown = dropdown_component.exports;
      dropdown.install = function(Vue2) {
        Vue2.component(dropdown.name, dropdown);
      };
      var packages_dropdown = dropdown;
      var dropdown_menuvue_type_template_id_0da6b714_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("transition", { attrs: { name: "el-zoom-in-top" }, on: { "after-leave": _vm.doDestroy } }, [
          _c("ul", {
            directives: [
              {
                name: "show",
                rawName: "v-show",
                value: _vm.showPopper,
                expression: "showPopper"
              }
            ],
            staticClass: "el-dropdown-menu el-popper",
            class: [_vm.size && "el-dropdown-menu--" + _vm.size]
          }, [_vm._t("default")], 2)
        ]);
      };
      var dropdown_menuvue_type_template_id_0da6b714_staticRenderFns = [];
      dropdown_menuvue_type_template_id_0da6b714_render._withStripped = true;
      var dropdown_menuvue_type_script_lang_js_ = {
        name: "ElDropdownMenu",
        componentName: "ElDropdownMenu",
        mixins: [vue_popper_default.a],
        props: {
          visibleArrow: {
            type: Boolean,
            default: true
          },
          arrowOffset: {
            type: Number,
            default: 0
          }
        },
        data: function data25() {
          return {
            size: this.dropdown.dropdownSize
          };
        },
        inject: ["dropdown"],
        created: function created20() {
          var _this = this;
          this.$on("updatePopper", function() {
            if (_this.showPopper)
              _this.updatePopper();
          });
          this.$on("visible", function(val) {
            _this.showPopper = val;
          });
        },
        mounted: function mounted18() {
          this.dropdown.popperElm = this.popperElm = this.$el;
          this.referenceElm = this.dropdown.$el;
          this.dropdown.initDomOperation();
        },
        watch: {
          "dropdown.placement": {
            immediate: true,
            handler: function handler2(val) {
              this.currentPlacement = val;
            }
          }
        }
      };
      var src_dropdown_menuvue_type_script_lang_js_ = dropdown_menuvue_type_script_lang_js_;
      var dropdown_menu_component = normalizeComponent(src_dropdown_menuvue_type_script_lang_js_, dropdown_menuvue_type_template_id_0da6b714_render, dropdown_menuvue_type_template_id_0da6b714_staticRenderFns, false, null, null, null);
      dropdown_menu_component.options.__file = "packages/dropdown/src/dropdown-menu.vue";
      var dropdown_menu = dropdown_menu_component.exports;
      dropdown_menu.install = function(Vue2) {
        Vue2.component(dropdown_menu.name, dropdown_menu);
      };
      var packages_dropdown_menu = dropdown_menu;
      var dropdown_itemvue_type_template_id_6359102a_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("li", {
          staticClass: "el-dropdown-menu__item",
          class: {
            "is-disabled": _vm.disabled,
            "el-dropdown-menu__item--divided": _vm.divided
          },
          attrs: {
            "aria-disabled": _vm.disabled,
            tabindex: _vm.disabled ? null : -1
          },
          on: { click: _vm.handleClick }
        }, [_vm.icon ? _c("i", { class: _vm.icon }) : _vm._e(), _vm._t("default")], 2);
      };
      var dropdown_itemvue_type_template_id_6359102a_staticRenderFns = [];
      dropdown_itemvue_type_template_id_6359102a_render._withStripped = true;
      var dropdown_itemvue_type_script_lang_js_ = {
        name: "ElDropdownItem",
        mixins: [emitter_default.a],
        props: {
          command: {},
          disabled: Boolean,
          divided: Boolean,
          icon: String
        },
        methods: {
          handleClick: function handleClick(e) {
            this.dispatch("ElDropdown", "menu-item-click", [this.command, this]);
          }
        }
      };
      var src_dropdown_itemvue_type_script_lang_js_ = dropdown_itemvue_type_script_lang_js_;
      var dropdown_item_component = normalizeComponent(src_dropdown_itemvue_type_script_lang_js_, dropdown_itemvue_type_template_id_6359102a_render, dropdown_itemvue_type_template_id_6359102a_staticRenderFns, false, null, null, null);
      dropdown_item_component.options.__file = "packages/dropdown/src/dropdown-item.vue";
      var dropdown_item = dropdown_item_component.exports;
      dropdown_item.install = function(Vue2) {
        Vue2.component(dropdown_item.name, dropdown_item);
      };
      var packages_dropdown_item = dropdown_item;
      var aria2 = aria2 || {};
      aria2.Utils = aria2.Utils || {};
      aria2.Utils.focusFirstDescendant = function(element) {
        for (var i = 0; i < element.childNodes.length; i++) {
          var child = element.childNodes[i];
          if (aria2.Utils.attemptFocus(child) || aria2.Utils.focusFirstDescendant(child)) {
            return true;
          }
        }
        return false;
      };
      aria2.Utils.focusLastDescendant = function(element) {
        for (var i = element.childNodes.length - 1; i >= 0; i--) {
          var child = element.childNodes[i];
          if (aria2.Utils.attemptFocus(child) || aria2.Utils.focusLastDescendant(child)) {
            return true;
          }
        }
        return false;
      };
      aria2.Utils.attemptFocus = function(element) {
        if (!aria2.Utils.isFocusable(element)) {
          return false;
        }
        aria2.Utils.IgnoreUtilFocusChanges = true;
        try {
          element.focus();
        } catch (e) {
        }
        aria2.Utils.IgnoreUtilFocusChanges = false;
        return document.activeElement === element;
      };
      aria2.Utils.isFocusable = function(element) {
        if (element.tabIndex > 0 || element.tabIndex === 0 && element.getAttribute("tabIndex") !== null) {
          return true;
        }
        if (element.disabled) {
          return false;
        }
        switch (element.nodeName) {
          case "A":
            return !!element.href && element.rel !== "ignore";
          case "INPUT":
            return element.type !== "hidden" && element.type !== "file";
          case "BUTTON":
          case "SELECT":
          case "TEXTAREA":
            return true;
          default:
            return false;
        }
      };
      aria2.Utils.triggerEvent = function(elm, name) {
        var eventName = void 0;
        if (/^mouse|click/.test(name)) {
          eventName = "MouseEvents";
        } else if (/^key/.test(name)) {
          eventName = "KeyboardEvent";
        } else {
          eventName = "HTMLEvents";
        }
        var evt = document.createEvent(eventName);
        for (var _len = arguments.length, opts = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          opts[_key - 2] = arguments[_key];
        }
        evt.initEvent.apply(evt, [name].concat(opts));
        elm.dispatchEvent ? elm.dispatchEvent(evt) : elm.fireEvent("on" + name, evt);
        return elm;
      };
      aria2.Utils.keys = {
        tab: 9,
        enter: 13,
        space: 32,
        left: 37,
        up: 38,
        right: 39,
        down: 40,
        esc: 27
      };
      var aria_utils = aria2.Utils;
      var SubMenu = function SubMenu2(parent2, domNode) {
        this.domNode = domNode;
        this.parent = parent2;
        this.subMenuItems = [];
        this.subIndex = 0;
        this.init();
      };
      SubMenu.prototype.init = function() {
        this.subMenuItems = this.domNode.querySelectorAll("li");
        this.addListeners();
      };
      SubMenu.prototype.gotoSubIndex = function(idx) {
        if (idx === this.subMenuItems.length) {
          idx = 0;
        } else if (idx < 0) {
          idx = this.subMenuItems.length - 1;
        }
        this.subMenuItems[idx].focus();
        this.subIndex = idx;
      };
      SubMenu.prototype.addListeners = function() {
        var _this = this;
        var keys3 = aria_utils.keys;
        var parentNode2 = this.parent.domNode;
        Array.prototype.forEach.call(this.subMenuItems, function(el) {
          el.addEventListener("keydown", function(event2) {
            var prevDef = false;
            switch (event2.keyCode) {
              case keys3.down:
                _this.gotoSubIndex(_this.subIndex + 1);
                prevDef = true;
                break;
              case keys3.up:
                _this.gotoSubIndex(_this.subIndex - 1);
                prevDef = true;
                break;
              case keys3.tab:
                aria_utils.triggerEvent(parentNode2, "mouseleave");
                break;
              case keys3.enter:
              case keys3.space:
                prevDef = true;
                event2.currentTarget.click();
                break;
            }
            if (prevDef) {
              event2.preventDefault();
              event2.stopPropagation();
            }
            return false;
          });
        });
      };
      var aria_submenu = SubMenu;
      var MenuItem = function MenuItem2(domNode) {
        this.domNode = domNode;
        this.submenu = null;
        this.init();
      };
      MenuItem.prototype.init = function() {
        this.domNode.setAttribute("tabindex", "0");
        var menuChild = this.domNode.querySelector(".el-menu");
        if (menuChild) {
          this.submenu = new aria_submenu(this, menuChild);
        }
        this.addListeners();
      };
      MenuItem.prototype.addListeners = function() {
        var _this = this;
        var keys3 = aria_utils.keys;
        this.domNode.addEventListener("keydown", function(event2) {
          var prevDef = false;
          switch (event2.keyCode) {
            case keys3.down:
              aria_utils.triggerEvent(event2.currentTarget, "mouseenter");
              _this.submenu && _this.submenu.gotoSubIndex(0);
              prevDef = true;
              break;
            case keys3.up:
              aria_utils.triggerEvent(event2.currentTarget, "mouseenter");
              _this.submenu && _this.submenu.gotoSubIndex(_this.submenu.subMenuItems.length - 1);
              prevDef = true;
              break;
            case keys3.tab:
              aria_utils.triggerEvent(event2.currentTarget, "mouseleave");
              break;
            case keys3.enter:
            case keys3.space:
              prevDef = true;
              event2.currentTarget.click();
              break;
          }
          if (prevDef) {
            event2.preventDefault();
          }
        });
      };
      var aria_menuitem = MenuItem;
      var Menu2 = function Menu3(domNode) {
        this.domNode = domNode;
        this.init();
      };
      Menu2.prototype.init = function() {
        var menuChildren = this.domNode.childNodes;
        [].filter.call(menuChildren, function(child) {
          return child.nodeType === 1;
        }).forEach(function(child) {
          new aria_menuitem(child);
        });
      };
      var aria_menubar = Menu2;
      var dom_ = __webpack_require__(1);
      var menuvue_type_script_lang_js_ = {
        name: "ElMenu",
        render: function render37(h) {
          var component2 = h("ul", {
            attrs: {
              role: "menubar"
            },
            key: +this.collapse,
            style: { backgroundColor: this.backgroundColor || "" },
            "class": {
              "el-menu--horizontal": this.mode === "horizontal",
              "el-menu--collapse": this.collapse,
              "el-menu": true
            }
          }, [this.$slots.default]);
          if (this.collapseTransition) {
            return h("el-menu-collapse-transition", [component2]);
          } else {
            return component2;
          }
        },
        componentName: "ElMenu",
        mixins: [emitter_default.a, migrating_default.a],
        provide: function provide11() {
          return {
            rootMenu: this
          };
        },
        components: {
          "el-menu-collapse-transition": {
            functional: true,
            render: function render37(createElement2, context) {
              var data25 = {
                props: {
                  mode: "out-in"
                },
                on: {
                  beforeEnter: function beforeEnter(el) {
                    el.style.opacity = 0.2;
                  },
                  enter: function enter2(el) {
                    Object(dom_["addClass"])(el, "el-opacity-transition");
                    el.style.opacity = 1;
                  },
                  afterEnter: function afterEnter(el) {
                    Object(dom_["removeClass"])(el, "el-opacity-transition");
                    el.style.opacity = "";
                  },
                  beforeLeave: function beforeLeave(el) {
                    if (!el.dataset)
                      el.dataset = {};
                    if (Object(dom_["hasClass"])(el, "el-menu--collapse")) {
                      Object(dom_["removeClass"])(el, "el-menu--collapse");
                      el.dataset.oldOverflow = el.style.overflow;
                      el.dataset.scrollWidth = el.clientWidth;
                      Object(dom_["addClass"])(el, "el-menu--collapse");
                    } else {
                      Object(dom_["addClass"])(el, "el-menu--collapse");
                      el.dataset.oldOverflow = el.style.overflow;
                      el.dataset.scrollWidth = el.clientWidth;
                      Object(dom_["removeClass"])(el, "el-menu--collapse");
                    }
                    el.style.width = el.scrollWidth + "px";
                    el.style.overflow = "hidden";
                  },
                  leave: function leave2(el) {
                    Object(dom_["addClass"])(el, "horizontal-collapse-transition");
                    el.style.width = el.dataset.scrollWidth + "px";
                  }
                }
              };
              return createElement2("transition", data25, context.children);
            }
          }
        },
        props: {
          mode: {
            type: String,
            default: "vertical"
          },
          defaultActive: {
            type: String,
            default: ""
          },
          defaultOpeneds: Array,
          uniqueOpened: Boolean,
          router: Boolean,
          menuTrigger: {
            type: String,
            default: "hover"
          },
          collapse: Boolean,
          backgroundColor: String,
          textColor: String,
          activeTextColor: String,
          collapseTransition: {
            type: Boolean,
            default: true
          }
        },
        data: function data25() {
          return {
            activeIndex: this.defaultActive,
            openedMenus: this.defaultOpeneds && !this.collapse ? this.defaultOpeneds.slice(0) : [],
            items: {},
            submenus: {}
          };
        },
        computed: {
          hoverBackground: function hoverBackground() {
            return this.backgroundColor ? this.mixColor(this.backgroundColor, 0.2) : "";
          },
          isMenuPopup: function isMenuPopup() {
            return this.mode === "horizontal" || this.mode === "vertical" && this.collapse;
          }
        },
        watch: {
          defaultActive: function defaultActive(value6) {
            if (!this.items[value6]) {
              this.activeIndex = null;
            }
            this.updateActiveIndex(value6);
          },
          defaultOpeneds: function defaultOpeneds(value6) {
            if (!this.collapse) {
              this.openedMenus = value6;
            }
          },
          collapse: function collapse2(value6) {
            if (value6)
              this.openedMenus = [];
            this.broadcast("ElSubmenu", "toggle-collapse", value6);
          }
        },
        methods: {
          updateActiveIndex: function updateActiveIndex(val) {
            var item = this.items[val] || this.items[this.activeIndex] || this.items[this.defaultActive];
            if (item) {
              this.activeIndex = item.index;
              this.initOpenedMenu();
            } else {
              this.activeIndex = null;
            }
          },
          getMigratingConfig: function getMigratingConfig2() {
            return {
              props: {
                "theme": "theme is removed."
              }
            };
          },
          getColorChannels: function getColorChannels(color) {
            color = color.replace("#", "");
            if (/^[0-9a-fA-F]{3}$/.test(color)) {
              color = color.split("");
              for (var i = 2; i >= 0; i--) {
                color.splice(i, 0, color[i]);
              }
              color = color.join("");
            }
            if (/^[0-9a-fA-F]{6}$/.test(color)) {
              return {
                red: parseInt(color.slice(0, 2), 16),
                green: parseInt(color.slice(2, 4), 16),
                blue: parseInt(color.slice(4, 6), 16)
              };
            } else {
              return {
                red: 255,
                green: 255,
                blue: 255
              };
            }
          },
          mixColor: function mixColor(color, percent) {
            var _getColorChannels = this.getColorChannels(color), red = _getColorChannels.red, green = _getColorChannels.green, blue = _getColorChannels.blue;
            if (percent > 0) {
              red *= 1 - percent;
              green *= 1 - percent;
              blue *= 1 - percent;
            } else {
              red += (255 - red) * percent;
              green += (255 - green) * percent;
              blue += (255 - blue) * percent;
            }
            return "rgb(" + Math.round(red) + ", " + Math.round(green) + ", " + Math.round(blue) + ")";
          },
          addItem: function addItem(item) {
            this.$set(this.items, item.index, item);
          },
          removeItem: function removeItem(item) {
            delete this.items[item.index];
          },
          addSubmenu: function addSubmenu(item) {
            this.$set(this.submenus, item.index, item);
          },
          removeSubmenu: function removeSubmenu(item) {
            delete this.submenus[item.index];
          },
          openMenu: function openMenu(index2, indexPath) {
            var openedMenus = this.openedMenus;
            if (openedMenus.indexOf(index2) !== -1)
              return;
            if (this.uniqueOpened) {
              this.openedMenus = openedMenus.filter(function(index3) {
                return indexPath.indexOf(index3) !== -1;
              });
            }
            this.openedMenus.push(index2);
          },
          closeMenu: function closeMenu(index2) {
            var i = this.openedMenus.indexOf(index2);
            if (i !== -1) {
              this.openedMenus.splice(i, 1);
            }
          },
          handleSubmenuClick: function handleSubmenuClick(submenu2) {
            var index2 = submenu2.index, indexPath = submenu2.indexPath;
            var isOpened = this.openedMenus.indexOf(index2) !== -1;
            if (isOpened) {
              this.closeMenu(index2);
              this.$emit("close", index2, indexPath);
            } else {
              this.openMenu(index2, indexPath);
              this.$emit("open", index2, indexPath);
            }
          },
          handleItemClick: function handleItemClick(item) {
            var _this = this;
            var index2 = item.index, indexPath = item.indexPath;
            var oldActiveIndex = this.activeIndex;
            var hasIndex = item.index !== null;
            if (hasIndex) {
              this.activeIndex = item.index;
            }
            this.$emit("select", index2, indexPath, item);
            if (this.mode === "horizontal" || this.collapse) {
              this.openedMenus = [];
            }
            if (this.router && hasIndex) {
              this.routeToItem(item, function(error) {
                _this.activeIndex = oldActiveIndex;
                if (error) {
                  if (error.name === "NavigationDuplicated")
                    return;
                  console.error(error);
                }
              });
            }
          },
          initOpenedMenu: function initOpenedMenu() {
            var _this2 = this;
            var index2 = this.activeIndex;
            var activeItem = this.items[index2];
            if (!activeItem || this.mode === "horizontal" || this.collapse)
              return;
            var indexPath = activeItem.indexPath;
            indexPath.forEach(function(index3) {
              var submenu2 = _this2.submenus[index3];
              submenu2 && _this2.openMenu(index3, submenu2.indexPath);
            });
          },
          routeToItem: function routeToItem(item, onError) {
            var route = item.route || item.index;
            try {
              this.$router.push(route, function() {
              }, onError);
            } catch (e) {
              console.error(e);
            }
          },
          open: function open4(index2) {
            var _this3 = this;
            var indexPath = this.submenus[index2.toString()].indexPath;
            indexPath.forEach(function(i) {
              return _this3.openMenu(i, indexPath);
            });
          },
          close: function close4(index2) {
            this.closeMenu(index2);
          }
        },
        mounted: function mounted18() {
          this.initOpenedMenu();
          this.$on("item-click", this.handleItemClick);
          this.$on("submenu-click", this.handleSubmenuClick);
          if (this.mode === "horizontal") {
            new aria_menubar(this.$el);
          }
          this.$watch("items", this.updateActiveIndex);
        }
      };
      var src_menuvue_type_script_lang_js_ = menuvue_type_script_lang_js_;
      var menu_render, menu_staticRenderFns;
      var menu_component = normalizeComponent(src_menuvue_type_script_lang_js_, menu_render, menu_staticRenderFns, false, null, null, null);
      menu_component.options.__file = "packages/menu/src/menu.vue";
      var src_menu = menu_component.exports;
      src_menu.install = function(Vue2) {
        Vue2.component(src_menu.name, src_menu);
      };
      var packages_menu = src_menu;
      var collapse_transition_ = __webpack_require__(21);
      var collapse_transition_default = /* @__PURE__ */ __webpack_require__.n(collapse_transition_);
      var menu_mixin = {
        inject: ["rootMenu"],
        computed: {
          indexPath: function indexPath() {
            var path = [this.index];
            var parent2 = this.$parent;
            while (parent2.$options.componentName !== "ElMenu") {
              if (parent2.index) {
                path.unshift(parent2.index);
              }
              parent2 = parent2.$parent;
            }
            return path;
          },
          parentMenu: function parentMenu() {
            var parent2 = this.$parent;
            while (parent2 && ["ElMenu", "ElSubmenu"].indexOf(parent2.$options.componentName) === -1) {
              parent2 = parent2.$parent;
            }
            return parent2;
          },
          paddingStyle: function paddingStyle() {
            if (this.rootMenu.mode !== "vertical")
              return {};
            var padding = 20;
            var parent2 = this.$parent;
            if (this.rootMenu.collapse) {
              padding = 20;
            } else {
              while (parent2 && parent2.$options.componentName !== "ElMenu") {
                if (parent2.$options.componentName === "ElSubmenu") {
                  padding += 20;
                }
                parent2 = parent2.$parent;
              }
            }
            return { paddingLeft: padding + "px" };
          }
        }
      };
      var poperMixins = {
        props: {
          transformOrigin: {
            type: [Boolean, String],
            default: false
          },
          offset: vue_popper_default.a.props.offset,
          boundariesPadding: vue_popper_default.a.props.boundariesPadding,
          popperOptions: vue_popper_default.a.props.popperOptions
        },
        data: vue_popper_default.a.data,
        methods: vue_popper_default.a.methods,
        beforeDestroy: vue_popper_default.a.beforeDestroy,
        deactivated: vue_popper_default.a.deactivated
      };
      var submenuvue_type_script_lang_js_ = {
        name: "ElSubmenu",
        componentName: "ElSubmenu",
        mixins: [menu_mixin, emitter_default.a, poperMixins],
        components: { ElCollapseTransition: collapse_transition_default.a },
        props: {
          index: {
            type: String,
            required: true
          },
          showTimeout: {
            type: Number,
            default: 300
          },
          hideTimeout: {
            type: Number,
            default: 300
          },
          popperClass: String,
          disabled: Boolean,
          popperAppendToBody: {
            type: Boolean,
            default: void 0
          }
        },
        data: function data25() {
          return {
            popperJS: null,
            timeout: null,
            items: {},
            submenus: {},
            mouseInChild: false
          };
        },
        watch: {
          opened: function opened(val) {
            var _this = this;
            if (this.isMenuPopup) {
              this.$nextTick(function(_) {
                _this.updatePopper();
              });
            }
          }
        },
        computed: {
          appendToBody: function appendToBody() {
            return this.popperAppendToBody === void 0 ? this.isFirstLevel : this.popperAppendToBody;
          },
          menuTransitionName: function menuTransitionName() {
            return this.rootMenu.collapse ? "el-zoom-in-left" : "el-zoom-in-top";
          },
          opened: function opened() {
            return this.rootMenu.openedMenus.indexOf(this.index) > -1;
          },
          active: function active() {
            var isActive = false;
            var submenus = this.submenus;
            var items2 = this.items;
            Object.keys(items2).forEach(function(index2) {
              if (items2[index2].active) {
                isActive = true;
              }
            });
            Object.keys(submenus).forEach(function(index2) {
              if (submenus[index2].active) {
                isActive = true;
              }
            });
            return isActive;
          },
          hoverBackground: function hoverBackground() {
            return this.rootMenu.hoverBackground;
          },
          backgroundColor: function backgroundColor() {
            return this.rootMenu.backgroundColor || "";
          },
          activeTextColor: function activeTextColor() {
            return this.rootMenu.activeTextColor || "";
          },
          textColor: function textColor() {
            return this.rootMenu.textColor || "";
          },
          mode: function mode() {
            return this.rootMenu.mode;
          },
          isMenuPopup: function isMenuPopup() {
            return this.rootMenu.isMenuPopup;
          },
          titleStyle: function titleStyle() {
            if (this.mode !== "horizontal") {
              return {
                color: this.textColor
              };
            }
            return {
              borderBottomColor: this.active ? this.rootMenu.activeTextColor ? this.activeTextColor : "" : "transparent",
              color: this.active ? this.activeTextColor : this.textColor
            };
          },
          isFirstLevel: function isFirstLevel() {
            var isFirstLevel2 = true;
            var parent2 = this.$parent;
            while (parent2 && parent2 !== this.rootMenu) {
              if (["ElSubmenu", "ElMenuItemGroup"].indexOf(parent2.$options.componentName) > -1) {
                isFirstLevel2 = false;
                break;
              } else {
                parent2 = parent2.$parent;
              }
            }
            return isFirstLevel2;
          }
        },
        methods: {
          handleCollapseToggle: function handleCollapseToggle(value6) {
            if (value6) {
              this.initPopper();
            } else {
              this.doDestroy();
            }
          },
          addItem: function addItem(item) {
            this.$set(this.items, item.index, item);
          },
          removeItem: function removeItem(item) {
            delete this.items[item.index];
          },
          addSubmenu: function addSubmenu(item) {
            this.$set(this.submenus, item.index, item);
          },
          removeSubmenu: function removeSubmenu(item) {
            delete this.submenus[item.index];
          },
          handleClick: function handleClick() {
            var rootMenu = this.rootMenu, disabled = this.disabled;
            if (rootMenu.menuTrigger === "hover" && rootMenu.mode === "horizontal" || rootMenu.collapse && rootMenu.mode === "vertical" || disabled) {
              return;
            }
            this.dispatch("ElMenu", "submenu-click", this);
          },
          handleMouseenter: function handleMouseenter(event2) {
            var _this2 = this;
            var showTimeout = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.showTimeout;
            if (!("ActiveXObject" in window) && event2.type === "focus" && !event2.relatedTarget) {
              return;
            }
            var rootMenu = this.rootMenu, disabled = this.disabled;
            if (rootMenu.menuTrigger === "click" && rootMenu.mode === "horizontal" || !rootMenu.collapse && rootMenu.mode === "vertical" || disabled) {
              return;
            }
            this.dispatch("ElSubmenu", "mouse-enter-child");
            clearTimeout(this.timeout);
            this.timeout = setTimeout(function() {
              _this2.rootMenu.openMenu(_this2.index, _this2.indexPath);
            }, showTimeout);
            if (this.appendToBody) {
              this.$parent.$el.dispatchEvent(new MouseEvent("mouseenter"));
            }
          },
          handleMouseleave: function handleMouseleave() {
            var _this3 = this;
            var deepDispatch = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
            var rootMenu = this.rootMenu;
            if (rootMenu.menuTrigger === "click" && rootMenu.mode === "horizontal" || !rootMenu.collapse && rootMenu.mode === "vertical") {
              return;
            }
            this.dispatch("ElSubmenu", "mouse-leave-child");
            clearTimeout(this.timeout);
            this.timeout = setTimeout(function() {
              !_this3.mouseInChild && _this3.rootMenu.closeMenu(_this3.index);
            }, this.hideTimeout);
            if (this.appendToBody && deepDispatch) {
              if (this.$parent.$options.name === "ElSubmenu") {
                this.$parent.handleMouseleave(true);
              }
            }
          },
          handleTitleMouseenter: function handleTitleMouseenter() {
            if (this.mode === "horizontal" && !this.rootMenu.backgroundColor)
              return;
            var title = this.$refs["submenu-title"];
            title && (title.style.backgroundColor = this.rootMenu.hoverBackground);
          },
          handleTitleMouseleave: function handleTitleMouseleave() {
            if (this.mode === "horizontal" && !this.rootMenu.backgroundColor)
              return;
            var title = this.$refs["submenu-title"];
            title && (title.style.backgroundColor = this.rootMenu.backgroundColor || "");
          },
          updatePlacement: function updatePlacement6() {
            this.currentPlacement = this.mode === "horizontal" && this.isFirstLevel ? "bottom-start" : "right-start";
          },
          initPopper: function initPopper() {
            this.referenceElm = this.$el;
            this.popperElm = this.$refs.menu;
            this.updatePlacement();
          }
        },
        created: function created20() {
          var _this4 = this;
          this.$on("toggle-collapse", this.handleCollapseToggle);
          this.$on("mouse-enter-child", function() {
            _this4.mouseInChild = true;
            clearTimeout(_this4.timeout);
          });
          this.$on("mouse-leave-child", function() {
            _this4.mouseInChild = false;
            clearTimeout(_this4.timeout);
          });
        },
        mounted: function mounted18() {
          this.parentMenu.addSubmenu(this);
          this.rootMenu.addSubmenu(this);
          this.initPopper();
        },
        beforeDestroy: function beforeDestroy13() {
          this.parentMenu.removeSubmenu(this);
          this.rootMenu.removeSubmenu(this);
        },
        render: function render37(h) {
          var _this5 = this;
          var active = this.active, opened = this.opened, paddingStyle = this.paddingStyle, titleStyle = this.titleStyle, backgroundColor = this.backgroundColor, rootMenu = this.rootMenu, currentPlacement = this.currentPlacement, menuTransitionName = this.menuTransitionName, mode = this.mode, disabled = this.disabled, popperClass = this.popperClass, $slots = this.$slots, isFirstLevel = this.isFirstLevel;
          var popupMenu = h("transition", {
            attrs: { name: menuTransitionName }
          }, [h("div", {
            ref: "menu",
            directives: [{
              name: "show",
              value: opened
            }],
            "class": ["el-menu--" + mode, popperClass],
            on: {
              "mouseenter": function mouseenter($event) {
                return _this5.handleMouseenter($event, 100);
              },
              "mouseleave": function mouseleave() {
                return _this5.handleMouseleave(true);
              },
              "focus": function focus7($event) {
                return _this5.handleMouseenter($event, 100);
              }
            }
          }, [h("ul", {
            attrs: {
              role: "menu"
            },
            "class": ["el-menu el-menu--popup", "el-menu--popup-" + currentPlacement],
            style: { backgroundColor: rootMenu.backgroundColor || "" }
          }, [$slots.default])])]);
          var inlineMenu = h("el-collapse-transition", [h("ul", {
            attrs: {
              role: "menu"
            },
            "class": "el-menu el-menu--inline",
            directives: [{
              name: "show",
              value: opened
            }],
            style: { backgroundColor: rootMenu.backgroundColor || "" }
          }, [$slots.default])]);
          var submenuTitleIcon = rootMenu.mode === "horizontal" && isFirstLevel || rootMenu.mode === "vertical" && !rootMenu.collapse ? "el-icon-arrow-down" : "el-icon-arrow-right";
          return h("li", {
            "class": {
              "el-submenu": true,
              "is-active": active,
              "is-opened": opened,
              "is-disabled": disabled
            },
            attrs: {
              role: "menuitem",
              "aria-haspopup": "true",
              "aria-expanded": opened
            },
            on: {
              "mouseenter": this.handleMouseenter,
              "mouseleave": function mouseleave() {
                return _this5.handleMouseleave(false);
              },
              "focus": this.handleMouseenter
            }
          }, [h("div", {
            "class": "el-submenu__title",
            ref: "submenu-title",
            on: {
              "click": this.handleClick,
              "mouseenter": this.handleTitleMouseenter,
              "mouseleave": this.handleTitleMouseleave
            },
            style: [paddingStyle, titleStyle, { backgroundColor }]
          }, [$slots.title, h("i", { "class": ["el-submenu__icon-arrow", submenuTitleIcon] })]), this.isMenuPopup ? popupMenu : inlineMenu]);
        }
      };
      var src_submenuvue_type_script_lang_js_ = submenuvue_type_script_lang_js_;
      var submenu_render, submenu_staticRenderFns;
      var submenu_component = normalizeComponent(src_submenuvue_type_script_lang_js_, submenu_render, submenu_staticRenderFns, false, null, null, null);
      submenu_component.options.__file = "packages/menu/src/submenu.vue";
      var submenu = submenu_component.exports;
      submenu.install = function(Vue2) {
        Vue2.component(submenu.name, submenu);
      };
      var packages_submenu = submenu;
      var menu_itemvue_type_template_id_2a5dbfea_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("li", {
          staticClass: "el-menu-item",
          class: {
            "is-active": _vm.active,
            "is-disabled": _vm.disabled
          },
          style: [
            _vm.paddingStyle,
            _vm.itemStyle,
            { backgroundColor: _vm.backgroundColor }
          ],
          attrs: { role: "menuitem", tabindex: "-1" },
          on: {
            click: _vm.handleClick,
            mouseenter: _vm.onMouseEnter,
            focus: _vm.onMouseEnter,
            blur: _vm.onMouseLeave,
            mouseleave: _vm.onMouseLeave
          }
        }, [
          _vm.parentMenu.$options.componentName === "ElMenu" && _vm.rootMenu.collapse && _vm.$slots.title ? _c("el-tooltip", { attrs: { effect: "dark", placement: "right" } }, [
            _c("div", { attrs: { slot: "content" }, slot: "content" }, [_vm._t("title")], 2),
            _c("div", {
              staticStyle: {
                position: "absolute",
                left: "0",
                top: "0",
                height: "100%",
                width: "100%",
                display: "inline-block",
                "box-sizing": "border-box",
                padding: "0 20px"
              }
            }, [_vm._t("default")], 2)
          ]) : [_vm._t("default"), _vm._t("title")]
        ], 2);
      };
      var menu_itemvue_type_template_id_2a5dbfea_staticRenderFns = [];
      menu_itemvue_type_template_id_2a5dbfea_render._withStripped = true;
      var tooltip_ = __webpack_require__(26);
      var tooltip_default = /* @__PURE__ */ __webpack_require__.n(tooltip_);
      var menu_itemvue_type_script_lang_js_ = {
        name: "ElMenuItem",
        componentName: "ElMenuItem",
        mixins: [menu_mixin, emitter_default.a],
        components: { ElTooltip: tooltip_default.a },
        props: {
          index: {
            default: null,
            validator: function validator2(val) {
              return typeof val === "string" || val === null;
            }
          },
          route: [String, Object],
          disabled: Boolean
        },
        computed: {
          active: function active() {
            return this.index === this.rootMenu.activeIndex;
          },
          hoverBackground: function hoverBackground() {
            return this.rootMenu.hoverBackground;
          },
          backgroundColor: function backgroundColor() {
            return this.rootMenu.backgroundColor || "";
          },
          activeTextColor: function activeTextColor() {
            return this.rootMenu.activeTextColor || "";
          },
          textColor: function textColor() {
            return this.rootMenu.textColor || "";
          },
          mode: function mode() {
            return this.rootMenu.mode;
          },
          itemStyle: function itemStyle() {
            var style2 = {
              color: this.active ? this.activeTextColor : this.textColor
            };
            if (this.mode === "horizontal" && !this.isNested) {
              style2.borderBottomColor = this.active ? this.rootMenu.activeTextColor ? this.activeTextColor : "" : "transparent";
            }
            return style2;
          },
          isNested: function isNested() {
            return this.parentMenu !== this.rootMenu;
          }
        },
        methods: {
          onMouseEnter: function onMouseEnter() {
            if (this.mode === "horizontal" && !this.rootMenu.backgroundColor)
              return;
            this.$el.style.backgroundColor = this.hoverBackground;
          },
          onMouseLeave: function onMouseLeave() {
            if (this.mode === "horizontal" && !this.rootMenu.backgroundColor)
              return;
            this.$el.style.backgroundColor = this.backgroundColor;
          },
          handleClick: function handleClick() {
            if (!this.disabled) {
              this.dispatch("ElMenu", "item-click", this);
              this.$emit("click", this);
            }
          }
        },
        mounted: function mounted18() {
          this.parentMenu.addItem(this);
          this.rootMenu.addItem(this);
        },
        beforeDestroy: function beforeDestroy13() {
          this.parentMenu.removeItem(this);
          this.rootMenu.removeItem(this);
        }
      };
      var src_menu_itemvue_type_script_lang_js_ = menu_itemvue_type_script_lang_js_;
      var menu_item_component = normalizeComponent(src_menu_itemvue_type_script_lang_js_, menu_itemvue_type_template_id_2a5dbfea_render, menu_itemvue_type_template_id_2a5dbfea_staticRenderFns, false, null, null, null);
      menu_item_component.options.__file = "packages/menu/src/menu-item.vue";
      var menu_item = menu_item_component.exports;
      menu_item.install = function(Vue2) {
        Vue2.component(menu_item.name, menu_item);
      };
      var packages_menu_item = menu_item;
      var menu_item_groupvue_type_template_id_543b7bdc_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("li", { staticClass: "el-menu-item-group" }, [
          _c("div", {
            staticClass: "el-menu-item-group__title",
            style: { paddingLeft: _vm.levelPadding + "px" }
          }, [!_vm.$slots.title ? [_vm._v(_vm._s(_vm.title))] : _vm._t("title")], 2),
          _c("ul", [_vm._t("default")], 2)
        ]);
      };
      var menu_item_groupvue_type_template_id_543b7bdc_staticRenderFns = [];
      menu_item_groupvue_type_template_id_543b7bdc_render._withStripped = true;
      var menu_item_groupvue_type_script_lang_js_ = {
        name: "ElMenuItemGroup",
        componentName: "ElMenuItemGroup",
        inject: ["rootMenu"],
        props: {
          title: {
            type: String
          }
        },
        data: function data25() {
          return {
            paddingLeft: 20
          };
        },
        computed: {
          levelPadding: function levelPadding() {
            var padding = 20;
            var parent2 = this.$parent;
            if (this.rootMenu.collapse)
              return 20;
            while (parent2 && parent2.$options.componentName !== "ElMenu") {
              if (parent2.$options.componentName === "ElSubmenu") {
                padding += 20;
              }
              parent2 = parent2.$parent;
            }
            return padding;
          }
        }
      };
      var src_menu_item_groupvue_type_script_lang_js_ = menu_item_groupvue_type_script_lang_js_;
      var menu_item_group_component = normalizeComponent(src_menu_item_groupvue_type_script_lang_js_, menu_item_groupvue_type_template_id_543b7bdc_render, menu_item_groupvue_type_template_id_543b7bdc_staticRenderFns, false, null, null, null);
      menu_item_group_component.options.__file = "packages/menu/src/menu-item-group.vue";
      var menu_item_group = menu_item_group_component.exports;
      menu_item_group.install = function(Vue2) {
        Vue2.component(menu_item_group.name, menu_item_group);
      };
      var packages_menu_item_group = menu_item_group;
      var inputvue_type_template_id_343dd774_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", {
          class: [
            _vm.type === "textarea" ? "el-textarea" : "el-input",
            _vm.inputSize ? "el-input--" + _vm.inputSize : "",
            {
              "is-disabled": _vm.inputDisabled,
              "is-exceed": _vm.inputExceed,
              "el-input-group": _vm.$slots.prepend || _vm.$slots.append,
              "el-input-group--append": _vm.$slots.append,
              "el-input-group--prepend": _vm.$slots.prepend,
              "el-input--prefix": _vm.$slots.prefix || _vm.prefixIcon,
              "el-input--suffix": _vm.$slots.suffix || _vm.suffixIcon || _vm.clearable || _vm.showPassword
            }
          ],
          on: {
            mouseenter: function($event) {
              _vm.hovering = true;
            },
            mouseleave: function($event) {
              _vm.hovering = false;
            }
          }
        }, [
          _vm.type !== "textarea" ? [
            _vm.$slots.prepend ? _c("div", { staticClass: "el-input-group__prepend" }, [_vm._t("prepend")], 2) : _vm._e(),
            _vm.type !== "textarea" ? _c("input", _vm._b({
              ref: "input",
              staticClass: "el-input__inner",
              attrs: {
                tabindex: _vm.tabindex,
                type: _vm.showPassword ? _vm.passwordVisible ? "text" : "password" : _vm.type,
                disabled: _vm.inputDisabled,
                readonly: _vm.readonly,
                autocomplete: _vm.autoComplete || _vm.autocomplete,
                "aria-label": _vm.label
              },
              on: {
                compositionstart: _vm.handleCompositionStart,
                compositionupdate: _vm.handleCompositionUpdate,
                compositionend: _vm.handleCompositionEnd,
                input: _vm.handleInput,
                focus: _vm.handleFocus,
                blur: _vm.handleBlur,
                change: _vm.handleChange
              }
            }, "input", _vm.$attrs, false)) : _vm._e(),
            _vm.$slots.prefix || _vm.prefixIcon ? _c("span", { staticClass: "el-input__prefix" }, [
              _vm._t("prefix"),
              _vm.prefixIcon ? _c("i", {
                staticClass: "el-input__icon",
                class: _vm.prefixIcon
              }) : _vm._e()
            ], 2) : _vm._e(),
            _vm.getSuffixVisible() ? _c("span", { staticClass: "el-input__suffix" }, [
              _c("span", { staticClass: "el-input__suffix-inner" }, [
                !_vm.showClear || !_vm.showPwdVisible || !_vm.isWordLimitVisible ? [
                  _vm._t("suffix"),
                  _vm.suffixIcon ? _c("i", {
                    staticClass: "el-input__icon",
                    class: _vm.suffixIcon
                  }) : _vm._e()
                ] : _vm._e(),
                _vm.showClear ? _c("i", {
                  staticClass: "el-input__icon el-icon-circle-close el-input__clear",
                  on: {
                    mousedown: function($event) {
                      $event.preventDefault();
                    },
                    click: _vm.clear
                  }
                }) : _vm._e(),
                _vm.showPwdVisible ? _c("i", {
                  staticClass: "el-input__icon el-icon-view el-input__clear",
                  on: { click: _vm.handlePasswordVisible }
                }) : _vm._e(),
                _vm.isWordLimitVisible ? _c("span", { staticClass: "el-input__count" }, [
                  _c("span", { staticClass: "el-input__count-inner" }, [
                    _vm._v("\n            " + _vm._s(_vm.textLength) + "/" + _vm._s(_vm.upperLimit) + "\n          ")
                  ])
                ]) : _vm._e()
              ], 2),
              _vm.validateState ? _c("i", {
                staticClass: "el-input__icon",
                class: ["el-input__validateIcon", _vm.validateIcon]
              }) : _vm._e()
            ]) : _vm._e(),
            _vm.$slots.append ? _c("div", { staticClass: "el-input-group__append" }, [_vm._t("append")], 2) : _vm._e()
          ] : _c("textarea", _vm._b({
            ref: "textarea",
            staticClass: "el-textarea__inner",
            style: _vm.textareaStyle,
            attrs: {
              tabindex: _vm.tabindex,
              disabled: _vm.inputDisabled,
              readonly: _vm.readonly,
              autocomplete: _vm.autoComplete || _vm.autocomplete,
              "aria-label": _vm.label
            },
            on: {
              compositionstart: _vm.handleCompositionStart,
              compositionupdate: _vm.handleCompositionUpdate,
              compositionend: _vm.handleCompositionEnd,
              input: _vm.handleInput,
              focus: _vm.handleFocus,
              blur: _vm.handleBlur,
              change: _vm.handleChange
            }
          }, "textarea", _vm.$attrs, false)),
          _vm.isWordLimitVisible && _vm.type === "textarea" ? _c("span", { staticClass: "el-input__count" }, [
            _vm._v(_vm._s(_vm.textLength) + "/" + _vm._s(_vm.upperLimit))
          ]) : _vm._e()
        ], 2);
      };
      var inputvue_type_template_id_343dd774_staticRenderFns = [];
      inputvue_type_template_id_343dd774_render._withStripped = true;
      var hiddenTextarea = void 0;
      var HIDDEN_STYLE = "\n  height:0 !important;\n  visibility:hidden !important;\n  overflow:hidden !important;\n  position:absolute !important;\n  z-index:-1000 !important;\n  top:0 !important;\n  right:0 !important\n";
      var CONTEXT_STYLE = ["letter-spacing", "line-height", "padding-top", "padding-bottom", "font-family", "font-weight", "font-size", "text-rendering", "text-transform", "width", "text-indent", "padding-left", "padding-right", "border-width", "box-sizing"];
      function calculateNodeStyling(targetElement) {
        var style2 = window.getComputedStyle(targetElement);
        var boxSizing = style2.getPropertyValue("box-sizing");
        var paddingSize = parseFloat(style2.getPropertyValue("padding-bottom")) + parseFloat(style2.getPropertyValue("padding-top"));
        var borderSize = parseFloat(style2.getPropertyValue("border-bottom-width")) + parseFloat(style2.getPropertyValue("border-top-width"));
        var contextStyle = CONTEXT_STYLE.map(function(name) {
          return name + ":" + style2.getPropertyValue(name);
        }).join(";");
        return { contextStyle, paddingSize, borderSize, boxSizing };
      }
      function calcTextareaHeight(targetElement) {
        var minRows = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
        var maxRows = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
        if (!hiddenTextarea) {
          hiddenTextarea = document.createElement("textarea");
          document.body.appendChild(hiddenTextarea);
        }
        var _calculateNodeStyling = calculateNodeStyling(targetElement), paddingSize = _calculateNodeStyling.paddingSize, borderSize = _calculateNodeStyling.borderSize, boxSizing = _calculateNodeStyling.boxSizing, contextStyle = _calculateNodeStyling.contextStyle;
        hiddenTextarea.setAttribute("style", contextStyle + ";" + HIDDEN_STYLE);
        hiddenTextarea.value = targetElement.value || targetElement.placeholder || "";
        var height3 = hiddenTextarea.scrollHeight;
        var result2 = {};
        if (boxSizing === "border-box") {
          height3 = height3 + borderSize;
        } else if (boxSizing === "content-box") {
          height3 = height3 - paddingSize;
        }
        hiddenTextarea.value = "";
        var singleRowHeight = hiddenTextarea.scrollHeight - paddingSize;
        if (minRows !== null) {
          var minHeight = singleRowHeight * minRows;
          if (boxSizing === "border-box") {
            minHeight = minHeight + paddingSize + borderSize;
          }
          height3 = Math.max(minHeight, height3);
          result2.minHeight = minHeight + "px";
        }
        if (maxRows !== null) {
          var maxHeight2 = singleRowHeight * maxRows;
          if (boxSizing === "border-box") {
            maxHeight2 = maxHeight2 + paddingSize + borderSize;
          }
          height3 = Math.min(maxHeight2, height3);
        }
        result2.height = height3 + "px";
        hiddenTextarea.parentNode && hiddenTextarea.parentNode.removeChild(hiddenTextarea);
        hiddenTextarea = null;
        return result2;
      }
      var merge_ = __webpack_require__(7);
      var merge_default = /* @__PURE__ */ __webpack_require__.n(merge_);
      var shared_ = __webpack_require__(19);
      var inputvue_type_script_lang_js_ = {
        name: "ElInput",
        componentName: "ElInput",
        mixins: [emitter_default.a, migrating_default.a],
        inheritAttrs: false,
        inject: {
          elForm: {
            default: ""
          },
          elFormItem: {
            default: ""
          }
        },
        data: function data25() {
          return {
            textareaCalcStyle: {},
            hovering: false,
            focused: false,
            isComposing: false,
            passwordVisible: false
          };
        },
        props: {
          value: [String, Number],
          size: String,
          resize: String,
          form: String,
          disabled: Boolean,
          readonly: Boolean,
          type: {
            type: String,
            default: "text"
          },
          autosize: {
            type: [Boolean, Object],
            default: false
          },
          autocomplete: {
            type: String,
            default: "off"
          },
          autoComplete: {
            type: String,
            validator: function validator2(val) {
              return true;
            }
          },
          validateEvent: {
            type: Boolean,
            default: true
          },
          suffixIcon: String,
          prefixIcon: String,
          label: String,
          clearable: {
            type: Boolean,
            default: false
          },
          showPassword: {
            type: Boolean,
            default: false
          },
          showWordLimit: {
            type: Boolean,
            default: false
          },
          tabindex: String
        },
        computed: {
          _elFormItemSize: function _elFormItemSize() {
            return (this.elFormItem || {}).elFormItemSize;
          },
          validateState: function validateState() {
            return this.elFormItem ? this.elFormItem.validateState : "";
          },
          needStatusIcon: function needStatusIcon() {
            return this.elForm ? this.elForm.statusIcon : false;
          },
          validateIcon: function validateIcon() {
            return {
              validating: "el-icon-loading",
              success: "el-icon-circle-check",
              error: "el-icon-circle-close"
            }[this.validateState];
          },
          textareaStyle: function textareaStyle() {
            return merge_default()({}, this.textareaCalcStyle, { resize: this.resize });
          },
          inputSize: function inputSize() {
            return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;
          },
          inputDisabled: function inputDisabled() {
            return this.disabled || (this.elForm || {}).disabled;
          },
          nativeInputValue: function nativeInputValue() {
            return this.value === null || this.value === void 0 ? "" : String(this.value);
          },
          showClear: function showClear() {
            return this.clearable && !this.inputDisabled && !this.readonly && this.nativeInputValue && (this.focused || this.hovering);
          },
          showPwdVisible: function showPwdVisible() {
            return this.showPassword && !this.inputDisabled && !this.readonly && (!!this.nativeInputValue || this.focused);
          },
          isWordLimitVisible: function isWordLimitVisible() {
            return this.showWordLimit && this.$attrs.maxlength && (this.type === "text" || this.type === "textarea") && !this.inputDisabled && !this.readonly && !this.showPassword;
          },
          upperLimit: function upperLimit() {
            return this.$attrs.maxlength;
          },
          textLength: function textLength() {
            if (typeof this.value === "number") {
              return String(this.value).length;
            }
            return (this.value || "").length;
          },
          inputExceed: function inputExceed() {
            return this.isWordLimitVisible && this.textLength > this.upperLimit;
          }
        },
        watch: {
          value: function value6(val) {
            this.$nextTick(this.resizeTextarea);
            if (this.validateEvent) {
              this.dispatch("ElFormItem", "el.form.change", [val]);
            }
          },
          nativeInputValue: function nativeInputValue() {
            this.setNativeInputValue();
          },
          type: function type3() {
            var _this = this;
            this.$nextTick(function() {
              _this.setNativeInputValue();
              _this.resizeTextarea();
              _this.updateIconOffset();
            });
          }
        },
        methods: {
          focus: function focus7() {
            this.getInput().focus();
          },
          blur: function blur6() {
            this.getInput().blur();
          },
          getMigratingConfig: function getMigratingConfig2() {
            return {
              props: {
                "icon": "icon is removed, use suffix-icon / prefix-icon instead.",
                "on-icon-click": "on-icon-click is removed."
              },
              events: {
                "click": "click is removed."
              }
            };
          },
          handleBlur: function handleBlur(event2) {
            this.focused = false;
            this.$emit("blur", event2);
            if (this.validateEvent) {
              this.dispatch("ElFormItem", "el.form.blur", [this.value]);
            }
          },
          select: function select2() {
            this.getInput().select();
          },
          resizeTextarea: function resizeTextarea() {
            if (this.$isServer)
              return;
            var autosize = this.autosize, type3 = this.type;
            if (type3 !== "textarea")
              return;
            if (!autosize) {
              this.textareaCalcStyle = {
                minHeight: calcTextareaHeight(this.$refs.textarea).minHeight
              };
              return;
            }
            var minRows = autosize.minRows;
            var maxRows = autosize.maxRows;
            this.textareaCalcStyle = calcTextareaHeight(this.$refs.textarea, minRows, maxRows);
          },
          setNativeInputValue: function setNativeInputValue() {
            var input2 = this.getInput();
            if (!input2)
              return;
            if (input2.value === this.nativeInputValue)
              return;
            input2.value = this.nativeInputValue;
          },
          handleFocus: function handleFocus3(event2) {
            this.focused = true;
            this.$emit("focus", event2);
          },
          handleCompositionStart: function handleCompositionStart() {
            this.isComposing = true;
          },
          handleCompositionUpdate: function handleCompositionUpdate(event2) {
            var text = event2.target.value;
            var lastCharacter = text[text.length - 1] || "";
            this.isComposing = !Object(shared_["isKorean"])(lastCharacter);
          },
          handleCompositionEnd: function handleCompositionEnd(event2) {
            if (this.isComposing) {
              this.isComposing = false;
              this.handleInput(event2);
            }
          },
          handleInput: function handleInput(event2) {
            if (this.isComposing)
              return;
            if (event2.target.value === this.nativeInputValue)
              return;
            this.$emit("input", event2.target.value);
            this.$nextTick(this.setNativeInputValue);
          },
          handleChange: function handleChange(event2) {
            this.$emit("change", event2.target.value);
          },
          calcIconOffset: function calcIconOffset(place2) {
            var elList = [].slice.call(this.$el.querySelectorAll(".el-input__" + place2) || []);
            if (!elList.length)
              return;
            var el = null;
            for (var i = 0; i < elList.length; i++) {
              if (elList[i].parentNode === this.$el) {
                el = elList[i];
                break;
              }
            }
            if (!el)
              return;
            var pendantMap = {
              suffix: "append",
              prefix: "prepend"
            };
            var pendant = pendantMap[place2];
            if (this.$slots[pendant]) {
              el.style.transform = "translateX(" + (place2 === "suffix" ? "-" : "") + this.$el.querySelector(".el-input-group__" + pendant).offsetWidth + "px)";
            } else {
              el.removeAttribute("style");
            }
          },
          updateIconOffset: function updateIconOffset() {
            this.calcIconOffset("prefix");
            this.calcIconOffset("suffix");
          },
          clear: function clear2() {
            this.$emit("input", "");
            this.$emit("change", "");
            this.$emit("clear");
          },
          handlePasswordVisible: function handlePasswordVisible() {
            var _this2 = this;
            this.passwordVisible = !this.passwordVisible;
            this.$nextTick(function() {
              _this2.focus();
            });
          },
          getInput: function getInput() {
            return this.$refs.input || this.$refs.textarea;
          },
          getSuffixVisible: function getSuffixVisible() {
            return this.$slots.suffix || this.suffixIcon || this.showClear || this.showPassword || this.isWordLimitVisible || this.validateState && this.needStatusIcon;
          }
        },
        created: function created20() {
          this.$on("inputSelect", this.select);
        },
        mounted: function mounted18() {
          this.setNativeInputValue();
          this.resizeTextarea();
          this.updateIconOffset();
        },
        updated: function updated3() {
          this.$nextTick(this.updateIconOffset);
        }
      };
      var src_inputvue_type_script_lang_js_ = inputvue_type_script_lang_js_;
      var input_component = normalizeComponent(src_inputvue_type_script_lang_js_, inputvue_type_template_id_343dd774_render, inputvue_type_template_id_343dd774_staticRenderFns, false, null, null, null);
      input_component.options.__file = "packages/input/src/input.vue";
      var src_input = input_component.exports;
      src_input.install = function(Vue2) {
        Vue2.component(src_input.name, src_input);
      };
      var packages_input = src_input;
      var input_numbervue_type_template_id_42f8cf66_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", {
          class: [
            "el-input-number",
            _vm.inputNumberSize ? "el-input-number--" + _vm.inputNumberSize : "",
            { "is-disabled": _vm.inputNumberDisabled },
            { "is-without-controls": !_vm.controls },
            { "is-controls-right": _vm.controlsAtRight }
          ],
          on: {
            dragstart: function($event) {
              $event.preventDefault();
            }
          }
        }, [
          _vm.controls ? _c("span", {
            directives: [
              {
                name: "repeat-click",
                rawName: "v-repeat-click",
                value: _vm.decrease,
                expression: "decrease"
              }
            ],
            staticClass: "el-input-number__decrease",
            class: { "is-disabled": _vm.minDisabled },
            attrs: { role: "button" },
            on: {
              keydown: function($event) {
                if (!("button" in $event) && _vm._k($event.keyCode, "enter", 13, $event.key, "Enter")) {
                  return null;
                }
                return _vm.decrease($event);
              }
            }
          }, [
            _c("i", {
              class: "el-icon-" + (_vm.controlsAtRight ? "arrow-down" : "minus")
            })
          ]) : _vm._e(),
          _vm.controls ? _c("span", {
            directives: [
              {
                name: "repeat-click",
                rawName: "v-repeat-click",
                value: _vm.increase,
                expression: "increase"
              }
            ],
            staticClass: "el-input-number__increase",
            class: { "is-disabled": _vm.maxDisabled },
            attrs: { role: "button" },
            on: {
              keydown: function($event) {
                if (!("button" in $event) && _vm._k($event.keyCode, "enter", 13, $event.key, "Enter")) {
                  return null;
                }
                return _vm.increase($event);
              }
            }
          }, [
            _c("i", {
              class: "el-icon-" + (_vm.controlsAtRight ? "arrow-up" : "plus")
            })
          ]) : _vm._e(),
          _c("el-input", {
            ref: "input",
            attrs: {
              value: _vm.displayValue,
              placeholder: _vm.placeholder,
              disabled: _vm.inputNumberDisabled,
              size: _vm.inputNumberSize,
              max: _vm.max,
              min: _vm.min,
              name: _vm.name,
              label: _vm.label
            },
            on: {
              blur: _vm.handleBlur,
              focus: _vm.handleFocus,
              input: _vm.handleInput,
              change: _vm.handleInputChange
            },
            nativeOn: {
              keydown: [
                function($event) {
                  if (!("button" in $event) && _vm._k($event.keyCode, "up", 38, $event.key, ["Up", "ArrowUp"])) {
                    return null;
                  }
                  $event.preventDefault();
                  return _vm.increase($event);
                },
                function($event) {
                  if (!("button" in $event) && _vm._k($event.keyCode, "down", 40, $event.key, [
                    "Down",
                    "ArrowDown"
                  ])) {
                    return null;
                  }
                  $event.preventDefault();
                  return _vm.decrease($event);
                }
              ]
            }
          })
        ], 1);
      };
      var input_numbervue_type_template_id_42f8cf66_staticRenderFns = [];
      input_numbervue_type_template_id_42f8cf66_render._withStripped = true;
      var repeat_click = {
        bind: function bind4(el, binding, vnode) {
          var interval = null;
          var startTime = void 0;
          var handler2 = function handler3() {
            return vnode.context[binding.expression].apply();
          };
          var clear2 = function clear3() {
            if (Date.now() - startTime < 100) {
              handler2();
            }
            clearInterval(interval);
            interval = null;
          };
          Object(dom_["on"])(el, "mousedown", function(e) {
            if (e.button !== 0)
              return;
            startTime = Date.now();
            Object(dom_["once"])(document, "mouseup", clear2);
            clearInterval(interval);
            interval = setInterval(handler2, 100);
          });
        }
      };
      var input_numbervue_type_script_lang_js_ = {
        name: "ElInputNumber",
        mixins: [focus_default()("input")],
        inject: {
          elForm: {
            default: ""
          },
          elFormItem: {
            default: ""
          }
        },
        directives: {
          repeatClick: repeat_click
        },
        components: {
          ElInput: input_default.a
        },
        props: {
          step: {
            type: Number,
            default: 1
          },
          stepStrictly: {
            type: Boolean,
            default: false
          },
          max: {
            type: Number,
            default: Infinity
          },
          min: {
            type: Number,
            default: -Infinity
          },
          value: {},
          disabled: Boolean,
          size: String,
          controls: {
            type: Boolean,
            default: true
          },
          controlsPosition: {
            type: String,
            default: ""
          },
          name: String,
          label: String,
          placeholder: String,
          precision: {
            type: Number,
            validator: function validator2(val) {
              return val >= 0 && val === parseInt(val, 10);
            }
          }
        },
        data: function data25() {
          return {
            currentValue: 0,
            userInput: null
          };
        },
        watch: {
          value: {
            immediate: true,
            handler: function handler2(value6) {
              var newVal = value6 === void 0 ? value6 : Number(value6);
              if (newVal !== void 0) {
                if (isNaN(newVal)) {
                  return;
                }
                if (this.stepStrictly) {
                  var stepPrecision = this.getPrecision(this.step);
                  var precisionFactor = Math.pow(10, stepPrecision);
                  newVal = Math.round(newVal / this.step) * precisionFactor * this.step / precisionFactor;
                }
                if (this.precision !== void 0) {
                  newVal = this.toPrecision(newVal, this.precision);
                }
              }
              if (newVal >= this.max)
                newVal = this.max;
              if (newVal <= this.min)
                newVal = this.min;
              this.currentValue = newVal;
              this.userInput = null;
              this.$emit("input", newVal);
            }
          }
        },
        computed: {
          minDisabled: function minDisabled() {
            return this._decrease(this.value, this.step) < this.min;
          },
          maxDisabled: function maxDisabled() {
            return this._increase(this.value, this.step) > this.max;
          },
          numPrecision: function numPrecision() {
            var value6 = this.value, step3 = this.step, getPrecision = this.getPrecision, precision = this.precision;
            var stepPrecision = getPrecision(step3);
            if (precision !== void 0) {
              if (stepPrecision > precision) {
                console.warn("[Element Warn][InputNumber]precision should not be less than the decimal places of step");
              }
              return precision;
            } else {
              return Math.max(getPrecision(value6), stepPrecision);
            }
          },
          controlsAtRight: function controlsAtRight() {
            return this.controls && this.controlsPosition === "right";
          },
          _elFormItemSize: function _elFormItemSize() {
            return (this.elFormItem || {}).elFormItemSize;
          },
          inputNumberSize: function inputNumberSize() {
            return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;
          },
          inputNumberDisabled: function inputNumberDisabled() {
            return this.disabled || !!(this.elForm || {}).disabled;
          },
          displayValue: function displayValue() {
            if (this.userInput !== null) {
              return this.userInput;
            }
            var currentValue = this.currentValue;
            if (typeof currentValue === "number") {
              if (this.stepStrictly) {
                var stepPrecision = this.getPrecision(this.step);
                var precisionFactor = Math.pow(10, stepPrecision);
                currentValue = Math.round(currentValue / this.step) * precisionFactor * this.step / precisionFactor;
              }
              if (this.precision !== void 0) {
                currentValue = currentValue.toFixed(this.precision);
              }
            }
            return currentValue;
          }
        },
        methods: {
          toPrecision: function toPrecision(num, precision) {
            if (precision === void 0)
              precision = this.numPrecision;
            return parseFloat(Math.round(num * Math.pow(10, precision)) / Math.pow(10, precision));
          },
          getPrecision: function getPrecision(value6) {
            if (value6 === void 0)
              return 0;
            var valueString = value6.toString();
            var dotPosition = valueString.indexOf(".");
            var precision = 0;
            if (dotPosition !== -1) {
              precision = valueString.length - dotPosition - 1;
            }
            return precision;
          },
          _increase: function _increase(val, step3) {
            if (typeof val !== "number" && val !== void 0)
              return this.currentValue;
            var precisionFactor = Math.pow(10, this.numPrecision);
            return this.toPrecision((precisionFactor * val + precisionFactor * step3) / precisionFactor);
          },
          _decrease: function _decrease(val, step3) {
            if (typeof val !== "number" && val !== void 0)
              return this.currentValue;
            var precisionFactor = Math.pow(10, this.numPrecision);
            return this.toPrecision((precisionFactor * val - precisionFactor * step3) / precisionFactor);
          },
          increase: function increase() {
            if (this.inputNumberDisabled || this.maxDisabled)
              return;
            var value6 = this.value || 0;
            var newVal = this._increase(value6, this.step);
            this.setCurrentValue(newVal);
          },
          decrease: function decrease() {
            if (this.inputNumberDisabled || this.minDisabled)
              return;
            var value6 = this.value || 0;
            var newVal = this._decrease(value6, this.step);
            this.setCurrentValue(newVal);
          },
          handleBlur: function handleBlur(event2) {
            this.$emit("blur", event2);
          },
          handleFocus: function handleFocus3(event2) {
            this.$emit("focus", event2);
          },
          setCurrentValue: function setCurrentValue(newVal) {
            var oldVal = this.currentValue;
            if (typeof newVal === "number" && this.precision !== void 0) {
              newVal = this.toPrecision(newVal, this.precision);
            }
            if (newVal >= this.max)
              newVal = this.max;
            if (newVal <= this.min)
              newVal = this.min;
            if (oldVal === newVal)
              return;
            this.userInput = null;
            this.$emit("input", newVal);
            this.$emit("change", newVal, oldVal);
            this.currentValue = newVal;
          },
          handleInput: function handleInput(value6) {
            this.userInput = value6;
          },
          handleInputChange: function handleInputChange(value6) {
            var newVal = value6 === "" ? void 0 : Number(value6);
            if (!isNaN(newVal) || value6 === "") {
              this.setCurrentValue(newVal);
            }
            this.userInput = null;
          },
          select: function select2() {
            this.$refs.input.select();
          }
        },
        mounted: function mounted18() {
          var innerInput = this.$refs.input.$refs.input;
          innerInput.setAttribute("role", "spinbutton");
          innerInput.setAttribute("aria-valuemax", this.max);
          innerInput.setAttribute("aria-valuemin", this.min);
          innerInput.setAttribute("aria-valuenow", this.currentValue);
          innerInput.setAttribute("aria-disabled", this.inputNumberDisabled);
        },
        updated: function updated3() {
          if (!this.$refs || !this.$refs.input)
            return;
          var innerInput = this.$refs.input.$refs.input;
          innerInput.setAttribute("aria-valuenow", this.currentValue);
        }
      };
      var src_input_numbervue_type_script_lang_js_ = input_numbervue_type_script_lang_js_;
      var input_number_component = normalizeComponent(src_input_numbervue_type_script_lang_js_, input_numbervue_type_template_id_42f8cf66_render, input_numbervue_type_template_id_42f8cf66_staticRenderFns, false, null, null, null);
      input_number_component.options.__file = "packages/input-number/src/input-number.vue";
      var input_number = input_number_component.exports;
      input_number.install = function(Vue2) {
        Vue2.component(input_number.name, input_number);
      };
      var packages_input_number = input_number;
      var radiovue_type_template_id_69cd6268_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("label", {
          staticClass: "el-radio",
          class: [
            _vm.border && _vm.radioSize ? "el-radio--" + _vm.radioSize : "",
            { "is-disabled": _vm.isDisabled },
            { "is-focus": _vm.focus },
            { "is-bordered": _vm.border },
            { "is-checked": _vm.model === _vm.label }
          ],
          attrs: {
            role: "radio",
            "aria-checked": _vm.model === _vm.label,
            "aria-disabled": _vm.isDisabled,
            tabindex: _vm.tabIndex
          },
          on: {
            keydown: function($event) {
              if (!("button" in $event) && _vm._k($event.keyCode, "space", 32, $event.key, [" ", "Spacebar"])) {
                return null;
              }
              $event.stopPropagation();
              $event.preventDefault();
              _vm.model = _vm.isDisabled ? _vm.model : _vm.label;
            }
          }
        }, [
          _c("span", {
            staticClass: "el-radio__input",
            class: {
              "is-disabled": _vm.isDisabled,
              "is-checked": _vm.model === _vm.label
            }
          }, [
            _c("span", { staticClass: "el-radio__inner" }),
            _c("input", {
              directives: [
                {
                  name: "model",
                  rawName: "v-model",
                  value: _vm.model,
                  expression: "model"
                }
              ],
              ref: "radio",
              staticClass: "el-radio__original",
              attrs: {
                type: "radio",
                "aria-hidden": "true",
                name: _vm.name,
                disabled: _vm.isDisabled,
                tabindex: "-1",
                autocomplete: "off"
              },
              domProps: {
                value: _vm.label,
                checked: _vm._q(_vm.model, _vm.label)
              },
              on: {
                focus: function($event) {
                  _vm.focus = true;
                },
                blur: function($event) {
                  _vm.focus = false;
                },
                change: [
                  function($event) {
                    _vm.model = _vm.label;
                  },
                  _vm.handleChange
                ]
              }
            })
          ]),
          _c("span", {
            staticClass: "el-radio__label",
            on: {
              keydown: function($event) {
                $event.stopPropagation();
              }
            }
          }, [
            _vm._t("default"),
            !_vm.$slots.default ? [_vm._v(_vm._s(_vm.label))] : _vm._e()
          ], 2)
        ]);
      };
      var radiovue_type_template_id_69cd6268_staticRenderFns = [];
      radiovue_type_template_id_69cd6268_render._withStripped = true;
      var radiovue_type_script_lang_js_ = {
        name: "ElRadio",
        mixins: [emitter_default.a],
        inject: {
          elForm: {
            default: ""
          },
          elFormItem: {
            default: ""
          }
        },
        componentName: "ElRadio",
        props: {
          value: {},
          label: {},
          disabled: Boolean,
          name: String,
          border: Boolean,
          size: String
        },
        data: function data25() {
          return {
            focus: false
          };
        },
        computed: {
          isGroup: function isGroup3() {
            var parent2 = this.$parent;
            while (parent2) {
              if (parent2.$options.componentName !== "ElRadioGroup") {
                parent2 = parent2.$parent;
              } else {
                this._radioGroup = parent2;
                return true;
              }
            }
            return false;
          },
          model: {
            get: function get7() {
              return this.isGroup ? this._radioGroup.value : this.value;
            },
            set: function set3(val) {
              if (this.isGroup) {
                this.dispatch("ElRadioGroup", "input", [val]);
              } else {
                this.$emit("input", val);
              }
              this.$refs.radio && (this.$refs.radio.checked = this.model === this.label);
            }
          },
          _elFormItemSize: function _elFormItemSize() {
            return (this.elFormItem || {}).elFormItemSize;
          },
          radioSize: function radioSize() {
            var temRadioSize = this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;
            return this.isGroup ? this._radioGroup.radioGroupSize || temRadioSize : temRadioSize;
          },
          isDisabled: function isDisabled4() {
            return this.isGroup ? this._radioGroup.disabled || this.disabled || (this.elForm || {}).disabled : this.disabled || (this.elForm || {}).disabled;
          },
          tabIndex: function tabIndex() {
            return this.isDisabled || this.isGroup && this.model !== this.label ? -1 : 0;
          }
        },
        methods: {
          handleChange: function handleChange() {
            var _this = this;
            this.$nextTick(function() {
              _this.$emit("change", _this.model);
              _this.isGroup && _this.dispatch("ElRadioGroup", "handleChange", _this.model);
            });
          }
        }
      };
      var src_radiovue_type_script_lang_js_ = radiovue_type_script_lang_js_;
      var radio_component = normalizeComponent(src_radiovue_type_script_lang_js_, radiovue_type_template_id_69cd6268_render, radiovue_type_template_id_69cd6268_staticRenderFns, false, null, null, null);
      radio_component.options.__file = "packages/radio/src/radio.vue";
      var src_radio = radio_component.exports;
      src_radio.install = function(Vue2) {
        Vue2.component(src_radio.name, src_radio);
      };
      var packages_radio = src_radio;
      var radio_groupvue_type_template_id_818a704c_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(_vm._elTag, {
          tag: "component",
          staticClass: "el-radio-group",
          attrs: { role: "radiogroup" },
          on: { keydown: _vm.handleKeydown }
        }, [_vm._t("default")], 2);
      };
      var radio_groupvue_type_template_id_818a704c_staticRenderFns = [];
      radio_groupvue_type_template_id_818a704c_render._withStripped = true;
      var keyCode = Object.freeze({
        LEFT: 37,
        UP: 38,
        RIGHT: 39,
        DOWN: 40
      });
      var radio_groupvue_type_script_lang_js_ = {
        name: "ElRadioGroup",
        componentName: "ElRadioGroup",
        inject: {
          elFormItem: {
            default: ""
          }
        },
        mixins: [emitter_default.a],
        props: {
          value: {},
          size: String,
          fill: String,
          textColor: String,
          disabled: Boolean
        },
        computed: {
          _elFormItemSize: function _elFormItemSize() {
            return (this.elFormItem || {}).elFormItemSize;
          },
          _elTag: function _elTag() {
            var tag2 = (this.$vnode.data || {}).tag;
            if (!tag2 || tag2 === "component")
              tag2 = "div";
            return tag2;
          },
          radioGroupSize: function radioGroupSize() {
            return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;
          }
        },
        created: function created20() {
          var _this = this;
          this.$on("handleChange", function(value6) {
            _this.$emit("change", value6);
          });
        },
        mounted: function mounted18() {
          var radios = this.$el.querySelectorAll("[type=radio]");
          var firstLabel = this.$el.querySelectorAll("[role=radio]")[0];
          if (![].some.call(radios, function(radio2) {
            return radio2.checked;
          }) && firstLabel) {
            firstLabel.tabIndex = 0;
          }
        },
        methods: {
          handleKeydown: function handleKeydown(e) {
            var target2 = e.target;
            var className = target2.nodeName === "INPUT" ? "[type=radio]" : "[role=radio]";
            var radios = this.$el.querySelectorAll(className);
            var length = radios.length;
            var index2 = [].indexOf.call(radios, target2);
            var roleRadios = this.$el.querySelectorAll("[role=radio]");
            switch (e.keyCode) {
              case keyCode.LEFT:
              case keyCode.UP:
                e.stopPropagation();
                e.preventDefault();
                if (index2 === 0) {
                  roleRadios[length - 1].click();
                  roleRadios[length - 1].focus();
                } else {
                  roleRadios[index2 - 1].click();
                  roleRadios[index2 - 1].focus();
                }
                break;
              case keyCode.RIGHT:
              case keyCode.DOWN:
                if (index2 === length - 1) {
                  e.stopPropagation();
                  e.preventDefault();
                  roleRadios[0].click();
                  roleRadios[0].focus();
                } else {
                  roleRadios[index2 + 1].click();
                  roleRadios[index2 + 1].focus();
                }
                break;
            }
          }
        },
        watch: {
          value: function value6(_value) {
            this.dispatch("ElFormItem", "el.form.change", [this.value]);
          }
        }
      };
      var src_radio_groupvue_type_script_lang_js_ = radio_groupvue_type_script_lang_js_;
      var radio_group_component = normalizeComponent(src_radio_groupvue_type_script_lang_js_, radio_groupvue_type_template_id_818a704c_render, radio_groupvue_type_template_id_818a704c_staticRenderFns, false, null, null, null);
      radio_group_component.options.__file = "packages/radio/src/radio-group.vue";
      var radio_group = radio_group_component.exports;
      radio_group.install = function(Vue2) {
        Vue2.component(radio_group.name, radio_group);
      };
      var packages_radio_group = radio_group;
      var radio_buttonvue_type_template_id_18a77a32_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("label", {
          staticClass: "el-radio-button",
          class: [
            _vm.size ? "el-radio-button--" + _vm.size : "",
            { "is-active": _vm.value === _vm.label },
            { "is-disabled": _vm.isDisabled },
            { "is-focus": _vm.focus }
          ],
          attrs: {
            role: "radio",
            "aria-checked": _vm.value === _vm.label,
            "aria-disabled": _vm.isDisabled,
            tabindex: _vm.tabIndex
          },
          on: {
            keydown: function($event) {
              if (!("button" in $event) && _vm._k($event.keyCode, "space", 32, $event.key, [" ", "Spacebar"])) {
                return null;
              }
              $event.stopPropagation();
              $event.preventDefault();
              _vm.value = _vm.isDisabled ? _vm.value : _vm.label;
            }
          }
        }, [
          _c("input", {
            directives: [
              {
                name: "model",
                rawName: "v-model",
                value: _vm.value,
                expression: "value"
              }
            ],
            staticClass: "el-radio-button__orig-radio",
            attrs: {
              type: "radio",
              name: _vm.name,
              disabled: _vm.isDisabled,
              tabindex: "-1",
              autocomplete: "off"
            },
            domProps: { value: _vm.label, checked: _vm._q(_vm.value, _vm.label) },
            on: {
              change: [
                function($event) {
                  _vm.value = _vm.label;
                },
                _vm.handleChange
              ],
              focus: function($event) {
                _vm.focus = true;
              },
              blur: function($event) {
                _vm.focus = false;
              }
            }
          }),
          _c("span", {
            staticClass: "el-radio-button__inner",
            style: _vm.value === _vm.label ? _vm.activeStyle : null,
            on: {
              keydown: function($event) {
                $event.stopPropagation();
              }
            }
          }, [
            _vm._t("default"),
            !_vm.$slots.default ? [_vm._v(_vm._s(_vm.label))] : _vm._e()
          ], 2)
        ]);
      };
      var radio_buttonvue_type_template_id_18a77a32_staticRenderFns = [];
      radio_buttonvue_type_template_id_18a77a32_render._withStripped = true;
      var radio_buttonvue_type_script_lang_js_ = {
        name: "ElRadioButton",
        mixins: [emitter_default.a],
        inject: {
          elForm: {
            default: ""
          },
          elFormItem: {
            default: ""
          }
        },
        props: {
          label: {},
          disabled: Boolean,
          name: String
        },
        data: function data25() {
          return {
            focus: false
          };
        },
        computed: {
          value: {
            get: function get7() {
              return this._radioGroup.value;
            },
            set: function set3(value6) {
              this._radioGroup.$emit("input", value6);
            }
          },
          _radioGroup: function _radioGroup() {
            var parent2 = this.$parent;
            while (parent2) {
              if (parent2.$options.componentName !== "ElRadioGroup") {
                parent2 = parent2.$parent;
              } else {
                return parent2;
              }
            }
            return false;
          },
          activeStyle: function activeStyle() {
            return {
              backgroundColor: this._radioGroup.fill || "",
              borderColor: this._radioGroup.fill || "",
              boxShadow: this._radioGroup.fill ? "-1px 0 0 0 " + this._radioGroup.fill : "",
              color: this._radioGroup.textColor || ""
            };
          },
          _elFormItemSize: function _elFormItemSize() {
            return (this.elFormItem || {}).elFormItemSize;
          },
          size: function size2() {
            return this._radioGroup.radioGroupSize || this._elFormItemSize || (this.$ELEMENT || {}).size;
          },
          isDisabled: function isDisabled4() {
            return this.disabled || this._radioGroup.disabled || (this.elForm || {}).disabled;
          },
          tabIndex: function tabIndex() {
            return this.isDisabled || this._radioGroup && this.value !== this.label ? -1 : 0;
          }
        },
        methods: {
          handleChange: function handleChange() {
            var _this = this;
            this.$nextTick(function() {
              _this.dispatch("ElRadioGroup", "handleChange", _this.value);
            });
          }
        }
      };
      var src_radio_buttonvue_type_script_lang_js_ = radio_buttonvue_type_script_lang_js_;
      var radio_button_component = normalizeComponent(src_radio_buttonvue_type_script_lang_js_, radio_buttonvue_type_template_id_18a77a32_render, radio_buttonvue_type_template_id_18a77a32_staticRenderFns, false, null, null, null);
      radio_button_component.options.__file = "packages/radio/src/radio-button.vue";
      var radio_button = radio_button_component.exports;
      radio_button.install = function(Vue2) {
        Vue2.component(radio_button.name, radio_button);
      };
      var packages_radio_button = radio_button;
      var checkboxvue_type_template_id_d0387074_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("label", {
          staticClass: "el-checkbox",
          class: [
            _vm.border && _vm.checkboxSize ? "el-checkbox--" + _vm.checkboxSize : "",
            { "is-disabled": _vm.isDisabled },
            { "is-bordered": _vm.border },
            { "is-checked": _vm.isChecked }
          ],
          attrs: { id: _vm.id }
        }, [
          _c("span", {
            staticClass: "el-checkbox__input",
            class: {
              "is-disabled": _vm.isDisabled,
              "is-checked": _vm.isChecked,
              "is-indeterminate": _vm.indeterminate,
              "is-focus": _vm.focus
            },
            attrs: {
              tabindex: _vm.indeterminate ? 0 : false,
              role: _vm.indeterminate ? "checkbox" : false,
              "aria-checked": _vm.indeterminate ? "mixed" : false
            }
          }, [
            _c("span", { staticClass: "el-checkbox__inner" }),
            _vm.trueLabel || _vm.falseLabel ? _c("input", {
              directives: [
                {
                  name: "model",
                  rawName: "v-model",
                  value: _vm.model,
                  expression: "model"
                }
              ],
              staticClass: "el-checkbox__original",
              attrs: {
                type: "checkbox",
                "aria-hidden": _vm.indeterminate ? "true" : "false",
                name: _vm.name,
                disabled: _vm.isDisabled,
                "true-value": _vm.trueLabel,
                "false-value": _vm.falseLabel
              },
              domProps: {
                checked: Array.isArray(_vm.model) ? _vm._i(_vm.model, null) > -1 : _vm._q(_vm.model, _vm.trueLabel)
              },
              on: {
                change: [
                  function($event) {
                    var $$a = _vm.model, $$el = $event.target, $$c = $$el.checked ? _vm.trueLabel : _vm.falseLabel;
                    if (Array.isArray($$a)) {
                      var $$v = null, $$i = _vm._i($$a, $$v);
                      if ($$el.checked) {
                        $$i < 0 && (_vm.model = $$a.concat([$$v]));
                      } else {
                        $$i > -1 && (_vm.model = $$a.slice(0, $$i).concat($$a.slice($$i + 1)));
                      }
                    } else {
                      _vm.model = $$c;
                    }
                  },
                  _vm.handleChange
                ],
                focus: function($event) {
                  _vm.focus = true;
                },
                blur: function($event) {
                  _vm.focus = false;
                }
              }
            }) : _c("input", {
              directives: [
                {
                  name: "model",
                  rawName: "v-model",
                  value: _vm.model,
                  expression: "model"
                }
              ],
              staticClass: "el-checkbox__original",
              attrs: {
                type: "checkbox",
                "aria-hidden": _vm.indeterminate ? "true" : "false",
                disabled: _vm.isDisabled,
                name: _vm.name
              },
              domProps: {
                value: _vm.label,
                checked: Array.isArray(_vm.model) ? _vm._i(_vm.model, _vm.label) > -1 : _vm.model
              },
              on: {
                change: [
                  function($event) {
                    var $$a = _vm.model, $$el = $event.target, $$c = $$el.checked ? true : false;
                    if (Array.isArray($$a)) {
                      var $$v = _vm.label, $$i = _vm._i($$a, $$v);
                      if ($$el.checked) {
                        $$i < 0 && (_vm.model = $$a.concat([$$v]));
                      } else {
                        $$i > -1 && (_vm.model = $$a.slice(0, $$i).concat($$a.slice($$i + 1)));
                      }
                    } else {
                      _vm.model = $$c;
                    }
                  },
                  _vm.handleChange
                ],
                focus: function($event) {
                  _vm.focus = true;
                },
                blur: function($event) {
                  _vm.focus = false;
                }
              }
            })
          ]),
          _vm.$slots.default || _vm.label ? _c("span", { staticClass: "el-checkbox__label" }, [
            _vm._t("default"),
            !_vm.$slots.default ? [_vm._v(_vm._s(_vm.label))] : _vm._e()
          ], 2) : _vm._e()
        ]);
      };
      var checkboxvue_type_template_id_d0387074_staticRenderFns = [];
      checkboxvue_type_template_id_d0387074_render._withStripped = true;
      var checkboxvue_type_script_lang_js_ = {
        name: "ElCheckbox",
        mixins: [emitter_default.a],
        inject: {
          elForm: {
            default: ""
          },
          elFormItem: {
            default: ""
          }
        },
        componentName: "ElCheckbox",
        data: function data25() {
          return {
            selfModel: false,
            focus: false,
            isLimitExceeded: false
          };
        },
        computed: {
          model: {
            get: function get7() {
              return this.isGroup ? this.store : this.value !== void 0 ? this.value : this.selfModel;
            },
            set: function set3(val) {
              if (this.isGroup) {
                this.isLimitExceeded = false;
                this._checkboxGroup.min !== void 0 && val.length < this._checkboxGroup.min && (this.isLimitExceeded = true);
                this._checkboxGroup.max !== void 0 && val.length > this._checkboxGroup.max && (this.isLimitExceeded = true);
                this.isLimitExceeded === false && this.dispatch("ElCheckboxGroup", "input", [val]);
              } else {
                this.$emit("input", val);
                this.selfModel = val;
              }
            }
          },
          isChecked: function isChecked2() {
            if ({}.toString.call(this.model) === "[object Boolean]") {
              return this.model;
            } else if (Array.isArray(this.model)) {
              return this.model.indexOf(this.label) > -1;
            } else if (this.model !== null && this.model !== void 0) {
              return this.model === this.trueLabel;
            }
          },
          isGroup: function isGroup3() {
            var parent2 = this.$parent;
            while (parent2) {
              if (parent2.$options.componentName !== "ElCheckboxGroup") {
                parent2 = parent2.$parent;
              } else {
                this._checkboxGroup = parent2;
                return true;
              }
            }
            return false;
          },
          store: function store2() {
            return this._checkboxGroup ? this._checkboxGroup.value : this.value;
          },
          isLimitDisabled: function isLimitDisabled() {
            var _checkboxGroup = this._checkboxGroup, max2 = _checkboxGroup.max, min2 = _checkboxGroup.min;
            return !!(max2 || min2) && this.model.length >= max2 && !this.isChecked || this.model.length <= min2 && this.isChecked;
          },
          isDisabled: function isDisabled4() {
            return this.isGroup ? this._checkboxGroup.disabled || this.disabled || (this.elForm || {}).disabled || this.isLimitDisabled : this.disabled || (this.elForm || {}).disabled;
          },
          _elFormItemSize: function _elFormItemSize() {
            return (this.elFormItem || {}).elFormItemSize;
          },
          checkboxSize: function checkboxSize() {
            var temCheckboxSize = this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;
            return this.isGroup ? this._checkboxGroup.checkboxGroupSize || temCheckboxSize : temCheckboxSize;
          }
        },
        props: {
          value: {},
          label: {},
          indeterminate: Boolean,
          disabled: Boolean,
          checked: Boolean,
          name: String,
          trueLabel: [String, Number],
          falseLabel: [String, Number],
          id: String,
          controls: String,
          border: Boolean,
          size: String
        },
        methods: {
          addToStore: function addToStore() {
            if (Array.isArray(this.model) && this.model.indexOf(this.label) === -1) {
              this.model.push(this.label);
            } else {
              this.model = this.trueLabel || true;
            }
          },
          handleChange: function handleChange(ev) {
            var _this = this;
            if (this.isLimitExceeded)
              return;
            var value6 = void 0;
            if (ev.target.checked) {
              value6 = this.trueLabel === void 0 ? true : this.trueLabel;
            } else {
              value6 = this.falseLabel === void 0 ? false : this.falseLabel;
            }
            this.$emit("change", value6, ev);
            this.$nextTick(function() {
              if (_this.isGroup) {
                _this.dispatch("ElCheckboxGroup", "change", [_this._checkboxGroup.value]);
              }
            });
          }
        },
        created: function created20() {
          this.checked && this.addToStore();
        },
        mounted: function mounted18() {
          if (this.indeterminate) {
            this.$el.setAttribute("aria-controls", this.controls);
          }
        },
        watch: {
          value: function value6(_value) {
            this.dispatch("ElFormItem", "el.form.change", _value);
          }
        }
      };
      var src_checkboxvue_type_script_lang_js_ = checkboxvue_type_script_lang_js_;
      var checkbox_component = normalizeComponent(src_checkboxvue_type_script_lang_js_, checkboxvue_type_template_id_d0387074_render, checkboxvue_type_template_id_d0387074_staticRenderFns, false, null, null, null);
      checkbox_component.options.__file = "packages/checkbox/src/checkbox.vue";
      var src_checkbox = checkbox_component.exports;
      src_checkbox.install = function(Vue2) {
        Vue2.component(src_checkbox.name, src_checkbox);
      };
      var packages_checkbox = src_checkbox;
      var checkbox_buttonvue_type_template_id_478e906e_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("label", {
          staticClass: "el-checkbox-button",
          class: [
            _vm.size ? "el-checkbox-button--" + _vm.size : "",
            { "is-disabled": _vm.isDisabled },
            { "is-checked": _vm.isChecked },
            { "is-focus": _vm.focus }
          ],
          attrs: {
            role: "checkbox",
            "aria-checked": _vm.isChecked,
            "aria-disabled": _vm.isDisabled
          }
        }, [
          _vm.trueLabel || _vm.falseLabel ? _c("input", {
            directives: [
              {
                name: "model",
                rawName: "v-model",
                value: _vm.model,
                expression: "model"
              }
            ],
            staticClass: "el-checkbox-button__original",
            attrs: {
              type: "checkbox",
              name: _vm.name,
              disabled: _vm.isDisabled,
              "true-value": _vm.trueLabel,
              "false-value": _vm.falseLabel
            },
            domProps: {
              checked: Array.isArray(_vm.model) ? _vm._i(_vm.model, null) > -1 : _vm._q(_vm.model, _vm.trueLabel)
            },
            on: {
              change: [
                function($event) {
                  var $$a = _vm.model, $$el = $event.target, $$c = $$el.checked ? _vm.trueLabel : _vm.falseLabel;
                  if (Array.isArray($$a)) {
                    var $$v = null, $$i = _vm._i($$a, $$v);
                    if ($$el.checked) {
                      $$i < 0 && (_vm.model = $$a.concat([$$v]));
                    } else {
                      $$i > -1 && (_vm.model = $$a.slice(0, $$i).concat($$a.slice($$i + 1)));
                    }
                  } else {
                    _vm.model = $$c;
                  }
                },
                _vm.handleChange
              ],
              focus: function($event) {
                _vm.focus = true;
              },
              blur: function($event) {
                _vm.focus = false;
              }
            }
          }) : _c("input", {
            directives: [
              {
                name: "model",
                rawName: "v-model",
                value: _vm.model,
                expression: "model"
              }
            ],
            staticClass: "el-checkbox-button__original",
            attrs: {
              type: "checkbox",
              name: _vm.name,
              disabled: _vm.isDisabled
            },
            domProps: {
              value: _vm.label,
              checked: Array.isArray(_vm.model) ? _vm._i(_vm.model, _vm.label) > -1 : _vm.model
            },
            on: {
              change: [
                function($event) {
                  var $$a = _vm.model, $$el = $event.target, $$c = $$el.checked ? true : false;
                  if (Array.isArray($$a)) {
                    var $$v = _vm.label, $$i = _vm._i($$a, $$v);
                    if ($$el.checked) {
                      $$i < 0 && (_vm.model = $$a.concat([$$v]));
                    } else {
                      $$i > -1 && (_vm.model = $$a.slice(0, $$i).concat($$a.slice($$i + 1)));
                    }
                  } else {
                    _vm.model = $$c;
                  }
                },
                _vm.handleChange
              ],
              focus: function($event) {
                _vm.focus = true;
              },
              blur: function($event) {
                _vm.focus = false;
              }
            }
          }),
          _vm.$slots.default || _vm.label ? _c("span", {
            staticClass: "el-checkbox-button__inner",
            style: _vm.isChecked ? _vm.activeStyle : null
          }, [_vm._t("default", [_vm._v(_vm._s(_vm.label))])], 2) : _vm._e()
        ]);
      };
      var checkbox_buttonvue_type_template_id_478e906e_staticRenderFns = [];
      checkbox_buttonvue_type_template_id_478e906e_render._withStripped = true;
      var checkbox_buttonvue_type_script_lang_js_ = {
        name: "ElCheckboxButton",
        mixins: [emitter_default.a],
        inject: {
          elForm: {
            default: ""
          },
          elFormItem: {
            default: ""
          }
        },
        data: function data25() {
          return {
            selfModel: false,
            focus: false,
            isLimitExceeded: false
          };
        },
        props: {
          value: {},
          label: {},
          disabled: Boolean,
          checked: Boolean,
          name: String,
          trueLabel: [String, Number],
          falseLabel: [String, Number]
        },
        computed: {
          model: {
            get: function get7() {
              return this._checkboxGroup ? this.store : this.value !== void 0 ? this.value : this.selfModel;
            },
            set: function set3(val) {
              if (this._checkboxGroup) {
                this.isLimitExceeded = false;
                this._checkboxGroup.min !== void 0 && val.length < this._checkboxGroup.min && (this.isLimitExceeded = true);
                this._checkboxGroup.max !== void 0 && val.length > this._checkboxGroup.max && (this.isLimitExceeded = true);
                this.isLimitExceeded === false && this.dispatch("ElCheckboxGroup", "input", [val]);
              } else if (this.value !== void 0) {
                this.$emit("input", val);
              } else {
                this.selfModel = val;
              }
            }
          },
          isChecked: function isChecked2() {
            if ({}.toString.call(this.model) === "[object Boolean]") {
              return this.model;
            } else if (Array.isArray(this.model)) {
              return this.model.indexOf(this.label) > -1;
            } else if (this.model !== null && this.model !== void 0) {
              return this.model === this.trueLabel;
            }
          },
          _checkboxGroup: function _checkboxGroup() {
            var parent2 = this.$parent;
            while (parent2) {
              if (parent2.$options.componentName !== "ElCheckboxGroup") {
                parent2 = parent2.$parent;
              } else {
                return parent2;
              }
            }
            return false;
          },
          store: function store2() {
            return this._checkboxGroup ? this._checkboxGroup.value : this.value;
          },
          activeStyle: function activeStyle() {
            return {
              backgroundColor: this._checkboxGroup.fill || "",
              borderColor: this._checkboxGroup.fill || "",
              color: this._checkboxGroup.textColor || "",
              "box-shadow": "-1px 0 0 0 " + this._checkboxGroup.fill
            };
          },
          _elFormItemSize: function _elFormItemSize() {
            return (this.elFormItem || {}).elFormItemSize;
          },
          size: function size2() {
            return this._checkboxGroup.checkboxGroupSize || this._elFormItemSize || (this.$ELEMENT || {}).size;
          },
          isLimitDisabled: function isLimitDisabled() {
            var _checkboxGroup2 = this._checkboxGroup, max2 = _checkboxGroup2.max, min2 = _checkboxGroup2.min;
            return !!(max2 || min2) && this.model.length >= max2 && !this.isChecked || this.model.length <= min2 && this.isChecked;
          },
          isDisabled: function isDisabled4() {
            return this._checkboxGroup ? this._checkboxGroup.disabled || this.disabled || (this.elForm || {}).disabled || this.isLimitDisabled : this.disabled || (this.elForm || {}).disabled;
          }
        },
        methods: {
          addToStore: function addToStore() {
            if (Array.isArray(this.model) && this.model.indexOf(this.label) === -1) {
              this.model.push(this.label);
            } else {
              this.model = this.trueLabel || true;
            }
          },
          handleChange: function handleChange(ev) {
            var _this = this;
            if (this.isLimitExceeded)
              return;
            var value6 = void 0;
            if (ev.target.checked) {
              value6 = this.trueLabel === void 0 ? true : this.trueLabel;
            } else {
              value6 = this.falseLabel === void 0 ? false : this.falseLabel;
            }
            this.$emit("change", value6, ev);
            this.$nextTick(function() {
              if (_this._checkboxGroup) {
                _this.dispatch("ElCheckboxGroup", "change", [_this._checkboxGroup.value]);
              }
            });
          }
        },
        created: function created20() {
          this.checked && this.addToStore();
        }
      };
      var src_checkbox_buttonvue_type_script_lang_js_ = checkbox_buttonvue_type_script_lang_js_;
      var checkbox_button_component = normalizeComponent(src_checkbox_buttonvue_type_script_lang_js_, checkbox_buttonvue_type_template_id_478e906e_render, checkbox_buttonvue_type_template_id_478e906e_staticRenderFns, false, null, null, null);
      checkbox_button_component.options.__file = "packages/checkbox/src/checkbox-button.vue";
      var checkbox_button = checkbox_button_component.exports;
      checkbox_button.install = function(Vue2) {
        Vue2.component(checkbox_button.name, checkbox_button);
      };
      var packages_checkbox_button = checkbox_button;
      var checkbox_groupvue_type_template_id_7289a290_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", {
          staticClass: "el-checkbox-group",
          attrs: { role: "group", "aria-label": "checkbox-group" }
        }, [_vm._t("default")], 2);
      };
      var checkbox_groupvue_type_template_id_7289a290_staticRenderFns = [];
      checkbox_groupvue_type_template_id_7289a290_render._withStripped = true;
      var checkbox_groupvue_type_script_lang_js_ = {
        name: "ElCheckboxGroup",
        componentName: "ElCheckboxGroup",
        mixins: [emitter_default.a],
        inject: {
          elFormItem: {
            default: ""
          }
        },
        props: {
          value: {},
          disabled: Boolean,
          min: Number,
          max: Number,
          size: String,
          fill: String,
          textColor: String
        },
        computed: {
          _elFormItemSize: function _elFormItemSize() {
            return (this.elFormItem || {}).elFormItemSize;
          },
          checkboxGroupSize: function checkboxGroupSize() {
            return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;
          }
        },
        watch: {
          value: function value6(_value) {
            this.dispatch("ElFormItem", "el.form.change", [_value]);
          }
        }
      };
      var src_checkbox_groupvue_type_script_lang_js_ = checkbox_groupvue_type_script_lang_js_;
      var checkbox_group_component = normalizeComponent(src_checkbox_groupvue_type_script_lang_js_, checkbox_groupvue_type_template_id_7289a290_render, checkbox_groupvue_type_template_id_7289a290_staticRenderFns, false, null, null, null);
      checkbox_group_component.options.__file = "packages/checkbox/src/checkbox-group.vue";
      var checkbox_group = checkbox_group_component.exports;
      checkbox_group.install = function(Vue2) {
        Vue2.component(checkbox_group.name, checkbox_group);
      };
      var packages_checkbox_group = checkbox_group;
      var componentvue_type_template_id_2dcd8fbb_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", {
          staticClass: "el-switch",
          class: { "is-disabled": _vm.switchDisabled, "is-checked": _vm.checked },
          attrs: {
            role: "switch",
            "aria-checked": _vm.checked,
            "aria-disabled": _vm.switchDisabled
          },
          on: {
            click: function($event) {
              $event.preventDefault();
              return _vm.switchValue($event);
            }
          }
        }, [
          _c("input", {
            ref: "input",
            staticClass: "el-switch__input",
            attrs: {
              type: "checkbox",
              id: _vm.id,
              name: _vm.name,
              "true-value": _vm.activeValue,
              "false-value": _vm.inactiveValue,
              disabled: _vm.switchDisabled
            },
            on: {
              change: _vm.handleChange,
              keydown: function($event) {
                if (!("button" in $event) && _vm._k($event.keyCode, "enter", 13, $event.key, "Enter")) {
                  return null;
                }
                return _vm.switchValue($event);
              }
            }
          }),
          _vm.inactiveIconClass || _vm.inactiveText ? _c("span", {
            class: [
              "el-switch__label",
              "el-switch__label--left",
              !_vm.checked ? "is-active" : ""
            ]
          }, [
            _vm.inactiveIconClass ? _c("i", { class: [_vm.inactiveIconClass] }) : _vm._e(),
            !_vm.inactiveIconClass && _vm.inactiveText ? _c("span", { attrs: { "aria-hidden": _vm.checked } }, [
              _vm._v(_vm._s(_vm.inactiveText))
            ]) : _vm._e()
          ]) : _vm._e(),
          _c("span", {
            ref: "core",
            staticClass: "el-switch__core",
            style: { width: _vm.coreWidth + "px" }
          }),
          _vm.activeIconClass || _vm.activeText ? _c("span", {
            class: [
              "el-switch__label",
              "el-switch__label--right",
              _vm.checked ? "is-active" : ""
            ]
          }, [
            _vm.activeIconClass ? _c("i", { class: [_vm.activeIconClass] }) : _vm._e(),
            !_vm.activeIconClass && _vm.activeText ? _c("span", { attrs: { "aria-hidden": !_vm.checked } }, [
              _vm._v(_vm._s(_vm.activeText))
            ]) : _vm._e()
          ]) : _vm._e()
        ]);
      };
      var componentvue_type_template_id_2dcd8fbb_staticRenderFns = [];
      componentvue_type_template_id_2dcd8fbb_render._withStripped = true;
      var switch_src_componentvue_type_script_lang_js_ = {
        name: "ElSwitch",
        mixins: [focus_default()("input"), migrating_default.a, emitter_default.a],
        inject: {
          elForm: {
            default: ""
          }
        },
        props: {
          value: {
            type: [Boolean, String, Number],
            default: false
          },
          disabled: {
            type: Boolean,
            default: false
          },
          width: {
            type: Number,
            default: 40
          },
          activeIconClass: {
            type: String,
            default: ""
          },
          inactiveIconClass: {
            type: String,
            default: ""
          },
          activeText: String,
          inactiveText: String,
          activeColor: {
            type: String,
            default: ""
          },
          inactiveColor: {
            type: String,
            default: ""
          },
          activeValue: {
            type: [Boolean, String, Number],
            default: true
          },
          inactiveValue: {
            type: [Boolean, String, Number],
            default: false
          },
          name: {
            type: String,
            default: ""
          },
          validateEvent: {
            type: Boolean,
            default: true
          },
          id: String
        },
        data: function data25() {
          return {
            coreWidth: this.width
          };
        },
        created: function created20() {
          if (!~[this.activeValue, this.inactiveValue].indexOf(this.value)) {
            this.$emit("input", this.inactiveValue);
          }
        },
        computed: {
          checked: function checked() {
            return this.value === this.activeValue;
          },
          switchDisabled: function switchDisabled() {
            return this.disabled || (this.elForm || {}).disabled;
          }
        },
        watch: {
          checked: function checked() {
            this.$refs.input.checked = this.checked;
            if (this.activeColor || this.inactiveColor) {
              this.setBackgroundColor();
            }
            if (this.validateEvent) {
              this.dispatch("ElFormItem", "el.form.change", [this.value]);
            }
          }
        },
        methods: {
          handleChange: function handleChange(event2) {
            var _this = this;
            var val = this.checked ? this.inactiveValue : this.activeValue;
            this.$emit("input", val);
            this.$emit("change", val);
            this.$nextTick(function() {
              _this.$refs.input.checked = _this.checked;
            });
          },
          setBackgroundColor: function setBackgroundColor() {
            var newColor = this.checked ? this.activeColor : this.inactiveColor;
            this.$refs.core.style.borderColor = newColor;
            this.$refs.core.style.backgroundColor = newColor;
          },
          switchValue: function switchValue() {
            !this.switchDisabled && this.handleChange();
          },
          getMigratingConfig: function getMigratingConfig2() {
            return {
              props: {
                "on-color": "on-color is renamed to active-color.",
                "off-color": "off-color is renamed to inactive-color.",
                "on-text": "on-text is renamed to active-text.",
                "off-text": "off-text is renamed to inactive-text.",
                "on-value": "on-value is renamed to active-value.",
                "off-value": "off-value is renamed to inactive-value.",
                "on-icon-class": "on-icon-class is renamed to active-icon-class.",
                "off-icon-class": "off-icon-class is renamed to inactive-icon-class."
              }
            };
          }
        },
        mounted: function mounted18() {
          this.coreWidth = this.width || 40;
          if (this.activeColor || this.inactiveColor) {
            this.setBackgroundColor();
          }
          this.$refs.input.checked = this.checked;
        }
      };
      var packages_switch_src_componentvue_type_script_lang_js_ = switch_src_componentvue_type_script_lang_js_;
      var src_component_component = normalizeComponent(packages_switch_src_componentvue_type_script_lang_js_, componentvue_type_template_id_2dcd8fbb_render, componentvue_type_template_id_2dcd8fbb_staticRenderFns, false, null, null, null);
      src_component_component.options.__file = "packages/switch/src/component.vue";
      var switch_src_component = src_component_component.exports;
      switch_src_component.install = function(Vue2) {
        Vue2.component(switch_src_component.name, switch_src_component);
      };
      var packages_switch = switch_src_component;
      var selectvue_type_template_id_0e4aade6_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", {
          directives: [
            {
              name: "clickoutside",
              rawName: "v-clickoutside",
              value: _vm.handleClose,
              expression: "handleClose"
            }
          ],
          staticClass: "el-select",
          class: [_vm.selectSize ? "el-select--" + _vm.selectSize : ""],
          on: {
            click: function($event) {
              $event.stopPropagation();
              return _vm.toggleMenu($event);
            }
          }
        }, [
          _vm.multiple ? _c("div", {
            ref: "tags",
            staticClass: "el-select__tags",
            style: { "max-width": _vm.inputWidth - 32 + "px", width: "100%" }
          }, [
            _vm.collapseTags && _vm.selected.length ? _c("span", [
              _c("el-tag", {
                attrs: {
                  closable: !_vm.selectDisabled,
                  size: _vm.collapseTagSize,
                  hit: _vm.selected[0].hitState,
                  type: "info",
                  "disable-transitions": ""
                },
                on: {
                  close: function($event) {
                    _vm.deleteTag($event, _vm.selected[0]);
                  }
                }
              }, [
                _c("span", { staticClass: "el-select__tags-text" }, [
                  _vm._v(_vm._s(_vm.selected[0].currentLabel))
                ])
              ]),
              _vm.selected.length > 1 ? _c("el-tag", {
                attrs: {
                  closable: false,
                  size: _vm.collapseTagSize,
                  type: "info",
                  "disable-transitions": ""
                }
              }, [
                _c("span", { staticClass: "el-select__tags-text" }, [_vm._v("+ " + _vm._s(_vm.selected.length - 1))])
              ]) : _vm._e()
            ], 1) : _vm._e(),
            !_vm.collapseTags ? _c("transition-group", { on: { "after-leave": _vm.resetInputHeight } }, _vm._l(_vm.selected, function(item) {
              return _c("el-tag", {
                key: _vm.getValueKey(item),
                attrs: {
                  closable: !_vm.selectDisabled,
                  size: _vm.collapseTagSize,
                  hit: item.hitState,
                  type: "info",
                  "disable-transitions": ""
                },
                on: {
                  close: function($event) {
                    _vm.deleteTag($event, item);
                  }
                }
              }, [
                _c("span", { staticClass: "el-select__tags-text" }, [
                  _vm._v(_vm._s(item.currentLabel))
                ])
              ]);
            }), 1) : _vm._e(),
            _vm.filterable ? _c("input", {
              directives: [
                {
                  name: "model",
                  rawName: "v-model",
                  value: _vm.query,
                  expression: "query"
                }
              ],
              ref: "input",
              staticClass: "el-select__input",
              class: [_vm.selectSize ? "is-" + _vm.selectSize : ""],
              style: {
                "flex-grow": "1",
                width: _vm.inputLength / (_vm.inputWidth - 32) + "%",
                "max-width": _vm.inputWidth - 42 + "px"
              },
              attrs: {
                type: "text",
                disabled: _vm.selectDisabled,
                autocomplete: _vm.autoComplete || _vm.autocomplete
              },
              domProps: { value: _vm.query },
              on: {
                focus: _vm.handleFocus,
                blur: function($event) {
                  _vm.softFocus = false;
                },
                keyup: _vm.managePlaceholder,
                keydown: [
                  _vm.resetInputState,
                  function($event) {
                    if (!("button" in $event) && _vm._k($event.keyCode, "down", 40, $event.key, [
                      "Down",
                      "ArrowDown"
                    ])) {
                      return null;
                    }
                    $event.preventDefault();
                    _vm.navigateOptions("next");
                  },
                  function($event) {
                    if (!("button" in $event) && _vm._k($event.keyCode, "up", 38, $event.key, [
                      "Up",
                      "ArrowUp"
                    ])) {
                      return null;
                    }
                    $event.preventDefault();
                    _vm.navigateOptions("prev");
                  },
                  function($event) {
                    if (!("button" in $event) && _vm._k($event.keyCode, "enter", 13, $event.key, "Enter")) {
                      return null;
                    }
                    $event.preventDefault();
                    return _vm.selectOption($event);
                  },
                  function($event) {
                    if (!("button" in $event) && _vm._k($event.keyCode, "esc", 27, $event.key, [
                      "Esc",
                      "Escape"
                    ])) {
                      return null;
                    }
                    $event.stopPropagation();
                    $event.preventDefault();
                    _vm.visible = false;
                  },
                  function($event) {
                    if (!("button" in $event) && _vm._k($event.keyCode, "delete", [8, 46], $event.key, ["Backspace", "Delete", "Del"])) {
                      return null;
                    }
                    return _vm.deletePrevTag($event);
                  },
                  function($event) {
                    if (!("button" in $event) && _vm._k($event.keyCode, "tab", 9, $event.key, "Tab")) {
                      return null;
                    }
                    _vm.visible = false;
                  }
                ],
                compositionstart: _vm.handleComposition,
                compositionupdate: _vm.handleComposition,
                compositionend: _vm.handleComposition,
                input: [
                  function($event) {
                    if ($event.target.composing) {
                      return;
                    }
                    _vm.query = $event.target.value;
                  },
                  _vm.debouncedQueryChange
                ]
              }
            }) : _vm._e()
          ], 1) : _vm._e(),
          _c("el-input", {
            ref: "reference",
            class: { "is-focus": _vm.visible },
            attrs: {
              type: "text",
              placeholder: _vm.currentPlaceholder,
              name: _vm.name,
              id: _vm.id,
              autocomplete: _vm.autoComplete || _vm.autocomplete,
              size: _vm.selectSize,
              disabled: _vm.selectDisabled,
              readonly: _vm.readonly,
              "validate-event": false,
              tabindex: _vm.multiple && _vm.filterable ? "-1" : null
            },
            on: {
              focus: _vm.handleFocus,
              blur: _vm.handleBlur,
              input: _vm.debouncedOnInputChange
            },
            nativeOn: {
              keydown: [
                function($event) {
                  if (!("button" in $event) && _vm._k($event.keyCode, "down", 40, $event.key, [
                    "Down",
                    "ArrowDown"
                  ])) {
                    return null;
                  }
                  $event.stopPropagation();
                  $event.preventDefault();
                  _vm.navigateOptions("next");
                },
                function($event) {
                  if (!("button" in $event) && _vm._k($event.keyCode, "up", 38, $event.key, [
                    "Up",
                    "ArrowUp"
                  ])) {
                    return null;
                  }
                  $event.stopPropagation();
                  $event.preventDefault();
                  _vm.navigateOptions("prev");
                },
                function($event) {
                  if (!("button" in $event) && _vm._k($event.keyCode, "enter", 13, $event.key, "Enter")) {
                    return null;
                  }
                  $event.preventDefault();
                  return _vm.selectOption($event);
                },
                function($event) {
                  if (!("button" in $event) && _vm._k($event.keyCode, "esc", 27, $event.key, [
                    "Esc",
                    "Escape"
                  ])) {
                    return null;
                  }
                  $event.stopPropagation();
                  $event.preventDefault();
                  _vm.visible = false;
                },
                function($event) {
                  if (!("button" in $event) && _vm._k($event.keyCode, "tab", 9, $event.key, "Tab")) {
                    return null;
                  }
                  _vm.visible = false;
                }
              ],
              mouseenter: function($event) {
                _vm.inputHovering = true;
              },
              mouseleave: function($event) {
                _vm.inputHovering = false;
              }
            },
            model: {
              value: _vm.selectedLabel,
              callback: function($$v) {
                _vm.selectedLabel = $$v;
              },
              expression: "selectedLabel"
            }
          }, [
            _vm.$slots.prefix ? _c("template", { slot: "prefix" }, [_vm._t("prefix")], 2) : _vm._e(),
            _c("template", { slot: "suffix" }, [
              _c("i", {
                directives: [
                  {
                    name: "show",
                    rawName: "v-show",
                    value: !_vm.showClose,
                    expression: "!showClose"
                  }
                ],
                class: [
                  "el-select__caret",
                  "el-input__icon",
                  "el-icon-" + _vm.iconClass
                ]
              }),
              _vm.showClose ? _c("i", {
                staticClass: "el-select__caret el-input__icon el-icon-circle-close",
                on: { click: _vm.handleClearClick }
              }) : _vm._e()
            ])
          ], 2),
          _c("transition", {
            attrs: { name: "el-zoom-in-top" },
            on: {
              "before-enter": _vm.handleMenuEnter,
              "after-leave": _vm.doDestroy
            }
          }, [
            _c("el-select-menu", {
              directives: [
                {
                  name: "show",
                  rawName: "v-show",
                  value: _vm.visible && _vm.emptyText !== false,
                  expression: "visible && emptyText !== false"
                }
              ],
              ref: "popper",
              attrs: { "append-to-body": _vm.popperAppendToBody }
            }, [
              _c("el-scrollbar", {
                directives: [
                  {
                    name: "show",
                    rawName: "v-show",
                    value: _vm.options.length > 0 && !_vm.loading,
                    expression: "options.length > 0 && !loading"
                  }
                ],
                ref: "scrollbar",
                class: {
                  "is-empty": !_vm.allowCreate && _vm.query && _vm.filteredOptionsCount === 0
                },
                attrs: {
                  tag: "ul",
                  "wrap-class": "el-select-dropdown__wrap",
                  "view-class": "el-select-dropdown__list"
                }
              }, [
                _vm.showNewOption ? _c("el-option", {
                  attrs: { value: _vm.query, created: "" }
                }) : _vm._e(),
                _vm._t("default")
              ], 2),
              _vm.emptyText && (!_vm.allowCreate || _vm.loading || _vm.allowCreate && _vm.options.length === 0) ? [
                _vm.$slots.empty ? _vm._t("empty") : _c("p", { staticClass: "el-select-dropdown__empty" }, [
                  _vm._v("\n          " + _vm._s(_vm.emptyText) + "\n        ")
                ])
              ] : _vm._e()
            ], 2)
          ], 1)
        ], 1);
      };
      var selectvue_type_template_id_0e4aade6_staticRenderFns = [];
      selectvue_type_template_id_0e4aade6_render._withStripped = true;
      var select_dropdownvue_type_template_id_06828748_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", {
          staticClass: "el-select-dropdown el-popper",
          class: [{ "is-multiple": _vm.$parent.multiple }, _vm.popperClass],
          style: { minWidth: _vm.minWidth }
        }, [_vm._t("default")], 2);
      };
      var select_dropdownvue_type_template_id_06828748_staticRenderFns = [];
      select_dropdownvue_type_template_id_06828748_render._withStripped = true;
      var select_dropdownvue_type_script_lang_js_ = {
        name: "ElSelectDropdown",
        componentName: "ElSelectDropdown",
        mixins: [vue_popper_default.a],
        props: {
          placement: {
            default: "bottom-start"
          },
          boundariesPadding: {
            default: 0
          },
          popperOptions: {
            default: function _default116() {
              return {
                gpuAcceleration: false
              };
            }
          },
          visibleArrow: {
            default: true
          },
          appendToBody: {
            type: Boolean,
            default: true
          }
        },
        data: function data25() {
          return {
            minWidth: ""
          };
        },
        computed: {
          popperClass: function popperClass() {
            return this.$parent.popperClass;
          }
        },
        watch: {
          "$parent.inputWidth": function $parentInputWidth() {
            this.minWidth = this.$parent.$el.getBoundingClientRect().width + "px";
          }
        },
        mounted: function mounted18() {
          var _this = this;
          this.referenceElm = this.$parent.$refs.reference.$el;
          this.$parent.popperElm = this.popperElm = this.$el;
          this.$on("updatePopper", function() {
            if (_this.$parent.visible)
              _this.updatePopper();
          });
          this.$on("destroyPopper", this.destroyPopper);
        }
      };
      var src_select_dropdownvue_type_script_lang_js_ = select_dropdownvue_type_script_lang_js_;
      var select_dropdown_component = normalizeComponent(src_select_dropdownvue_type_script_lang_js_, select_dropdownvue_type_template_id_06828748_render, select_dropdownvue_type_template_id_06828748_staticRenderFns, false, null, null, null);
      select_dropdown_component.options.__file = "packages/select/src/select-dropdown.vue";
      var select_dropdown = select_dropdown_component.exports;
      var optionvue_type_template_id_7a44c642_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("li", {
          directives: [
            {
              name: "show",
              rawName: "v-show",
              value: _vm.visible,
              expression: "visible"
            }
          ],
          staticClass: "el-select-dropdown__item",
          class: {
            selected: _vm.itemSelected,
            "is-disabled": _vm.disabled || _vm.groupDisabled || _vm.limitReached,
            hover: _vm.hover
          },
          on: {
            mouseenter: _vm.hoverItem,
            click: function($event) {
              $event.stopPropagation();
              return _vm.selectOptionClick($event);
            }
          }
        }, [_vm._t("default", [_c("span", [_vm._v(_vm._s(_vm.currentLabel))])])], 2);
      };
      var optionvue_type_template_id_7a44c642_staticRenderFns = [];
      optionvue_type_template_id_7a44c642_render._withStripped = true;
      var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
        return typeof obj;
      } : function(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
      var optionvue_type_script_lang_js_ = {
        mixins: [emitter_default.a],
        name: "ElOption",
        componentName: "ElOption",
        inject: ["select"],
        props: {
          value: {
            required: true
          },
          label: [String, Number],
          created: Boolean,
          disabled: {
            type: Boolean,
            default: false
          }
        },
        data: function data25() {
          return {
            index: -1,
            groupDisabled: false,
            visible: true,
            hitState: false,
            hover: false
          };
        },
        computed: {
          isObject: function isObject2() {
            return Object.prototype.toString.call(this.value).toLowerCase() === "[object object]";
          },
          currentLabel: function currentLabel() {
            return this.label || (this.isObject ? "" : this.value);
          },
          currentValue: function currentValue() {
            return this.value || this.label || "";
          },
          itemSelected: function itemSelected() {
            if (!this.select.multiple) {
              return this.isEqual(this.value, this.select.value);
            } else {
              return this.contains(this.select.value, this.value);
            }
          },
          limitReached: function limitReached() {
            if (this.select.multiple) {
              return !this.itemSelected && (this.select.value || []).length >= this.select.multipleLimit && this.select.multipleLimit > 0;
            } else {
              return false;
            }
          }
        },
        watch: {
          currentLabel: function currentLabel() {
            if (!this.created && !this.select.remote)
              this.dispatch("ElSelect", "setSelected");
          },
          value: function value6(val, oldVal) {
            var _select2 = this.select, remote = _select2.remote, valueKey = _select2.valueKey;
            if (!this.created && !remote) {
              if (valueKey && (typeof val === "undefined" ? "undefined" : _typeof2(val)) === "object" && (typeof oldVal === "undefined" ? "undefined" : _typeof2(oldVal)) === "object" && val[valueKey] === oldVal[valueKey]) {
                return;
              }
              this.dispatch("ElSelect", "setSelected");
            }
          }
        },
        methods: {
          isEqual: function isEqual3(a, b) {
            if (!this.isObject) {
              return a === b;
            } else {
              var valueKey = this.select.valueKey;
              return Object(util_["getValueByPath"])(a, valueKey) === Object(util_["getValueByPath"])(b, valueKey);
            }
          },
          contains: function contains() {
            var arr = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
            var target2 = arguments[1];
            if (!this.isObject) {
              return arr && arr.indexOf(target2) > -1;
            } else {
              var valueKey = this.select.valueKey;
              return arr && arr.some(function(item) {
                return Object(util_["getValueByPath"])(item, valueKey) === Object(util_["getValueByPath"])(target2, valueKey);
              });
            }
          },
          handleGroupDisabled: function handleGroupDisabled(val) {
            this.groupDisabled = val;
          },
          hoverItem: function hoverItem() {
            if (!this.disabled && !this.groupDisabled) {
              this.select.hoverIndex = this.select.options.indexOf(this);
            }
          },
          selectOptionClick: function selectOptionClick() {
            if (this.disabled !== true && this.groupDisabled !== true) {
              this.dispatch("ElSelect", "handleOptionClick", [this, true]);
            }
          },
          queryChange: function queryChange(query2) {
            this.visible = new RegExp(Object(util_["escapeRegexpString"])(query2), "i").test(this.currentLabel) || this.created;
            if (!this.visible) {
              this.select.filteredOptionsCount--;
            }
          }
        },
        created: function created20() {
          this.select.options.push(this);
          this.select.cachedOptions.push(this);
          this.select.optionsCount++;
          this.select.filteredOptionsCount++;
          this.$on("queryChange", this.queryChange);
          this.$on("handleGroupDisabled", this.handleGroupDisabled);
        },
        beforeDestroy: function beforeDestroy13() {
          var _select2 = this.select, selected = _select2.selected, multiple = _select2.multiple;
          var selectedOptions = multiple ? selected : [selected];
          var index2 = this.select.cachedOptions.indexOf(this);
          var selectedIndex = selectedOptions.indexOf(this);
          if (index2 > -1 && selectedIndex < 0) {
            this.select.cachedOptions.splice(index2, 1);
          }
          this.select.onOptionDestroy(this.select.options.indexOf(this));
        }
      };
      var src_optionvue_type_script_lang_js_ = optionvue_type_script_lang_js_;
      var option_component = normalizeComponent(src_optionvue_type_script_lang_js_, optionvue_type_template_id_7a44c642_render, optionvue_type_template_id_7a44c642_staticRenderFns, false, null, null, null);
      option_component.options.__file = "packages/select/src/option.vue";
      var src_option = option_component.exports;
      var tag_ = __webpack_require__(29);
      var tag_default = /* @__PURE__ */ __webpack_require__.n(tag_);
      var resize_event_ = __webpack_require__(14);
      var scroll_into_view_ = __webpack_require__(27);
      var scroll_into_view_default = /* @__PURE__ */ __webpack_require__.n(scroll_into_view_);
      var navigation_mixin = {
        data: function data25() {
          return {
            hoverOption: -1
          };
        },
        computed: {
          optionsAllDisabled: function optionsAllDisabled() {
            return this.options.filter(function(option2) {
              return option2.visible;
            }).every(function(option2) {
              return option2.disabled;
            });
          }
        },
        watch: {
          hoverIndex: function hoverIndex(val) {
            var _this = this;
            if (typeof val === "number" && val > -1) {
              this.hoverOption = this.options[val] || {};
            }
            this.options.forEach(function(option2) {
              option2.hover = _this.hoverOption === option2;
            });
          }
        },
        methods: {
          navigateOptions: function navigateOptions(direction) {
            var _this2 = this;
            if (!this.visible) {
              this.visible = true;
              return;
            }
            if (this.options.length === 0 || this.filteredOptionsCount === 0)
              return;
            if (!this.optionsAllDisabled) {
              if (direction === "next") {
                this.hoverIndex++;
                if (this.hoverIndex === this.options.length) {
                  this.hoverIndex = 0;
                }
              } else if (direction === "prev") {
                this.hoverIndex--;
                if (this.hoverIndex < 0) {
                  this.hoverIndex = this.options.length - 1;
                }
              }
              var option2 = this.options[this.hoverIndex];
              if (option2.disabled === true || option2.groupDisabled === true || !option2.visible) {
                this.navigateOptions(direction);
              }
              this.$nextTick(function() {
                return _this2.scrollToOption(_this2.hoverOption);
              });
            }
          }
        }
      };
      var selectvue_type_script_lang_js_ = {
        mixins: [emitter_default.a, locale_default.a, focus_default()("reference"), navigation_mixin],
        name: "ElSelect",
        componentName: "ElSelect",
        inject: {
          elForm: {
            default: ""
          },
          elFormItem: {
            default: ""
          }
        },
        provide: function provide11() {
          return {
            "select": this
          };
        },
        computed: {
          _elFormItemSize: function _elFormItemSize() {
            return (this.elFormItem || {}).elFormItemSize;
          },
          readonly: function readonly() {
            return !this.filterable || this.multiple || !Object(util_["isIE"])() && !Object(util_["isEdge"])() && !this.visible;
          },
          showClose: function showClose() {
            var hasValue = this.multiple ? Array.isArray(this.value) && this.value.length > 0 : this.value !== void 0 && this.value !== null && this.value !== "";
            var criteria = this.clearable && !this.selectDisabled && this.inputHovering && hasValue;
            return criteria;
          },
          iconClass: function iconClass() {
            return this.remote && this.filterable ? "" : this.visible ? "arrow-up is-reverse" : "arrow-up";
          },
          debounce: function debounce2() {
            return this.remote ? 300 : 0;
          },
          emptyText: function emptyText() {
            if (this.loading) {
              return this.loadingText || this.t("el.select.loading");
            } else {
              if (this.remote && this.query === "" && this.options.length === 0)
                return false;
              if (this.filterable && this.query && this.options.length > 0 && this.filteredOptionsCount === 0) {
                return this.noMatchText || this.t("el.select.noMatch");
              }
              if (this.options.length === 0) {
                return this.noDataText || this.t("el.select.noData");
              }
            }
            return null;
          },
          showNewOption: function showNewOption() {
            var _this = this;
            var hasExistingOption = this.options.filter(function(option2) {
              return !option2.created;
            }).some(function(option2) {
              return option2.currentLabel === _this.query;
            });
            return this.filterable && this.allowCreate && this.query !== "" && !hasExistingOption;
          },
          selectSize: function selectSize() {
            return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;
          },
          selectDisabled: function selectDisabled() {
            return this.disabled || (this.elForm || {}).disabled;
          },
          collapseTagSize: function collapseTagSize() {
            return ["small", "mini"].indexOf(this.selectSize) > -1 ? "mini" : "small";
          },
          propPlaceholder: function propPlaceholder() {
            return typeof this.placeholder !== "undefined" ? this.placeholder : this.t("el.select.placeholder");
          }
        },
        components: {
          ElInput: input_default.a,
          ElSelectMenu: select_dropdown,
          ElOption: src_option,
          ElTag: tag_default.a,
          ElScrollbar: scrollbar_default.a
        },
        directives: { Clickoutside: clickoutside_default.a },
        props: {
          name: String,
          id: String,
          value: {
            required: true
          },
          autocomplete: {
            type: String,
            default: "off"
          },
          autoComplete: {
            type: String,
            validator: function validator2(val) {
              return true;
            }
          },
          automaticDropdown: Boolean,
          size: String,
          disabled: Boolean,
          clearable: Boolean,
          filterable: Boolean,
          allowCreate: Boolean,
          loading: Boolean,
          popperClass: String,
          remote: Boolean,
          loadingText: String,
          noMatchText: String,
          noDataText: String,
          remoteMethod: Function,
          filterMethod: Function,
          multiple: Boolean,
          multipleLimit: {
            type: Number,
            default: 0
          },
          placeholder: {
            type: String,
            required: false
          },
          defaultFirstOption: Boolean,
          reserveKeyword: Boolean,
          valueKey: {
            type: String,
            default: "value"
          },
          collapseTags: Boolean,
          popperAppendToBody: {
            type: Boolean,
            default: true
          }
        },
        data: function data25() {
          return {
            options: [],
            cachedOptions: [],
            createdLabel: null,
            createdSelected: false,
            selected: this.multiple ? [] : {},
            inputLength: 20,
            inputWidth: 0,
            initialInputHeight: 0,
            cachedPlaceHolder: "",
            optionsCount: 0,
            filteredOptionsCount: 0,
            visible: false,
            softFocus: false,
            selectedLabel: "",
            hoverIndex: -1,
            query: "",
            previousQuery: null,
            inputHovering: false,
            currentPlaceholder: "",
            menuVisibleOnFocus: false,
            isOnComposition: false,
            isSilentBlur: false
          };
        },
        watch: {
          selectDisabled: function selectDisabled() {
            var _this2 = this;
            this.$nextTick(function() {
              _this2.resetInputHeight();
            });
          },
          propPlaceholder: function propPlaceholder(val) {
            this.cachedPlaceHolder = this.currentPlaceholder = val;
          },
          value: function value6(val, oldVal) {
            if (this.multiple) {
              this.resetInputHeight();
              if (val && val.length > 0 || this.$refs.input && this.query !== "") {
                this.currentPlaceholder = "";
              } else {
                this.currentPlaceholder = this.cachedPlaceHolder;
              }
              if (this.filterable && !this.reserveKeyword) {
                this.query = "";
                this.handleQueryChange(this.query);
              }
            }
            this.setSelected();
            if (this.filterable && !this.multiple) {
              this.inputLength = 20;
            }
            if (!Object(util_["valueEquals"])(val, oldVal)) {
              this.dispatch("ElFormItem", "el.form.change", val);
            }
          },
          visible: function visible2(val) {
            var _this3 = this;
            if (!val) {
              this.broadcast("ElSelectDropdown", "destroyPopper");
              if (this.$refs.input) {
                this.$refs.input.blur();
              }
              this.query = "";
              this.previousQuery = null;
              this.selectedLabel = "";
              this.inputLength = 20;
              this.menuVisibleOnFocus = false;
              this.resetHoverIndex();
              this.$nextTick(function() {
                if (_this3.$refs.input && _this3.$refs.input.value === "" && _this3.selected.length === 0) {
                  _this3.currentPlaceholder = _this3.cachedPlaceHolder;
                }
              });
              if (!this.multiple) {
                if (this.selected) {
                  if (this.filterable && this.allowCreate && this.createdSelected && this.createdLabel) {
                    this.selectedLabel = this.createdLabel;
                  } else {
                    this.selectedLabel = this.selected.currentLabel;
                  }
                  if (this.filterable)
                    this.query = this.selectedLabel;
                }
                if (this.filterable) {
                  this.currentPlaceholder = this.cachedPlaceHolder;
                }
              }
            } else {
              this.broadcast("ElSelectDropdown", "updatePopper");
              if (this.filterable) {
                this.query = this.remote ? "" : this.selectedLabel;
                this.handleQueryChange(this.query);
                if (this.multiple) {
                  this.$refs.input.focus();
                } else {
                  if (!this.remote) {
                    this.broadcast("ElOption", "queryChange", "");
                    this.broadcast("ElOptionGroup", "queryChange");
                  }
                  if (this.selectedLabel) {
                    this.currentPlaceholder = this.selectedLabel;
                    this.selectedLabel = "";
                  }
                }
              }
            }
            this.$emit("visible-change", val);
          },
          options: function options2() {
            var _this4 = this;
            if (this.$isServer)
              return;
            this.$nextTick(function() {
              _this4.broadcast("ElSelectDropdown", "updatePopper");
            });
            if (this.multiple) {
              this.resetInputHeight();
            }
            var inputs = this.$el.querySelectorAll("input");
            if ([].indexOf.call(inputs, document.activeElement) === -1) {
              this.setSelected();
            }
            if (this.defaultFirstOption && (this.filterable || this.remote) && this.filteredOptionsCount) {
              this.checkDefaultFirstOption();
            }
          }
        },
        methods: {
          handleComposition: function handleComposition(event2) {
            var _this5 = this;
            var text = event2.target.value;
            if (event2.type === "compositionend") {
              this.isOnComposition = false;
              this.$nextTick(function(_) {
                return _this5.handleQueryChange(text);
              });
            } else {
              var lastCharacter = text[text.length - 1] || "";
              this.isOnComposition = !Object(shared_["isKorean"])(lastCharacter);
            }
          },
          handleQueryChange: function handleQueryChange(val) {
            var _this6 = this;
            if (this.previousQuery === val || this.isOnComposition)
              return;
            if (this.previousQuery === null && (typeof this.filterMethod === "function" || typeof this.remoteMethod === "function")) {
              this.previousQuery = val;
              return;
            }
            this.previousQuery = val;
            this.$nextTick(function() {
              if (_this6.visible)
                _this6.broadcast("ElSelectDropdown", "updatePopper");
            });
            this.hoverIndex = -1;
            if (this.multiple && this.filterable) {
              this.$nextTick(function() {
                var length = _this6.$refs.input.value.length * 15 + 20;
                _this6.inputLength = _this6.collapseTags ? Math.min(50, length) : length;
                _this6.managePlaceholder();
                _this6.resetInputHeight();
              });
            }
            if (this.remote && typeof this.remoteMethod === "function") {
              this.hoverIndex = -1;
              this.remoteMethod(val);
            } else if (typeof this.filterMethod === "function") {
              this.filterMethod(val);
              this.broadcast("ElOptionGroup", "queryChange");
            } else {
              this.filteredOptionsCount = this.optionsCount;
              this.broadcast("ElOption", "queryChange", val);
              this.broadcast("ElOptionGroup", "queryChange");
            }
            if (this.defaultFirstOption && (this.filterable || this.remote) && this.filteredOptionsCount) {
              this.checkDefaultFirstOption();
            }
          },
          scrollToOption: function scrollToOption2(option2) {
            var target2 = Array.isArray(option2) && option2[0] ? option2[0].$el : option2.$el;
            if (this.$refs.popper && target2) {
              var menu2 = this.$refs.popper.$el.querySelector(".el-select-dropdown__wrap");
              scroll_into_view_default()(menu2, target2);
            }
            this.$refs.scrollbar && this.$refs.scrollbar.handleScroll();
          },
          handleMenuEnter: function handleMenuEnter() {
            var _this7 = this;
            this.$nextTick(function() {
              return _this7.scrollToOption(_this7.selected);
            });
          },
          emitChange: function emitChange(val) {
            if (!Object(util_["valueEquals"])(this.value, val)) {
              this.$emit("change", val);
            }
          },
          getOption: function getOption(value6) {
            var option2 = void 0;
            var isObject2 = Object.prototype.toString.call(value6).toLowerCase() === "[object object]";
            var isNull2 = Object.prototype.toString.call(value6).toLowerCase() === "[object null]";
            var isUndefined3 = Object.prototype.toString.call(value6).toLowerCase() === "[object undefined]";
            for (var i = this.cachedOptions.length - 1; i >= 0; i--) {
              var cachedOption = this.cachedOptions[i];
              var isEqual3 = isObject2 ? Object(util_["getValueByPath"])(cachedOption.value, this.valueKey) === Object(util_["getValueByPath"])(value6, this.valueKey) : cachedOption.value === value6;
              if (isEqual3) {
                option2 = cachedOption;
                break;
              }
            }
            if (option2)
              return option2;
            var label = !isObject2 && !isNull2 && !isUndefined3 ? String(value6) : "";
            var newOption = {
              value: value6,
              currentLabel: label
            };
            if (this.multiple) {
              newOption.hitState = false;
            }
            return newOption;
          },
          setSelected: function setSelected2() {
            var _this8 = this;
            if (!this.multiple) {
              var option2 = this.getOption(this.value);
              if (option2.created) {
                this.createdLabel = option2.currentLabel;
                this.createdSelected = true;
              } else {
                this.createdSelected = false;
              }
              this.selectedLabel = option2.currentLabel;
              this.selected = option2;
              if (this.filterable)
                this.query = this.selectedLabel;
              return;
            }
            var result2 = [];
            if (Array.isArray(this.value)) {
              this.value.forEach(function(value6) {
                result2.push(_this8.getOption(value6));
              });
            }
            this.selected = result2;
            this.$nextTick(function() {
              _this8.resetInputHeight();
            });
          },
          handleFocus: function handleFocus3(event2) {
            if (!this.softFocus) {
              if (this.automaticDropdown || this.filterable) {
                this.visible = true;
                if (this.filterable) {
                  this.menuVisibleOnFocus = true;
                }
              }
              this.$emit("focus", event2);
            } else {
              this.softFocus = false;
            }
          },
          blur: function blur6() {
            this.visible = false;
            this.$refs.reference.blur();
          },
          handleBlur: function handleBlur(event2) {
            var _this9 = this;
            setTimeout(function() {
              if (_this9.isSilentBlur) {
                _this9.isSilentBlur = false;
              } else {
                _this9.$emit("blur", event2);
              }
            }, 50);
            this.softFocus = false;
          },
          handleClearClick: function handleClearClick(event2) {
            this.deleteSelected(event2);
          },
          doDestroy: function doDestroy2() {
            this.$refs.popper && this.$refs.popper.doDestroy();
          },
          handleClose: function handleClose() {
            this.visible = false;
          },
          toggleLastOptionHitState: function toggleLastOptionHitState(hit) {
            if (!Array.isArray(this.selected))
              return;
            var option2 = this.selected[this.selected.length - 1];
            if (!option2)
              return;
            if (hit === true || hit === false) {
              option2.hitState = hit;
              return hit;
            }
            option2.hitState = !option2.hitState;
            return option2.hitState;
          },
          deletePrevTag: function deletePrevTag(e) {
            if (e.target.value.length <= 0 && !this.toggleLastOptionHitState()) {
              var value6 = this.value.slice();
              value6.pop();
              this.$emit("input", value6);
              this.emitChange(value6);
            }
          },
          managePlaceholder: function managePlaceholder() {
            if (this.currentPlaceholder !== "") {
              this.currentPlaceholder = this.$refs.input.value ? "" : this.cachedPlaceHolder;
            }
          },
          resetInputState: function resetInputState(e) {
            if (e.keyCode !== 8)
              this.toggleLastOptionHitState(false);
            this.inputLength = this.$refs.input.value.length * 15 + 20;
            this.resetInputHeight();
          },
          resetInputHeight: function resetInputHeight() {
            var _this10 = this;
            if (this.collapseTags && !this.filterable)
              return;
            this.$nextTick(function() {
              if (!_this10.$refs.reference)
                return;
              var inputChildNodes = _this10.$refs.reference.$el.childNodes;
              var input2 = [].filter.call(inputChildNodes, function(item) {
                return item.tagName === "INPUT";
              })[0];
              var tags = _this10.$refs.tags;
              var tagsHeight = tags ? Math.round(tags.getBoundingClientRect().height) : 0;
              var sizeInMap = _this10.initialInputHeight || 40;
              input2.style.height = _this10.selected.length === 0 ? sizeInMap + "px" : Math.max(tags ? tagsHeight + (tagsHeight > sizeInMap ? 6 : 0) : 0, sizeInMap) + "px";
              if (_this10.visible && _this10.emptyText !== false) {
                _this10.broadcast("ElSelectDropdown", "updatePopper");
              }
            });
          },
          resetHoverIndex: function resetHoverIndex() {
            var _this11 = this;
            setTimeout(function() {
              if (!_this11.multiple) {
                _this11.hoverIndex = _this11.options.indexOf(_this11.selected);
              } else {
                if (_this11.selected.length > 0) {
                  _this11.hoverIndex = Math.min.apply(null, _this11.selected.map(function(item) {
                    return _this11.options.indexOf(item);
                  }));
                } else {
                  _this11.hoverIndex = -1;
                }
              }
            }, 300);
          },
          handleOptionSelect: function handleOptionSelect(option2, byClick) {
            var _this12 = this;
            if (this.multiple) {
              var value6 = (this.value || []).slice();
              var optionIndex = this.getValueIndex(value6, option2.value);
              if (optionIndex > -1) {
                value6.splice(optionIndex, 1);
              } else if (this.multipleLimit <= 0 || value6.length < this.multipleLimit) {
                value6.push(option2.value);
              }
              this.$emit("input", value6);
              this.emitChange(value6);
              if (option2.created) {
                this.query = "";
                this.handleQueryChange("");
                this.inputLength = 20;
              }
              if (this.filterable)
                this.$refs.input.focus();
            } else {
              this.$emit("input", option2.value);
              this.emitChange(option2.value);
              this.visible = false;
            }
            this.isSilentBlur = byClick;
            this.setSoftFocus();
            if (this.visible)
              return;
            this.$nextTick(function() {
              _this12.scrollToOption(option2);
            });
          },
          setSoftFocus: function setSoftFocus() {
            this.softFocus = true;
            var input2 = this.$refs.input || this.$refs.reference;
            if (input2) {
              input2.focus();
            }
          },
          getValueIndex: function getValueIndex() {
            var arr = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
            var value6 = arguments[1];
            var isObject2 = Object.prototype.toString.call(value6).toLowerCase() === "[object object]";
            if (!isObject2) {
              return arr.indexOf(value6);
            } else {
              var valueKey = this.valueKey;
              var index2 = -1;
              arr.some(function(item, i) {
                if (Object(util_["getValueByPath"])(item, valueKey) === Object(util_["getValueByPath"])(value6, valueKey)) {
                  index2 = i;
                  return true;
                }
                return false;
              });
              return index2;
            }
          },
          toggleMenu: function toggleMenu() {
            if (!this.selectDisabled) {
              if (this.menuVisibleOnFocus) {
                this.menuVisibleOnFocus = false;
              } else {
                this.visible = !this.visible;
              }
              if (this.visible) {
                (this.$refs.input || this.$refs.reference).focus();
              }
            }
          },
          selectOption: function selectOption() {
            if (!this.visible) {
              this.toggleMenu();
            } else {
              if (this.options[this.hoverIndex]) {
                this.handleOptionSelect(this.options[this.hoverIndex]);
              }
            }
          },
          deleteSelected: function deleteSelected(event2) {
            event2.stopPropagation();
            var value6 = this.multiple ? [] : "";
            this.$emit("input", value6);
            this.emitChange(value6);
            this.visible = false;
            this.$emit("clear");
          },
          deleteTag: function deleteTag(event2, tag2) {
            var index2 = this.selected.indexOf(tag2);
            if (index2 > -1 && !this.selectDisabled) {
              var value6 = this.value.slice();
              value6.splice(index2, 1);
              this.$emit("input", value6);
              this.emitChange(value6);
              this.$emit("remove-tag", tag2.value);
            }
            event2.stopPropagation();
          },
          onInputChange: function onInputChange() {
            if (this.filterable && this.query !== this.selectedLabel) {
              this.query = this.selectedLabel;
              this.handleQueryChange(this.query);
            }
          },
          onOptionDestroy: function onOptionDestroy(index2) {
            if (index2 > -1) {
              this.optionsCount--;
              this.filteredOptionsCount--;
              this.options.splice(index2, 1);
            }
          },
          resetInputWidth: function resetInputWidth() {
            this.inputWidth = this.$refs.reference.$el.getBoundingClientRect().width;
          },
          handleResize: function handleResize2() {
            this.resetInputWidth();
            if (this.multiple)
              this.resetInputHeight();
          },
          checkDefaultFirstOption: function checkDefaultFirstOption() {
            this.hoverIndex = -1;
            var hasCreated = false;
            for (var i = this.options.length - 1; i >= 0; i--) {
              if (this.options[i].created) {
                hasCreated = true;
                this.hoverIndex = i;
                break;
              }
            }
            if (hasCreated)
              return;
            for (var _i = 0; _i !== this.options.length; ++_i) {
              var option2 = this.options[_i];
              if (this.query) {
                if (!option2.disabled && !option2.groupDisabled && option2.visible) {
                  this.hoverIndex = _i;
                  break;
                }
              } else {
                if (option2.itemSelected) {
                  this.hoverIndex = _i;
                  break;
                }
              }
            }
          },
          getValueKey: function getValueKey(item) {
            if (Object.prototype.toString.call(item.value).toLowerCase() !== "[object object]") {
              return item.value;
            } else {
              return Object(util_["getValueByPath"])(item.value, this.valueKey);
            }
          }
        },
        created: function created20() {
          var _this13 = this;
          this.cachedPlaceHolder = this.currentPlaceholder = this.propPlaceholder;
          if (this.multiple && !Array.isArray(this.value)) {
            this.$emit("input", []);
          }
          if (!this.multiple && Array.isArray(this.value)) {
            this.$emit("input", "");
          }
          this.debouncedOnInputChange = debounce_default()(this.debounce, function() {
            _this13.onInputChange();
          });
          this.debouncedQueryChange = debounce_default()(this.debounce, function(e) {
            _this13.handleQueryChange(e.target.value);
          });
          this.$on("handleOptionClick", this.handleOptionSelect);
          this.$on("setSelected", this.setSelected);
        },
        mounted: function mounted18() {
          var _this14 = this;
          if (this.multiple && Array.isArray(this.value) && this.value.length > 0) {
            this.currentPlaceholder = "";
          }
          Object(resize_event_["addResizeListener"])(this.$el, this.handleResize);
          var reference = this.$refs.reference;
          if (reference && reference.$el) {
            var sizeMap = {
              medium: 36,
              small: 32,
              mini: 28
            };
            var input2 = reference.$el.querySelector("input");
            this.initialInputHeight = input2.getBoundingClientRect().height || sizeMap[this.selectSize];
          }
          if (this.remote && this.multiple) {
            this.resetInputHeight();
          }
          this.$nextTick(function() {
            if (reference && reference.$el) {
              _this14.inputWidth = reference.$el.getBoundingClientRect().width;
            }
          });
          this.setSelected();
        },
        beforeDestroy: function beforeDestroy13() {
          if (this.$el && this.handleResize)
            Object(resize_event_["removeResizeListener"])(this.$el, this.handleResize);
        }
      };
      var src_selectvue_type_script_lang_js_ = selectvue_type_script_lang_js_;
      var select_component = normalizeComponent(src_selectvue_type_script_lang_js_, selectvue_type_template_id_0e4aade6_render, selectvue_type_template_id_0e4aade6_staticRenderFns, false, null, null, null);
      select_component.options.__file = "packages/select/src/select.vue";
      var src_select = select_component.exports;
      src_select.install = function(Vue2) {
        Vue2.component(src_select.name, src_select);
      };
      var packages_select = src_select;
      src_option.install = function(Vue2) {
        Vue2.component(src_option.name, src_option);
      };
      var packages_option = src_option;
      var option_groupvue_type_template_id_6685e5de_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("ul", {
          directives: [
            {
              name: "show",
              rawName: "v-show",
              value: _vm.visible,
              expression: "visible"
            }
          ],
          staticClass: "el-select-group__wrap"
        }, [
          _c("li", { staticClass: "el-select-group__title" }, [
            _vm._v(_vm._s(_vm.label))
          ]),
          _c("li", [
            _c("ul", { staticClass: "el-select-group" }, [_vm._t("default")], 2)
          ])
        ]);
      };
      var option_groupvue_type_template_id_6685e5de_staticRenderFns = [];
      option_groupvue_type_template_id_6685e5de_render._withStripped = true;
      var option_groupvue_type_script_lang_js_ = {
        mixins: [emitter_default.a],
        name: "ElOptionGroup",
        componentName: "ElOptionGroup",
        props: {
          label: String,
          disabled: {
            type: Boolean,
            default: false
          }
        },
        data: function data25() {
          return {
            visible: true
          };
        },
        watch: {
          disabled: function disabled(val) {
            this.broadcast("ElOption", "handleGroupDisabled", val);
          }
        },
        methods: {
          queryChange: function queryChange() {
            this.visible = this.$children && Array.isArray(this.$children) && this.$children.some(function(option2) {
              return option2.visible === true;
            });
          }
        },
        created: function created20() {
          this.$on("queryChange", this.queryChange);
        },
        mounted: function mounted18() {
          if (this.disabled) {
            this.broadcast("ElOption", "handleGroupDisabled", this.disabled);
          }
        }
      };
      var src_option_groupvue_type_script_lang_js_ = option_groupvue_type_script_lang_js_;
      var option_group_component = normalizeComponent(src_option_groupvue_type_script_lang_js_, option_groupvue_type_template_id_6685e5de_render, option_groupvue_type_template_id_6685e5de_staticRenderFns, false, null, null, null);
      option_group_component.options.__file = "packages/select/src/option-group.vue";
      var option_group = option_group_component.exports;
      option_group.install = function(Vue2) {
        Vue2.component(option_group.name, option_group);
      };
      var packages_option_group = option_group;
      var buttonvue_type_template_id_ca859fb4_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("button", {
          staticClass: "el-button",
          class: [
            _vm.type ? "el-button--" + _vm.type : "",
            _vm.buttonSize ? "el-button--" + _vm.buttonSize : "",
            {
              "is-disabled": _vm.buttonDisabled,
              "is-loading": _vm.loading,
              "is-plain": _vm.plain,
              "is-round": _vm.round,
              "is-circle": _vm.circle
            }
          ],
          attrs: {
            disabled: _vm.buttonDisabled || _vm.loading,
            autofocus: _vm.autofocus,
            type: _vm.nativeType
          },
          on: { click: _vm.handleClick }
        }, [
          _vm.loading ? _c("i", { staticClass: "el-icon-loading" }) : _vm._e(),
          _vm.icon && !_vm.loading ? _c("i", { class: _vm.icon }) : _vm._e(),
          _vm.$slots.default ? _c("span", [_vm._t("default")], 2) : _vm._e()
        ]);
      };
      var buttonvue_type_template_id_ca859fb4_staticRenderFns = [];
      buttonvue_type_template_id_ca859fb4_render._withStripped = true;
      var buttonvue_type_script_lang_js_ = {
        name: "ElButton",
        inject: {
          elForm: {
            default: ""
          },
          elFormItem: {
            default: ""
          }
        },
        props: {
          type: {
            type: String,
            default: "default"
          },
          size: String,
          icon: {
            type: String,
            default: ""
          },
          nativeType: {
            type: String,
            default: "button"
          },
          loading: Boolean,
          disabled: Boolean,
          plain: Boolean,
          autofocus: Boolean,
          round: Boolean,
          circle: Boolean
        },
        computed: {
          _elFormItemSize: function _elFormItemSize() {
            return (this.elFormItem || {}).elFormItemSize;
          },
          buttonSize: function buttonSize() {
            return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;
          },
          buttonDisabled: function buttonDisabled() {
            return this.disabled || (this.elForm || {}).disabled;
          }
        },
        methods: {
          handleClick: function handleClick(evt) {
            this.$emit("click", evt);
          }
        }
      };
      var src_buttonvue_type_script_lang_js_ = buttonvue_type_script_lang_js_;
      var button_component = normalizeComponent(src_buttonvue_type_script_lang_js_, buttonvue_type_template_id_ca859fb4_render, buttonvue_type_template_id_ca859fb4_staticRenderFns, false, null, null, null);
      button_component.options.__file = "packages/button/src/button.vue";
      var src_button = button_component.exports;
      src_button.install = function(Vue2) {
        Vue2.component(src_button.name, src_button);
      };
      var packages_button = src_button;
      var button_groupvue_type_template_id_3d8661d0_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", { staticClass: "el-button-group" }, [_vm._t("default")], 2);
      };
      var button_groupvue_type_template_id_3d8661d0_staticRenderFns = [];
      button_groupvue_type_template_id_3d8661d0_render._withStripped = true;
      var button_groupvue_type_script_lang_js_ = {
        name: "ElButtonGroup"
      };
      var src_button_groupvue_type_script_lang_js_ = button_groupvue_type_script_lang_js_;
      var button_group_component = normalizeComponent(src_button_groupvue_type_script_lang_js_, button_groupvue_type_template_id_3d8661d0_render, button_groupvue_type_template_id_3d8661d0_staticRenderFns, false, null, null, null);
      button_group_component.options.__file = "packages/button/src/button-group.vue";
      var button_group = button_group_component.exports;
      button_group.install = function(Vue2) {
        Vue2.component(button_group.name, button_group);
      };
      var packages_button_group = button_group;
      var tablevue_type_template_id_493fe34e_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", {
          staticClass: "el-table",
          class: [
            {
              "el-table--fit": _vm.fit,
              "el-table--striped": _vm.stripe,
              "el-table--border": _vm.border || _vm.isGroup,
              "el-table--hidden": _vm.isHidden,
              "el-table--group": _vm.isGroup,
              "el-table--fluid-height": _vm.maxHeight,
              "el-table--scrollable-x": _vm.layout.scrollX,
              "el-table--scrollable-y": _vm.layout.scrollY,
              "el-table--enable-row-hover": !_vm.store.states.isComplex,
              "el-table--enable-row-transition": (_vm.store.states.data || []).length !== 0 && (_vm.store.states.data || []).length < 100
            },
            _vm.tableSize ? "el-table--" + _vm.tableSize : ""
          ],
          on: {
            mouseleave: function($event) {
              _vm.handleMouseLeave($event);
            }
          }
        }, [
          _c("div", { ref: "hiddenColumns", staticClass: "hidden-columns" }, [_vm._t("default")], 2),
          _vm.showHeader ? _c("div", {
            directives: [
              {
                name: "mousewheel",
                rawName: "v-mousewheel",
                value: _vm.handleHeaderFooterMousewheel,
                expression: "handleHeaderFooterMousewheel"
              }
            ],
            ref: "headerWrapper",
            staticClass: "el-table__header-wrapper"
          }, [
            _c("table-header", {
              ref: "tableHeader",
              style: {
                width: _vm.layout.bodyWidth ? _vm.layout.bodyWidth + "px" : ""
              },
              attrs: {
                store: _vm.store,
                border: _vm.border,
                "default-sort": _vm.defaultSort
              }
            })
          ], 1) : _vm._e(),
          _c("div", {
            ref: "bodyWrapper",
            staticClass: "el-table__body-wrapper",
            class: [
              _vm.layout.scrollX ? "is-scrolling-" + _vm.scrollPosition : "is-scrolling-none"
            ],
            style: [_vm.bodyHeight]
          }, [
            _c("table-body", {
              style: {
                width: _vm.bodyWidth
              },
              attrs: {
                context: _vm.context,
                store: _vm.store,
                stripe: _vm.stripe,
                "row-class-name": _vm.rowClassName,
                "row-style": _vm.rowStyle,
                highlight: _vm.highlightCurrentRow
              }
            }),
            !_vm.data || _vm.data.length === 0 ? _c("div", {
              ref: "emptyBlock",
              staticClass: "el-table__empty-block",
              style: _vm.emptyBlockStyle
            }, [
              _c("span", { staticClass: "el-table__empty-text" }, [
                _vm._t("empty", [
                  _vm._v(_vm._s(_vm.emptyText || _vm.t("el.table.emptyText")))
                ])
              ], 2)
            ]) : _vm._e(),
            _vm.$slots.append ? _c("div", {
              ref: "appendWrapper",
              staticClass: "el-table__append-wrapper"
            }, [_vm._t("append")], 2) : _vm._e()
          ], 1),
          _vm.showSummary ? _c("div", {
            directives: [
              {
                name: "show",
                rawName: "v-show",
                value: _vm.data && _vm.data.length > 0,
                expression: "data && data.length > 0"
              },
              {
                name: "mousewheel",
                rawName: "v-mousewheel",
                value: _vm.handleHeaderFooterMousewheel,
                expression: "handleHeaderFooterMousewheel"
              }
            ],
            ref: "footerWrapper",
            staticClass: "el-table__footer-wrapper"
          }, [
            _c("table-footer", {
              style: {
                width: _vm.layout.bodyWidth ? _vm.layout.bodyWidth + "px" : ""
              },
              attrs: {
                store: _vm.store,
                border: _vm.border,
                "sum-text": _vm.sumText || _vm.t("el.table.sumText"),
                "summary-method": _vm.summaryMethod,
                "default-sort": _vm.defaultSort
              }
            })
          ], 1) : _vm._e(),
          _vm.fixedColumns.length > 0 ? _c("div", {
            directives: [
              {
                name: "mousewheel",
                rawName: "v-mousewheel",
                value: _vm.handleFixedMousewheel,
                expression: "handleFixedMousewheel"
              }
            ],
            ref: "fixedWrapper",
            staticClass: "el-table__fixed",
            style: [
              {
                width: _vm.layout.fixedWidth ? _vm.layout.fixedWidth + "px" : ""
              },
              _vm.fixedHeight
            ]
          }, [
            _vm.showHeader ? _c("div", {
              ref: "fixedHeaderWrapper",
              staticClass: "el-table__fixed-header-wrapper"
            }, [
              _c("table-header", {
                ref: "fixedTableHeader",
                style: {
                  width: _vm.bodyWidth
                },
                attrs: {
                  fixed: "left",
                  border: _vm.border,
                  store: _vm.store
                }
              })
            ], 1) : _vm._e(),
            _c("div", {
              ref: "fixedBodyWrapper",
              staticClass: "el-table__fixed-body-wrapper",
              style: [
                {
                  top: _vm.layout.headerHeight + "px"
                },
                _vm.fixedBodyHeight
              ]
            }, [
              _c("table-body", {
                style: {
                  width: _vm.bodyWidth
                },
                attrs: {
                  fixed: "left",
                  store: _vm.store,
                  stripe: _vm.stripe,
                  highlight: _vm.highlightCurrentRow,
                  "row-class-name": _vm.rowClassName,
                  "row-style": _vm.rowStyle
                }
              }),
              _vm.$slots.append ? _c("div", {
                staticClass: "el-table__append-gutter",
                style: { height: _vm.layout.appendHeight + "px" }
              }) : _vm._e()
            ], 1),
            _vm.showSummary ? _c("div", {
              directives: [
                {
                  name: "show",
                  rawName: "v-show",
                  value: _vm.data && _vm.data.length > 0,
                  expression: "data && data.length > 0"
                }
              ],
              ref: "fixedFooterWrapper",
              staticClass: "el-table__fixed-footer-wrapper"
            }, [
              _c("table-footer", {
                style: {
                  width: _vm.bodyWidth
                },
                attrs: {
                  fixed: "left",
                  border: _vm.border,
                  "sum-text": _vm.sumText || _vm.t("el.table.sumText"),
                  "summary-method": _vm.summaryMethod,
                  store: _vm.store
                }
              })
            ], 1) : _vm._e()
          ]) : _vm._e(),
          _vm.rightFixedColumns.length > 0 ? _c("div", {
            directives: [
              {
                name: "mousewheel",
                rawName: "v-mousewheel",
                value: _vm.handleFixedMousewheel,
                expression: "handleFixedMousewheel"
              }
            ],
            ref: "rightFixedWrapper",
            staticClass: "el-table__fixed-right",
            style: [
              {
                width: _vm.layout.rightFixedWidth ? _vm.layout.rightFixedWidth + "px" : "",
                right: _vm.layout.scrollY ? (_vm.border ? _vm.layout.gutterWidth : _vm.layout.gutterWidth || 0) + "px" : ""
              },
              _vm.fixedHeight
            ]
          }, [
            _vm.showHeader ? _c("div", {
              ref: "rightFixedHeaderWrapper",
              staticClass: "el-table__fixed-header-wrapper"
            }, [
              _c("table-header", {
                ref: "rightFixedTableHeader",
                style: {
                  width: _vm.bodyWidth
                },
                attrs: {
                  fixed: "right",
                  border: _vm.border,
                  store: _vm.store
                }
              })
            ], 1) : _vm._e(),
            _c("div", {
              ref: "rightFixedBodyWrapper",
              staticClass: "el-table__fixed-body-wrapper",
              style: [
                {
                  top: _vm.layout.headerHeight + "px"
                },
                _vm.fixedBodyHeight
              ]
            }, [
              _c("table-body", {
                style: {
                  width: _vm.bodyWidth
                },
                attrs: {
                  fixed: "right",
                  store: _vm.store,
                  stripe: _vm.stripe,
                  "row-class-name": _vm.rowClassName,
                  "row-style": _vm.rowStyle,
                  highlight: _vm.highlightCurrentRow
                }
              }),
              _vm.$slots.append ? _c("div", {
                staticClass: "el-table__append-gutter",
                style: { height: _vm.layout.appendHeight + "px" }
              }) : _vm._e()
            ], 1),
            _vm.showSummary ? _c("div", {
              directives: [
                {
                  name: "show",
                  rawName: "v-show",
                  value: _vm.data && _vm.data.length > 0,
                  expression: "data && data.length > 0"
                }
              ],
              ref: "rightFixedFooterWrapper",
              staticClass: "el-table__fixed-footer-wrapper"
            }, [
              _c("table-footer", {
                style: {
                  width: _vm.bodyWidth
                },
                attrs: {
                  fixed: "right",
                  border: _vm.border,
                  "sum-text": _vm.sumText || _vm.t("el.table.sumText"),
                  "summary-method": _vm.summaryMethod,
                  store: _vm.store
                }
              })
            ], 1) : _vm._e()
          ]) : _vm._e(),
          _vm.rightFixedColumns.length > 0 ? _c("div", {
            ref: "rightFixedPatch",
            staticClass: "el-table__fixed-right-patch",
            style: {
              width: _vm.layout.scrollY ? _vm.layout.gutterWidth + "px" : "0",
              height: _vm.layout.headerHeight + "px"
            }
          }) : _vm._e(),
          _c("div", {
            directives: [
              {
                name: "show",
                rawName: "v-show",
                value: _vm.resizeProxyVisible,
                expression: "resizeProxyVisible"
              }
            ],
            ref: "resizeProxy",
            staticClass: "el-table__column-resize-proxy"
          })
        ]);
      };
      var tablevue_type_template_id_493fe34e_staticRenderFns = [];
      tablevue_type_template_id_493fe34e_render._withStripped = true;
      var checkbox_ = __webpack_require__(17);
      var checkbox_default = /* @__PURE__ */ __webpack_require__.n(checkbox_);
      var external_throttle_debounce_ = __webpack_require__(35);
      var external_normalize_wheel_ = __webpack_require__(38);
      var external_normalize_wheel_default = /* @__PURE__ */ __webpack_require__.n(external_normalize_wheel_);
      var isFirefox2 = typeof navigator !== "undefined" && navigator.userAgent.toLowerCase().indexOf("firefox") > -1;
      var mousewheel_mousewheel = function mousewheel(element, callback) {
        if (element && element.addEventListener) {
          element.addEventListener(isFirefox2 ? "DOMMouseScroll" : "mousewheel", function(event2) {
            var normalized = external_normalize_wheel_default()(event2);
            callback && callback.apply(this, [event2, normalized]);
          });
        }
      };
      var directives_mousewheel = {
        bind: function bind4(el, binding) {
          mousewheel_mousewheel(el, binding.value);
        }
      };
      var external_vue_ = __webpack_require__(6);
      var external_vue_default = /* @__PURE__ */ __webpack_require__.n(external_vue_);
      var util_typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
        return typeof obj;
      } : function(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
      var getCell2 = function getCell3(event2) {
        var cell2 = event2.target;
        while (cell2 && cell2.tagName.toUpperCase() !== "HTML") {
          if (cell2.tagName.toUpperCase() === "TD") {
            return cell2;
          }
          cell2 = cell2.parentNode;
        }
        return null;
      };
      var util_isObject = function isObject2(obj) {
        return obj !== null && (typeof obj === "undefined" ? "undefined" : util_typeof(obj)) === "object";
      };
      var util_orderBy = function orderBy2(array3, sortKey, reverse, sortMethod, sortBy2) {
        if (!sortKey && !sortMethod && (!sortBy2 || Array.isArray(sortBy2) && !sortBy2.length)) {
          return array3;
        }
        if (typeof reverse === "string") {
          reverse = reverse === "descending" ? -1 : 1;
        } else {
          reverse = reverse && reverse < 0 ? -1 : 1;
        }
        var getKey = sortMethod ? null : function(value6, index2) {
          if (sortBy2) {
            if (!Array.isArray(sortBy2)) {
              sortBy2 = [sortBy2];
            }
            return sortBy2.map(function(by) {
              if (typeof by === "string") {
                return Object(util_["getValueByPath"])(value6, by);
              } else {
                return by(value6, index2, array3);
              }
            });
          }
          if (sortKey !== "$key") {
            if (util_isObject(value6) && "$value" in value6)
              value6 = value6.$value;
          }
          return [util_isObject(value6) ? Object(util_["getValueByPath"])(value6, sortKey) : value6];
        };
        var compare = function compare2(a, b) {
          if (sortMethod) {
            return sortMethod(a.value, b.value);
          }
          for (var i = 0, len = a.key.length; i < len; i++) {
            if (a.key[i] < b.key[i]) {
              return -1;
            }
            if (a.key[i] > b.key[i]) {
              return 1;
            }
          }
          return 0;
        };
        return array3.map(function(value6, index2) {
          return {
            value: value6,
            index: index2,
            key: getKey ? getKey(value6, index2) : null
          };
        }).sort(function(a, b) {
          var order = compare(a, b);
          if (!order) {
            order = a.index - b.index;
          }
          return order * reverse;
        }).map(function(item) {
          return item.value;
        });
      };
      var getColumnById2 = function getColumnById3(table2, columnId) {
        var column2 = null;
        table2.columns.forEach(function(item) {
          if (item.id === columnId) {
            column2 = item;
          }
        });
        return column2;
      };
      var getColumnByKey = function getColumnByKey2(table2, columnKey) {
        var column2 = null;
        for (var i = 0; i < table2.columns.length; i++) {
          var item = table2.columns[i];
          if (item.columnKey === columnKey) {
            column2 = item;
            break;
          }
        }
        return column2;
      };
      var getColumnByCell = function getColumnByCell2(table2, cell2) {
        var matches2 = (cell2.className || "").match(/el-table_[^\s]+/gm);
        if (matches2) {
          return getColumnById2(table2, matches2[0]);
        }
        return null;
      };
      var getRowIdentity = function getRowIdentity2(row, rowKey) {
        if (!row)
          throw new Error("row is required when get row identity");
        if (typeof rowKey === "string") {
          if (rowKey.indexOf(".") < 0) {
            return row[rowKey];
          }
          var key = rowKey.split(".");
          var current = row;
          for (var i = 0; i < key.length; i++) {
            current = current[key[i]];
          }
          return current;
        } else if (typeof rowKey === "function") {
          return rowKey.call(null, row);
        }
      };
      var getKeysMap = function getKeysMap2(array3, rowKey) {
        var arrayMap = {};
        (array3 || []).forEach(function(row, index2) {
          arrayMap[getRowIdentity(row, rowKey)] = { row, index: index2 };
        });
        return arrayMap;
      };
      function hasOwn2(obj, key) {
        return Object.prototype.hasOwnProperty.call(obj, key);
      }
      function mergeOptions2(defaults, config2) {
        var options2 = {};
        var key = void 0;
        for (key in defaults) {
          options2[key] = defaults[key];
        }
        for (key in config2) {
          if (hasOwn2(config2, key)) {
            var value6 = config2[key];
            if (typeof value6 !== "undefined") {
              options2[key] = value6;
            }
          }
        }
        return options2;
      }
      function parseWidth(width2) {
        if (width2 !== void 0) {
          width2 = parseInt(width2, 10);
          if (isNaN(width2)) {
            width2 = null;
          }
        }
        return width2;
      }
      function parseMinWidth(minWidth) {
        if (typeof minWidth !== "undefined") {
          minWidth = parseWidth(minWidth);
          if (isNaN(minWidth)) {
            minWidth = 80;
          }
        }
        return minWidth;
      }
      function parseHeight(height3) {
        if (typeof height3 === "number") {
          return height3;
        }
        if (typeof height3 === "string") {
          if (/^\d+(?:px)?$/.test(height3)) {
            return parseInt(height3, 10);
          } else {
            return height3;
          }
        }
        return null;
      }
      function compose() {
        for (var _len = arguments.length, funcs2 = Array(_len), _key = 0; _key < _len; _key++) {
          funcs2[_key] = arguments[_key];
        }
        if (funcs2.length === 0) {
          return function(arg) {
            return arg;
          };
        }
        if (funcs2.length === 1) {
          return funcs2[0];
        }
        return funcs2.reduce(function(a, b) {
          return function() {
            return a(b.apply(void 0, arguments));
          };
        });
      }
      function toggleRowStatus(statusArr, row, newVal) {
        var changed = false;
        var index2 = statusArr.indexOf(row);
        var included = index2 !== -1;
        var addRow = function addRow2() {
          statusArr.push(row);
          changed = true;
        };
        var removeRow = function removeRow2() {
          statusArr.splice(index2, 1);
          changed = true;
        };
        if (typeof newVal === "boolean") {
          if (newVal && !included) {
            addRow();
          } else if (!newVal && included) {
            removeRow();
          }
        } else {
          if (included) {
            removeRow();
          } else {
            addRow();
          }
        }
        return changed;
      }
      function walkTreeNode(root2, cb) {
        var childrenKey = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "children";
        var lazyKey = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : "hasChildren";
        var isNil = function isNil2(array3) {
          return !(Array.isArray(array3) && array3.length);
        };
        function _walker(parent2, children, level) {
          cb(parent2, children, level);
          children.forEach(function(item) {
            if (item[lazyKey]) {
              cb(item, null, level + 1);
              return;
            }
            var children2 = item[childrenKey];
            if (!isNil(children2)) {
              _walker(item, children2, level + 1);
            }
          });
        }
        root2.forEach(function(item) {
          if (item[lazyKey]) {
            cb(item, null, 0);
            return;
          }
          var children = item[childrenKey];
          if (!isNil(children)) {
            _walker(item, children, 0);
          }
        });
      }
      var expand = {
        data: function data25() {
          return {
            states: {
              defaultExpandAll: false,
              expandRows: []
            }
          };
        },
        methods: {
          updateExpandRows: function updateExpandRows() {
            var _states = this.states, _states$data = _states.data, data25 = _states$data === void 0 ? [] : _states$data, rowKey = _states.rowKey, defaultExpandAll = _states.defaultExpandAll, expandRows = _states.expandRows;
            if (defaultExpandAll) {
              this.states.expandRows = data25.slice();
            } else if (rowKey) {
              var expandRowsMap = getKeysMap(expandRows, rowKey);
              this.states.expandRows = data25.reduce(function(prev, row) {
                var rowId = getRowIdentity(row, rowKey);
                var rowInfo = expandRowsMap[rowId];
                if (rowInfo) {
                  prev.push(row);
                }
                return prev;
              }, []);
            } else {
              this.states.expandRows = [];
            }
          },
          toggleRowExpansion: function toggleRowExpansion(row, expanded) {
            var changed = toggleRowStatus(this.states.expandRows, row, expanded);
            if (changed) {
              this.table.$emit("expand-change", row, this.states.expandRows.slice());
              this.scheduleLayout();
            }
          },
          setExpandRowKeys: function setExpandRowKeys(rowKeys) {
            this.assertRowKey();
            var _states2 = this.states, data25 = _states2.data, rowKey = _states2.rowKey;
            var keysMap = getKeysMap(data25, rowKey);
            this.states.expandRows = rowKeys.reduce(function(prev, cur) {
              var info = keysMap[cur];
              if (info) {
                prev.push(info.row);
              }
              return prev;
            }, []);
          },
          isRowExpanded: function isRowExpanded(row) {
            var _states3 = this.states, _states3$expandRows = _states3.expandRows, expandRows = _states3$expandRows === void 0 ? [] : _states3$expandRows, rowKey = _states3.rowKey;
            if (rowKey) {
              var expandMap = getKeysMap(expandRows, rowKey);
              return !!expandMap[getRowIdentity(row, rowKey)];
            }
            return expandRows.indexOf(row) !== -1;
          }
        }
      };
      var store_current = {
        data: function data25() {
          return {
            states: {
              _currentRowKey: null,
              currentRow: null
            }
          };
        },
        methods: {
          setCurrentRowKey: function setCurrentRowKey(key) {
            this.assertRowKey();
            this.states._currentRowKey = key;
            this.setCurrentRowByKey(key);
          },
          restoreCurrentRowKey: function restoreCurrentRowKey() {
            this.states._currentRowKey = null;
          },
          setCurrentRowByKey: function setCurrentRowByKey(key) {
            var states = this.states;
            var _states$data = states.data, data25 = _states$data === void 0 ? [] : _states$data, rowKey = states.rowKey;
            var currentRow = null;
            if (rowKey) {
              currentRow = Object(util_["arrayFind"])(data25, function(item) {
                return getRowIdentity(item, rowKey) === key;
              });
            }
            states.currentRow = currentRow;
          },
          updateCurrentRow: function updateCurrentRow(currentRow) {
            var states = this.states, table2 = this.table;
            var oldCurrentRow = states.currentRow;
            if (currentRow && currentRow !== oldCurrentRow) {
              states.currentRow = currentRow;
              table2.$emit("current-change", currentRow, oldCurrentRow);
              return;
            }
            if (!currentRow && oldCurrentRow) {
              states.currentRow = null;
              table2.$emit("current-change", null, oldCurrentRow);
            }
          },
          updateCurrentRowData: function updateCurrentRowData() {
            var states = this.states, table2 = this.table;
            var rowKey = states.rowKey, _currentRowKey = states._currentRowKey;
            var data25 = states.data || [];
            var oldCurrentRow = states.currentRow;
            if (data25.indexOf(oldCurrentRow) === -1 && oldCurrentRow) {
              if (rowKey) {
                var currentRowKey = getRowIdentity(oldCurrentRow, rowKey);
                this.setCurrentRowByKey(currentRowKey);
              } else {
                states.currentRow = null;
              }
              if (states.currentRow === null) {
                table2.$emit("current-change", null, oldCurrentRow);
              }
            } else if (_currentRowKey) {
              this.setCurrentRowByKey(_currentRowKey);
              this.restoreCurrentRowKey();
            }
          }
        }
      };
      var _extends2 = Object.assign || function(target2) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target2[key] = source[key];
            }
          }
        }
        return target2;
      };
      var tree = {
        data: function data25() {
          return {
            states: {
              expandRowKeys: [],
              treeData: {},
              indent: 16,
              lazy: false,
              lazyTreeNodeMap: {},
              lazyColumnIdentifier: "hasChildren",
              childrenColumnName: "children"
            }
          };
        },
        computed: {
          normalizedData: function normalizedData() {
            if (!this.states.rowKey)
              return {};
            var data25 = this.states.data || [];
            return this.normalize(data25);
          },
          normalizedLazyNode: function normalizedLazyNode() {
            var _states = this.states, rowKey = _states.rowKey, lazyTreeNodeMap = _states.lazyTreeNodeMap, lazyColumnIdentifier = _states.lazyColumnIdentifier;
            var keys3 = Object.keys(lazyTreeNodeMap);
            var res = {};
            if (!keys3.length)
              return res;
            keys3.forEach(function(key) {
              if (lazyTreeNodeMap[key].length) {
                var item = { children: [] };
                lazyTreeNodeMap[key].forEach(function(row) {
                  var currentRowKey = getRowIdentity(row, rowKey);
                  item.children.push(currentRowKey);
                  if (row[lazyColumnIdentifier] && !res[currentRowKey]) {
                    res[currentRowKey] = { children: [] };
                  }
                });
                res[key] = item;
              }
            });
            return res;
          }
        },
        watch: {
          normalizedData: "updateTreeData",
          normalizedLazyNode: "updateTreeData"
        },
        methods: {
          normalize: function normalize2(data25) {
            var _states2 = this.states, childrenColumnName = _states2.childrenColumnName, lazyColumnIdentifier = _states2.lazyColumnIdentifier, rowKey = _states2.rowKey, lazy = _states2.lazy;
            var res = {};
            walkTreeNode(data25, function(parent2, children, level) {
              var parentId = getRowIdentity(parent2, rowKey);
              if (Array.isArray(children)) {
                res[parentId] = {
                  children: children.map(function(row) {
                    return getRowIdentity(row, rowKey);
                  }),
                  level
                };
              } else if (lazy) {
                res[parentId] = {
                  children: [],
                  lazy: true,
                  level
                };
              }
            }, childrenColumnName, lazyColumnIdentifier);
            return res;
          },
          updateTreeData: function updateTreeData() {
            var nested = this.normalizedData;
            var normalizedLazyNode = this.normalizedLazyNode;
            var keys3 = Object.keys(nested);
            var newTreeData = {};
            if (keys3.length) {
              var _states3 = this.states, oldTreeData = _states3.treeData, defaultExpandAll = _states3.defaultExpandAll, expandRowKeys = _states3.expandRowKeys, lazy = _states3.lazy;
              var rootLazyRowKeys = [];
              var getExpanded = function getExpanded2(oldValue, key) {
                var included = defaultExpandAll || expandRowKeys && expandRowKeys.indexOf(key) !== -1;
                return !!(oldValue && oldValue.expanded || included);
              };
              keys3.forEach(function(key) {
                var oldValue = oldTreeData[key];
                var newValue = _extends2({}, nested[key]);
                newValue.expanded = getExpanded(oldValue, key);
                if (newValue.lazy) {
                  var _ref = oldValue || {}, _ref$loaded = _ref.loaded, loaded = _ref$loaded === void 0 ? false : _ref$loaded, _ref$loading = _ref.loading, loading2 = _ref$loading === void 0 ? false : _ref$loading;
                  newValue.loaded = !!loaded;
                  newValue.loading = !!loading2;
                  rootLazyRowKeys.push(key);
                }
                newTreeData[key] = newValue;
              });
              var lazyKeys = Object.keys(normalizedLazyNode);
              if (lazy && lazyKeys.length && rootLazyRowKeys.length) {
                lazyKeys.forEach(function(key) {
                  var oldValue = oldTreeData[key];
                  var lazyNodeChildren = normalizedLazyNode[key].children;
                  if (rootLazyRowKeys.indexOf(key) !== -1) {
                    if (newTreeData[key].children.length !== 0) {
                      throw new Error("[ElTable]children must be an empty array.");
                    }
                    newTreeData[key].children = lazyNodeChildren;
                  } else {
                    var _ref2 = oldValue || {}, _ref2$loaded = _ref2.loaded, loaded = _ref2$loaded === void 0 ? false : _ref2$loaded, _ref2$loading = _ref2.loading, loading2 = _ref2$loading === void 0 ? false : _ref2$loading;
                    newTreeData[key] = {
                      lazy: true,
                      loaded: !!loaded,
                      loading: !!loading2,
                      expanded: getExpanded(oldValue, key),
                      children: lazyNodeChildren,
                      level: ""
                    };
                  }
                });
              }
            }
            this.states.treeData = newTreeData;
            this.updateTableScrollY();
          },
          updateTreeExpandKeys: function updateTreeExpandKeys(value6) {
            this.states.expandRowKeys = value6;
            this.updateTreeData();
          },
          toggleTreeExpansion: function toggleTreeExpansion(row, expanded) {
            this.assertRowKey();
            var _states4 = this.states, rowKey = _states4.rowKey, treeData = _states4.treeData;
            var id2 = getRowIdentity(row, rowKey);
            var data25 = id2 && treeData[id2];
            if (id2 && data25 && "expanded" in data25) {
              var oldExpanded = data25.expanded;
              expanded = typeof expanded === "undefined" ? !data25.expanded : expanded;
              treeData[id2].expanded = expanded;
              if (oldExpanded !== expanded) {
                this.table.$emit("expand-change", row, expanded);
              }
              this.updateTableScrollY();
            }
          },
          loadOrToggle: function loadOrToggle(row) {
            this.assertRowKey();
            var _states5 = this.states, lazy = _states5.lazy, treeData = _states5.treeData, rowKey = _states5.rowKey;
            var id2 = getRowIdentity(row, rowKey);
            var data25 = treeData[id2];
            if (lazy && data25 && "loaded" in data25 && !data25.loaded) {
              this.loadData(row, id2, data25);
            } else {
              this.toggleTreeExpansion(row);
            }
          },
          loadData: function loadData3(row, key, treeNode) {
            var _this = this;
            var load = this.table.load;
            var rawTreeData = this.states.treeData;
            if (load && !rawTreeData[key].loaded) {
              rawTreeData[key].loading = true;
              load(row, treeNode, function(data25) {
                if (!Array.isArray(data25)) {
                  throw new Error("[ElTable] data must be an array");
                }
                var _states6 = _this.states, lazyTreeNodeMap = _states6.lazyTreeNodeMap, treeData = _states6.treeData;
                treeData[key].loading = false;
                treeData[key].loaded = true;
                treeData[key].expanded = true;
                if (data25.length) {
                  _this.$set(lazyTreeNodeMap, key, data25);
                }
                _this.table.$emit("expand-change", row, true);
              });
            }
          }
        }
      };
      var watcher_sortData = function sortData(data25, states) {
        var sortingColumn = states.sortingColumn;
        if (!sortingColumn || typeof sortingColumn.sortable === "string") {
          return data25;
        }
        return util_orderBy(data25, states.sortProp, states.sortOrder, sortingColumn.sortMethod, sortingColumn.sortBy);
      };
      var doFlattenColumns = function doFlattenColumns2(columns2) {
        var result2 = [];
        columns2.forEach(function(column2) {
          if (column2.children) {
            result2.push.apply(result2, doFlattenColumns2(column2.children));
          } else {
            result2.push(column2);
          }
        });
        return result2;
      };
      var watcher = external_vue_default.a.extend({
        data: function data25() {
          return {
            states: {
              rowKey: null,
              data: [],
              isComplex: false,
              _columns: [],
              originColumns: [],
              columns: [],
              fixedColumns: [],
              rightFixedColumns: [],
              leafColumns: [],
              fixedLeafColumns: [],
              rightFixedLeafColumns: [],
              leafColumnsLength: 0,
              fixedLeafColumnsLength: 0,
              rightFixedLeafColumnsLength: 0,
              isAllSelected: false,
              selection: [],
              reserveSelection: false,
              selectOnIndeterminate: false,
              selectable: null,
              filters: {},
              filteredData: null,
              sortingColumn: null,
              sortProp: null,
              sortOrder: null,
              hoverRow: null
            }
          };
        },
        mixins: [expand, store_current, tree],
        methods: {
          assertRowKey: function assertRowKey() {
            var rowKey = this.states.rowKey;
            if (!rowKey)
              throw new Error("[ElTable] prop row-key is required");
          },
          updateColumns: function updateColumns() {
            var states = this.states;
            var _columns = states._columns || [];
            states.fixedColumns = _columns.filter(function(column2) {
              return column2.fixed === true || column2.fixed === "left";
            });
            states.rightFixedColumns = _columns.filter(function(column2) {
              return column2.fixed === "right";
            });
            if (states.fixedColumns.length > 0 && _columns[0] && _columns[0].type === "selection" && !_columns[0].fixed) {
              _columns[0].fixed = true;
              states.fixedColumns.unshift(_columns[0]);
            }
            var notFixedColumns = _columns.filter(function(column2) {
              return !column2.fixed;
            });
            states.originColumns = [].concat(states.fixedColumns).concat(notFixedColumns).concat(states.rightFixedColumns);
            var leafColumns = doFlattenColumns(notFixedColumns);
            var fixedLeafColumns = doFlattenColumns(states.fixedColumns);
            var rightFixedLeafColumns = doFlattenColumns(states.rightFixedColumns);
            states.leafColumnsLength = leafColumns.length;
            states.fixedLeafColumnsLength = fixedLeafColumns.length;
            states.rightFixedLeafColumnsLength = rightFixedLeafColumns.length;
            states.columns = [].concat(fixedLeafColumns).concat(leafColumns).concat(rightFixedLeafColumns);
            states.isComplex = states.fixedColumns.length > 0 || states.rightFixedColumns.length > 0;
          },
          scheduleLayout: function scheduleLayout(needUpdateColumns) {
            if (needUpdateColumns) {
              this.updateColumns();
            }
            this.table.debouncedUpdateLayout();
          },
          isSelected: function isSelected(row) {
            var _states$selection = this.states.selection, selection = _states$selection === void 0 ? [] : _states$selection;
            return selection.indexOf(row) > -1;
          },
          clearSelection: function clearSelection() {
            var states = this.states;
            states.isAllSelected = false;
            var oldSelection = states.selection;
            if (oldSelection.length) {
              states.selection = [];
              this.table.$emit("selection-change", []);
            }
          },
          cleanSelection: function cleanSelection() {
            var states = this.states;
            var data25 = states.data, rowKey = states.rowKey, selection = states.selection;
            var deleted = void 0;
            if (rowKey) {
              deleted = [];
              var selectedMap = getKeysMap(selection, rowKey);
              var dataMap = getKeysMap(data25, rowKey);
              for (var key in selectedMap) {
                if (selectedMap.hasOwnProperty(key) && !dataMap[key]) {
                  deleted.push(selectedMap[key].row);
                }
              }
            } else {
              deleted = selection.filter(function(item) {
                return data25.indexOf(item) === -1;
              });
            }
            if (deleted.length) {
              var newSelection = selection.filter(function(item) {
                return deleted.indexOf(item) === -1;
              });
              states.selection = newSelection;
              this.table.$emit("selection-change", newSelection.slice());
            }
          },
          toggleRowSelection: function toggleRowSelection(row, selected) {
            var emitChange = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
            var changed = toggleRowStatus(this.states.selection, row, selected);
            if (changed) {
              var newSelection = (this.states.selection || []).slice();
              if (emitChange) {
                this.table.$emit("select", newSelection, row);
              }
              this.table.$emit("selection-change", newSelection);
            }
          },
          _toggleAllSelection: function _toggleAllSelection() {
            var states = this.states;
            var _states$data = states.data, data25 = _states$data === void 0 ? [] : _states$data, selection = states.selection;
            var value6 = states.selectOnIndeterminate ? !states.isAllSelected : !(states.isAllSelected || selection.length);
            states.isAllSelected = value6;
            var selectionChanged = false;
            data25.forEach(function(row, index2) {
              if (states.selectable) {
                if (states.selectable.call(null, row, index2) && toggleRowStatus(selection, row, value6)) {
                  selectionChanged = true;
                }
              } else {
                if (toggleRowStatus(selection, row, value6)) {
                  selectionChanged = true;
                }
              }
            });
            if (selectionChanged) {
              this.table.$emit("selection-change", selection ? selection.slice() : []);
            }
            this.table.$emit("select-all", selection);
          },
          updateSelectionByRowKey: function updateSelectionByRowKey() {
            var states = this.states;
            var selection = states.selection, rowKey = states.rowKey, data25 = states.data;
            var selectedMap = getKeysMap(selection, rowKey);
            data25.forEach(function(row) {
              var rowId = getRowIdentity(row, rowKey);
              var rowInfo = selectedMap[rowId];
              if (rowInfo) {
                selection[rowInfo.index] = row;
              }
            });
          },
          updateAllSelected: function updateAllSelected() {
            var states = this.states;
            var selection = states.selection, rowKey = states.rowKey, selectable = states.selectable;
            var data25 = states.data || [];
            if (data25.length === 0) {
              states.isAllSelected = false;
              return;
            }
            var selectedMap = void 0;
            if (rowKey) {
              selectedMap = getKeysMap(selection, rowKey);
            }
            var isSelected = function isSelected2(row) {
              if (selectedMap) {
                return !!selectedMap[getRowIdentity(row, rowKey)];
              } else {
                return selection.indexOf(row) !== -1;
              }
            };
            var isAllSelected = true;
            var selectedCount = 0;
            for (var i = 0, j = data25.length; i < j; i++) {
              var item = data25[i];
              var isRowSelectable = selectable && selectable.call(null, item, i);
              if (!isSelected(item)) {
                if (!selectable || isRowSelectable) {
                  isAllSelected = false;
                  break;
                }
              } else {
                selectedCount++;
              }
            }
            if (selectedCount === 0)
              isAllSelected = false;
            states.isAllSelected = isAllSelected;
          },
          updateFilters: function updateFilters(columns2, values2) {
            if (!Array.isArray(columns2)) {
              columns2 = [columns2];
            }
            var states = this.states;
            var filters = {};
            columns2.forEach(function(col2) {
              states.filters[col2.id] = values2;
              filters[col2.columnKey || col2.id] = values2;
            });
            return filters;
          },
          updateSort: function updateSort(column2, prop, order) {
            if (this.states.sortingColumn && this.states.sortingColumn !== column2) {
              this.states.sortingColumn.order = null;
            }
            this.states.sortingColumn = column2;
            this.states.sortProp = prop;
            this.states.sortOrder = order;
          },
          execFilter: function execFilter() {
            var _this = this;
            var states = this.states;
            var _data = states._data, filters = states.filters;
            var data25 = _data;
            Object.keys(filters).forEach(function(columnId) {
              var values2 = states.filters[columnId];
              if (!values2 || values2.length === 0)
                return;
              var column2 = getColumnById2(_this.states, columnId);
              if (column2 && column2.filterMethod) {
                data25 = data25.filter(function(row) {
                  return values2.some(function(value6) {
                    return column2.filterMethod.call(null, value6, row, column2);
                  });
                });
              }
            });
            states.filteredData = data25;
          },
          execSort: function execSort() {
            var states = this.states;
            states.data = watcher_sortData(states.filteredData, states);
          },
          execQuery: function execQuery(ignore) {
            if (!(ignore && ignore.filter)) {
              this.execFilter();
            }
            this.execSort();
          },
          clearFilter: function clearFilter(columnKeys) {
            var states = this.states;
            var _table$$refs = this.table.$refs, tableHeader = _table$$refs.tableHeader, fixedTableHeader = _table$$refs.fixedTableHeader, rightFixedTableHeader = _table$$refs.rightFixedTableHeader;
            var panels = {};
            if (tableHeader)
              panels = merge_default()(panels, tableHeader.filterPanels);
            if (fixedTableHeader)
              panels = merge_default()(panels, fixedTableHeader.filterPanels);
            if (rightFixedTableHeader)
              panels = merge_default()(panels, rightFixedTableHeader.filterPanels);
            var keys3 = Object.keys(panels);
            if (!keys3.length)
              return;
            if (typeof columnKeys === "string") {
              columnKeys = [columnKeys];
            }
            if (Array.isArray(columnKeys)) {
              var columns2 = columnKeys.map(function(key) {
                return getColumnByKey(states, key);
              });
              keys3.forEach(function(key) {
                var column2 = columns2.find(function(col2) {
                  return col2.id === key;
                });
                if (column2) {
                  panels[key].filteredValue = [];
                }
              });
              this.commit("filterChange", {
                column: columns2,
                values: [],
                silent: true,
                multi: true
              });
            } else {
              keys3.forEach(function(key) {
                panels[key].filteredValue = [];
              });
              states.filters = {};
              this.commit("filterChange", {
                column: {},
                values: [],
                silent: true
              });
            }
          },
          clearSort: function clearSort2() {
            var states = this.states;
            if (!states.sortingColumn)
              return;
            this.updateSort(null, null, null);
            this.commit("changeSortCondition", {
              silent: true
            });
          },
          setExpandRowKeysAdapter: function setExpandRowKeysAdapter(val) {
            this.setExpandRowKeys(val);
            this.updateTreeExpandKeys(val);
          },
          toggleRowExpansionAdapter: function toggleRowExpansionAdapter(row, expanded) {
            var hasExpandColumn = this.states.columns.some(function(_ref) {
              var type3 = _ref.type;
              return type3 === "expand";
            });
            if (hasExpandColumn) {
              this.toggleRowExpansion(row, expanded);
            } else {
              this.toggleTreeExpansion(row, expanded);
            }
          }
        }
      });
      watcher.prototype.mutations = {
        setData: function setData(states, data25) {
          var dataInstanceChanged = states._data !== data25;
          states._data = data25;
          this.execQuery();
          this.updateCurrentRowData();
          this.updateExpandRows();
          if (states.reserveSelection) {
            this.assertRowKey();
            this.updateSelectionByRowKey();
          } else {
            if (dataInstanceChanged) {
              this.clearSelection();
            } else {
              this.cleanSelection();
            }
          }
          this.updateAllSelected();
          this.updateTableScrollY();
        },
        insertColumn: function insertColumn(states, column2, index2, parent2) {
          var array3 = states._columns;
          if (parent2) {
            array3 = parent2.children;
            if (!array3)
              array3 = parent2.children = [];
          }
          if (typeof index2 !== "undefined") {
            array3.splice(index2, 0, column2);
          } else {
            array3.push(column2);
          }
          if (column2.type === "selection") {
            states.selectable = column2.selectable;
            states.reserveSelection = column2.reserveSelection;
          }
          if (this.table.$ready) {
            this.updateColumns();
            this.scheduleLayout();
          }
        },
        removeColumn: function removeColumn(states, column2, parent2) {
          var array3 = states._columns;
          if (parent2) {
            array3 = parent2.children;
            if (!array3)
              array3 = parent2.children = [];
          }
          if (array3) {
            array3.splice(array3.indexOf(column2), 1);
          }
          if (this.table.$ready) {
            this.updateColumns();
            this.scheduleLayout();
          }
        },
        sort: function sort2(states, options2) {
          var prop = options2.prop, order = options2.order, init2 = options2.init;
          if (prop) {
            var column2 = Object(util_["arrayFind"])(states.columns, function(column3) {
              return column3.property === prop;
            });
            if (column2) {
              column2.order = order;
              this.updateSort(column2, prop, order);
              this.commit("changeSortCondition", { init: init2 });
            }
          }
        },
        changeSortCondition: function changeSortCondition(states, options2) {
          var column2 = states.sortingColumn, prop = states.sortProp, order = states.sortOrder;
          if (order === null) {
            states.sortingColumn = null;
            states.sortProp = null;
          }
          var ingore = { filter: true };
          this.execQuery(ingore);
          if (!options2 || !(options2.silent || options2.init)) {
            this.table.$emit("sort-change", {
              column: column2,
              prop,
              order
            });
          }
          this.updateTableScrollY();
        },
        filterChange: function filterChange(states, options2) {
          var column2 = options2.column, values2 = options2.values, silent = options2.silent;
          var newFilters = this.updateFilters(column2, values2);
          this.execQuery();
          if (!silent) {
            this.table.$emit("filter-change", newFilters);
          }
          this.updateTableScrollY();
        },
        toggleAllSelection: function toggleAllSelection() {
          this.toggleAllSelection();
        },
        rowSelectedChanged: function rowSelectedChanged(states, row) {
          this.toggleRowSelection(row);
          this.updateAllSelected();
        },
        setHoverRow: function setHoverRow2(states, row) {
          states.hoverRow = row;
        },
        setCurrentRow: function setCurrentRow2(states, row) {
          this.updateCurrentRow(row);
        }
      };
      watcher.prototype.commit = function(name) {
        var mutations = this.mutations;
        if (mutations[name]) {
          for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          mutations[name].apply(this, [this.states].concat(args));
        } else {
          throw new Error("Action not found: " + name);
        }
      };
      watcher.prototype.updateTableScrollY = function() {
        external_vue_default.a.nextTick(this.table.updateScrollY);
      };
      var src_store = watcher;
      function createStore(table2) {
        var initialState = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        if (!table2) {
          throw new Error("Table is required.");
        }
        var store2 = new src_store();
        store2.table = table2;
        store2.toggleAllSelection = debounce_default()(10, store2._toggleAllSelection);
        Object.keys(initialState).forEach(function(key) {
          store2.states[key] = initialState[key];
        });
        return store2;
      }
      function mapStates(mapper) {
        var res = {};
        Object.keys(mapper).forEach(function(key) {
          var value6 = mapper[key];
          var fn = void 0;
          if (typeof value6 === "string") {
            fn = function fn2() {
              return this.store.states[value6];
            };
          } else if (typeof value6 === "function") {
            fn = function fn2() {
              return value6.call(this, this.store.states);
            };
          } else {
            console.error("invalid value type");
          }
          if (fn) {
            res[key] = fn;
          }
        });
        return res;
      }
      var scrollbar_width_ = __webpack_require__(30);
      var scrollbar_width_default = /* @__PURE__ */ __webpack_require__.n(scrollbar_width_);
      function _classCallCheck2(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      var table_layout_TableLayout = function() {
        function TableLayout(options2) {
          _classCallCheck2(this, TableLayout);
          this.observers = [];
          this.table = null;
          this.store = null;
          this.columns = null;
          this.fit = true;
          this.showHeader = true;
          this.height = null;
          this.scrollX = false;
          this.scrollY = false;
          this.bodyWidth = null;
          this.fixedWidth = null;
          this.rightFixedWidth = null;
          this.tableHeight = null;
          this.headerHeight = 44;
          this.appendHeight = 0;
          this.footerHeight = 44;
          this.viewportHeight = null;
          this.bodyHeight = null;
          this.fixedBodyHeight = null;
          this.gutterWidth = scrollbar_width_default()();
          for (var name in options2) {
            if (options2.hasOwnProperty(name)) {
              this[name] = options2[name];
            }
          }
          if (!this.table) {
            throw new Error("table is required for Table Layout");
          }
          if (!this.store) {
            throw new Error("store is required for Table Layout");
          }
        }
        TableLayout.prototype.updateScrollY = function updateScrollY() {
          var height3 = this.height;
          if (height3 === null)
            return false;
          var bodyWrapper = this.table.bodyWrapper;
          if (this.table.$el && bodyWrapper) {
            var body2 = bodyWrapper.querySelector(".el-table__body");
            var prevScrollY = this.scrollY;
            var scrollY = body2.offsetHeight > this.bodyHeight;
            this.scrollY = scrollY;
            return prevScrollY !== scrollY;
          }
          return false;
        };
        TableLayout.prototype.setHeight = function setHeight(value6) {
          var _this = this;
          var prop = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "height";
          if (external_vue_default.a.prototype.$isServer)
            return;
          var el = this.table.$el;
          value6 = parseHeight(value6);
          this.height = value6;
          if (!el && (value6 || value6 === 0))
            return external_vue_default.a.nextTick(function() {
              return _this.setHeight(value6, prop);
            });
          if (typeof value6 === "number") {
            el.style[prop] = value6 + "px";
            this.updateElsHeight();
          } else if (typeof value6 === "string") {
            el.style[prop] = value6;
            this.updateElsHeight();
          }
        };
        TableLayout.prototype.setMaxHeight = function setMaxHeight(value6) {
          this.setHeight(value6, "max-height");
        };
        TableLayout.prototype.getFlattenColumns = function getFlattenColumns() {
          var flattenColumns = [];
          var columns2 = this.table.columns;
          columns2.forEach(function(column2) {
            if (column2.isColumnGroup) {
              flattenColumns.push.apply(flattenColumns, column2.columns);
            } else {
              flattenColumns.push(column2);
            }
          });
          return flattenColumns;
        };
        TableLayout.prototype.updateElsHeight = function updateElsHeight() {
          var _this2 = this;
          if (!this.table.$ready)
            return external_vue_default.a.nextTick(function() {
              return _this2.updateElsHeight();
            });
          var _table$$refs = this.table.$refs, headerWrapper = _table$$refs.headerWrapper, appendWrapper = _table$$refs.appendWrapper, footerWrapper = _table$$refs.footerWrapper;
          this.appendHeight = appendWrapper ? appendWrapper.offsetHeight : 0;
          if (this.showHeader && !headerWrapper)
            return;
          var headerTrElm = headerWrapper ? headerWrapper.querySelector(".el-table__header tr") : null;
          var noneHeader = this.headerDisplayNone(headerTrElm);
          var headerHeight = this.headerHeight = !this.showHeader ? 0 : headerWrapper.offsetHeight;
          if (this.showHeader && !noneHeader && headerWrapper.offsetWidth > 0 && (this.table.columns || []).length > 0 && headerHeight < 2) {
            return external_vue_default.a.nextTick(function() {
              return _this2.updateElsHeight();
            });
          }
          var tableHeight = this.tableHeight = this.table.$el.clientHeight;
          var footerHeight = this.footerHeight = footerWrapper ? footerWrapper.offsetHeight : 0;
          if (this.height !== null) {
            this.bodyHeight = tableHeight - headerHeight - footerHeight + (footerWrapper ? 1 : 0);
          }
          this.fixedBodyHeight = this.scrollX ? this.bodyHeight - this.gutterWidth : this.bodyHeight;
          var noData = !(this.store.states.data && this.store.states.data.length);
          this.viewportHeight = this.scrollX ? tableHeight - (noData ? 0 : this.gutterWidth) : tableHeight;
          this.updateScrollY();
          this.notifyObservers("scrollable");
        };
        TableLayout.prototype.headerDisplayNone = function headerDisplayNone(elm) {
          if (!elm)
            return true;
          var headerChild = elm;
          while (headerChild.tagName !== "DIV") {
            if (getComputedStyle(headerChild).display === "none") {
              return true;
            }
            headerChild = headerChild.parentElement;
          }
          return false;
        };
        TableLayout.prototype.updateColumnsWidth = function updateColumnsWidth() {
          if (external_vue_default.a.prototype.$isServer)
            return;
          var fit = this.fit;
          var bodyWidth = this.table.$el.clientWidth;
          var bodyMinWidth = 0;
          var flattenColumns = this.getFlattenColumns();
          var flexColumns = flattenColumns.filter(function(column2) {
            return typeof column2.width !== "number";
          });
          flattenColumns.forEach(function(column2) {
            if (typeof column2.width === "number" && column2.realWidth)
              column2.realWidth = null;
          });
          if (flexColumns.length > 0 && fit) {
            flattenColumns.forEach(function(column2) {
              bodyMinWidth += column2.width || column2.minWidth || 80;
            });
            var scrollYWidth = this.scrollY ? this.gutterWidth : 0;
            if (bodyMinWidth <= bodyWidth - scrollYWidth) {
              this.scrollX = false;
              var totalFlexWidth = bodyWidth - scrollYWidth - bodyMinWidth;
              if (flexColumns.length === 1) {
                flexColumns[0].realWidth = (flexColumns[0].minWidth || 80) + totalFlexWidth;
              } else {
                var allColumnsWidth = flexColumns.reduce(function(prev, column2) {
                  return prev + (column2.minWidth || 80);
                }, 0);
                var flexWidthPerPixel = totalFlexWidth / allColumnsWidth;
                var noneFirstWidth = 0;
                flexColumns.forEach(function(column2, index2) {
                  if (index2 === 0)
                    return;
                  var flexWidth = Math.floor((column2.minWidth || 80) * flexWidthPerPixel);
                  noneFirstWidth += flexWidth;
                  column2.realWidth = (column2.minWidth || 80) + flexWidth;
                });
                flexColumns[0].realWidth = (flexColumns[0].minWidth || 80) + totalFlexWidth - noneFirstWidth;
              }
            } else {
              this.scrollX = true;
              flexColumns.forEach(function(column2) {
                column2.realWidth = column2.minWidth;
              });
            }
            this.bodyWidth = Math.max(bodyMinWidth, bodyWidth);
            this.table.resizeState.width = this.bodyWidth;
          } else {
            flattenColumns.forEach(function(column2) {
              if (!column2.width && !column2.minWidth) {
                column2.realWidth = 80;
              } else {
                column2.realWidth = column2.width || column2.minWidth;
              }
              bodyMinWidth += column2.realWidth;
            });
            this.scrollX = bodyMinWidth > bodyWidth;
            this.bodyWidth = bodyMinWidth;
          }
          var fixedColumns = this.store.states.fixedColumns;
          if (fixedColumns.length > 0) {
            var fixedWidth = 0;
            fixedColumns.forEach(function(column2) {
              fixedWidth += column2.realWidth || column2.width;
            });
            this.fixedWidth = fixedWidth;
          }
          var rightFixedColumns = this.store.states.rightFixedColumns;
          if (rightFixedColumns.length > 0) {
            var rightFixedWidth = 0;
            rightFixedColumns.forEach(function(column2) {
              rightFixedWidth += column2.realWidth || column2.width;
            });
            this.rightFixedWidth = rightFixedWidth;
          }
          this.notifyObservers("columns");
        };
        TableLayout.prototype.addObserver = function addObserver(observer) {
          this.observers.push(observer);
        };
        TableLayout.prototype.removeObserver = function removeObserver(observer) {
          var index2 = this.observers.indexOf(observer);
          if (index2 !== -1) {
            this.observers.splice(index2, 1);
          }
        };
        TableLayout.prototype.notifyObservers = function notifyObservers(event2) {
          var _this3 = this;
          var observers2 = this.observers;
          observers2.forEach(function(observer) {
            switch (event2) {
              case "columns":
                observer.onColumnsChange(_this3);
                break;
              case "scrollable":
                observer.onScrollableChange(_this3);
                break;
              default:
                throw new Error("Table Layout don't have event " + event2 + ".");
            }
          });
        };
        return TableLayout;
      }();
      var table_layout = table_layout_TableLayout;
      var layout_observer = {
        created: function created20() {
          this.tableLayout.addObserver(this);
        },
        destroyed: function destroyed17() {
          this.tableLayout.removeObserver(this);
        },
        computed: {
          tableLayout: function tableLayout() {
            var layout = this.layout;
            if (!layout && this.table) {
              layout = this.table.layout;
            }
            if (!layout) {
              throw new Error("Can not find table layout.");
            }
            return layout;
          }
        },
        mounted: function mounted18() {
          this.onColumnsChange(this.tableLayout);
          this.onScrollableChange(this.tableLayout);
        },
        updated: function updated3() {
          if (this.__updated__)
            return;
          this.onColumnsChange(this.tableLayout);
          this.onScrollableChange(this.tableLayout);
          this.__updated__ = true;
        },
        methods: {
          onColumnsChange: function onColumnsChange(layout) {
            var cols = this.$el.querySelectorAll("colgroup > col");
            if (!cols.length)
              return;
            var flattenColumns = layout.getFlattenColumns();
            var columnsMap = {};
            flattenColumns.forEach(function(column3) {
              columnsMap[column3.id] = column3;
            });
            for (var i = 0, j = cols.length; i < j; i++) {
              var col2 = cols[i];
              var name = col2.getAttribute("name");
              var column2 = columnsMap[name];
              if (column2) {
                col2.setAttribute("width", column2.realWidth || column2.width);
              }
            }
          },
          onScrollableChange: function onScrollableChange(layout) {
            var cols = this.$el.querySelectorAll("colgroup > col[name=gutter]");
            for (var i = 0, j = cols.length; i < j; i++) {
              var col2 = cols[i];
              col2.setAttribute("width", layout.scrollY ? layout.gutterWidth : "0");
            }
            var ths = this.$el.querySelectorAll("th.gutter");
            for (var _i = 0, _j = ths.length; _i < _j; _i++) {
              var th = ths[_i];
              th.style.width = layout.scrollY ? layout.gutterWidth + "px" : "0";
              th.style.display = layout.scrollY ? "" : "none";
            }
          }
        }
      };
      var table_body_typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
        return typeof obj;
      } : function(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
      var table_body_extends = Object.assign || function(target2) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target2[key] = source[key];
            }
          }
        }
        return target2;
      };
      var table_body = {
        name: "ElTableBody",
        mixins: [layout_observer],
        components: {
          ElCheckbox: checkbox_default.a,
          ElTooltip: tooltip_default.a
        },
        props: {
          store: {
            required: true
          },
          stripe: Boolean,
          context: {},
          rowClassName: [String, Function],
          rowStyle: [Object, Function],
          fixed: String,
          highlight: Boolean
        },
        render: function render37(h) {
          var _this = this;
          var data25 = this.data || [];
          return h("table", {
            "class": "el-table__body",
            attrs: {
              cellspacing: "0",
              cellpadding: "0",
              border: "0"
            }
          }, [h("colgroup", [this.columns.map(function(column2) {
            return h("col", {
              attrs: { name: column2.id },
              key: column2.id
            });
          })]), h("tbody", [data25.reduce(function(acc, row) {
            return acc.concat(_this.wrappedRowRender(row, acc.length));
          }, []), h("el-tooltip", {
            attrs: { effect: this.table.tooltipEffect, placement: "top", content: this.tooltipContent },
            ref: "tooltip"
          })])]);
        },
        computed: table_body_extends({
          table: function table2() {
            return this.$parent;
          }
        }, mapStates({
          data: "data",
          columns: "columns",
          treeIndent: "indent",
          leftFixedLeafCount: "fixedLeafColumnsLength",
          rightFixedLeafCount: "rightFixedLeafColumnsLength",
          columnsCount: function columnsCount(states) {
            return states.columns.length;
          },
          leftFixedCount: function leftFixedCount(states) {
            return states.fixedColumns.length;
          },
          rightFixedCount: function rightFixedCount(states) {
            return states.rightFixedColumns.length;
          },
          hasExpandColumn: function hasExpandColumn(states) {
            return states.columns.some(function(_ref) {
              var type3 = _ref.type;
              return type3 === "expand";
            });
          }
        }), {
          firstDefaultColumnIndex: function firstDefaultColumnIndex() {
            return Object(util_["arrayFindIndex"])(this.columns, function(_ref2) {
              var type3 = _ref2.type;
              return type3 === "default";
            });
          }
        }),
        watch: {
          "store.states.hoverRow": function storeStatesHoverRow(newVal, oldVal) {
            var _this2 = this;
            if (!this.store.states.isComplex || this.$isServer)
              return;
            var raf2 = window.requestAnimationFrame;
            if (!raf2) {
              raf2 = function raf3(fn) {
                return setTimeout(fn, 16);
              };
            }
            raf2(function() {
              var rows = _this2.$el.querySelectorAll(".el-table__row");
              var oldRow = rows[oldVal];
              var newRow = rows[newVal];
              if (oldRow) {
                Object(dom_["removeClass"])(oldRow, "hover-row");
              }
              if (newRow) {
                Object(dom_["addClass"])(newRow, "hover-row");
              }
            });
          }
        },
        data: function data25() {
          return {
            tooltipContent: ""
          };
        },
        created: function created20() {
          this.activateTooltip = debounce_default()(50, function(tooltip2) {
            return tooltip2.handleShowPopper();
          });
        },
        methods: {
          getKeyOfRow: function getKeyOfRow(row, index2) {
            var rowKey = this.table.rowKey;
            if (rowKey) {
              return getRowIdentity(row, rowKey);
            }
            return index2;
          },
          isColumnHidden: function isColumnHidden(index2) {
            if (this.fixed === true || this.fixed === "left") {
              return index2 >= this.leftFixedLeafCount;
            } else if (this.fixed === "right") {
              return index2 < this.columnsCount - this.rightFixedLeafCount;
            } else {
              return index2 < this.leftFixedLeafCount || index2 >= this.columnsCount - this.rightFixedLeafCount;
            }
          },
          getSpan: function getSpan(row, column2, rowIndex, columnIndex) {
            var rowspan = 1;
            var colspan = 1;
            var fn = this.table.spanMethod;
            if (typeof fn === "function") {
              var result2 = fn({
                row,
                column: column2,
                rowIndex,
                columnIndex
              });
              if (Array.isArray(result2)) {
                rowspan = result2[0];
                colspan = result2[1];
              } else if ((typeof result2 === "undefined" ? "undefined" : table_body_typeof(result2)) === "object") {
                rowspan = result2.rowspan;
                colspan = result2.colspan;
              }
            }
            return { rowspan, colspan };
          },
          getRowStyle: function getRowStyle(row, rowIndex) {
            var rowStyle = this.table.rowStyle;
            if (typeof rowStyle === "function") {
              return rowStyle.call(null, {
                row,
                rowIndex
              });
            }
            return rowStyle || null;
          },
          getRowClass: function getRowClass(row, rowIndex) {
            var classes = ["el-table__row"];
            if (this.table.highlightCurrentRow && row === this.store.states.currentRow) {
              classes.push("current-row");
            }
            if (this.stripe && rowIndex % 2 === 1) {
              classes.push("el-table__row--striped");
            }
            var rowClassName = this.table.rowClassName;
            if (typeof rowClassName === "string") {
              classes.push(rowClassName);
            } else if (typeof rowClassName === "function") {
              classes.push(rowClassName.call(null, {
                row,
                rowIndex
              }));
            }
            if (this.store.states.expandRows.indexOf(row) > -1) {
              classes.push("expanded");
            }
            return classes;
          },
          getCellStyle: function getCellStyle(rowIndex, columnIndex, row, column2) {
            var cellStyle = this.table.cellStyle;
            if (typeof cellStyle === "function") {
              return cellStyle.call(null, {
                rowIndex,
                columnIndex,
                row,
                column: column2
              });
            }
            return cellStyle;
          },
          getCellClass: function getCellClass(rowIndex, columnIndex, row, column2) {
            var classes = [column2.id, column2.align, column2.className];
            if (this.isColumnHidden(columnIndex)) {
              classes.push("is-hidden");
            }
            var cellClassName = this.table.cellClassName;
            if (typeof cellClassName === "string") {
              classes.push(cellClassName);
            } else if (typeof cellClassName === "function") {
              classes.push(cellClassName.call(null, {
                rowIndex,
                columnIndex,
                row,
                column: column2
              }));
            }
            classes.push("el-table__cell");
            return classes.join(" ");
          },
          getColspanRealWidth: function getColspanRealWidth(columns2, colspan, index2) {
            if (colspan < 1) {
              return columns2[index2].realWidth;
            }
            var widthArr = columns2.map(function(_ref3) {
              var realWidth = _ref3.realWidth;
              return realWidth;
            }).slice(index2, index2 + colspan);
            return widthArr.reduce(function(acc, width2) {
              return acc + width2;
            }, -1);
          },
          handleCellMouseEnter: function handleCellMouseEnter(event2, row) {
            var table2 = this.table;
            var cell2 = getCell2(event2);
            if (cell2) {
              var column2 = getColumnByCell(table2, cell2);
              var hoverState = table2.hoverState = { cell: cell2, column: column2, row };
              table2.$emit("cell-mouse-enter", hoverState.row, hoverState.column, hoverState.cell, event2);
            }
            var cellChild = event2.target.querySelector(".cell");
            if (!(Object(dom_["hasClass"])(cellChild, "el-tooltip") && cellChild.childNodes.length)) {
              return;
            }
            var range3 = document.createRange();
            range3.setStart(cellChild, 0);
            range3.setEnd(cellChild, cellChild.childNodes.length);
            var rangeWidth = range3.getBoundingClientRect().width;
            var padding = (parseInt(Object(dom_["getStyle"])(cellChild, "paddingLeft"), 10) || 0) + (parseInt(Object(dom_["getStyle"])(cellChild, "paddingRight"), 10) || 0);
            if ((rangeWidth + padding > cellChild.offsetWidth || cellChild.scrollWidth > cellChild.offsetWidth) && this.$refs.tooltip) {
              var tooltip2 = this.$refs.tooltip;
              this.tooltipContent = cell2.innerText || cell2.textContent;
              tooltip2.referenceElm = cell2;
              tooltip2.$refs.popper && (tooltip2.$refs.popper.style.display = "none");
              tooltip2.doDestroy();
              tooltip2.setExpectedState(true);
              this.activateTooltip(tooltip2);
            }
          },
          handleCellMouseLeave: function handleCellMouseLeave(event2) {
            var tooltip2 = this.$refs.tooltip;
            if (tooltip2) {
              tooltip2.setExpectedState(false);
              tooltip2.handleClosePopper();
            }
            var cell2 = getCell2(event2);
            if (!cell2)
              return;
            var oldHoverState = this.table.hoverState || {};
            this.table.$emit("cell-mouse-leave", oldHoverState.row, oldHoverState.column, oldHoverState.cell, event2);
          },
          handleMouseEnter: debounce_default()(30, function(index2) {
            this.store.commit("setHoverRow", index2);
          }),
          handleMouseLeave: debounce_default()(30, function() {
            this.store.commit("setHoverRow", null);
          }),
          handleContextMenu: function handleContextMenu(event2, row) {
            this.handleEvent(event2, row, "contextmenu");
          },
          handleDoubleClick: function handleDoubleClick(event2, row) {
            this.handleEvent(event2, row, "dblclick");
          },
          handleClick: function handleClick(event2, row) {
            this.store.commit("setCurrentRow", row);
            this.handleEvent(event2, row, "click");
          },
          handleEvent: function handleEvent(event2, row, name) {
            var table2 = this.table;
            var cell2 = getCell2(event2);
            var column2 = void 0;
            if (cell2) {
              column2 = getColumnByCell(table2, cell2);
              if (column2) {
                table2.$emit("cell-" + name, row, column2, cell2, event2);
              }
            }
            table2.$emit("row-" + name, row, column2, event2);
          },
          rowRender: function rowRender(row, $index, treeRowData) {
            var _this3 = this;
            var h = this.$createElement;
            var treeIndent = this.treeIndent, columns2 = this.columns, firstDefaultColumnIndex = this.firstDefaultColumnIndex;
            var columnsHidden = columns2.map(function(column2, index2) {
              return _this3.isColumnHidden(index2);
            });
            var rowClasses = this.getRowClass(row, $index);
            var display = true;
            if (treeRowData) {
              rowClasses.push("el-table__row--level-" + treeRowData.level);
              display = treeRowData.display;
            }
            var displayStyle = display ? null : {
              display: "none"
            };
            return h("tr", {
              style: [displayStyle, this.getRowStyle(row, $index)],
              "class": rowClasses,
              key: this.getKeyOfRow(row, $index),
              on: {
                "dblclick": function dblclick($event) {
                  return _this3.handleDoubleClick($event, row);
                },
                "click": function click($event) {
                  return _this3.handleClick($event, row);
                },
                "contextmenu": function contextmenu($event) {
                  return _this3.handleContextMenu($event, row);
                },
                "mouseenter": function mouseenter(_) {
                  return _this3.handleMouseEnter($index);
                },
                "mouseleave": this.handleMouseLeave
              }
            }, [columns2.map(function(column2, cellIndex) {
              var _getSpan = _this3.getSpan(row, column2, $index, cellIndex), rowspan = _getSpan.rowspan, colspan = _getSpan.colspan;
              if (!rowspan || !colspan) {
                return null;
              }
              var columnData = table_body_extends({}, column2);
              columnData.realWidth = _this3.getColspanRealWidth(columns2, colspan, cellIndex);
              var data25 = {
                store: _this3.store,
                _self: _this3.context || _this3.table.$vnode.context,
                column: columnData,
                row,
                $index
              };
              if (cellIndex === firstDefaultColumnIndex && treeRowData) {
                data25.treeNode = {
                  indent: treeRowData.level * treeIndent,
                  level: treeRowData.level
                };
                if (typeof treeRowData.expanded === "boolean") {
                  data25.treeNode.expanded = treeRowData.expanded;
                  if ("loading" in treeRowData) {
                    data25.treeNode.loading = treeRowData.loading;
                  }
                  if ("noLazyChildren" in treeRowData) {
                    data25.treeNode.noLazyChildren = treeRowData.noLazyChildren;
                  }
                }
              }
              return h("td", {
                style: _this3.getCellStyle($index, cellIndex, row, column2),
                "class": _this3.getCellClass($index, cellIndex, row, column2),
                attrs: {
                  rowspan,
                  colspan
                },
                on: {
                  "mouseenter": function mouseenter($event) {
                    return _this3.handleCellMouseEnter($event, row);
                  },
                  "mouseleave": _this3.handleCellMouseLeave
                }
              }, [column2.renderCell.call(_this3._renderProxy, _this3.$createElement, data25, columnsHidden[cellIndex])]);
            })]);
          },
          wrappedRowRender: function wrappedRowRender(row, $index) {
            var _this4 = this;
            var h = this.$createElement;
            var store2 = this.store;
            var isRowExpanded = store2.isRowExpanded, assertRowKey = store2.assertRowKey;
            var _store$states = store2.states, treeData = _store$states.treeData, lazyTreeNodeMap = _store$states.lazyTreeNodeMap, childrenColumnName = _store$states.childrenColumnName, rowKey = _store$states.rowKey;
            if (this.hasExpandColumn && isRowExpanded(row)) {
              var renderExpanded = this.table.renderExpanded;
              var tr = this.rowRender(row, $index);
              if (!renderExpanded) {
                console.error("[Element Error]renderExpanded is required.");
                return tr;
              }
              return [[tr, h("tr", { key: "expanded-row__" + tr.key }, [h("td", {
                attrs: { colspan: this.columnsCount },
                "class": "el-table__cell el-table__expanded-cell"
              }, [renderExpanded(this.$createElement, { row, $index, store: this.store })])])]];
            } else if (Object.keys(treeData).length) {
              assertRowKey();
              var key = getRowIdentity(row, rowKey);
              var cur = treeData[key];
              var treeRowData = null;
              if (cur) {
                treeRowData = {
                  expanded: cur.expanded,
                  level: cur.level,
                  display: true
                };
                if (typeof cur.lazy === "boolean") {
                  if (typeof cur.loaded === "boolean" && cur.loaded) {
                    treeRowData.noLazyChildren = !(cur.children && cur.children.length);
                  }
                  treeRowData.loading = cur.loading;
                }
              }
              var tmp = [this.rowRender(row, $index, treeRowData)];
              if (cur) {
                var i = 0;
                var traverse2 = function traverse3(children, parent2) {
                  if (!(children && children.length && parent2))
                    return;
                  children.forEach(function(node) {
                    var innerTreeRowData = {
                      display: parent2.display && parent2.expanded,
                      level: parent2.level + 1
                    };
                    var childKey = getRowIdentity(node, rowKey);
                    if (childKey === void 0 || childKey === null) {
                      throw new Error("for nested data item, row-key is required.");
                    }
                    cur = table_body_extends({}, treeData[childKey]);
                    if (cur) {
                      innerTreeRowData.expanded = cur.expanded;
                      cur.level = cur.level || innerTreeRowData.level;
                      cur.display = !!(cur.expanded && innerTreeRowData.display);
                      if (typeof cur.lazy === "boolean") {
                        if (typeof cur.loaded === "boolean" && cur.loaded) {
                          innerTreeRowData.noLazyChildren = !(cur.children && cur.children.length);
                        }
                        innerTreeRowData.loading = cur.loading;
                      }
                    }
                    i++;
                    tmp.push(_this4.rowRender(node, $index + i, innerTreeRowData));
                    if (cur) {
                      var _nodes = lazyTreeNodeMap[childKey] || node[childrenColumnName];
                      traverse3(_nodes, cur);
                    }
                  });
                };
                cur.display = true;
                var nodes = lazyTreeNodeMap[key] || row[childrenColumnName];
                traverse2(nodes, cur);
              }
              return tmp;
            } else {
              return this.rowRender(row, $index);
            }
          }
        }
      };
      var filter_panelvue_type_template_id_7f2c919f_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("transition", { attrs: { name: "el-zoom-in-top" } }, [
          _vm.multiple ? _c("div", {
            directives: [
              {
                name: "clickoutside",
                rawName: "v-clickoutside",
                value: _vm.handleOutsideClick,
                expression: "handleOutsideClick"
              },
              {
                name: "show",
                rawName: "v-show",
                value: _vm.showPopper,
                expression: "showPopper"
              }
            ],
            staticClass: "el-table-filter"
          }, [
            _c("div", { staticClass: "el-table-filter__content" }, [
              _c("el-scrollbar", { attrs: { "wrap-class": "el-table-filter__wrap" } }, [
                _c("el-checkbox-group", {
                  staticClass: "el-table-filter__checkbox-group",
                  model: {
                    value: _vm.filteredValue,
                    callback: function($$v) {
                      _vm.filteredValue = $$v;
                    },
                    expression: "filteredValue"
                  }
                }, _vm._l(_vm.filters, function(filter2) {
                  return _c("el-checkbox", { key: filter2.value, attrs: { label: filter2.value } }, [_vm._v(_vm._s(filter2.text))]);
                }), 1)
              ], 1)
            ], 1),
            _c("div", { staticClass: "el-table-filter__bottom" }, [
              _c("button", {
                class: { "is-disabled": _vm.filteredValue.length === 0 },
                attrs: { disabled: _vm.filteredValue.length === 0 },
                on: { click: _vm.handleConfirm }
              }, [_vm._v(_vm._s(_vm.t("el.table.confirmFilter")))]),
              _c("button", { on: { click: _vm.handleReset } }, [
                _vm._v(_vm._s(_vm.t("el.table.resetFilter")))
              ])
            ])
          ]) : _c("div", {
            directives: [
              {
                name: "clickoutside",
                rawName: "v-clickoutside",
                value: _vm.handleOutsideClick,
                expression: "handleOutsideClick"
              },
              {
                name: "show",
                rawName: "v-show",
                value: _vm.showPopper,
                expression: "showPopper"
              }
            ],
            staticClass: "el-table-filter"
          }, [
            _c("ul", { staticClass: "el-table-filter__list" }, [
              _c("li", {
                staticClass: "el-table-filter__list-item",
                class: {
                  "is-active": _vm.filterValue === void 0 || _vm.filterValue === null
                },
                on: {
                  click: function($event) {
                    _vm.handleSelect(null);
                  }
                }
              }, [_vm._v(_vm._s(_vm.t("el.table.clearFilter")))]),
              _vm._l(_vm.filters, function(filter2) {
                return _c("li", {
                  key: filter2.value,
                  staticClass: "el-table-filter__list-item",
                  class: { "is-active": _vm.isActive(filter2) },
                  attrs: { label: filter2.value },
                  on: {
                    click: function($event) {
                      _vm.handleSelect(filter2.value);
                    }
                  }
                }, [_vm._v(_vm._s(filter2.text))]);
              })
            ], 2)
          ])
        ]);
      };
      var filter_panelvue_type_template_id_7f2c919f_staticRenderFns = [];
      filter_panelvue_type_template_id_7f2c919f_render._withStripped = true;
      var dropdowns = [];
      !external_vue_default.a.prototype.$isServer && document.addEventListener("click", function(event2) {
        dropdowns.forEach(function(dropdown2) {
          var target2 = event2.target;
          if (!dropdown2 || !dropdown2.$el)
            return;
          if (target2 === dropdown2.$el || dropdown2.$el.contains(target2)) {
            return;
          }
          dropdown2.handleOutsideClick && dropdown2.handleOutsideClick(event2);
        });
      });
      var src_dropdown = {
        open: function open4(instance) {
          if (instance) {
            dropdowns.push(instance);
          }
        },
        close: function close4(instance) {
          var index2 = dropdowns.indexOf(instance);
          if (index2 !== -1) {
            dropdowns.splice(instance, 1);
          }
        }
      };
      var checkbox_group_ = __webpack_require__(31);
      var checkbox_group_default = /* @__PURE__ */ __webpack_require__.n(checkbox_group_);
      var filter_panelvue_type_script_lang_js_ = {
        name: "ElTableFilterPanel",
        mixins: [vue_popper_default.a, locale_default.a],
        directives: {
          Clickoutside: clickoutside_default.a
        },
        components: {
          ElCheckbox: checkbox_default.a,
          ElCheckboxGroup: checkbox_group_default.a,
          ElScrollbar: scrollbar_default.a
        },
        props: {
          placement: {
            type: String,
            default: "bottom-end"
          }
        },
        methods: {
          isActive: function isActive(filter2) {
            return filter2.value === this.filterValue;
          },
          handleOutsideClick: function handleOutsideClick() {
            var _this = this;
            setTimeout(function() {
              _this.showPopper = false;
            }, 16);
          },
          handleConfirm: function handleConfirm() {
            this.confirmFilter(this.filteredValue);
            this.handleOutsideClick();
          },
          handleReset: function handleReset() {
            this.filteredValue = [];
            this.confirmFilter(this.filteredValue);
            this.handleOutsideClick();
          },
          handleSelect: function handleSelect(filterValue) {
            this.filterValue = filterValue;
            if (typeof filterValue !== "undefined" && filterValue !== null) {
              this.confirmFilter(this.filteredValue);
            } else {
              this.confirmFilter([]);
            }
            this.handleOutsideClick();
          },
          confirmFilter: function confirmFilter2(filteredValue) {
            this.table.store.commit("filterChange", {
              column: this.column,
              values: filteredValue
            });
            this.table.store.updateAllSelected();
          }
        },
        data: function data25() {
          return {
            table: null,
            cell: null,
            column: null
          };
        },
        computed: {
          filters: function filters() {
            return this.column && this.column.filters;
          },
          filterValue: {
            get: function get7() {
              return (this.column.filteredValue || [])[0];
            },
            set: function set3(value6) {
              if (this.filteredValue) {
                if (typeof value6 !== "undefined" && value6 !== null) {
                  this.filteredValue.splice(0, 1, value6);
                } else {
                  this.filteredValue.splice(0, 1);
                }
              }
            }
          },
          filteredValue: {
            get: function get7() {
              if (this.column) {
                return this.column.filteredValue || [];
              }
              return [];
            },
            set: function set3(value6) {
              if (this.column) {
                this.column.filteredValue = value6;
              }
            }
          },
          multiple: function multiple() {
            if (this.column) {
              return this.column.filterMultiple;
            }
            return true;
          }
        },
        mounted: function mounted18() {
          var _this2 = this;
          this.popperElm = this.$el;
          this.referenceElm = this.cell;
          this.table.bodyWrapper.addEventListener("scroll", function() {
            _this2.updatePopper();
          });
          this.$watch("showPopper", function(value6) {
            if (_this2.column)
              _this2.column.filterOpened = value6;
            if (value6) {
              src_dropdown.open(_this2);
            } else {
              src_dropdown.close(_this2);
            }
          });
        },
        watch: {
          showPopper: function showPopper2(val) {
            if (val === true && parseInt(this.popperJS._popper.style.zIndex, 10) < popup_["PopupManager"].zIndex) {
              this.popperJS._popper.style.zIndex = popup_["PopupManager"].nextZIndex();
            }
          }
        }
      };
      var src_filter_panelvue_type_script_lang_js_ = filter_panelvue_type_script_lang_js_;
      var filter_panel_component = normalizeComponent(src_filter_panelvue_type_script_lang_js_, filter_panelvue_type_template_id_7f2c919f_render, filter_panelvue_type_template_id_7f2c919f_staticRenderFns, false, null, null, null);
      filter_panel_component.options.__file = "packages/table/src/filter-panel.vue";
      var filter_panel = filter_panel_component.exports;
      var table_header_extends = Object.assign || function(target2) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target2[key] = source[key];
            }
          }
        }
        return target2;
      };
      var getAllColumns3 = function getAllColumns4(columns2) {
        var result2 = [];
        columns2.forEach(function(column2) {
          if (column2.children) {
            result2.push(column2);
            result2.push.apply(result2, getAllColumns4(column2.children));
          } else {
            result2.push(column2);
          }
        });
        return result2;
      };
      var convertToRows4 = function convertToRows5(originColumns) {
        var maxLevel = 1;
        var traverse2 = function traverse3(column2, parent2) {
          if (parent2) {
            column2.level = parent2.level + 1;
            if (maxLevel < column2.level) {
              maxLevel = column2.level;
            }
          }
          if (column2.children) {
            var colSpan = 0;
            column2.children.forEach(function(subColumn) {
              traverse3(subColumn, column2);
              colSpan += subColumn.colSpan;
            });
            column2.colSpan = colSpan;
          } else {
            column2.colSpan = 1;
          }
        };
        originColumns.forEach(function(column2) {
          column2.level = 1;
          traverse2(column2);
        });
        var rows = [];
        for (var i = 0; i < maxLevel; i++) {
          rows.push([]);
        }
        var allColumns = getAllColumns3(originColumns);
        allColumns.forEach(function(column2) {
          if (!column2.children) {
            column2.rowSpan = maxLevel - column2.level + 1;
          } else {
            column2.rowSpan = 1;
          }
          rows[column2.level - 1].push(column2);
        });
        return rows;
      };
      var table_header = {
        name: "ElTableHeader",
        mixins: [layout_observer],
        render: function render37(h) {
          var _this = this;
          var originColumns = this.store.states.originColumns;
          var columnRows = convertToRows4(originColumns, this.columns);
          var isGroup3 = columnRows.length > 1;
          if (isGroup3)
            this.$parent.isGroup = true;
          return h("table", {
            "class": "el-table__header",
            attrs: {
              cellspacing: "0",
              cellpadding: "0",
              border: "0"
            }
          }, [h("colgroup", [this.columns.map(function(column2) {
            return h("col", {
              attrs: { name: column2.id },
              key: column2.id
            });
          }), this.hasGutter ? h("col", {
            attrs: { name: "gutter" }
          }) : ""]), h("thead", { "class": [{ "is-group": isGroup3, "has-gutter": this.hasGutter }] }, [this._l(columnRows, function(columns2, rowIndex) {
            return h("tr", {
              style: _this.getHeaderRowStyle(rowIndex),
              "class": _this.getHeaderRowClass(rowIndex)
            }, [columns2.map(function(column2, cellIndex) {
              return h("th", {
                attrs: {
                  colspan: column2.colSpan,
                  rowspan: column2.rowSpan
                },
                on: {
                  "mousemove": function mousemove($event) {
                    return _this.handleMouseMove($event, column2);
                  },
                  "mouseout": _this.handleMouseOut,
                  "mousedown": function mousedown($event) {
                    return _this.handleMouseDown($event, column2);
                  },
                  "click": function click($event) {
                    return _this.handleHeaderClick($event, column2);
                  },
                  "contextmenu": function contextmenu($event) {
                    return _this.handleHeaderContextMenu($event, column2);
                  }
                },
                style: _this.getHeaderCellStyle(rowIndex, cellIndex, columns2, column2),
                "class": _this.getHeaderCellClass(rowIndex, cellIndex, columns2, column2),
                key: column2.id
              }, [h("div", { "class": ["cell", column2.filteredValue && column2.filteredValue.length > 0 ? "highlight" : "", column2.labelClassName] }, [column2.renderHeader ? column2.renderHeader.call(_this._renderProxy, h, { column: column2, $index: cellIndex, store: _this.store, _self: _this.$parent.$vnode.context }) : column2.label, column2.sortable ? h("span", {
                "class": "caret-wrapper",
                on: {
                  "click": function click($event) {
                    return _this.handleSortClick($event, column2);
                  }
                }
              }, [h("i", {
                "class": "sort-caret ascending",
                on: {
                  "click": function click($event) {
                    return _this.handleSortClick($event, column2, "ascending");
                  }
                }
              }), h("i", {
                "class": "sort-caret descending",
                on: {
                  "click": function click($event) {
                    return _this.handleSortClick($event, column2, "descending");
                  }
                }
              })]) : "", column2.filterable ? h("span", {
                "class": "el-table__column-filter-trigger",
                on: {
                  "click": function click($event) {
                    return _this.handleFilterClick($event, column2);
                  }
                }
              }, [h("i", { "class": ["el-icon-arrow-down", column2.filterOpened ? "el-icon-arrow-up" : ""] })]) : ""])]);
            }), _this.hasGutter ? h("th", { "class": "el-table__cell gutter" }) : ""]);
          })])]);
        },
        props: {
          fixed: String,
          store: {
            required: true
          },
          border: Boolean,
          defaultSort: {
            type: Object,
            default: function _default116() {
              return {
                prop: "",
                order: ""
              };
            }
          }
        },
        components: {
          ElCheckbox: checkbox_default.a
        },
        computed: table_header_extends({
          table: function table2() {
            return this.$parent;
          },
          hasGutter: function hasGutter() {
            return !this.fixed && this.tableLayout.gutterWidth;
          }
        }, mapStates({
          columns: "columns",
          isAllSelected: "isAllSelected",
          leftFixedLeafCount: "fixedLeafColumnsLength",
          rightFixedLeafCount: "rightFixedLeafColumnsLength",
          columnsCount: function columnsCount(states) {
            return states.columns.length;
          },
          leftFixedCount: function leftFixedCount(states) {
            return states.fixedColumns.length;
          },
          rightFixedCount: function rightFixedCount(states) {
            return states.rightFixedColumns.length;
          }
        })),
        created: function created20() {
          this.filterPanels = {};
        },
        mounted: function mounted18() {
          var _this2 = this;
          this.$nextTick(function() {
            var _defaultSort = _this2.defaultSort, prop = _defaultSort.prop, order = _defaultSort.order;
            var init2 = true;
            _this2.store.commit("sort", { prop, order, init: init2 });
          });
        },
        beforeDestroy: function beforeDestroy13() {
          var panels = this.filterPanels;
          for (var prop in panels) {
            if (panels.hasOwnProperty(prop) && panels[prop]) {
              panels[prop].$destroy(true);
            }
          }
        },
        methods: {
          isCellHidden: function isCellHidden(index2, columns2) {
            var start = 0;
            for (var i = 0; i < index2; i++) {
              start += columns2[i].colSpan;
            }
            var after2 = start + columns2[index2].colSpan - 1;
            if (this.fixed === true || this.fixed === "left") {
              return after2 >= this.leftFixedLeafCount;
            } else if (this.fixed === "right") {
              return start < this.columnsCount - this.rightFixedLeafCount;
            } else {
              return after2 < this.leftFixedLeafCount || start >= this.columnsCount - this.rightFixedLeafCount;
            }
          },
          getHeaderRowStyle: function getHeaderRowStyle(rowIndex) {
            var headerRowStyle = this.table.headerRowStyle;
            if (typeof headerRowStyle === "function") {
              return headerRowStyle.call(null, { rowIndex });
            }
            return headerRowStyle;
          },
          getHeaderRowClass: function getHeaderRowClass(rowIndex) {
            var classes = [];
            var headerRowClassName = this.table.headerRowClassName;
            if (typeof headerRowClassName === "string") {
              classes.push(headerRowClassName);
            } else if (typeof headerRowClassName === "function") {
              classes.push(headerRowClassName.call(null, { rowIndex }));
            }
            return classes.join(" ");
          },
          getHeaderCellStyle: function getHeaderCellStyle(rowIndex, columnIndex, row, column2) {
            var headerCellStyle = this.table.headerCellStyle;
            if (typeof headerCellStyle === "function") {
              return headerCellStyle.call(null, {
                rowIndex,
                columnIndex,
                row,
                column: column2
              });
            }
            return headerCellStyle;
          },
          getHeaderCellClass: function getHeaderCellClass(rowIndex, columnIndex, row, column2) {
            var classes = [column2.id, column2.order, column2.headerAlign, column2.className, column2.labelClassName];
            if (rowIndex === 0 && this.isCellHidden(columnIndex, row)) {
              classes.push("is-hidden");
            }
            if (!column2.children) {
              classes.push("is-leaf");
            }
            if (column2.sortable) {
              classes.push("is-sortable");
            }
            var headerCellClassName = this.table.headerCellClassName;
            if (typeof headerCellClassName === "string") {
              classes.push(headerCellClassName);
            } else if (typeof headerCellClassName === "function") {
              classes.push(headerCellClassName.call(null, {
                rowIndex,
                columnIndex,
                row,
                column: column2
              }));
            }
            classes.push("el-table__cell");
            return classes.join(" ");
          },
          toggleAllSelection: function toggleAllSelection(event2) {
            event2.stopPropagation();
            this.store.commit("toggleAllSelection");
          },
          handleFilterClick: function handleFilterClick(event2, column2) {
            event2.stopPropagation();
            var target2 = event2.target;
            var cell2 = target2.tagName === "TH" ? target2 : target2.parentNode;
            if (Object(dom_["hasClass"])(cell2, "noclick"))
              return;
            cell2 = cell2.querySelector(".el-table__column-filter-trigger") || cell2;
            var table2 = this.$parent;
            var filterPanel = this.filterPanels[column2.id];
            if (filterPanel && column2.filterOpened) {
              filterPanel.showPopper = false;
              return;
            }
            if (!filterPanel) {
              filterPanel = new external_vue_default.a(filter_panel);
              this.filterPanels[column2.id] = filterPanel;
              if (column2.filterPlacement) {
                filterPanel.placement = column2.filterPlacement;
              }
              filterPanel.table = table2;
              filterPanel.cell = cell2;
              filterPanel.column = column2;
              !this.$isServer && filterPanel.$mount(document.createElement("div"));
            }
            setTimeout(function() {
              filterPanel.showPopper = true;
            }, 16);
          },
          handleHeaderClick: function handleHeaderClick(event2, column2) {
            if (!column2.filters && column2.sortable) {
              this.handleSortClick(event2, column2);
            } else if (column2.filterable && !column2.sortable) {
              this.handleFilterClick(event2, column2);
            }
            this.$parent.$emit("header-click", column2, event2);
          },
          handleHeaderContextMenu: function handleHeaderContextMenu(event2, column2) {
            this.$parent.$emit("header-contextmenu", column2, event2);
          },
          handleMouseDown: function handleMouseDown(event2, column2) {
            var _this3 = this;
            if (this.$isServer)
              return;
            if (column2.children && column2.children.length > 0)
              return;
            if (this.draggingColumn && this.border) {
              this.dragging = true;
              this.$parent.resizeProxyVisible = true;
              var table2 = this.$parent;
              var tableEl = table2.$el;
              var tableLeft = tableEl.getBoundingClientRect().left;
              var columnEl = this.$el.querySelector("th." + column2.id);
              var columnRect = columnEl.getBoundingClientRect();
              var minLeft = columnRect.left - tableLeft + 30;
              Object(dom_["addClass"])(columnEl, "noclick");
              this.dragState = {
                startMouseLeft: event2.clientX,
                startLeft: columnRect.right - tableLeft,
                startColumnLeft: columnRect.left - tableLeft,
                tableLeft
              };
              var resizeProxy = table2.$refs.resizeProxy;
              resizeProxy.style.left = this.dragState.startLeft + "px";
              document.onselectstart = function() {
                return false;
              };
              document.ondragstart = function() {
                return false;
              };
              var handleMouseMove = function handleMouseMove2(event3) {
                var deltaLeft = event3.clientX - _this3.dragState.startMouseLeft;
                var proxyLeft = _this3.dragState.startLeft + deltaLeft;
                resizeProxy.style.left = Math.max(minLeft, proxyLeft) + "px";
              };
              var handleMouseUp = function handleMouseUp2() {
                if (_this3.dragging) {
                  var _dragState = _this3.dragState, startColumnLeft = _dragState.startColumnLeft, startLeft = _dragState.startLeft;
                  var finalLeft = parseInt(resizeProxy.style.left, 10);
                  var columnWidth = finalLeft - startColumnLeft;
                  column2.width = column2.realWidth = columnWidth;
                  table2.$emit("header-dragend", column2.width, startLeft - startColumnLeft, column2, event2);
                  _this3.store.scheduleLayout();
                  document.body.style.cursor = "";
                  _this3.dragging = false;
                  _this3.draggingColumn = null;
                  _this3.dragState = {};
                  table2.resizeProxyVisible = false;
                }
                document.removeEventListener("mousemove", handleMouseMove);
                document.removeEventListener("mouseup", handleMouseUp2);
                document.onselectstart = null;
                document.ondragstart = null;
                setTimeout(function() {
                  Object(dom_["removeClass"])(columnEl, "noclick");
                }, 0);
              };
              document.addEventListener("mousemove", handleMouseMove);
              document.addEventListener("mouseup", handleMouseUp);
            }
          },
          handleMouseMove: function handleMouseMove(event2, column2) {
            if (column2.children && column2.children.length > 0)
              return;
            var target2 = event2.target;
            while (target2 && target2.tagName !== "TH") {
              target2 = target2.parentNode;
            }
            if (!column2 || !column2.resizable)
              return;
            if (!this.dragging && this.border) {
              var rect = target2.getBoundingClientRect();
              var bodyStyle = document.body.style;
              if (rect.width > 12 && rect.right - event2.pageX < 8) {
                bodyStyle.cursor = "col-resize";
                if (Object(dom_["hasClass"])(target2, "is-sortable")) {
                  target2.style.cursor = "col-resize";
                }
                this.draggingColumn = column2;
              } else if (!this.dragging) {
                bodyStyle.cursor = "";
                if (Object(dom_["hasClass"])(target2, "is-sortable")) {
                  target2.style.cursor = "pointer";
                }
                this.draggingColumn = null;
              }
            }
          },
          handleMouseOut: function handleMouseOut() {
            if (this.$isServer)
              return;
            document.body.style.cursor = "";
          },
          toggleOrder: function toggleOrder(_ref) {
            var order = _ref.order, sortOrders = _ref.sortOrders;
            if (order === "")
              return sortOrders[0];
            var index2 = sortOrders.indexOf(order || null);
            return sortOrders[index2 > sortOrders.length - 2 ? 0 : index2 + 1];
          },
          handleSortClick: function handleSortClick(event2, column2, givenOrder) {
            event2.stopPropagation();
            var order = column2.order === givenOrder ? null : givenOrder || this.toggleOrder(column2);
            var target2 = event2.target;
            while (target2 && target2.tagName !== "TH") {
              target2 = target2.parentNode;
            }
            if (target2 && target2.tagName === "TH") {
              if (Object(dom_["hasClass"])(target2, "noclick")) {
                Object(dom_["removeClass"])(target2, "noclick");
                return;
              }
            }
            if (!column2.sortable)
              return;
            var states = this.store.states;
            var sortProp = states.sortProp;
            var sortOrder = void 0;
            var sortingColumn = states.sortingColumn;
            if (sortingColumn !== column2 || sortingColumn === column2 && sortingColumn.order === null) {
              if (sortingColumn) {
                sortingColumn.order = null;
              }
              states.sortingColumn = column2;
              sortProp = column2.property;
            }
            if (!order) {
              sortOrder = column2.order = null;
            } else {
              sortOrder = column2.order = order;
            }
            states.sortProp = sortProp;
            states.sortOrder = sortOrder;
            this.store.commit("changeSortCondition");
          }
        },
        data: function data25() {
          return {
            draggingColumn: null,
            dragging: false,
            dragState: {}
          };
        }
      };
      var table_footer_extends = Object.assign || function(target2) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target2[key] = source[key];
            }
          }
        }
        return target2;
      };
      var table_footer = {
        name: "ElTableFooter",
        mixins: [layout_observer],
        render: function render37(h) {
          var _this = this;
          var sums = [];
          if (this.summaryMethod) {
            sums = this.summaryMethod({ columns: this.columns, data: this.store.states.data });
          } else {
            this.columns.forEach(function(column2, index2) {
              if (index2 === 0) {
                sums[index2] = _this.sumText;
                return;
              }
              var values2 = _this.store.states.data.map(function(item) {
                return Number(item[column2.property]);
              });
              var precisions = [];
              var notNumber = true;
              values2.forEach(function(value6) {
                if (!isNaN(value6)) {
                  notNumber = false;
                  var decimal = ("" + value6).split(".")[1];
                  precisions.push(decimal ? decimal.length : 0);
                }
              });
              var precision = Math.max.apply(null, precisions);
              if (!notNumber) {
                sums[index2] = values2.reduce(function(prev, curr) {
                  var value6 = Number(curr);
                  if (!isNaN(value6)) {
                    return parseFloat((prev + curr).toFixed(Math.min(precision, 20)));
                  } else {
                    return prev;
                  }
                }, 0);
              } else {
                sums[index2] = "";
              }
            });
          }
          return h("table", {
            "class": "el-table__footer",
            attrs: {
              cellspacing: "0",
              cellpadding: "0",
              border: "0"
            }
          }, [h("colgroup", [this.columns.map(function(column2) {
            return h("col", {
              attrs: { name: column2.id },
              key: column2.id
            });
          }), this.hasGutter ? h("col", {
            attrs: { name: "gutter" }
          }) : ""]), h("tbody", { "class": [{ "has-gutter": this.hasGutter }] }, [h("tr", [this.columns.map(function(column2, cellIndex) {
            return h("td", {
              key: cellIndex,
              attrs: {
                colspan: column2.colSpan,
                rowspan: column2.rowSpan
              },
              "class": [].concat(_this.getRowClasses(column2, cellIndex), ["el-table__cell"])
            }, [h("div", { "class": ["cell", column2.labelClassName] }, [sums[cellIndex]])]);
          }), this.hasGutter ? h("th", { "class": "el-table__cell gutter" }) : ""])])]);
        },
        props: {
          fixed: String,
          store: {
            required: true
          },
          summaryMethod: Function,
          sumText: String,
          border: Boolean,
          defaultSort: {
            type: Object,
            default: function _default116() {
              return {
                prop: "",
                order: ""
              };
            }
          }
        },
        computed: table_footer_extends({
          table: function table2() {
            return this.$parent;
          },
          hasGutter: function hasGutter() {
            return !this.fixed && this.tableLayout.gutterWidth;
          }
        }, mapStates({
          columns: "columns",
          isAllSelected: "isAllSelected",
          leftFixedLeafCount: "fixedLeafColumnsLength",
          rightFixedLeafCount: "rightFixedLeafColumnsLength",
          columnsCount: function columnsCount(states) {
            return states.columns.length;
          },
          leftFixedCount: function leftFixedCount(states) {
            return states.fixedColumns.length;
          },
          rightFixedCount: function rightFixedCount(states) {
            return states.rightFixedColumns.length;
          }
        })),
        methods: {
          isCellHidden: function isCellHidden(index2, columns2, column2) {
            if (this.fixed === true || this.fixed === "left") {
              return index2 >= this.leftFixedLeafCount;
            } else if (this.fixed === "right") {
              var before2 = 0;
              for (var i = 0; i < index2; i++) {
                before2 += columns2[i].colSpan;
              }
              return before2 < this.columnsCount - this.rightFixedLeafCount;
            } else if (!this.fixed && column2.fixed) {
              return true;
            } else {
              return index2 < this.leftFixedCount || index2 >= this.columnsCount - this.rightFixedCount;
            }
          },
          getRowClasses: function getRowClasses(column2, cellIndex) {
            var classes = [column2.id, column2.align, column2.labelClassName];
            if (column2.className) {
              classes.push(column2.className);
            }
            if (this.isCellHidden(cellIndex, this.columns, column2)) {
              classes.push("is-hidden");
            }
            if (!column2.children) {
              classes.push("is-leaf");
            }
            return classes;
          }
        }
      };
      var tablevue_type_script_lang_js_extends = Object.assign || function(target2) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target2[key] = source[key];
            }
          }
        }
        return target2;
      };
      var tableIdSeed = 1;
      var tablevue_type_script_lang_js_ = {
        name: "ElTable",
        mixins: [locale_default.a, migrating_default.a],
        directives: {
          Mousewheel: directives_mousewheel
        },
        props: {
          data: {
            type: Array,
            default: function _default116() {
              return [];
            }
          },
          size: String,
          width: [String, Number],
          height: [String, Number],
          maxHeight: [String, Number],
          fit: {
            type: Boolean,
            default: true
          },
          stripe: Boolean,
          border: Boolean,
          rowKey: [String, Function],
          context: {},
          showHeader: {
            type: Boolean,
            default: true
          },
          showSummary: Boolean,
          sumText: String,
          summaryMethod: Function,
          rowClassName: [String, Function],
          rowStyle: [Object, Function],
          cellClassName: [String, Function],
          cellStyle: [Object, Function],
          headerRowClassName: [String, Function],
          headerRowStyle: [Object, Function],
          headerCellClassName: [String, Function],
          headerCellStyle: [Object, Function],
          highlightCurrentRow: Boolean,
          currentRowKey: [String, Number],
          emptyText: String,
          expandRowKeys: Array,
          defaultExpandAll: Boolean,
          defaultSort: Object,
          tooltipEffect: String,
          spanMethod: Function,
          selectOnIndeterminate: {
            type: Boolean,
            default: true
          },
          indent: {
            type: Number,
            default: 16
          },
          treeProps: {
            type: Object,
            default: function _default116() {
              return {
                hasChildren: "hasChildren",
                children: "children"
              };
            }
          },
          lazy: Boolean,
          load: Function
        },
        components: {
          TableHeader: table_header,
          TableFooter: table_footer,
          TableBody: table_body,
          ElCheckbox: checkbox_default.a
        },
        methods: {
          getMigratingConfig: function getMigratingConfig2() {
            return {
              events: {
                expand: "expand is renamed to expand-change"
              }
            };
          },
          setCurrentRow: function setCurrentRow2(row) {
            this.store.commit("setCurrentRow", row);
          },
          toggleRowSelection: function toggleRowSelection(row, selected) {
            this.store.toggleRowSelection(row, selected, false);
            this.store.updateAllSelected();
          },
          toggleRowExpansion: function toggleRowExpansion(row, expanded) {
            this.store.toggleRowExpansionAdapter(row, expanded);
          },
          clearSelection: function clearSelection() {
            this.store.clearSelection();
          },
          clearFilter: function clearFilter(columnKeys) {
            this.store.clearFilter(columnKeys);
          },
          clearSort: function clearSort2() {
            this.store.clearSort();
          },
          handleMouseLeave: function handleMouseLeave() {
            this.store.commit("setHoverRow", null);
            if (this.hoverState)
              this.hoverState = null;
          },
          updateScrollY: function updateScrollY() {
            var changed = this.layout.updateScrollY();
            if (changed) {
              this.layout.notifyObservers("scrollable");
              this.layout.updateColumnsWidth();
            }
          },
          handleFixedMousewheel: function handleFixedMousewheel(event2, data25) {
            var bodyWrapper = this.bodyWrapper;
            if (Math.abs(data25.spinY) > 0) {
              var currentScrollTop = bodyWrapper.scrollTop;
              if (data25.pixelY < 0 && currentScrollTop !== 0) {
                event2.preventDefault();
              }
              if (data25.pixelY > 0 && bodyWrapper.scrollHeight - bodyWrapper.clientHeight > currentScrollTop) {
                event2.preventDefault();
              }
              bodyWrapper.scrollTop += Math.ceil(data25.pixelY / 5);
            } else {
              bodyWrapper.scrollLeft += Math.ceil(data25.pixelX / 5);
            }
          },
          handleHeaderFooterMousewheel: function handleHeaderFooterMousewheel(event2, data25) {
            var pixelX = data25.pixelX, pixelY = data25.pixelY;
            if (Math.abs(pixelX) >= Math.abs(pixelY)) {
              this.bodyWrapper.scrollLeft += data25.pixelX / 5;
            }
          },
          syncPostion: Object(external_throttle_debounce_["throttle"])(20, function() {
            var _bodyWrapper = this.bodyWrapper, scrollLeft = _bodyWrapper.scrollLeft, scrollTop = _bodyWrapper.scrollTop, offsetWidth = _bodyWrapper.offsetWidth, scrollWidth = _bodyWrapper.scrollWidth;
            var _$refs = this.$refs, headerWrapper = _$refs.headerWrapper, footerWrapper = _$refs.footerWrapper, fixedBodyWrapper = _$refs.fixedBodyWrapper, rightFixedBodyWrapper = _$refs.rightFixedBodyWrapper;
            if (headerWrapper)
              headerWrapper.scrollLeft = scrollLeft;
            if (footerWrapper)
              footerWrapper.scrollLeft = scrollLeft;
            if (fixedBodyWrapper)
              fixedBodyWrapper.scrollTop = scrollTop;
            if (rightFixedBodyWrapper)
              rightFixedBodyWrapper.scrollTop = scrollTop;
            var maxScrollLeftPosition = scrollWidth - offsetWidth - 1;
            if (scrollLeft >= maxScrollLeftPosition) {
              this.scrollPosition = "right";
            } else if (scrollLeft === 0) {
              this.scrollPosition = "left";
            } else {
              this.scrollPosition = "middle";
            }
          }),
          bindEvents: function bindEvents() {
            this.bodyWrapper.addEventListener("scroll", this.syncPostion, { passive: true });
            if (this.fit) {
              Object(resize_event_["addResizeListener"])(this.$el, this.resizeListener);
            }
          },
          unbindEvents: function unbindEvents() {
            this.bodyWrapper.removeEventListener("scroll", this.syncPostion, { passive: true });
            if (this.fit) {
              Object(resize_event_["removeResizeListener"])(this.$el, this.resizeListener);
            }
          },
          resizeListener: function resizeListener() {
            if (!this.$ready)
              return;
            var shouldUpdateLayout = false;
            var el = this.$el;
            var _resizeState = this.resizeState, oldWidth = _resizeState.width, oldHeight = _resizeState.height;
            var width2 = el.offsetWidth;
            if (oldWidth !== width2) {
              shouldUpdateLayout = true;
            }
            var height3 = el.offsetHeight;
            if ((this.height || this.shouldUpdateHeight) && oldHeight !== height3) {
              shouldUpdateLayout = true;
            }
            if (shouldUpdateLayout) {
              this.resizeState.width = width2;
              this.resizeState.height = height3;
              this.doLayout();
            }
          },
          doLayout: function doLayout() {
            if (this.shouldUpdateHeight) {
              this.layout.updateElsHeight();
            }
            this.layout.updateColumnsWidth();
          },
          sort: function sort2(prop, order) {
            this.store.commit("sort", { prop, order });
          },
          toggleAllSelection: function toggleAllSelection() {
            this.store.commit("toggleAllSelection");
          }
        },
        computed: tablevue_type_script_lang_js_extends({
          tableSize: function tableSize() {
            return this.size || (this.$ELEMENT || {}).size;
          },
          bodyWrapper: function bodyWrapper() {
            return this.$refs.bodyWrapper;
          },
          shouldUpdateHeight: function shouldUpdateHeight() {
            return this.height || this.maxHeight || this.fixedColumns.length > 0 || this.rightFixedColumns.length > 0;
          },
          bodyWidth: function bodyWidth() {
            var _layout = this.layout, bodyWidth2 = _layout.bodyWidth, scrollY = _layout.scrollY, gutterWidth = _layout.gutterWidth;
            return bodyWidth2 ? bodyWidth2 - (scrollY ? gutterWidth : 0) + "px" : "";
          },
          bodyHeight: function bodyHeight() {
            var _layout2 = this.layout, _layout2$headerHeight = _layout2.headerHeight, headerHeight = _layout2$headerHeight === void 0 ? 0 : _layout2$headerHeight, bodyHeight2 = _layout2.bodyHeight, _layout2$footerHeight = _layout2.footerHeight, footerHeight = _layout2$footerHeight === void 0 ? 0 : _layout2$footerHeight;
            if (this.height) {
              return {
                height: bodyHeight2 ? bodyHeight2 + "px" : ""
              };
            } else if (this.maxHeight) {
              var maxHeight2 = parseHeight(this.maxHeight);
              if (typeof maxHeight2 === "number") {
                return {
                  "max-height": maxHeight2 - footerHeight - (this.showHeader ? headerHeight : 0) + "px"
                };
              }
            }
            return {};
          },
          fixedBodyHeight: function fixedBodyHeight() {
            if (this.height) {
              return {
                height: this.layout.fixedBodyHeight ? this.layout.fixedBodyHeight + "px" : ""
              };
            } else if (this.maxHeight) {
              var maxHeight2 = parseHeight(this.maxHeight);
              if (typeof maxHeight2 === "number") {
                maxHeight2 = this.layout.scrollX ? maxHeight2 - this.layout.gutterWidth : maxHeight2;
                if (this.showHeader) {
                  maxHeight2 -= this.layout.headerHeight;
                }
                maxHeight2 -= this.layout.footerHeight;
                return {
                  "max-height": maxHeight2 + "px"
                };
              }
            }
            return {};
          },
          fixedHeight: function fixedHeight() {
            if (this.maxHeight) {
              if (this.showSummary) {
                return {
                  bottom: 0
                };
              }
              return {
                bottom: this.layout.scrollX && this.data.length ? this.layout.gutterWidth + "px" : ""
              };
            } else {
              if (this.showSummary) {
                return {
                  height: this.layout.tableHeight ? this.layout.tableHeight + "px" : ""
                };
              }
              return {
                height: this.layout.viewportHeight ? this.layout.viewportHeight + "px" : ""
              };
            }
          },
          emptyBlockStyle: function emptyBlockStyle() {
            if (this.data && this.data.length)
              return null;
            var height3 = "100%";
            if (this.layout.appendHeight) {
              height3 = "calc(100% - " + this.layout.appendHeight + "px)";
            }
            return {
              width: this.bodyWidth,
              height: height3
            };
          }
        }, mapStates({
          selection: "selection",
          columns: "columns",
          tableData: "data",
          fixedColumns: "fixedColumns",
          rightFixedColumns: "rightFixedColumns"
        })),
        watch: {
          height: {
            immediate: true,
            handler: function handler2(value6) {
              this.layout.setHeight(value6);
            }
          },
          maxHeight: {
            immediate: true,
            handler: function handler2(value6) {
              this.layout.setMaxHeight(value6);
            }
          },
          currentRowKey: {
            immediate: true,
            handler: function handler2(value6) {
              if (!this.rowKey)
                return;
              this.store.setCurrentRowKey(value6);
            }
          },
          data: {
            immediate: true,
            handler: function handler2(value6) {
              this.store.commit("setData", value6);
            }
          },
          expandRowKeys: {
            immediate: true,
            handler: function handler2(newVal) {
              if (newVal) {
                this.store.setExpandRowKeysAdapter(newVal);
              }
            }
          }
        },
        created: function created20() {
          var _this = this;
          this.tableId = "el-table_" + tableIdSeed++;
          this.debouncedUpdateLayout = Object(external_throttle_debounce_["debounce"])(50, function() {
            return _this.doLayout();
          });
        },
        mounted: function mounted18() {
          var _this2 = this;
          this.bindEvents();
          this.store.updateColumns();
          this.doLayout();
          this.resizeState = {
            width: this.$el.offsetWidth,
            height: this.$el.offsetHeight
          };
          this.store.states.columns.forEach(function(column2) {
            if (column2.filteredValue && column2.filteredValue.length) {
              _this2.store.commit("filterChange", {
                column: column2,
                values: column2.filteredValue,
                silent: true
              });
            }
          });
          this.$ready = true;
        },
        destroyed: function destroyed17() {
          this.unbindEvents();
        },
        data: function data25() {
          var _treeProps = this.treeProps, _treeProps$hasChildre = _treeProps.hasChildren, hasChildren = _treeProps$hasChildre === void 0 ? "hasChildren" : _treeProps$hasChildre, _treeProps$children = _treeProps.children, children = _treeProps$children === void 0 ? "children" : _treeProps$children;
          this.store = createStore(this, {
            rowKey: this.rowKey,
            defaultExpandAll: this.defaultExpandAll,
            selectOnIndeterminate: this.selectOnIndeterminate,
            indent: this.indent,
            lazy: this.lazy,
            lazyColumnIdentifier: hasChildren,
            childrenColumnName: children
          });
          var layout = new table_layout({
            store: this.store,
            table: this,
            fit: this.fit,
            showHeader: this.showHeader
          });
          return {
            layout,
            isHidden: false,
            renderExpanded: null,
            resizeProxyVisible: false,
            resizeState: {
              width: null,
              height: null
            },
            isGroup: false,
            scrollPosition: "left"
          };
        }
      };
      var src_tablevue_type_script_lang_js_ = tablevue_type_script_lang_js_;
      var table_component = normalizeComponent(src_tablevue_type_script_lang_js_, tablevue_type_template_id_493fe34e_render, tablevue_type_template_id_493fe34e_staticRenderFns, false, null, null, null);
      table_component.options.__file = "packages/table/src/table.vue";
      var src_table = table_component.exports;
      src_table.install = function(Vue2) {
        Vue2.component(src_table.name, src_table);
      };
      var packages_table = src_table;
      var cellStarts = {
        default: {
          order: ""
        },
        selection: {
          width: 48,
          minWidth: 48,
          realWidth: 48,
          order: "",
          className: "el-table-column--selection"
        },
        expand: {
          width: 48,
          minWidth: 48,
          realWidth: 48,
          order: ""
        },
        index: {
          width: 48,
          minWidth: 48,
          realWidth: 48,
          order: ""
        }
      };
      var cellForced = {
        selection: {
          renderHeader: function renderHeader(h, _ref) {
            var store2 = _ref.store;
            return h("el-checkbox", {
              attrs: {
                disabled: store2.states.data && store2.states.data.length === 0,
                indeterminate: store2.states.selection.length > 0 && !this.isAllSelected,
                value: this.isAllSelected
              },
              nativeOn: {
                "click": this.toggleAllSelection
              }
            });
          },
          renderCell: function renderCell4(h, _ref2) {
            var row = _ref2.row, column2 = _ref2.column, store2 = _ref2.store, $index = _ref2.$index;
            return h("el-checkbox", {
              nativeOn: {
                "click": function click(event2) {
                  return event2.stopPropagation();
                }
              },
              attrs: {
                value: store2.isSelected(row),
                disabled: column2.selectable ? !column2.selectable.call(null, row, $index) : false
              },
              on: {
                "input": function input2() {
                  store2.commit("rowSelectedChanged", row);
                }
              }
            });
          },
          sortable: false,
          resizable: false
        },
        index: {
          renderHeader: function renderHeader(h, _ref3) {
            var column2 = _ref3.column;
            return column2.label || "#";
          },
          renderCell: function renderCell4(h, _ref4) {
            var $index = _ref4.$index, column2 = _ref4.column;
            var i = $index + 1;
            var index2 = column2.index;
            if (typeof index2 === "number") {
              i = $index + index2;
            } else if (typeof index2 === "function") {
              i = index2($index);
            }
            return h("div", [i]);
          },
          sortable: false
        },
        expand: {
          renderHeader: function renderHeader(h, _ref5) {
            var column2 = _ref5.column;
            return column2.label || "";
          },
          renderCell: function renderCell4(h, _ref6) {
            var row = _ref6.row, store2 = _ref6.store;
            var classes = ["el-table__expand-icon"];
            if (store2.states.expandRows.indexOf(row) > -1) {
              classes.push("el-table__expand-icon--expanded");
            }
            var callback = function callback2(e) {
              e.stopPropagation();
              store2.toggleRowExpansion(row);
            };
            return h("div", {
              "class": classes,
              on: {
                "click": callback
              }
            }, [h("i", { "class": "el-icon el-icon-arrow-right" })]);
          },
          sortable: false,
          resizable: false,
          className: "el-table__expand-column"
        }
      };
      function defaultRenderCell(h, _ref7) {
        var row = _ref7.row, column2 = _ref7.column, $index = _ref7.$index;
        var property2 = column2.property;
        var value6 = property2 && Object(util_["getPropByPath"])(row, property2).v;
        if (column2 && column2.formatter) {
          return column2.formatter(row, column2, value6, $index);
        }
        return value6;
      }
      function treeCellPrefix(h, _ref8) {
        var row = _ref8.row, treeNode = _ref8.treeNode, store2 = _ref8.store;
        if (!treeNode)
          return null;
        var ele = [];
        var callback = function callback2(e) {
          e.stopPropagation();
          store2.loadOrToggle(row);
        };
        if (treeNode.indent) {
          ele.push(h("span", { "class": "el-table__indent", style: { "padding-left": treeNode.indent + "px" } }));
        }
        if (typeof treeNode.expanded === "boolean" && !treeNode.noLazyChildren) {
          var expandClasses = ["el-table__expand-icon", treeNode.expanded ? "el-table__expand-icon--expanded" : ""];
          var iconClasses = ["el-icon-arrow-right"];
          if (treeNode.loading) {
            iconClasses = ["el-icon-loading"];
          }
          ele.push(h("div", {
            "class": expandClasses,
            on: {
              "click": callback
            }
          }, [h("i", { "class": iconClasses })]));
        } else {
          ele.push(h("span", { "class": "el-table__placeholder" }));
        }
        return ele;
      }
      var table_column_extends = Object.assign || function(target2) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target2[key] = source[key];
            }
          }
        }
        return target2;
      };
      var columnIdSeed = 1;
      var table_column = {
        name: "ElTableColumn",
        props: {
          type: {
            type: String,
            default: "default"
          },
          label: String,
          className: String,
          labelClassName: String,
          property: String,
          prop: String,
          width: {},
          minWidth: {},
          renderHeader: Function,
          sortable: {
            type: [Boolean, String],
            default: false
          },
          sortMethod: Function,
          sortBy: [String, Function, Array],
          resizable: {
            type: Boolean,
            default: true
          },
          columnKey: String,
          align: String,
          headerAlign: String,
          showTooltipWhenOverflow: Boolean,
          showOverflowTooltip: Boolean,
          fixed: [Boolean, String],
          formatter: Function,
          selectable: Function,
          reserveSelection: Boolean,
          filterMethod: Function,
          filteredValue: Array,
          filters: Array,
          filterPlacement: String,
          filterMultiple: {
            type: Boolean,
            default: true
          },
          index: [Number, Function],
          sortOrders: {
            type: Array,
            default: function _default116() {
              return ["ascending", "descending", null];
            },
            validator: function validator2(val) {
              return val.every(function(order) {
                return ["ascending", "descending", null].indexOf(order) > -1;
              });
            }
          }
        },
        data: function data25() {
          return {
            isSubColumn: false,
            columns: []
          };
        },
        computed: {
          owner: function owner() {
            var parent2 = this.$parent;
            while (parent2 && !parent2.tableId) {
              parent2 = parent2.$parent;
            }
            return parent2;
          },
          columnOrTableParent: function columnOrTableParent() {
            var parent2 = this.$parent;
            while (parent2 && !parent2.tableId && !parent2.columnId) {
              parent2 = parent2.$parent;
            }
            return parent2;
          },
          realWidth: function realWidth() {
            return parseWidth(this.width);
          },
          realMinWidth: function realMinWidth() {
            return parseMinWidth(this.minWidth);
          },
          realAlign: function realAlign() {
            return this.align ? "is-" + this.align : null;
          },
          realHeaderAlign: function realHeaderAlign() {
            return this.headerAlign ? "is-" + this.headerAlign : this.realAlign;
          }
        },
        methods: {
          getPropsData: function getPropsData() {
            var _this = this;
            for (var _len = arguments.length, props2 = Array(_len), _key = 0; _key < _len; _key++) {
              props2[_key] = arguments[_key];
            }
            return props2.reduce(function(prev, cur) {
              if (Array.isArray(cur)) {
                cur.forEach(function(key) {
                  prev[key] = _this[key];
                });
              }
              return prev;
            }, {});
          },
          getColumnElIndex: function getColumnElIndex(children, child) {
            return [].indexOf.call(children, child);
          },
          setColumnWidth: function setColumnWidth(column2) {
            if (this.realWidth) {
              column2.width = this.realWidth;
            }
            if (this.realMinWidth) {
              column2.minWidth = this.realMinWidth;
            }
            if (!column2.minWidth) {
              column2.minWidth = 80;
            }
            column2.realWidth = column2.width === void 0 ? column2.minWidth : column2.width;
            return column2;
          },
          setColumnForcedProps: function setColumnForcedProps(column2) {
            var type3 = column2.type;
            var source = cellForced[type3] || {};
            Object.keys(source).forEach(function(prop) {
              var value6 = source[prop];
              if (value6 !== void 0) {
                column2[prop] = prop === "className" ? column2[prop] + " " + value6 : value6;
              }
            });
            return column2;
          },
          setColumnRenders: function setColumnRenders(column2) {
            var _this2 = this;
            this.$createElement;
            if (this.renderHeader) {
              console.warn("[Element Warn][TableColumn]Comparing to render-header, scoped-slot header is easier to use. We recommend users to use scoped-slot header.");
            } else if (column2.type !== "selection") {
              column2.renderHeader = function(h, scope2) {
                var renderHeader = _this2.$scopedSlots.header;
                return renderHeader ? renderHeader(scope2) : column2.label;
              };
            }
            var originRenderCell = column2.renderCell;
            if (column2.type === "expand") {
              column2.renderCell = function(h, data25) {
                return h("div", { "class": "cell" }, [originRenderCell(h, data25)]);
              };
              this.owner.renderExpanded = function(h, data25) {
                return _this2.$scopedSlots.default ? _this2.$scopedSlots.default(data25) : _this2.$slots.default;
              };
            } else {
              originRenderCell = originRenderCell || defaultRenderCell;
              column2.renderCell = function(h, data25) {
                var children = null;
                if (_this2.$scopedSlots.default) {
                  children = _this2.$scopedSlots.default(data25);
                } else {
                  children = originRenderCell(h, data25);
                }
                var prefix = treeCellPrefix(h, data25);
                var props2 = {
                  class: "cell",
                  style: {}
                };
                if (column2.showOverflowTooltip) {
                  props2.class += " el-tooltip";
                  props2.style = { width: (data25.column.realWidth || data25.column.width) - 1 + "px" };
                }
                return h("div", props2, [prefix, children]);
              };
            }
            return column2;
          },
          registerNormalWatchers: function registerNormalWatchers() {
            var _this3 = this;
            var props2 = ["label", "property", "filters", "filterMultiple", "sortable", "index", "formatter", "className", "labelClassName", "showOverflowTooltip"];
            var aliases = {
              prop: "property",
              realAlign: "align",
              realHeaderAlign: "headerAlign",
              realWidth: "width"
            };
            var allAliases = props2.reduce(function(prev, cur) {
              prev[cur] = cur;
              return prev;
            }, aliases);
            Object.keys(allAliases).forEach(function(key) {
              var columnKey = aliases[key];
              _this3.$watch(key, function(newVal) {
                _this3.columnConfig[columnKey] = newVal;
              });
            });
          },
          registerComplexWatchers: function registerComplexWatchers() {
            var _this4 = this;
            var props2 = ["fixed"];
            var aliases = {
              realWidth: "width",
              realMinWidth: "minWidth"
            };
            var allAliases = props2.reduce(function(prev, cur) {
              prev[cur] = cur;
              return prev;
            }, aliases);
            Object.keys(allAliases).forEach(function(key) {
              var columnKey = aliases[key];
              _this4.$watch(key, function(newVal) {
                _this4.columnConfig[columnKey] = newVal;
                var updateColumns = columnKey === "fixed";
                _this4.owner.store.scheduleLayout(updateColumns);
              });
            });
          }
        },
        components: {
          ElCheckbox: checkbox_default.a
        },
        beforeCreate: function beforeCreate() {
          this.row = {};
          this.column = {};
          this.$index = 0;
          this.columnId = "";
        },
        created: function created20() {
          var parent2 = this.columnOrTableParent;
          this.isSubColumn = this.owner !== parent2;
          this.columnId = (parent2.tableId || parent2.columnId) + "_column_" + columnIdSeed++;
          var type3 = this.type || "default";
          var sortable = this.sortable === "" ? true : this.sortable;
          var defaults = table_column_extends({}, cellStarts[type3], {
            id: this.columnId,
            type: type3,
            property: this.prop || this.property,
            align: this.realAlign,
            headerAlign: this.realHeaderAlign,
            showOverflowTooltip: this.showOverflowTooltip || this.showTooltipWhenOverflow,
            filterable: this.filters || this.filterMethod,
            filteredValue: [],
            filterPlacement: "",
            isColumnGroup: false,
            filterOpened: false,
            sortable,
            index: this.index
          });
          var basicProps = ["columnKey", "label", "className", "labelClassName", "type", "renderHeader", "formatter", "fixed", "resizable"];
          var sortProps = ["sortMethod", "sortBy", "sortOrders"];
          var selectProps = ["selectable", "reserveSelection"];
          var filterProps = ["filterMethod", "filters", "filterMultiple", "filterOpened", "filteredValue", "filterPlacement"];
          var column2 = this.getPropsData(basicProps, sortProps, selectProps, filterProps);
          column2 = mergeOptions2(defaults, column2);
          var chains = compose(this.setColumnRenders, this.setColumnWidth, this.setColumnForcedProps);
          column2 = chains(column2);
          this.columnConfig = column2;
          this.registerNormalWatchers();
          this.registerComplexWatchers();
        },
        mounted: function mounted18() {
          var owner = this.owner;
          var parent2 = this.columnOrTableParent;
          var children = this.isSubColumn ? parent2.$el.children : parent2.$refs.hiddenColumns.children;
          var columnIndex = this.getColumnElIndex(children, this.$el);
          owner.store.commit("insertColumn", this.columnConfig, columnIndex, this.isSubColumn ? parent2.columnConfig : null);
        },
        destroyed: function destroyed17() {
          if (!this.$parent)
            return;
          var parent2 = this.$parent;
          this.owner.store.commit("removeColumn", this.columnConfig, this.isSubColumn ? parent2.columnConfig : null);
        },
        render: function render37(h) {
          return h("div", this.$slots.default);
        }
      };
      table_column.install = function(Vue2) {
        Vue2.component(table_column.name, table_column);
      };
      var packages_table_column = table_column;
      var pickervue_type_template_id_79ae069f_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return !_vm.ranged ? _c("el-input", _vm._b({
          directives: [
            {
              name: "clickoutside",
              rawName: "v-clickoutside",
              value: _vm.handleClose,
              expression: "handleClose"
            }
          ],
          ref: "reference",
          staticClass: "el-date-editor",
          class: "el-date-editor--" + _vm.type,
          attrs: {
            readonly: !_vm.editable || _vm.readonly || _vm.type === "dates" || _vm.type === "week",
            disabled: _vm.pickerDisabled,
            size: _vm.pickerSize,
            name: _vm.name,
            placeholder: _vm.placeholder,
            value: _vm.displayValue,
            validateEvent: false
          },
          on: {
            focus: _vm.handleFocus,
            input: function(value6) {
              return _vm.userInput = value6;
            },
            change: _vm.handleChange
          },
          nativeOn: {
            keydown: function($event) {
              return _vm.handleKeydown($event);
            },
            mouseenter: function($event) {
              return _vm.handleMouseEnter($event);
            },
            mouseleave: function($event) {
              _vm.showClose = false;
            }
          }
        }, "el-input", _vm.firstInputId, false), [
          _c("i", {
            staticClass: "el-input__icon",
            class: _vm.triggerClass,
            attrs: { slot: "prefix" },
            on: { click: _vm.handleFocus },
            slot: "prefix"
          }),
          _vm.haveTrigger ? _c("i", {
            staticClass: "el-input__icon",
            class: [_vm.showClose ? "" + _vm.clearIcon : ""],
            attrs: { slot: "suffix" },
            on: { click: _vm.handleClickIcon },
            slot: "suffix"
          }) : _vm._e()
        ]) : _c("div", {
          directives: [
            {
              name: "clickoutside",
              rawName: "v-clickoutside",
              value: _vm.handleClose,
              expression: "handleClose"
            }
          ],
          ref: "reference",
          staticClass: "el-date-editor el-range-editor el-input__inner",
          class: [
            "el-date-editor--" + _vm.type,
            _vm.pickerSize ? "el-range-editor--" + _vm.pickerSize : "",
            _vm.pickerDisabled ? "is-disabled" : "",
            _vm.pickerVisible ? "is-active" : ""
          ],
          on: {
            click: _vm.handleRangeClick,
            mouseenter: _vm.handleMouseEnter,
            mouseleave: function($event) {
              _vm.showClose = false;
            },
            keydown: _vm.handleKeydown
          }
        }, [
          _c("i", {
            class: ["el-input__icon", "el-range__icon", _vm.triggerClass]
          }),
          _c("input", _vm._b({
            staticClass: "el-range-input",
            attrs: {
              autocomplete: "off",
              placeholder: _vm.startPlaceholder,
              disabled: _vm.pickerDisabled,
              readonly: !_vm.editable || _vm.readonly,
              name: _vm.name && _vm.name[0]
            },
            domProps: { value: _vm.displayValue && _vm.displayValue[0] },
            on: {
              input: _vm.handleStartInput,
              change: _vm.handleStartChange,
              focus: _vm.handleFocus
            }
          }, "input", _vm.firstInputId, false)),
          _vm._t("range-separator", [
            _c("span", { staticClass: "el-range-separator" }, [
              _vm._v(_vm._s(_vm.rangeSeparator))
            ])
          ]),
          _c("input", _vm._b({
            staticClass: "el-range-input",
            attrs: {
              autocomplete: "off",
              placeholder: _vm.endPlaceholder,
              disabled: _vm.pickerDisabled,
              readonly: !_vm.editable || _vm.readonly,
              name: _vm.name && _vm.name[1]
            },
            domProps: { value: _vm.displayValue && _vm.displayValue[1] },
            on: {
              input: _vm.handleEndInput,
              change: _vm.handleEndChange,
              focus: _vm.handleFocus
            }
          }, "input", _vm.secondInputId, false)),
          _vm.haveTrigger ? _c("i", {
            staticClass: "el-input__icon el-range__close-icon",
            class: [_vm.showClose ? "" + _vm.clearIcon : ""],
            on: { click: _vm.handleClickIcon }
          }) : _vm._e()
        ], 2);
      };
      var pickervue_type_template_id_79ae069f_staticRenderFns = [];
      pickervue_type_template_id_79ae069f_render._withStripped = true;
      var date_util_ = __webpack_require__(0);
      var NewPopper = {
        props: {
          appendToBody: vue_popper_default.a.props.appendToBody,
          offset: vue_popper_default.a.props.offset,
          boundariesPadding: vue_popper_default.a.props.boundariesPadding,
          arrowOffset: vue_popper_default.a.props.arrowOffset
        },
        methods: vue_popper_default.a.methods,
        data: function data25() {
          return merge_default()({ visibleArrow: true }, vue_popper_default.a.data);
        },
        beforeDestroy: vue_popper_default.a.beforeDestroy
      };
      var DEFAULT_FORMATS = {
        date: "yyyy-MM-dd",
        month: "yyyy-MM",
        datetime: "yyyy-MM-dd HH:mm:ss",
        time: "HH:mm:ss",
        week: "yyyywWW",
        timerange: "HH:mm:ss",
        daterange: "yyyy-MM-dd",
        monthrange: "yyyy-MM",
        datetimerange: "yyyy-MM-dd HH:mm:ss",
        year: "yyyy"
      };
      var HAVE_TRIGGER_TYPES = ["date", "datetime", "time", "time-select", "week", "month", "year", "daterange", "monthrange", "timerange", "datetimerange", "dates"];
      var pickervue_type_script_lang_js_DATE_FORMATTER = function DATE_FORMATTER(value6, format2) {
        if (format2 === "timestamp")
          return value6.getTime();
        return Object(date_util_["formatDate"])(value6, format2);
      };
      var pickervue_type_script_lang_js_DATE_PARSER = function DATE_PARSER(text, format2) {
        if (format2 === "timestamp")
          return new Date(Number(text));
        return Object(date_util_["parseDate"])(text, format2);
      };
      var RANGE_FORMATTER = function RANGE_FORMATTER2(value6, format2) {
        if (Array.isArray(value6) && value6.length === 2) {
          var start = value6[0];
          var end = value6[1];
          if (start && end) {
            return [pickervue_type_script_lang_js_DATE_FORMATTER(start, format2), pickervue_type_script_lang_js_DATE_FORMATTER(end, format2)];
          }
        }
        return "";
      };
      var RANGE_PARSER = function RANGE_PARSER2(array3, format2, separator) {
        if (!Array.isArray(array3)) {
          array3 = array3.split(separator);
        }
        if (array3.length === 2) {
          var range1 = array3[0];
          var range22 = array3[1];
          return [pickervue_type_script_lang_js_DATE_PARSER(range1, format2), pickervue_type_script_lang_js_DATE_PARSER(range22, format2)];
        }
        return [];
      };
      var TYPE_VALUE_RESOLVER_MAP = {
        default: {
          formatter: function formatter(value6) {
            if (!value6)
              return "";
            return "" + value6;
          },
          parser: function parser(text) {
            if (text === void 0 || text === "")
              return null;
            return text;
          }
        },
        week: {
          formatter: function formatter(value6, format2) {
            var week = Object(date_util_["getWeekNumber"])(value6);
            var month = value6.getMonth();
            var trueDate = new Date(value6);
            if (week === 1 && month === 11) {
              trueDate.setHours(0, 0, 0, 0);
              trueDate.setDate(trueDate.getDate() + 3 - (trueDate.getDay() + 6) % 7);
            }
            var date3 = Object(date_util_["formatDate"])(trueDate, format2);
            date3 = /WW/.test(date3) ? date3.replace(/WW/, week < 10 ? "0" + week : week) : date3.replace(/W/, week);
            return date3;
          },
          parser: function parser(text, format2) {
            return TYPE_VALUE_RESOLVER_MAP.date.parser(text, format2);
          }
        },
        date: {
          formatter: pickervue_type_script_lang_js_DATE_FORMATTER,
          parser: pickervue_type_script_lang_js_DATE_PARSER
        },
        datetime: {
          formatter: pickervue_type_script_lang_js_DATE_FORMATTER,
          parser: pickervue_type_script_lang_js_DATE_PARSER
        },
        daterange: {
          formatter: RANGE_FORMATTER,
          parser: RANGE_PARSER
        },
        monthrange: {
          formatter: RANGE_FORMATTER,
          parser: RANGE_PARSER
        },
        datetimerange: {
          formatter: RANGE_FORMATTER,
          parser: RANGE_PARSER
        },
        timerange: {
          formatter: RANGE_FORMATTER,
          parser: RANGE_PARSER
        },
        time: {
          formatter: pickervue_type_script_lang_js_DATE_FORMATTER,
          parser: pickervue_type_script_lang_js_DATE_PARSER
        },
        month: {
          formatter: pickervue_type_script_lang_js_DATE_FORMATTER,
          parser: pickervue_type_script_lang_js_DATE_PARSER
        },
        year: {
          formatter: pickervue_type_script_lang_js_DATE_FORMATTER,
          parser: pickervue_type_script_lang_js_DATE_PARSER
        },
        number: {
          formatter: function formatter(value6) {
            if (!value6)
              return "";
            return "" + value6;
          },
          parser: function parser(text) {
            var result2 = Number(text);
            if (!isNaN(text)) {
              return result2;
            } else {
              return null;
            }
          }
        },
        dates: {
          formatter: function formatter(value6, format2) {
            return value6.map(function(date3) {
              return pickervue_type_script_lang_js_DATE_FORMATTER(date3, format2);
            });
          },
          parser: function parser(value6, format2) {
            return (typeof value6 === "string" ? value6.split(", ") : value6).map(function(date3) {
              return date3 instanceof Date ? date3 : pickervue_type_script_lang_js_DATE_PARSER(date3, format2);
            });
          }
        }
      };
      var PLACEMENT_MAP = {
        left: "bottom-start",
        center: "bottom",
        right: "bottom-end"
      };
      var parseAsFormatAndType = function parseAsFormatAndType2(value6, customFormat, type3) {
        var rangeSeparator = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : "-";
        if (!value6)
          return null;
        var parser = (TYPE_VALUE_RESOLVER_MAP[type3] || TYPE_VALUE_RESOLVER_MAP["default"]).parser;
        var format2 = customFormat || DEFAULT_FORMATS[type3];
        return parser(value6, format2, rangeSeparator);
      };
      var formatAsFormatAndType = function formatAsFormatAndType2(value6, customFormat, type3) {
        if (!value6)
          return null;
        var formatter = (TYPE_VALUE_RESOLVER_MAP[type3] || TYPE_VALUE_RESOLVER_MAP["default"]).formatter;
        var format2 = customFormat || DEFAULT_FORMATS[type3];
        return formatter(value6, format2);
      };
      var valueEquals2 = function valueEquals3(a, b) {
        var dateEquals = function dateEquals2(a2, b2) {
          var aIsDate = a2 instanceof Date;
          var bIsDate = b2 instanceof Date;
          if (aIsDate && bIsDate) {
            return a2.getTime() === b2.getTime();
          }
          if (!aIsDate && !bIsDate) {
            return a2 === b2;
          }
          return false;
        };
        var aIsArray = a instanceof Array;
        var bIsArray = b instanceof Array;
        if (aIsArray && bIsArray) {
          if (a.length !== b.length) {
            return false;
          }
          return a.every(function(item, index2) {
            return dateEquals(item, b[index2]);
          });
        }
        if (!aIsArray && !bIsArray) {
          return dateEquals(a, b);
        }
        return false;
      };
      var isString2 = function isString3(val) {
        return typeof val === "string" || val instanceof String;
      };
      var pickervue_type_script_lang_js_validator = function validator2(val) {
        return val === null || val === void 0 || isString2(val) || Array.isArray(val) && val.length === 2 && val.every(isString2);
      };
      var pickervue_type_script_lang_js_ = {
        mixins: [emitter_default.a, NewPopper],
        inject: {
          elForm: {
            default: ""
          },
          elFormItem: {
            default: ""
          }
        },
        props: {
          size: String,
          format: String,
          valueFormat: String,
          readonly: Boolean,
          placeholder: String,
          startPlaceholder: String,
          endPlaceholder: String,
          prefixIcon: String,
          clearIcon: {
            type: String,
            default: "el-icon-circle-close"
          },
          name: {
            default: "",
            validator: pickervue_type_script_lang_js_validator
          },
          disabled: Boolean,
          clearable: {
            type: Boolean,
            default: true
          },
          id: {
            default: "",
            validator: pickervue_type_script_lang_js_validator
          },
          popperClass: String,
          editable: {
            type: Boolean,
            default: true
          },
          align: {
            type: String,
            default: "left"
          },
          value: {},
          defaultValue: {},
          defaultTime: {},
          rangeSeparator: {
            default: "-"
          },
          pickerOptions: {},
          unlinkPanels: Boolean,
          validateEvent: {
            type: Boolean,
            default: true
          }
        },
        components: { ElInput: input_default.a },
        directives: { Clickoutside: clickoutside_default.a },
        data: function data25() {
          return {
            pickerVisible: false,
            showClose: false,
            userInput: null,
            valueOnOpen: null,
            unwatchPickerOptions: null
          };
        },
        watch: {
          pickerVisible: function pickerVisible(val) {
            if (this.readonly || this.pickerDisabled)
              return;
            if (val) {
              this.showPicker();
              this.valueOnOpen = Array.isArray(this.value) ? [].concat(this.value) : this.value;
            } else {
              this.hidePicker();
              this.emitChange(this.value);
              this.userInput = null;
              if (this.validateEvent) {
                this.dispatch("ElFormItem", "el.form.blur");
              }
              this.$emit("blur", this);
              this.blur();
            }
          },
          parsedValue: {
            immediate: true,
            handler: function handler2(val) {
              if (this.picker) {
                this.picker.value = val;
              }
            }
          },
          defaultValue: function defaultValue(val) {
            if (this.picker) {
              this.picker.defaultValue = val;
            }
          },
          value: function value6(val, oldVal) {
            if (!valueEquals2(val, oldVal) && !this.pickerVisible && this.validateEvent) {
              this.dispatch("ElFormItem", "el.form.change", val);
            }
          }
        },
        computed: {
          ranged: function ranged() {
            return this.type.indexOf("range") > -1;
          },
          reference: function reference() {
            var reference2 = this.$refs.reference;
            return reference2.$el || reference2;
          },
          refInput: function refInput() {
            if (this.reference) {
              return [].slice.call(this.reference.querySelectorAll("input"));
            }
            return [];
          },
          valueIsEmpty: function valueIsEmpty() {
            var val = this.value;
            if (Array.isArray(val)) {
              for (var i = 0, len = val.length; i < len; i++) {
                if (val[i]) {
                  return false;
                }
              }
            } else {
              if (val) {
                return false;
              }
            }
            return true;
          },
          triggerClass: function triggerClass() {
            return this.prefixIcon || (this.type.indexOf("time") !== -1 ? "el-icon-time" : "el-icon-date");
          },
          selectionMode: function selectionMode() {
            if (this.type === "week") {
              return "week";
            } else if (this.type === "month") {
              return "month";
            } else if (this.type === "year") {
              return "year";
            } else if (this.type === "dates") {
              return "dates";
            }
            return "day";
          },
          haveTrigger: function haveTrigger() {
            if (typeof this.showTrigger !== "undefined") {
              return this.showTrigger;
            }
            return HAVE_TRIGGER_TYPES.indexOf(this.type) !== -1;
          },
          displayValue: function displayValue() {
            var formattedValue = formatAsFormatAndType(this.parsedValue, this.format, this.type, this.rangeSeparator);
            if (Array.isArray(this.userInput)) {
              return [this.userInput[0] || formattedValue && formattedValue[0] || "", this.userInput[1] || formattedValue && formattedValue[1] || ""];
            } else if (this.userInput !== null) {
              return this.userInput;
            } else if (formattedValue) {
              return this.type === "dates" ? formattedValue.join(", ") : formattedValue;
            } else {
              return "";
            }
          },
          parsedValue: function parsedValue() {
            if (!this.value)
              return this.value;
            if (this.type === "time-select")
              return this.value;
            var valueIsDateObject = Object(date_util_["isDateObject"])(this.value) || Array.isArray(this.value) && this.value.every(date_util_["isDateObject"]);
            if (valueIsDateObject) {
              return this.value;
            }
            if (this.valueFormat) {
              return parseAsFormatAndType(this.value, this.valueFormat, this.type, this.rangeSeparator) || this.value;
            }
            return Array.isArray(this.value) ? this.value.map(function(val) {
              return new Date(val);
            }) : new Date(this.value);
          },
          _elFormItemSize: function _elFormItemSize() {
            return (this.elFormItem || {}).elFormItemSize;
          },
          pickerSize: function pickerSize() {
            return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;
          },
          pickerDisabled: function pickerDisabled() {
            return this.disabled || (this.elForm || {}).disabled;
          },
          firstInputId: function firstInputId() {
            var obj = {};
            var id2 = void 0;
            if (this.ranged) {
              id2 = this.id && this.id[0];
            } else {
              id2 = this.id;
            }
            if (id2)
              obj.id = id2;
            return obj;
          },
          secondInputId: function secondInputId() {
            var obj = {};
            var id2 = void 0;
            if (this.ranged) {
              id2 = this.id && this.id[1];
            }
            if (id2)
              obj.id = id2;
            return obj;
          }
        },
        created: function created20() {
          this.popperOptions = {
            boundariesPadding: 0,
            gpuAcceleration: false
          };
          this.placement = PLACEMENT_MAP[this.align] || PLACEMENT_MAP.left;
          this.$on("fieldReset", this.handleFieldReset);
        },
        methods: {
          focus: function focus7() {
            if (!this.ranged) {
              this.$refs.reference.focus();
            } else {
              this.handleFocus();
            }
          },
          blur: function blur6() {
            this.refInput.forEach(function(input2) {
              return input2.blur();
            });
          },
          parseValue: function parseValue(value6) {
            var isParsed = Object(date_util_["isDateObject"])(value6) || Array.isArray(value6) && value6.every(date_util_["isDateObject"]);
            if (this.valueFormat && !isParsed) {
              return parseAsFormatAndType(value6, this.valueFormat, this.type, this.rangeSeparator) || value6;
            } else {
              return value6;
            }
          },
          formatToValue: function formatToValue(date3) {
            var isFormattable = Object(date_util_["isDateObject"])(date3) || Array.isArray(date3) && date3.every(date_util_["isDateObject"]);
            if (this.valueFormat && isFormattable) {
              return formatAsFormatAndType(date3, this.valueFormat, this.type, this.rangeSeparator);
            } else {
              return date3;
            }
          },
          parseString: function parseString(value6) {
            var type3 = Array.isArray(value6) ? this.type : this.type.replace("range", "");
            return parseAsFormatAndType(value6, this.format, type3);
          },
          formatToString: function formatToString(value6) {
            var type3 = Array.isArray(value6) ? this.type : this.type.replace("range", "");
            return formatAsFormatAndType(value6, this.format, type3);
          },
          handleMouseEnter: function handleMouseEnter() {
            if (this.readonly || this.pickerDisabled)
              return;
            if (!this.valueIsEmpty && this.clearable) {
              this.showClose = true;
            }
          },
          handleChange: function handleChange() {
            if (this.userInput) {
              var value6 = this.parseString(this.displayValue);
              if (value6) {
                this.picker.value = value6;
                if (this.isValidValue(value6)) {
                  this.emitInput(value6);
                  this.userInput = null;
                }
              }
            }
            if (this.userInput === "") {
              this.emitInput(null);
              this.emitChange(null);
              this.userInput = null;
            }
          },
          handleStartInput: function handleStartInput(event2) {
            if (this.userInput) {
              this.userInput = [event2.target.value, this.userInput[1]];
            } else {
              this.userInput = [event2.target.value, null];
            }
          },
          handleEndInput: function handleEndInput(event2) {
            if (this.userInput) {
              this.userInput = [this.userInput[0], event2.target.value];
            } else {
              this.userInput = [null, event2.target.value];
            }
          },
          handleStartChange: function handleStartChange(event2) {
            var value6 = this.parseString(this.userInput && this.userInput[0]);
            if (value6) {
              this.userInput = [this.formatToString(value6), this.displayValue[1]];
              var newValue = [value6, this.picker.value && this.picker.value[1]];
              this.picker.value = newValue;
              if (this.isValidValue(newValue)) {
                this.emitInput(newValue);
                this.userInput = null;
              }
            }
          },
          handleEndChange: function handleEndChange(event2) {
            var value6 = this.parseString(this.userInput && this.userInput[1]);
            if (value6) {
              this.userInput = [this.displayValue[0], this.formatToString(value6)];
              var newValue = [this.picker.value && this.picker.value[0], value6];
              this.picker.value = newValue;
              if (this.isValidValue(newValue)) {
                this.emitInput(newValue);
                this.userInput = null;
              }
            }
          },
          handleClickIcon: function handleClickIcon(event2) {
            if (this.readonly || this.pickerDisabled)
              return;
            if (this.showClose) {
              this.valueOnOpen = this.value;
              event2.stopPropagation();
              this.emitInput(null);
              this.emitChange(null);
              this.showClose = false;
              if (this.picker && typeof this.picker.handleClear === "function") {
                this.picker.handleClear();
              }
            } else {
              this.pickerVisible = !this.pickerVisible;
            }
          },
          handleClose: function handleClose() {
            if (!this.pickerVisible)
              return;
            this.pickerVisible = false;
            if (this.type === "dates") {
              var oldValue = parseAsFormatAndType(this.valueOnOpen, this.valueFormat, this.type, this.rangeSeparator) || this.valueOnOpen;
              this.emitInput(oldValue);
            }
          },
          handleFieldReset: function handleFieldReset(initialValue) {
            this.userInput = initialValue === "" ? null : initialValue;
          },
          handleFocus: function handleFocus3() {
            var type3 = this.type;
            if (HAVE_TRIGGER_TYPES.indexOf(type3) !== -1 && !this.pickerVisible) {
              this.pickerVisible = true;
            }
            this.$emit("focus", this);
          },
          handleKeydown: function handleKeydown(event2) {
            var _this = this;
            var keyCode2 = event2.keyCode;
            if (keyCode2 === 27) {
              this.pickerVisible = false;
              event2.stopPropagation();
              return;
            }
            if (keyCode2 === 9) {
              if (!this.ranged) {
                this.handleChange();
                this.pickerVisible = this.picker.visible = false;
                this.blur();
                event2.stopPropagation();
              } else {
                setTimeout(function() {
                  if (_this.refInput.indexOf(document.activeElement) === -1) {
                    _this.pickerVisible = false;
                    _this.blur();
                    event2.stopPropagation();
                  }
                }, 0);
              }
              return;
            }
            if (keyCode2 === 13) {
              if (this.userInput === "" || this.isValidValue(this.parseString(this.displayValue))) {
                this.handleChange();
                this.pickerVisible = this.picker.visible = false;
                this.blur();
              }
              event2.stopPropagation();
              return;
            }
            if (this.userInput) {
              event2.stopPropagation();
              return;
            }
            if (this.picker && this.picker.handleKeydown) {
              this.picker.handleKeydown(event2);
            }
          },
          handleRangeClick: function handleRangeClick() {
            var type3 = this.type;
            if (HAVE_TRIGGER_TYPES.indexOf(type3) !== -1 && !this.pickerVisible) {
              this.pickerVisible = true;
            }
            this.$emit("focus", this);
          },
          hidePicker: function hidePicker() {
            if (this.picker) {
              this.picker.resetView && this.picker.resetView();
              this.pickerVisible = this.picker.visible = false;
              this.destroyPopper();
            }
          },
          showPicker: function showPicker() {
            var _this2 = this;
            if (this.$isServer)
              return;
            if (!this.picker) {
              this.mountPicker();
            }
            this.pickerVisible = this.picker.visible = true;
            this.updatePopper();
            this.picker.value = this.parsedValue;
            this.picker.resetView && this.picker.resetView();
            this.$nextTick(function() {
              _this2.picker.adjustSpinners && _this2.picker.adjustSpinners();
            });
          },
          mountPicker: function mountPicker() {
            var _this3 = this;
            this.picker = new external_vue_default.a(this.panel).$mount();
            this.picker.defaultValue = this.defaultValue;
            this.picker.defaultTime = this.defaultTime;
            this.picker.popperClass = this.popperClass;
            this.popperElm = this.picker.$el;
            this.picker.width = this.reference.getBoundingClientRect().width;
            this.picker.showTime = this.type === "datetime" || this.type === "datetimerange";
            this.picker.selectionMode = this.selectionMode;
            this.picker.unlinkPanels = this.unlinkPanels;
            this.picker.arrowControl = this.arrowControl || this.timeArrowControl || false;
            this.$watch("format", function(format2) {
              _this3.picker.format = format2;
            });
            var updateOptions = function updateOptions2() {
              var options2 = _this3.pickerOptions;
              if (options2 && options2.selectableRange) {
                var ranges = options2.selectableRange;
                var parser = TYPE_VALUE_RESOLVER_MAP.datetimerange.parser;
                var format2 = DEFAULT_FORMATS.timerange;
                ranges = Array.isArray(ranges) ? ranges : [ranges];
                _this3.picker.selectableRange = ranges.map(function(range3) {
                  return parser(range3, format2, _this3.rangeSeparator);
                });
              }
              for (var option2 in options2) {
                if (options2.hasOwnProperty(option2) && option2 !== "selectableRange") {
                  _this3.picker[option2] = options2[option2];
                }
              }
              if (_this3.format) {
                _this3.picker.format = _this3.format;
              }
            };
            updateOptions();
            this.unwatchPickerOptions = this.$watch("pickerOptions", function() {
              return updateOptions();
            }, { deep: true });
            this.$el.appendChild(this.picker.$el);
            this.picker.resetView && this.picker.resetView();
            this.picker.$on("dodestroy", this.doDestroy);
            this.picker.$on("pick", function() {
              var date3 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
              var visible2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
              _this3.userInput = null;
              _this3.pickerVisible = _this3.picker.visible = visible2;
              _this3.emitInput(date3);
              _this3.picker.resetView && _this3.picker.resetView();
            });
            this.picker.$on("select-range", function(start, end, pos) {
              if (_this3.refInput.length === 0)
                return;
              if (!pos || pos === "min") {
                _this3.refInput[0].setSelectionRange(start, end);
                _this3.refInput[0].focus();
              } else if (pos === "max") {
                _this3.refInput[1].setSelectionRange(start, end);
                _this3.refInput[1].focus();
              }
            });
          },
          unmountPicker: function unmountPicker() {
            if (this.picker) {
              this.picker.$destroy();
              this.picker.$off();
              if (typeof this.unwatchPickerOptions === "function") {
                this.unwatchPickerOptions();
              }
              this.picker.$el.parentNode.removeChild(this.picker.$el);
            }
          },
          emitChange: function emitChange(val) {
            if (!valueEquals2(val, this.valueOnOpen)) {
              this.$emit("change", val);
              this.valueOnOpen = val;
              if (this.validateEvent) {
                this.dispatch("ElFormItem", "el.form.change", val);
              }
            }
          },
          emitInput: function emitInput(val) {
            var formatted = this.formatToValue(val);
            if (!valueEquals2(this.value, formatted)) {
              this.$emit("input", formatted);
            }
          },
          isValidValue: function isValidValue(value6) {
            if (!this.picker) {
              this.mountPicker();
            }
            if (this.picker.isValidValue) {
              return value6 && this.picker.isValidValue(value6);
            } else {
              return true;
            }
          }
        }
      };
      var src_pickervue_type_script_lang_js_ = pickervue_type_script_lang_js_;
      var picker_component = normalizeComponent(src_pickervue_type_script_lang_js_, pickervue_type_template_id_79ae069f_render, pickervue_type_template_id_79ae069f_staticRenderFns, false, null, null, null);
      picker_component.options.__file = "packages/date-picker/src/picker.vue";
      var picker = picker_component.exports;
      var datevue_type_template_id_2440d4ea_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("transition", {
          attrs: { name: "el-zoom-in-top" },
          on: { "after-enter": _vm.handleEnter, "after-leave": _vm.handleLeave }
        }, [
          _c("div", {
            directives: [
              {
                name: "show",
                rawName: "v-show",
                value: _vm.visible,
                expression: "visible"
              }
            ],
            staticClass: "el-picker-panel el-date-picker el-popper",
            class: [
              {
                "has-sidebar": _vm.$slots.sidebar || _vm.shortcuts,
                "has-time": _vm.showTime
              },
              _vm.popperClass
            ]
          }, [
            _c("div", { staticClass: "el-picker-panel__body-wrapper" }, [
              _vm._t("sidebar"),
              _vm.shortcuts ? _c("div", { staticClass: "el-picker-panel__sidebar" }, _vm._l(_vm.shortcuts, function(shortcut, key) {
                return _c("button", {
                  key,
                  staticClass: "el-picker-panel__shortcut",
                  attrs: { type: "button" },
                  on: {
                    click: function($event) {
                      _vm.handleShortcutClick(shortcut);
                    }
                  }
                }, [_vm._v(_vm._s(shortcut.text))]);
              }), 0) : _vm._e(),
              _c("div", { staticClass: "el-picker-panel__body" }, [
                _vm.showTime ? _c("div", { staticClass: "el-date-picker__time-header" }, [
                  _c("span", { staticClass: "el-date-picker__editor-wrap" }, [
                    _c("el-input", {
                      attrs: {
                        placeholder: _vm.t("el.datepicker.selectDate"),
                        value: _vm.visibleDate,
                        size: "small"
                      },
                      on: {
                        input: function(val) {
                          return _vm.userInputDate = val;
                        },
                        change: _vm.handleVisibleDateChange
                      }
                    })
                  ], 1),
                  _c("span", {
                    directives: [
                      {
                        name: "clickoutside",
                        rawName: "v-clickoutside",
                        value: _vm.handleTimePickClose,
                        expression: "handleTimePickClose"
                      }
                    ],
                    staticClass: "el-date-picker__editor-wrap"
                  }, [
                    _c("el-input", {
                      ref: "input",
                      attrs: {
                        placeholder: _vm.t("el.datepicker.selectTime"),
                        value: _vm.visibleTime,
                        size: "small"
                      },
                      on: {
                        focus: function($event) {
                          _vm.timePickerVisible = true;
                        },
                        input: function(val) {
                          return _vm.userInputTime = val;
                        },
                        change: _vm.handleVisibleTimeChange
                      }
                    }),
                    _c("time-picker", {
                      ref: "timepicker",
                      attrs: {
                        "time-arrow-control": _vm.arrowControl,
                        visible: _vm.timePickerVisible
                      },
                      on: {
                        pick: _vm.handleTimePick,
                        mounted: _vm.proxyTimePickerDataProperties
                      }
                    })
                  ], 1)
                ]) : _vm._e(),
                _c("div", {
                  directives: [
                    {
                      name: "show",
                      rawName: "v-show",
                      value: _vm.currentView !== "time",
                      expression: "currentView !== 'time'"
                    }
                  ],
                  staticClass: "el-date-picker__header",
                  class: {
                    "el-date-picker__header--bordered": _vm.currentView === "year" || _vm.currentView === "month"
                  }
                }, [
                  _c("button", {
                    staticClass: "el-picker-panel__icon-btn el-date-picker__prev-btn el-icon-d-arrow-left",
                    attrs: {
                      type: "button",
                      "aria-label": _vm.t("el.datepicker.prevYear")
                    },
                    on: { click: _vm.prevYear }
                  }),
                  _c("button", {
                    directives: [
                      {
                        name: "show",
                        rawName: "v-show",
                        value: _vm.currentView === "date",
                        expression: "currentView === 'date'"
                      }
                    ],
                    staticClass: "el-picker-panel__icon-btn el-date-picker__prev-btn el-icon-arrow-left",
                    attrs: {
                      type: "button",
                      "aria-label": _vm.t("el.datepicker.prevMonth")
                    },
                    on: { click: _vm.prevMonth }
                  }),
                  _c("span", {
                    staticClass: "el-date-picker__header-label",
                    attrs: { role: "button" },
                    on: { click: _vm.showYearPicker }
                  }, [_vm._v(_vm._s(_vm.yearLabel))]),
                  _c("span", {
                    directives: [
                      {
                        name: "show",
                        rawName: "v-show",
                        value: _vm.currentView === "date",
                        expression: "currentView === 'date'"
                      }
                    ],
                    staticClass: "el-date-picker__header-label",
                    class: { active: _vm.currentView === "month" },
                    attrs: { role: "button" },
                    on: { click: _vm.showMonthPicker }
                  }, [
                    _vm._v(_vm._s(_vm.t("el.datepicker.month" + (_vm.month + 1))))
                  ]),
                  _c("button", {
                    staticClass: "el-picker-panel__icon-btn el-date-picker__next-btn el-icon-d-arrow-right",
                    attrs: {
                      type: "button",
                      "aria-label": _vm.t("el.datepicker.nextYear")
                    },
                    on: { click: _vm.nextYear }
                  }),
                  _c("button", {
                    directives: [
                      {
                        name: "show",
                        rawName: "v-show",
                        value: _vm.currentView === "date",
                        expression: "currentView === 'date'"
                      }
                    ],
                    staticClass: "el-picker-panel__icon-btn el-date-picker__next-btn el-icon-arrow-right",
                    attrs: {
                      type: "button",
                      "aria-label": _vm.t("el.datepicker.nextMonth")
                    },
                    on: { click: _vm.nextMonth }
                  })
                ]),
                _c("div", { staticClass: "el-picker-panel__content" }, [
                  _c("date-table", {
                    directives: [
                      {
                        name: "show",
                        rawName: "v-show",
                        value: _vm.currentView === "date",
                        expression: "currentView === 'date'"
                      }
                    ],
                    attrs: {
                      "selection-mode": _vm.selectionMode,
                      "first-day-of-week": _vm.firstDayOfWeek,
                      value: _vm.value,
                      "default-value": _vm.defaultValue ? new Date(_vm.defaultValue) : null,
                      date: _vm.date,
                      "cell-class-name": _vm.cellClassName,
                      "disabled-date": _vm.disabledDate
                    },
                    on: { pick: _vm.handleDatePick }
                  }),
                  _c("year-table", {
                    directives: [
                      {
                        name: "show",
                        rawName: "v-show",
                        value: _vm.currentView === "year",
                        expression: "currentView === 'year'"
                      }
                    ],
                    attrs: {
                      value: _vm.value,
                      "default-value": _vm.defaultValue ? new Date(_vm.defaultValue) : null,
                      date: _vm.date,
                      "disabled-date": _vm.disabledDate
                    },
                    on: { pick: _vm.handleYearPick }
                  }),
                  _c("month-table", {
                    directives: [
                      {
                        name: "show",
                        rawName: "v-show",
                        value: _vm.currentView === "month",
                        expression: "currentView === 'month'"
                      }
                    ],
                    attrs: {
                      value: _vm.value,
                      "default-value": _vm.defaultValue ? new Date(_vm.defaultValue) : null,
                      date: _vm.date,
                      "disabled-date": _vm.disabledDate
                    },
                    on: { pick: _vm.handleMonthPick }
                  })
                ], 1)
              ])
            ], 2),
            _c("div", {
              directives: [
                {
                  name: "show",
                  rawName: "v-show",
                  value: _vm.footerVisible && _vm.currentView === "date",
                  expression: "footerVisible && currentView === 'date'"
                }
              ],
              staticClass: "el-picker-panel__footer"
            }, [
              _c("el-button", {
                directives: [
                  {
                    name: "show",
                    rawName: "v-show",
                    value: _vm.selectionMode !== "dates",
                    expression: "selectionMode !== 'dates'"
                  }
                ],
                staticClass: "el-picker-panel__link-btn",
                attrs: { size: "mini", type: "text" },
                on: { click: _vm.changeToNow }
              }, [
                _vm._v("\n        " + _vm._s(_vm.t("el.datepicker.now")) + "\n      ")
              ]),
              _c("el-button", {
                staticClass: "el-picker-panel__link-btn",
                attrs: { plain: "", size: "mini" },
                on: { click: _vm.confirm }
              }, [
                _vm._v("\n        " + _vm._s(_vm.t("el.datepicker.confirm")) + "\n      ")
              ])
            ], 1)
          ])
        ]);
      };
      var datevue_type_template_id_2440d4ea_staticRenderFns = [];
      datevue_type_template_id_2440d4ea_render._withStripped = true;
      var timevue_type_template_id_3d939089_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("transition", {
          attrs: { name: "el-zoom-in-top" },
          on: {
            "after-leave": function($event) {
              _vm.$emit("dodestroy");
            }
          }
        }, [
          _c("div", {
            directives: [
              {
                name: "show",
                rawName: "v-show",
                value: _vm.visible,
                expression: "visible"
              }
            ],
            staticClass: "el-time-panel el-popper",
            class: _vm.popperClass
          }, [
            _c("div", {
              staticClass: "el-time-panel__content",
              class: { "has-seconds": _vm.showSeconds }
            }, [
              _c("time-spinner", {
                ref: "spinner",
                attrs: {
                  "arrow-control": _vm.useArrow,
                  "show-seconds": _vm.showSeconds,
                  "am-pm-mode": _vm.amPmMode,
                  date: _vm.date
                },
                on: {
                  change: _vm.handleChange,
                  "select-range": _vm.setSelectionRange
                }
              })
            ], 1),
            _c("div", { staticClass: "el-time-panel__footer" }, [
              _c("button", {
                staticClass: "el-time-panel__btn cancel",
                attrs: { type: "button" },
                on: { click: _vm.handleCancel }
              }, [_vm._v(_vm._s(_vm.t("el.datepicker.cancel")))]),
              _c("button", {
                staticClass: "el-time-panel__btn",
                class: { confirm: !_vm.disabled },
                attrs: { type: "button" },
                on: {
                  click: function($event) {
                    _vm.handleConfirm();
                  }
                }
              }, [_vm._v(_vm._s(_vm.t("el.datepicker.confirm")))])
            ])
          ])
        ]);
      };
      var timevue_type_template_id_3d939089_staticRenderFns = [];
      timevue_type_template_id_3d939089_render._withStripped = true;
      var time_spinnervue_type_template_id_1facadeb_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", {
          staticClass: "el-time-spinner",
          class: { "has-seconds": _vm.showSeconds }
        }, [
          !_vm.arrowControl ? [
            _c("el-scrollbar", {
              ref: "hours",
              staticClass: "el-time-spinner__wrapper",
              attrs: {
                "wrap-style": "max-height: inherit;",
                "view-class": "el-time-spinner__list",
                noresize: "",
                tag: "ul"
              },
              nativeOn: {
                mouseenter: function($event) {
                  _vm.emitSelectRange("hours");
                },
                mousemove: function($event) {
                  _vm.adjustCurrentSpinner("hours");
                }
              }
            }, _vm._l(_vm.hoursList, function(disabled, hour) {
              return _c("li", {
                key: hour,
                staticClass: "el-time-spinner__item",
                class: { active: hour === _vm.hours, disabled },
                on: {
                  click: function($event) {
                    _vm.handleClick("hours", {
                      value: hour,
                      disabled
                    });
                  }
                }
              }, [
                _vm._v(_vm._s(("0" + (_vm.amPmMode ? hour % 12 || 12 : hour)).slice(-2)) + _vm._s(_vm.amPm(hour)))
              ]);
            }), 0),
            _c("el-scrollbar", {
              ref: "minutes",
              staticClass: "el-time-spinner__wrapper",
              attrs: {
                "wrap-style": "max-height: inherit;",
                "view-class": "el-time-spinner__list",
                noresize: "",
                tag: "ul"
              },
              nativeOn: {
                mouseenter: function($event) {
                  _vm.emitSelectRange("minutes");
                },
                mousemove: function($event) {
                  _vm.adjustCurrentSpinner("minutes");
                }
              }
            }, _vm._l(_vm.minutesList, function(enabled, key) {
              return _c("li", {
                key,
                staticClass: "el-time-spinner__item",
                class: { active: key === _vm.minutes, disabled: !enabled },
                on: {
                  click: function($event) {
                    _vm.handleClick("minutes", {
                      value: key,
                      disabled: false
                    });
                  }
                }
              }, [_vm._v(_vm._s(("0" + key).slice(-2)))]);
            }), 0),
            _c("el-scrollbar", {
              directives: [
                {
                  name: "show",
                  rawName: "v-show",
                  value: _vm.showSeconds,
                  expression: "showSeconds"
                }
              ],
              ref: "seconds",
              staticClass: "el-time-spinner__wrapper",
              attrs: {
                "wrap-style": "max-height: inherit;",
                "view-class": "el-time-spinner__list",
                noresize: "",
                tag: "ul"
              },
              nativeOn: {
                mouseenter: function($event) {
                  _vm.emitSelectRange("seconds");
                },
                mousemove: function($event) {
                  _vm.adjustCurrentSpinner("seconds");
                }
              }
            }, _vm._l(60, function(second, key) {
              return _c("li", {
                key,
                staticClass: "el-time-spinner__item",
                class: { active: key === _vm.seconds },
                on: {
                  click: function($event) {
                    _vm.handleClick("seconds", {
                      value: key,
                      disabled: false
                    });
                  }
                }
              }, [_vm._v(_vm._s(("0" + key).slice(-2)))]);
            }), 0)
          ] : _vm._e(),
          _vm.arrowControl ? [
            _c("div", {
              staticClass: "el-time-spinner__wrapper is-arrow",
              on: {
                mouseenter: function($event) {
                  _vm.emitSelectRange("hours");
                }
              }
            }, [
              _c("i", {
                directives: [
                  {
                    name: "repeat-click",
                    rawName: "v-repeat-click",
                    value: _vm.decrease,
                    expression: "decrease"
                  }
                ],
                staticClass: "el-time-spinner__arrow el-icon-arrow-up"
              }),
              _c("i", {
                directives: [
                  {
                    name: "repeat-click",
                    rawName: "v-repeat-click",
                    value: _vm.increase,
                    expression: "increase"
                  }
                ],
                staticClass: "el-time-spinner__arrow el-icon-arrow-down"
              }),
              _c("ul", { ref: "hours", staticClass: "el-time-spinner__list" }, _vm._l(_vm.arrowHourList, function(hour, key) {
                return _c("li", {
                  key,
                  staticClass: "el-time-spinner__item",
                  class: {
                    active: hour === _vm.hours,
                    disabled: _vm.hoursList[hour]
                  }
                }, [
                  _vm._v(_vm._s(hour === void 0 ? "" : ("0" + (_vm.amPmMode ? hour % 12 || 12 : hour)).slice(-2) + _vm.amPm(hour)))
                ]);
              }), 0)
            ]),
            _c("div", {
              staticClass: "el-time-spinner__wrapper is-arrow",
              on: {
                mouseenter: function($event) {
                  _vm.emitSelectRange("minutes");
                }
              }
            }, [
              _c("i", {
                directives: [
                  {
                    name: "repeat-click",
                    rawName: "v-repeat-click",
                    value: _vm.decrease,
                    expression: "decrease"
                  }
                ],
                staticClass: "el-time-spinner__arrow el-icon-arrow-up"
              }),
              _c("i", {
                directives: [
                  {
                    name: "repeat-click",
                    rawName: "v-repeat-click",
                    value: _vm.increase,
                    expression: "increase"
                  }
                ],
                staticClass: "el-time-spinner__arrow el-icon-arrow-down"
              }),
              _c("ul", { ref: "minutes", staticClass: "el-time-spinner__list" }, _vm._l(_vm.arrowMinuteList, function(minute, key) {
                return _c("li", {
                  key,
                  staticClass: "el-time-spinner__item",
                  class: { active: minute === _vm.minutes }
                }, [
                  _vm._v("\n          " + _vm._s(minute === void 0 ? "" : ("0" + minute).slice(-2)) + "\n        ")
                ]);
              }), 0)
            ]),
            _vm.showSeconds ? _c("div", {
              staticClass: "el-time-spinner__wrapper is-arrow",
              on: {
                mouseenter: function($event) {
                  _vm.emitSelectRange("seconds");
                }
              }
            }, [
              _c("i", {
                directives: [
                  {
                    name: "repeat-click",
                    rawName: "v-repeat-click",
                    value: _vm.decrease,
                    expression: "decrease"
                  }
                ],
                staticClass: "el-time-spinner__arrow el-icon-arrow-up"
              }),
              _c("i", {
                directives: [
                  {
                    name: "repeat-click",
                    rawName: "v-repeat-click",
                    value: _vm.increase,
                    expression: "increase"
                  }
                ],
                staticClass: "el-time-spinner__arrow el-icon-arrow-down"
              }),
              _c("ul", { ref: "seconds", staticClass: "el-time-spinner__list" }, _vm._l(_vm.arrowSecondList, function(second, key) {
                return _c("li", {
                  key,
                  staticClass: "el-time-spinner__item",
                  class: { active: second === _vm.seconds }
                }, [
                  _vm._v("\n          " + _vm._s(second === void 0 ? "" : ("0" + second).slice(-2)) + "\n        ")
                ]);
              }), 0)
            ]) : _vm._e()
          ] : _vm._e()
        ], 2);
      };
      var time_spinnervue_type_template_id_1facadeb_staticRenderFns = [];
      time_spinnervue_type_template_id_1facadeb_render._withStripped = true;
      var time_spinnervue_type_script_lang_js_ = {
        components: { ElScrollbar: scrollbar_default.a },
        directives: {
          repeatClick: repeat_click
        },
        props: {
          date: {},
          defaultValue: {},
          showSeconds: {
            type: Boolean,
            default: true
          },
          arrowControl: Boolean,
          amPmMode: {
            type: String,
            default: ""
          }
        },
        computed: {
          hours: function hours() {
            return this.date.getHours();
          },
          minutes: function minutes() {
            return this.date.getMinutes();
          },
          seconds: function seconds() {
            return this.date.getSeconds();
          },
          hoursList: function hoursList() {
            return Object(date_util_["getRangeHours"])(this.selectableRange);
          },
          minutesList: function minutesList() {
            return Object(date_util_["getRangeMinutes"])(this.selectableRange, this.hours);
          },
          arrowHourList: function arrowHourList() {
            var hours = this.hours;
            return [hours > 0 ? hours - 1 : void 0, hours, hours < 23 ? hours + 1 : void 0];
          },
          arrowMinuteList: function arrowMinuteList() {
            var minutes = this.minutes;
            return [minutes > 0 ? minutes - 1 : void 0, minutes, minutes < 59 ? minutes + 1 : void 0];
          },
          arrowSecondList: function arrowSecondList() {
            var seconds = this.seconds;
            return [seconds > 0 ? seconds - 1 : void 0, seconds, seconds < 59 ? seconds + 1 : void 0];
          }
        },
        data: function data25() {
          return {
            selectableRange: [],
            currentScrollbar: null
          };
        },
        mounted: function mounted18() {
          var _this = this;
          this.$nextTick(function() {
            !_this.arrowControl && _this.bindScrollEvent();
          });
        },
        methods: {
          increase: function increase() {
            this.scrollDown(1);
          },
          decrease: function decrease() {
            this.scrollDown(-1);
          },
          modifyDateField: function modifyDateField(type3, value6) {
            switch (type3) {
              case "hours":
                this.$emit("change", Object(date_util_["modifyTime"])(this.date, value6, this.minutes, this.seconds));
                break;
              case "minutes":
                this.$emit("change", Object(date_util_["modifyTime"])(this.date, this.hours, value6, this.seconds));
                break;
              case "seconds":
                this.$emit("change", Object(date_util_["modifyTime"])(this.date, this.hours, this.minutes, value6));
                break;
            }
          },
          handleClick: function handleClick(type3, _ref) {
            var value6 = _ref.value, disabled = _ref.disabled;
            if (!disabled) {
              this.modifyDateField(type3, value6);
              this.emitSelectRange(type3);
              this.adjustSpinner(type3, value6);
            }
          },
          emitSelectRange: function emitSelectRange(type3) {
            if (type3 === "hours") {
              this.$emit("select-range", 0, 2);
            } else if (type3 === "minutes") {
              this.$emit("select-range", 3, 5);
            } else if (type3 === "seconds") {
              this.$emit("select-range", 6, 8);
            }
            this.currentScrollbar = type3;
          },
          bindScrollEvent: function bindScrollEvent() {
            var _this2 = this;
            var bindFuntion = function bindFuntion2(type3) {
              _this2.$refs[type3].wrap.onscroll = function(e) {
                _this2.handleScroll(type3, e);
              };
            };
            bindFuntion("hours");
            bindFuntion("minutes");
            bindFuntion("seconds");
          },
          handleScroll: function handleScroll(type3) {
            var value6 = Math.min(Math.round((this.$refs[type3].wrap.scrollTop - (this.scrollBarHeight(type3) * 0.5 - 10) / this.typeItemHeight(type3) + 3) / this.typeItemHeight(type3)), type3 === "hours" ? 23 : 59);
            this.modifyDateField(type3, value6);
          },
          adjustSpinners: function adjustSpinners() {
            this.adjustSpinner("hours", this.hours);
            this.adjustSpinner("minutes", this.minutes);
            this.adjustSpinner("seconds", this.seconds);
          },
          adjustCurrentSpinner: function adjustCurrentSpinner(type3) {
            this.adjustSpinner(type3, this[type3]);
          },
          adjustSpinner: function adjustSpinner(type3, value6) {
            if (this.arrowControl)
              return;
            var el = this.$refs[type3].wrap;
            if (el) {
              el.scrollTop = Math.max(0, value6 * this.typeItemHeight(type3));
            }
          },
          scrollDown: function scrollDown(step3) {
            var _this3 = this;
            if (!this.currentScrollbar) {
              this.emitSelectRange("hours");
            }
            var label = this.currentScrollbar;
            var hoursList = this.hoursList;
            var now2 = this[label];
            if (this.currentScrollbar === "hours") {
              var total = Math.abs(step3);
              step3 = step3 > 0 ? 1 : -1;
              var length = hoursList.length;
              while (length-- && total) {
                now2 = (now2 + step3 + hoursList.length) % hoursList.length;
                if (hoursList[now2]) {
                  continue;
                }
                total--;
              }
              if (hoursList[now2])
                return;
            } else {
              now2 = (now2 + step3 + 60) % 60;
            }
            this.modifyDateField(label, now2);
            this.adjustSpinner(label, now2);
            this.$nextTick(function() {
              return _this3.emitSelectRange(_this3.currentScrollbar);
            });
          },
          amPm: function amPm(hour) {
            var shouldShowAmPm = this.amPmMode.toLowerCase() === "a";
            if (!shouldShowAmPm)
              return "";
            var isCapital = this.amPmMode === "A";
            var content2 = hour < 12 ? " am" : " pm";
            if (isCapital)
              content2 = content2.toUpperCase();
            return content2;
          },
          typeItemHeight: function typeItemHeight(type3) {
            return this.$refs[type3].$el.querySelector("li").offsetHeight;
          },
          scrollBarHeight: function scrollBarHeight(type3) {
            return this.$refs[type3].$el.offsetHeight;
          }
        }
      };
      var basic_time_spinnervue_type_script_lang_js_ = time_spinnervue_type_script_lang_js_;
      var time_spinner_component = normalizeComponent(basic_time_spinnervue_type_script_lang_js_, time_spinnervue_type_template_id_1facadeb_render, time_spinnervue_type_template_id_1facadeb_staticRenderFns, false, null, null, null);
      time_spinner_component.options.__file = "packages/date-picker/src/basic/time-spinner.vue";
      var time_spinner = time_spinner_component.exports;
      var timevue_type_script_lang_js_ = {
        mixins: [locale_default.a],
        components: {
          TimeSpinner: time_spinner
        },
        props: {
          visible: Boolean,
          timeArrowControl: Boolean
        },
        watch: {
          visible: function visible2(val) {
            var _this = this;
            if (val) {
              this.oldValue = this.value;
              this.$nextTick(function() {
                return _this.$refs.spinner.emitSelectRange("hours");
              });
            } else {
              this.needInitAdjust = true;
            }
          },
          value: function value6(newVal) {
            var _this2 = this;
            var date3 = void 0;
            if (newVal instanceof Date) {
              date3 = Object(date_util_["limitTimeRange"])(newVal, this.selectableRange, this.format);
            } else if (!newVal) {
              date3 = this.defaultValue ? new Date(this.defaultValue) : new Date();
            }
            this.date = date3;
            if (this.visible && this.needInitAdjust) {
              this.$nextTick(function(_) {
                return _this2.adjustSpinners();
              });
              this.needInitAdjust = false;
            }
          },
          selectableRange: function selectableRange(val) {
            this.$refs.spinner.selectableRange = val;
          },
          defaultValue: function defaultValue(val) {
            if (!Object(date_util_["isDate"])(this.value)) {
              this.date = val ? new Date(val) : new Date();
            }
          }
        },
        data: function data25() {
          return {
            popperClass: "",
            format: "HH:mm:ss",
            value: "",
            defaultValue: null,
            date: new Date(),
            oldValue: new Date(),
            selectableRange: [],
            selectionRange: [0, 2],
            disabled: false,
            arrowControl: false,
            needInitAdjust: true
          };
        },
        computed: {
          showSeconds: function showSeconds() {
            return (this.format || "").indexOf("ss") !== -1;
          },
          useArrow: function useArrow() {
            return this.arrowControl || this.timeArrowControl || false;
          },
          amPmMode: function amPmMode() {
            if ((this.format || "").indexOf("A") !== -1)
              return "A";
            if ((this.format || "").indexOf("a") !== -1)
              return "a";
            return "";
          }
        },
        methods: {
          handleCancel: function handleCancel() {
            this.$emit("pick", this.oldValue, false);
          },
          handleChange: function handleChange(date3) {
            if (this.visible) {
              this.date = Object(date_util_["clearMilliseconds"])(date3);
              if (this.isValidValue(this.date)) {
                this.$emit("pick", this.date, true);
              }
            }
          },
          setSelectionRange: function setSelectionRange(start, end) {
            this.$emit("select-range", start, end);
            this.selectionRange = [start, end];
          },
          handleConfirm: function handleConfirm() {
            var visible2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
            var first2 = arguments[1];
            if (first2)
              return;
            var date3 = Object(date_util_["clearMilliseconds"])(Object(date_util_["limitTimeRange"])(this.date, this.selectableRange, this.format));
            this.$emit("pick", date3, visible2, first2);
          },
          handleKeydown: function handleKeydown(event2) {
            var keyCode2 = event2.keyCode;
            var mapping = { 38: -1, 40: 1, 37: -1, 39: 1 };
            if (keyCode2 === 37 || keyCode2 === 39) {
              var step3 = mapping[keyCode2];
              this.changeSelectionRange(step3);
              event2.preventDefault();
              return;
            }
            if (keyCode2 === 38 || keyCode2 === 40) {
              var _step = mapping[keyCode2];
              this.$refs.spinner.scrollDown(_step);
              event2.preventDefault();
              return;
            }
          },
          isValidValue: function isValidValue(date3) {
            return Object(date_util_["timeWithinRange"])(date3, this.selectableRange, this.format);
          },
          adjustSpinners: function adjustSpinners() {
            return this.$refs.spinner.adjustSpinners();
          },
          changeSelectionRange: function changeSelectionRange(step3) {
            var list2 = [0, 3].concat(this.showSeconds ? [6] : []);
            var mapping = ["hours", "minutes"].concat(this.showSeconds ? ["seconds"] : []);
            var index2 = list2.indexOf(this.selectionRange[0]);
            var next = (index2 + step3 + list2.length) % list2.length;
            this.$refs.spinner.emitSelectRange(mapping[next]);
          }
        },
        mounted: function mounted18() {
          var _this3 = this;
          this.$nextTick(function() {
            return _this3.handleConfirm(true, true);
          });
          this.$emit("mounted");
        }
      };
      var panel_timevue_type_script_lang_js_ = timevue_type_script_lang_js_;
      var time_component = normalizeComponent(panel_timevue_type_script_lang_js_, timevue_type_template_id_3d939089_render, timevue_type_template_id_3d939089_staticRenderFns, false, null, null, null);
      time_component.options.__file = "packages/date-picker/src/panel/time.vue";
      var panel_time = time_component.exports;
      var year_tablevue_type_template_id_c86ab5e0_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("table", { staticClass: "el-year-table", on: { click: _vm.handleYearTableClick } }, [
          _c("tbody", [
            _c("tr", [
              _c("td", {
                staticClass: "available",
                class: _vm.getCellStyle(_vm.startYear + 0)
              }, [_c("a", { staticClass: "cell" }, [_vm._v(_vm._s(_vm.startYear))])]),
              _c("td", {
                staticClass: "available",
                class: _vm.getCellStyle(_vm.startYear + 1)
              }, [
                _c("a", { staticClass: "cell" }, [
                  _vm._v(_vm._s(_vm.startYear + 1))
                ])
              ]),
              _c("td", {
                staticClass: "available",
                class: _vm.getCellStyle(_vm.startYear + 2)
              }, [
                _c("a", { staticClass: "cell" }, [
                  _vm._v(_vm._s(_vm.startYear + 2))
                ])
              ]),
              _c("td", {
                staticClass: "available",
                class: _vm.getCellStyle(_vm.startYear + 3)
              }, [
                _c("a", { staticClass: "cell" }, [
                  _vm._v(_vm._s(_vm.startYear + 3))
                ])
              ])
            ]),
            _c("tr", [
              _c("td", {
                staticClass: "available",
                class: _vm.getCellStyle(_vm.startYear + 4)
              }, [
                _c("a", { staticClass: "cell" }, [
                  _vm._v(_vm._s(_vm.startYear + 4))
                ])
              ]),
              _c("td", {
                staticClass: "available",
                class: _vm.getCellStyle(_vm.startYear + 5)
              }, [
                _c("a", { staticClass: "cell" }, [
                  _vm._v(_vm._s(_vm.startYear + 5))
                ])
              ]),
              _c("td", {
                staticClass: "available",
                class: _vm.getCellStyle(_vm.startYear + 6)
              }, [
                _c("a", { staticClass: "cell" }, [
                  _vm._v(_vm._s(_vm.startYear + 6))
                ])
              ]),
              _c("td", {
                staticClass: "available",
                class: _vm.getCellStyle(_vm.startYear + 7)
              }, [
                _c("a", { staticClass: "cell" }, [
                  _vm._v(_vm._s(_vm.startYear + 7))
                ])
              ])
            ]),
            _c("tr", [
              _c("td", {
                staticClass: "available",
                class: _vm.getCellStyle(_vm.startYear + 8)
              }, [
                _c("a", { staticClass: "cell" }, [
                  _vm._v(_vm._s(_vm.startYear + 8))
                ])
              ]),
              _c("td", {
                staticClass: "available",
                class: _vm.getCellStyle(_vm.startYear + 9)
              }, [
                _c("a", { staticClass: "cell" }, [
                  _vm._v(_vm._s(_vm.startYear + 9))
                ])
              ]),
              _c("td"),
              _c("td")
            ])
          ])
        ]);
      };
      var year_tablevue_type_template_id_c86ab5e0_staticRenderFns = [];
      year_tablevue_type_template_id_c86ab5e0_render._withStripped = true;
      var year_tablevue_type_script_lang_js_datesInYear = function datesInYear(year) {
        var numOfDays = Object(date_util_["getDayCountOfYear"])(year);
        var firstDay = new Date(year, 0, 1);
        return Object(date_util_["range"])(numOfDays).map(function(n) {
          return Object(date_util_["nextDate"])(firstDay, n);
        });
      };
      var year_tablevue_type_script_lang_js_ = {
        props: {
          disabledDate: {},
          value: {},
          defaultValue: {
            validator: function validator2(val) {
              return val === null || val instanceof Date && Object(date_util_["isDate"])(val);
            }
          },
          date: {}
        },
        computed: {
          startYear: function startYear() {
            return Math.floor(this.date.getFullYear() / 10) * 10;
          }
        },
        methods: {
          getCellStyle: function getCellStyle(year) {
            var style2 = {};
            var today = new Date();
            style2.disabled = typeof this.disabledDate === "function" ? year_tablevue_type_script_lang_js_datesInYear(year).every(this.disabledDate) : false;
            style2.current = Object(util_["arrayFindIndex"])(Object(util_["coerceTruthyValueToArray"])(this.value), function(date3) {
              return date3.getFullYear() === year;
            }) >= 0;
            style2.today = today.getFullYear() === year;
            style2.default = this.defaultValue && this.defaultValue.getFullYear() === year;
            return style2;
          },
          handleYearTableClick: function handleYearTableClick(event2) {
            var target2 = event2.target;
            if (target2.tagName === "A") {
              if (Object(dom_["hasClass"])(target2.parentNode, "disabled"))
                return;
              var year = target2.textContent || target2.innerText;
              this.$emit("pick", Number(year));
            }
          }
        }
      };
      var basic_year_tablevue_type_script_lang_js_ = year_tablevue_type_script_lang_js_;
      var year_table_component = normalizeComponent(basic_year_tablevue_type_script_lang_js_, year_tablevue_type_template_id_c86ab5e0_render, year_tablevue_type_template_id_c86ab5e0_staticRenderFns, false, null, null, null);
      year_table_component.options.__file = "packages/date-picker/src/basic/year-table.vue";
      var year_table = year_table_component.exports;
      var month_tablevue_type_template_id_654d4f42_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("table", {
          staticClass: "el-month-table",
          on: { click: _vm.handleMonthTableClick, mousemove: _vm.handleMouseMove }
        }, [
          _c("tbody", _vm._l(_vm.rows, function(row, key) {
            return _c("tr", { key }, _vm._l(row, function(cell2, key2) {
              return _c("td", { key: key2, class: _vm.getCellStyle(cell2) }, [
                _c("div", [
                  _c("a", { staticClass: "cell" }, [
                    _vm._v(_vm._s(_vm.t("el.datepicker.months." + _vm.months[cell2.text])))
                  ])
                ])
              ]);
            }), 0);
          }), 0)
        ]);
      };
      var month_tablevue_type_template_id_654d4f42_staticRenderFns = [];
      month_tablevue_type_template_id_654d4f42_render._withStripped = true;
      var month_tablevue_type_script_lang_js_datesInMonth = function datesInMonth(year, month) {
        var numOfDays = Object(date_util_["getDayCountOfMonth"])(year, month);
        var firstDay = new Date(year, month, 1);
        return Object(date_util_["range"])(numOfDays).map(function(n) {
          return Object(date_util_["nextDate"])(firstDay, n);
        });
      };
      var clearDate = function clearDate2(date3) {
        return new Date(date3.getFullYear(), date3.getMonth());
      };
      var getMonthTimestamp = function getMonthTimestamp2(time) {
        if (typeof time === "number" || typeof time === "string") {
          return clearDate(new Date(time)).getTime();
        } else if (time instanceof Date) {
          return clearDate(time).getTime();
        } else {
          return NaN;
        }
      };
      var month_tablevue_type_script_lang_js_ = {
        props: {
          disabledDate: {},
          value: {},
          selectionMode: {
            default: "month"
          },
          minDate: {},
          maxDate: {},
          defaultValue: {
            validator: function validator2(val) {
              return val === null || Object(date_util_["isDate"])(val) || Array.isArray(val) && val.every(date_util_["isDate"]);
            }
          },
          date: {},
          rangeState: {
            default: function _default116() {
              return {
                endDate: null,
                selecting: false
              };
            }
          }
        },
        mixins: [locale_default.a],
        watch: {
          "rangeState.endDate": function rangeStateEndDate(newVal) {
            this.markRange(this.minDate, newVal);
          },
          minDate: function minDate(newVal, oldVal) {
            if (getMonthTimestamp(newVal) !== getMonthTimestamp(oldVal)) {
              this.markRange(this.minDate, this.maxDate);
            }
          },
          maxDate: function maxDate(newVal, oldVal) {
            if (getMonthTimestamp(newVal) !== getMonthTimestamp(oldVal)) {
              this.markRange(this.minDate, this.maxDate);
            }
          }
        },
        data: function data25() {
          return {
            months: ["jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec"],
            tableRows: [[], [], []],
            lastRow: null,
            lastColumn: null
          };
        },
        methods: {
          cellMatchesDate: function cellMatchesDate(cell2, date3) {
            var value6 = new Date(date3);
            return this.date.getFullYear() === value6.getFullYear() && Number(cell2.text) === value6.getMonth();
          },
          getCellStyle: function getCellStyle(cell2) {
            var _this = this;
            var style2 = {};
            var year = this.date.getFullYear();
            var today = new Date();
            var month = cell2.text;
            var defaultValue = this.defaultValue ? Array.isArray(this.defaultValue) ? this.defaultValue : [this.defaultValue] : [];
            style2.disabled = typeof this.disabledDate === "function" ? month_tablevue_type_script_lang_js_datesInMonth(year, month).every(this.disabledDate) : false;
            style2.current = Object(util_["arrayFindIndex"])(Object(util_["coerceTruthyValueToArray"])(this.value), function(date3) {
              return date3.getFullYear() === year && date3.getMonth() === month;
            }) >= 0;
            style2.today = today.getFullYear() === year && today.getMonth() === month;
            style2.default = defaultValue.some(function(date3) {
              return _this.cellMatchesDate(cell2, date3);
            });
            if (cell2.inRange) {
              style2["in-range"] = true;
              if (cell2.start) {
                style2["start-date"] = true;
              }
              if (cell2.end) {
                style2["end-date"] = true;
              }
            }
            return style2;
          },
          getMonthOfCell: function getMonthOfCell(month) {
            var year = this.date.getFullYear();
            return new Date(year, month, 1);
          },
          markRange: function markRange(minDate, maxDate) {
            minDate = getMonthTimestamp(minDate);
            maxDate = getMonthTimestamp(maxDate) || minDate;
            var _ref = [Math.min(minDate, maxDate), Math.max(minDate, maxDate)];
            minDate = _ref[0];
            maxDate = _ref[1];
            var rows = this.rows;
            for (var i = 0, k = rows.length; i < k; i++) {
              var row = rows[i];
              for (var j = 0, l = row.length; j < l; j++) {
                var cell2 = row[j];
                var index2 = i * 4 + j;
                var time = new Date(this.date.getFullYear(), index2).getTime();
                cell2.inRange = minDate && time >= minDate && time <= maxDate;
                cell2.start = minDate && time === minDate;
                cell2.end = maxDate && time === maxDate;
              }
            }
          },
          handleMouseMove: function handleMouseMove(event2) {
            if (!this.rangeState.selecting)
              return;
            var target2 = event2.target;
            if (target2.tagName === "A") {
              target2 = target2.parentNode.parentNode;
            }
            if (target2.tagName === "DIV") {
              target2 = target2.parentNode;
            }
            if (target2.tagName !== "TD")
              return;
            var row = target2.parentNode.rowIndex;
            var column2 = target2.cellIndex;
            if (this.rows[row][column2].disabled)
              return;
            if (row !== this.lastRow || column2 !== this.lastColumn) {
              this.lastRow = row;
              this.lastColumn = column2;
              this.$emit("changerange", {
                minDate: this.minDate,
                maxDate: this.maxDate,
                rangeState: {
                  selecting: true,
                  endDate: this.getMonthOfCell(row * 4 + column2)
                }
              });
            }
          },
          handleMonthTableClick: function handleMonthTableClick(event2) {
            var target2 = event2.target;
            if (target2.tagName === "A") {
              target2 = target2.parentNode.parentNode;
            }
            if (target2.tagName === "DIV") {
              target2 = target2.parentNode;
            }
            if (target2.tagName !== "TD")
              return;
            if (Object(dom_["hasClass"])(target2, "disabled"))
              return;
            var column2 = target2.cellIndex;
            var row = target2.parentNode.rowIndex;
            var month = row * 4 + column2;
            var newDate = this.getMonthOfCell(month);
            if (this.selectionMode === "range") {
              if (!this.rangeState.selecting) {
                this.$emit("pick", { minDate: newDate, maxDate: null });
                this.rangeState.selecting = true;
              } else {
                if (newDate >= this.minDate) {
                  this.$emit("pick", { minDate: this.minDate, maxDate: newDate });
                } else {
                  this.$emit("pick", { minDate: newDate, maxDate: this.minDate });
                }
                this.rangeState.selecting = false;
              }
            } else {
              this.$emit("pick", month);
            }
          }
        },
        computed: {
          rows: function rows() {
            var _this2 = this;
            var rows2 = this.tableRows;
            var disabledDate = this.disabledDate;
            var selectedDate = [];
            var now2 = getMonthTimestamp(new Date());
            for (var i = 0; i < 3; i++) {
              var row = rows2[i];
              var _loop = function _loop2(j2) {
                var cell2 = row[j2];
                if (!cell2) {
                  cell2 = { row: i, column: j2, type: "normal", inRange: false, start: false, end: false };
                }
                cell2.type = "normal";
                var index2 = i * 4 + j2;
                var time = new Date(_this2.date.getFullYear(), index2).getTime();
                cell2.inRange = time >= getMonthTimestamp(_this2.minDate) && time <= getMonthTimestamp(_this2.maxDate);
                cell2.start = _this2.minDate && time === getMonthTimestamp(_this2.minDate);
                cell2.end = _this2.maxDate && time === getMonthTimestamp(_this2.maxDate);
                var isToday = time === now2;
                if (isToday) {
                  cell2.type = "today";
                }
                cell2.text = index2;
                var cellDate = new Date(time);
                cell2.disabled = typeof disabledDate === "function" && disabledDate(cellDate);
                cell2.selected = Object(util_["arrayFind"])(selectedDate, function(date3) {
                  return date3.getTime() === cellDate.getTime();
                });
                _this2.$set(row, j2, cell2);
              };
              for (var j = 0; j < 4; j++) {
                _loop(j);
              }
            }
            return rows2;
          }
        }
      };
      var basic_month_tablevue_type_script_lang_js_ = month_tablevue_type_script_lang_js_;
      var month_table_component = normalizeComponent(basic_month_tablevue_type_script_lang_js_, month_tablevue_type_template_id_654d4f42_render, month_tablevue_type_template_id_654d4f42_staticRenderFns, false, null, null, null);
      month_table_component.options.__file = "packages/date-picker/src/basic/month-table.vue";
      var month_table = month_table_component.exports;
      var date_tablevue_type_template_id_5d1f3341_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("table", {
          staticClass: "el-date-table",
          class: { "is-week-mode": _vm.selectionMode === "week" },
          attrs: { cellspacing: "0", cellpadding: "0" },
          on: { click: _vm.handleClick, mousemove: _vm.handleMouseMove }
        }, [
          _c("tbody", [
            _c("tr", [
              _vm.showWeekNumber ? _c("th", [_vm._v(_vm._s(_vm.t("el.datepicker.week")))]) : _vm._e(),
              _vm._l(_vm.WEEKS, function(week, key) {
                return _c("th", { key }, [
                  _vm._v(_vm._s(_vm.t("el.datepicker.weeks." + week)))
                ]);
              })
            ], 2),
            _vm._l(_vm.rows, function(row, key) {
              return _c("tr", {
                key,
                staticClass: "el-date-table__row",
                class: { current: _vm.isWeekActive(row[1]) }
              }, _vm._l(row, function(cell2, key2) {
                return _c("td", { key: key2, class: _vm.getCellClasses(cell2) }, [
                  _c("div", [
                    _c("span", [
                      _vm._v("\n          " + _vm._s(cell2.text) + "\n        ")
                    ])
                  ])
                ]);
              }), 0);
            })
          ], 2)
        ]);
      };
      var date_tablevue_type_template_id_5d1f3341_staticRenderFns = [];
      date_tablevue_type_template_id_5d1f3341_render._withStripped = true;
      var _WEEKS = ["sun", "mon", "tue", "wed", "thu", "fri", "sat"];
      var date_tablevue_type_script_lang_js_getDateTimestamp = function getDateTimestamp(time) {
        if (typeof time === "number" || typeof time === "string") {
          return Object(date_util_["clearTime"])(new Date(time)).getTime();
        } else if (time instanceof Date) {
          return Object(date_util_["clearTime"])(time).getTime();
        } else {
          return NaN;
        }
      };
      var date_tablevue_type_script_lang_js_removeFromArray = function removeFromArray(arr, pred) {
        var idx = typeof pred === "function" ? Object(util_["arrayFindIndex"])(arr, pred) : arr.indexOf(pred);
        return idx >= 0 ? [].concat(arr.slice(0, idx), arr.slice(idx + 1)) : arr;
      };
      var date_tablevue_type_script_lang_js_ = {
        mixins: [locale_default.a],
        props: {
          firstDayOfWeek: {
            default: 7,
            type: Number,
            validator: function validator2(val) {
              return val >= 1 && val <= 7;
            }
          },
          value: {},
          defaultValue: {
            validator: function validator2(val) {
              return val === null || Object(date_util_["isDate"])(val) || Array.isArray(val) && val.every(date_util_["isDate"]);
            }
          },
          date: {},
          selectionMode: {
            default: "day"
          },
          showWeekNumber: {
            type: Boolean,
            default: false
          },
          disabledDate: {},
          cellClassName: {},
          minDate: {},
          maxDate: {},
          rangeState: {
            default: function _default116() {
              return {
                endDate: null,
                selecting: false
              };
            }
          }
        },
        computed: {
          offsetDay: function offsetDay() {
            var week = this.firstDayOfWeek;
            return week > 3 ? 7 - week : -week;
          },
          WEEKS: function WEEKS() {
            var week = this.firstDayOfWeek;
            return _WEEKS.concat(_WEEKS).slice(week, week + 7);
          },
          year: function year() {
            return this.date.getFullYear();
          },
          month: function month() {
            return this.date.getMonth();
          },
          startDate: function startDate() {
            return Object(date_util_["getStartDateOfMonth"])(this.year, this.month);
          },
          rows: function rows() {
            var _this = this;
            var date3 = new Date(this.year, this.month, 1);
            var day = Object(date_util_["getFirstDayOfMonth"])(date3);
            var dateCountOfMonth = Object(date_util_["getDayCountOfMonth"])(date3.getFullYear(), date3.getMonth());
            var dateCountOfLastMonth = Object(date_util_["getDayCountOfMonth"])(date3.getFullYear(), date3.getMonth() === 0 ? 11 : date3.getMonth() - 1);
            day = day === 0 ? 7 : day;
            var offset = this.offsetDay;
            var rows2 = this.tableRows;
            var count = 1;
            var startDate = this.startDate;
            var disabledDate = this.disabledDate;
            var cellClassName = this.cellClassName;
            var selectedDate = this.selectionMode === "dates" ? Object(util_["coerceTruthyValueToArray"])(this.value) : [];
            var now2 = date_tablevue_type_script_lang_js_getDateTimestamp(new Date());
            for (var i = 0; i < 6; i++) {
              var row = rows2[i];
              if (this.showWeekNumber) {
                if (!row[0]) {
                  row[0] = { type: "week", text: Object(date_util_["getWeekNumber"])(Object(date_util_["nextDate"])(startDate, i * 7 + 1)) };
                }
              }
              var _loop = function _loop2(j2) {
                var cell2 = row[_this.showWeekNumber ? j2 + 1 : j2];
                if (!cell2) {
                  cell2 = { row: i, column: j2, type: "normal", inRange: false, start: false, end: false };
                }
                cell2.type = "normal";
                var index2 = i * 7 + j2;
                var time = Object(date_util_["nextDate"])(startDate, index2 - offset).getTime();
                cell2.inRange = time >= date_tablevue_type_script_lang_js_getDateTimestamp(_this.minDate) && time <= date_tablevue_type_script_lang_js_getDateTimestamp(_this.maxDate);
                cell2.start = _this.minDate && time === date_tablevue_type_script_lang_js_getDateTimestamp(_this.minDate);
                cell2.end = _this.maxDate && time === date_tablevue_type_script_lang_js_getDateTimestamp(_this.maxDate);
                var isToday = time === now2;
                if (isToday) {
                  cell2.type = "today";
                }
                if (i >= 0 && i <= 1) {
                  var numberOfDaysFromPreviousMonth = day + offset < 0 ? 7 + day + offset : day + offset;
                  if (j2 + i * 7 >= numberOfDaysFromPreviousMonth) {
                    cell2.text = count++;
                  } else {
                    cell2.text = dateCountOfLastMonth - (numberOfDaysFromPreviousMonth - j2 % 7) + 1 + i * 7;
                    cell2.type = "prev-month";
                  }
                } else {
                  if (count <= dateCountOfMonth) {
                    cell2.text = count++;
                  } else {
                    cell2.text = count++ - dateCountOfMonth;
                    cell2.type = "next-month";
                  }
                }
                var cellDate = new Date(time);
                cell2.disabled = typeof disabledDate === "function" && disabledDate(cellDate);
                cell2.selected = Object(util_["arrayFind"])(selectedDate, function(date4) {
                  return date4.getTime() === cellDate.getTime();
                });
                cell2.customClass = typeof cellClassName === "function" && cellClassName(cellDate);
                _this.$set(row, _this.showWeekNumber ? j2 + 1 : j2, cell2);
              };
              for (var j = 0; j < 7; j++) {
                _loop(j);
              }
              if (this.selectionMode === "week") {
                var start = this.showWeekNumber ? 1 : 0;
                var end = this.showWeekNumber ? 7 : 6;
                var isWeekActive = this.isWeekActive(row[start + 1]);
                row[start].inRange = isWeekActive;
                row[start].start = isWeekActive;
                row[end].inRange = isWeekActive;
                row[end].end = isWeekActive;
              }
            }
            return rows2;
          }
        },
        watch: {
          "rangeState.endDate": function rangeStateEndDate(newVal) {
            this.markRange(this.minDate, newVal);
          },
          minDate: function minDate(newVal, oldVal) {
            if (date_tablevue_type_script_lang_js_getDateTimestamp(newVal) !== date_tablevue_type_script_lang_js_getDateTimestamp(oldVal)) {
              this.markRange(this.minDate, this.maxDate);
            }
          },
          maxDate: function maxDate(newVal, oldVal) {
            if (date_tablevue_type_script_lang_js_getDateTimestamp(newVal) !== date_tablevue_type_script_lang_js_getDateTimestamp(oldVal)) {
              this.markRange(this.minDate, this.maxDate);
            }
          }
        },
        data: function data25() {
          return {
            tableRows: [[], [], [], [], [], []],
            lastRow: null,
            lastColumn: null
          };
        },
        methods: {
          cellMatchesDate: function cellMatchesDate(cell2, date3) {
            var value6 = new Date(date3);
            return this.year === value6.getFullYear() && this.month === value6.getMonth() && Number(cell2.text) === value6.getDate();
          },
          getCellClasses: function getCellClasses(cell2) {
            var _this2 = this;
            var selectionMode = this.selectionMode;
            var defaultValue = this.defaultValue ? Array.isArray(this.defaultValue) ? this.defaultValue : [this.defaultValue] : [];
            var classes = [];
            if ((cell2.type === "normal" || cell2.type === "today") && !cell2.disabled) {
              classes.push("available");
              if (cell2.type === "today") {
                classes.push("today");
              }
            } else {
              classes.push(cell2.type);
            }
            if (cell2.type === "normal" && defaultValue.some(function(date3) {
              return _this2.cellMatchesDate(cell2, date3);
            })) {
              classes.push("default");
            }
            if (selectionMode === "day" && (cell2.type === "normal" || cell2.type === "today") && this.cellMatchesDate(cell2, this.value)) {
              classes.push("current");
            }
            if (cell2.inRange && (cell2.type === "normal" || cell2.type === "today" || this.selectionMode === "week")) {
              classes.push("in-range");
              if (cell2.start) {
                classes.push("start-date");
              }
              if (cell2.end) {
                classes.push("end-date");
              }
            }
            if (cell2.disabled) {
              classes.push("disabled");
            }
            if (cell2.selected) {
              classes.push("selected");
            }
            if (cell2.customClass) {
              classes.push(cell2.customClass);
            }
            return classes.join(" ");
          },
          getDateOfCell: function getDateOfCell(row, column2) {
            var offsetFromStart = row * 7 + (column2 - (this.showWeekNumber ? 1 : 0)) - this.offsetDay;
            return Object(date_util_["nextDate"])(this.startDate, offsetFromStart);
          },
          isWeekActive: function isWeekActive(cell2) {
            if (this.selectionMode !== "week")
              return false;
            var newDate = new Date(this.year, this.month, 1);
            var year = newDate.getFullYear();
            var month = newDate.getMonth();
            if (cell2.type === "prev-month") {
              newDate.setMonth(month === 0 ? 11 : month - 1);
              newDate.setFullYear(month === 0 ? year - 1 : year);
            }
            if (cell2.type === "next-month") {
              newDate.setMonth(month === 11 ? 0 : month + 1);
              newDate.setFullYear(month === 11 ? year + 1 : year);
            }
            newDate.setDate(parseInt(cell2.text, 10));
            if (Object(date_util_["isDate"])(this.value)) {
              var dayOffset = (this.value.getDay() - this.firstDayOfWeek + 7) % 7 - 1;
              var weekDate = Object(date_util_["prevDate"])(this.value, dayOffset);
              return weekDate.getTime() === newDate.getTime();
            }
            return false;
          },
          markRange: function markRange(minDate, maxDate) {
            minDate = date_tablevue_type_script_lang_js_getDateTimestamp(minDate);
            maxDate = date_tablevue_type_script_lang_js_getDateTimestamp(maxDate) || minDate;
            var _ref = [Math.min(minDate, maxDate), Math.max(minDate, maxDate)];
            minDate = _ref[0];
            maxDate = _ref[1];
            var startDate = this.startDate;
            var rows = this.rows;
            for (var i = 0, k = rows.length; i < k; i++) {
              var row = rows[i];
              for (var j = 0, l = row.length; j < l; j++) {
                if (this.showWeekNumber && j === 0)
                  continue;
                var _cell2 = row[j];
                var index2 = i * 7 + j + (this.showWeekNumber ? -1 : 0);
                var time = Object(date_util_["nextDate"])(startDate, index2 - this.offsetDay).getTime();
                _cell2.inRange = minDate && time >= minDate && time <= maxDate;
                _cell2.start = minDate && time === minDate;
                _cell2.end = maxDate && time === maxDate;
              }
            }
          },
          handleMouseMove: function handleMouseMove(event2) {
            if (!this.rangeState.selecting)
              return;
            var target2 = event2.target;
            if (target2.tagName === "SPAN") {
              target2 = target2.parentNode.parentNode;
            }
            if (target2.tagName === "DIV") {
              target2 = target2.parentNode;
            }
            if (target2.tagName !== "TD")
              return;
            var row = target2.parentNode.rowIndex - 1;
            var column2 = target2.cellIndex;
            if (this.rows[row][column2].disabled)
              return;
            if (row !== this.lastRow || column2 !== this.lastColumn) {
              this.lastRow = row;
              this.lastColumn = column2;
              this.$emit("changerange", {
                minDate: this.minDate,
                maxDate: this.maxDate,
                rangeState: {
                  selecting: true,
                  endDate: this.getDateOfCell(row, column2)
                }
              });
            }
          },
          handleClick: function handleClick(event2) {
            var target2 = event2.target;
            if (target2.tagName === "SPAN") {
              target2 = target2.parentNode.parentNode;
            }
            if (target2.tagName === "DIV") {
              target2 = target2.parentNode;
            }
            if (target2.tagName !== "TD")
              return;
            var row = target2.parentNode.rowIndex - 1;
            var column2 = this.selectionMode === "week" ? 1 : target2.cellIndex;
            var cell2 = this.rows[row][column2];
            if (cell2.disabled || cell2.type === "week")
              return;
            var newDate = this.getDateOfCell(row, column2);
            if (this.selectionMode === "range") {
              if (!this.rangeState.selecting) {
                this.$emit("pick", { minDate: newDate, maxDate: null });
                this.rangeState.selecting = true;
              } else {
                if (newDate >= this.minDate) {
                  this.$emit("pick", { minDate: this.minDate, maxDate: newDate });
                } else {
                  this.$emit("pick", { minDate: newDate, maxDate: this.minDate });
                }
                this.rangeState.selecting = false;
              }
            } else if (this.selectionMode === "day") {
              this.$emit("pick", newDate);
            } else if (this.selectionMode === "week") {
              var weekNumber = Object(date_util_["getWeekNumber"])(newDate);
              var value6 = newDate.getFullYear() + "w" + weekNumber;
              this.$emit("pick", {
                year: newDate.getFullYear(),
                week: weekNumber,
                value: value6,
                date: newDate
              });
            } else if (this.selectionMode === "dates") {
              var _value = this.value || [];
              var newValue = cell2.selected ? date_tablevue_type_script_lang_js_removeFromArray(_value, function(date3) {
                return date3.getTime() === newDate.getTime();
              }) : [].concat(_value, [newDate]);
              this.$emit("pick", newValue);
            }
          }
        }
      };
      var basic_date_tablevue_type_script_lang_js_ = date_tablevue_type_script_lang_js_;
      var date_table_component = normalizeComponent(basic_date_tablevue_type_script_lang_js_, date_tablevue_type_template_id_5d1f3341_render, date_tablevue_type_template_id_5d1f3341_staticRenderFns, false, null, null, null);
      date_table_component.options.__file = "packages/date-picker/src/basic/date-table.vue";
      var date_table = date_table_component.exports;
      var datevue_type_script_lang_js_ = {
        mixins: [locale_default.a],
        directives: { Clickoutside: clickoutside_default.a },
        watch: {
          showTime: function showTime(val) {
            var _this = this;
            if (!val)
              return;
            this.$nextTick(function(_) {
              var inputElm = _this.$refs.input.$el;
              if (inputElm) {
                _this.pickerWidth = inputElm.getBoundingClientRect().width + 10;
              }
            });
          },
          value: function value6(val) {
            if (this.selectionMode === "dates" && this.value)
              return;
            if (Object(date_util_["isDate"])(val)) {
              this.date = new Date(val);
            } else {
              this.date = this.getDefaultValue();
            }
          },
          defaultValue: function defaultValue(val) {
            if (!Object(date_util_["isDate"])(this.value)) {
              this.date = val ? new Date(val) : new Date();
            }
          },
          timePickerVisible: function timePickerVisible(val) {
            var _this2 = this;
            if (val)
              this.$nextTick(function() {
                return _this2.$refs.timepicker.adjustSpinners();
              });
          },
          selectionMode: function selectionMode(newVal) {
            if (newVal === "month") {
              if (this.currentView !== "year" || this.currentView !== "month") {
                this.currentView = "month";
              }
            } else if (newVal === "dates") {
              this.currentView = "date";
            }
          }
        },
        methods: {
          proxyTimePickerDataProperties: function proxyTimePickerDataProperties() {
            var _this3 = this;
            var format2 = function format3(timeFormat) {
              _this3.$refs.timepicker.format = timeFormat;
            };
            var value6 = function value7(_value) {
              _this3.$refs.timepicker.value = _value;
            };
            var date3 = function date4(_date3) {
              _this3.$refs.timepicker.date = _date3;
            };
            var selectableRange = function selectableRange2(_selectableRange) {
              _this3.$refs.timepicker.selectableRange = _selectableRange;
            };
            this.$watch("value", value6);
            this.$watch("date", date3);
            this.$watch("selectableRange", selectableRange);
            format2(this.timeFormat);
            value6(this.value);
            date3(this.date);
            selectableRange(this.selectableRange);
          },
          handleClear: function handleClear() {
            this.date = this.getDefaultValue();
            this.$emit("pick", null);
          },
          emit: function emit(value6) {
            var _this4 = this;
            for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }
            if (!value6) {
              this.$emit.apply(this, ["pick", value6].concat(args));
            } else if (Array.isArray(value6)) {
              var dates = value6.map(function(date3) {
                return _this4.showTime ? Object(date_util_["clearMilliseconds"])(date3) : Object(date_util_["clearTime"])(date3);
              });
              this.$emit.apply(this, ["pick", dates].concat(args));
            } else {
              this.$emit.apply(this, ["pick", this.showTime ? Object(date_util_["clearMilliseconds"])(value6) : Object(date_util_["clearTime"])(value6)].concat(args));
            }
            this.userInputDate = null;
            this.userInputTime = null;
          },
          showMonthPicker: function showMonthPicker() {
            this.currentView = "month";
          },
          showYearPicker: function showYearPicker() {
            this.currentView = "year";
          },
          prevMonth: function prevMonth2() {
            this.date = Object(date_util_["prevMonth"])(this.date);
          },
          nextMonth: function nextMonth2() {
            this.date = Object(date_util_["nextMonth"])(this.date);
          },
          prevYear: function prevYear2() {
            if (this.currentView === "year") {
              this.date = Object(date_util_["prevYear"])(this.date, 10);
            } else {
              this.date = Object(date_util_["prevYear"])(this.date);
            }
          },
          nextYear: function nextYear2() {
            if (this.currentView === "year") {
              this.date = Object(date_util_["nextYear"])(this.date, 10);
            } else {
              this.date = Object(date_util_["nextYear"])(this.date);
            }
          },
          handleShortcutClick: function handleShortcutClick(shortcut) {
            if (shortcut.onClick) {
              shortcut.onClick(this);
            }
          },
          handleTimePick: function handleTimePick(value6, visible2, first2) {
            if (Object(date_util_["isDate"])(value6)) {
              var newDate = this.value ? Object(date_util_["modifyTime"])(this.value, value6.getHours(), value6.getMinutes(), value6.getSeconds()) : Object(date_util_["modifyWithTimeString"])(this.getDefaultValue(), this.defaultTime);
              this.date = newDate;
              this.emit(this.date, true);
            } else {
              this.emit(value6, true);
            }
            if (!first2) {
              this.timePickerVisible = visible2;
            }
          },
          handleTimePickClose: function handleTimePickClose() {
            this.timePickerVisible = false;
          },
          handleMonthPick: function handleMonthPick(month) {
            if (this.selectionMode === "month") {
              this.date = Object(date_util_["modifyDate"])(this.date, this.year, month, 1);
              this.emit(this.date);
            } else {
              this.date = Object(date_util_["changeYearMonthAndClampDate"])(this.date, this.year, month);
              this.currentView = "date";
            }
          },
          handleDatePick: function handleDatePick(value6) {
            if (this.selectionMode === "day") {
              var newDate = this.value ? Object(date_util_["modifyDate"])(this.value, value6.getFullYear(), value6.getMonth(), value6.getDate()) : Object(date_util_["modifyWithTimeString"])(value6, this.defaultTime);
              if (!this.checkDateWithinRange(newDate)) {
                newDate = Object(date_util_["modifyDate"])(this.selectableRange[0][0], value6.getFullYear(), value6.getMonth(), value6.getDate());
              }
              this.date = newDate;
              this.emit(this.date, this.showTime);
            } else if (this.selectionMode === "week") {
              this.emit(value6.date);
            } else if (this.selectionMode === "dates") {
              this.emit(value6, true);
            }
          },
          handleYearPick: function handleYearPick(year) {
            if (this.selectionMode === "year") {
              this.date = Object(date_util_["modifyDate"])(this.date, year, 0, 1);
              this.emit(this.date);
            } else {
              this.date = Object(date_util_["changeYearMonthAndClampDate"])(this.date, year, this.month);
              this.currentView = "month";
            }
          },
          changeToNow: function changeToNow() {
            if ((!this.disabledDate || !this.disabledDate(new Date())) && this.checkDateWithinRange(new Date())) {
              this.date = new Date();
              this.emit(this.date);
            }
          },
          confirm: function confirm() {
            if (this.selectionMode === "dates") {
              this.emit(this.value);
            } else {
              var value6 = this.value ? this.value : Object(date_util_["modifyWithTimeString"])(this.getDefaultValue(), this.defaultTime);
              this.date = new Date(value6);
              this.emit(value6);
            }
          },
          resetView: function resetView() {
            if (this.selectionMode === "month") {
              this.currentView = "month";
            } else if (this.selectionMode === "year") {
              this.currentView = "year";
            } else {
              this.currentView = "date";
            }
          },
          handleEnter: function handleEnter() {
            document.body.addEventListener("keydown", this.handleKeydown);
          },
          handleLeave: function handleLeave() {
            this.$emit("dodestroy");
            document.body.removeEventListener("keydown", this.handleKeydown);
          },
          handleKeydown: function handleKeydown(event2) {
            var keyCode2 = event2.keyCode;
            var list2 = [38, 40, 37, 39];
            if (this.visible && !this.timePickerVisible) {
              if (list2.indexOf(keyCode2) !== -1) {
                this.handleKeyControl(keyCode2);
                event2.stopPropagation();
                event2.preventDefault();
              }
              if (keyCode2 === 13 && this.userInputDate === null && this.userInputTime === null) {
                this.emit(this.date, false);
              }
            }
          },
          handleKeyControl: function handleKeyControl(keyCode2) {
            var mapping = {
              "year": {
                38: -4,
                40: 4,
                37: -1,
                39: 1,
                offset: function offset(date3, step3) {
                  return date3.setFullYear(date3.getFullYear() + step3);
                }
              },
              "month": {
                38: -4,
                40: 4,
                37: -1,
                39: 1,
                offset: function offset(date3, step3) {
                  return date3.setMonth(date3.getMonth() + step3);
                }
              },
              "week": {
                38: -1,
                40: 1,
                37: -1,
                39: 1,
                offset: function offset(date3, step3) {
                  return date3.setDate(date3.getDate() + step3 * 7);
                }
              },
              "day": {
                38: -7,
                40: 7,
                37: -1,
                39: 1,
                offset: function offset(date3, step3) {
                  return date3.setDate(date3.getDate() + step3);
                }
              }
            };
            var mode = this.selectionMode;
            var year = 31536e6;
            var now2 = this.date.getTime();
            var newDate = new Date(this.date.getTime());
            while (Math.abs(now2 - newDate.getTime()) <= year) {
              var map2 = mapping[mode];
              map2.offset(newDate, map2[keyCode2]);
              if (typeof this.disabledDate === "function" && this.disabledDate(newDate)) {
                continue;
              }
              this.date = newDate;
              this.$emit("pick", newDate, true);
              break;
            }
          },
          handleVisibleTimeChange: function handleVisibleTimeChange(value6) {
            var time = Object(date_util_["parseDate"])(value6, this.timeFormat);
            if (time && this.checkDateWithinRange(time)) {
              this.date = Object(date_util_["modifyDate"])(time, this.year, this.month, this.monthDate);
              this.userInputTime = null;
              this.$refs.timepicker.value = this.date;
              this.timePickerVisible = false;
              this.emit(this.date, true);
            }
          },
          handleVisibleDateChange: function handleVisibleDateChange(value6) {
            var date3 = Object(date_util_["parseDate"])(value6, this.dateFormat);
            if (date3) {
              if (typeof this.disabledDate === "function" && this.disabledDate(date3)) {
                return;
              }
              this.date = Object(date_util_["modifyTime"])(date3, this.date.getHours(), this.date.getMinutes(), this.date.getSeconds());
              this.userInputDate = null;
              this.resetView();
              this.emit(this.date, true);
            }
          },
          isValidValue: function isValidValue(value6) {
            return value6 && !isNaN(value6) && (typeof this.disabledDate === "function" ? !this.disabledDate(value6) : true) && this.checkDateWithinRange(value6);
          },
          getDefaultValue: function getDefaultValue() {
            return this.defaultValue ? new Date(this.defaultValue) : new Date();
          },
          checkDateWithinRange: function checkDateWithinRange(date3) {
            return this.selectableRange.length > 0 ? Object(date_util_["timeWithinRange"])(date3, this.selectableRange, this.format || "HH:mm:ss") : true;
          }
        },
        components: {
          TimePicker: panel_time,
          YearTable: year_table,
          MonthTable: month_table,
          DateTable: date_table,
          ElInput: input_default.a,
          ElButton: button_default.a
        },
        data: function data25() {
          return {
            popperClass: "",
            date: new Date(),
            value: "",
            defaultValue: null,
            defaultTime: null,
            showTime: false,
            selectionMode: "day",
            shortcuts: "",
            visible: false,
            currentView: "date",
            disabledDate: "",
            cellClassName: "",
            selectableRange: [],
            firstDayOfWeek: 7,
            showWeekNumber: false,
            timePickerVisible: false,
            format: "",
            arrowControl: false,
            userInputDate: null,
            userInputTime: null
          };
        },
        computed: {
          year: function year() {
            return this.date.getFullYear();
          },
          month: function month() {
            return this.date.getMonth();
          },
          week: function week() {
            return Object(date_util_["getWeekNumber"])(this.date);
          },
          monthDate: function monthDate() {
            return this.date.getDate();
          },
          footerVisible: function footerVisible() {
            return this.showTime || this.selectionMode === "dates";
          },
          visibleTime: function visibleTime() {
            if (this.userInputTime !== null) {
              return this.userInputTime;
            } else {
              return Object(date_util_["formatDate"])(this.value || this.defaultValue, this.timeFormat);
            }
          },
          visibleDate: function visibleDate() {
            if (this.userInputDate !== null) {
              return this.userInputDate;
            } else {
              return Object(date_util_["formatDate"])(this.value || this.defaultValue, this.dateFormat);
            }
          },
          yearLabel: function yearLabel() {
            var yearTranslation = this.t("el.datepicker.year");
            if (this.currentView === "year") {
              var startYear = Math.floor(this.year / 10) * 10;
              if (yearTranslation) {
                return startYear + " " + yearTranslation + " - " + (startYear + 9) + " " + yearTranslation;
              }
              return startYear + " - " + (startYear + 9);
            }
            return this.year + " " + yearTranslation;
          },
          timeFormat: function timeFormat() {
            if (this.format) {
              return Object(date_util_["extractTimeFormat"])(this.format);
            } else {
              return "HH:mm:ss";
            }
          },
          dateFormat: function dateFormat() {
            if (this.format) {
              return Object(date_util_["extractDateFormat"])(this.format);
            } else {
              return "yyyy-MM-dd";
            }
          }
        }
      };
      var panel_datevue_type_script_lang_js_ = datevue_type_script_lang_js_;
      var date_component = normalizeComponent(panel_datevue_type_script_lang_js_, datevue_type_template_id_2440d4ea_render, datevue_type_template_id_2440d4ea_staticRenderFns, false, null, null, null);
      date_component.options.__file = "packages/date-picker/src/panel/date.vue";
      var panel_date = date_component.exports;
      var date_rangevue_type_template_id_2652849a_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("transition", {
          attrs: { name: "el-zoom-in-top" },
          on: {
            "after-leave": function($event) {
              _vm.$emit("dodestroy");
            }
          }
        }, [
          _c("div", {
            directives: [
              {
                name: "show",
                rawName: "v-show",
                value: _vm.visible,
                expression: "visible"
              }
            ],
            staticClass: "el-picker-panel el-date-range-picker el-popper",
            class: [
              {
                "has-sidebar": _vm.$slots.sidebar || _vm.shortcuts,
                "has-time": _vm.showTime
              },
              _vm.popperClass
            ]
          }, [
            _c("div", { staticClass: "el-picker-panel__body-wrapper" }, [
              _vm._t("sidebar"),
              _vm.shortcuts ? _c("div", { staticClass: "el-picker-panel__sidebar" }, _vm._l(_vm.shortcuts, function(shortcut, key) {
                return _c("button", {
                  key,
                  staticClass: "el-picker-panel__shortcut",
                  attrs: { type: "button" },
                  on: {
                    click: function($event) {
                      _vm.handleShortcutClick(shortcut);
                    }
                  }
                }, [_vm._v(_vm._s(shortcut.text))]);
              }), 0) : _vm._e(),
              _c("div", { staticClass: "el-picker-panel__body" }, [
                _vm.showTime ? _c("div", { staticClass: "el-date-range-picker__time-header" }, [
                  _c("span", { staticClass: "el-date-range-picker__editors-wrap" }, [
                    _c("span", {
                      staticClass: "el-date-range-picker__time-picker-wrap"
                    }, [
                      _c("el-input", {
                        ref: "minInput",
                        staticClass: "el-date-range-picker__editor",
                        attrs: {
                          size: "small",
                          disabled: _vm.rangeState.selecting,
                          placeholder: _vm.t("el.datepicker.startDate"),
                          value: _vm.minVisibleDate
                        },
                        on: {
                          input: function(val) {
                            return _vm.handleDateInput(val, "min");
                          },
                          change: function(val) {
                            return _vm.handleDateChange(val, "min");
                          }
                        }
                      })
                    ], 1),
                    _c("span", {
                      directives: [
                        {
                          name: "clickoutside",
                          rawName: "v-clickoutside",
                          value: _vm.handleMinTimeClose,
                          expression: "handleMinTimeClose"
                        }
                      ],
                      staticClass: "el-date-range-picker__time-picker-wrap"
                    }, [
                      _c("el-input", {
                        staticClass: "el-date-range-picker__editor",
                        attrs: {
                          size: "small",
                          disabled: _vm.rangeState.selecting,
                          placeholder: _vm.t("el.datepicker.startTime"),
                          value: _vm.minVisibleTime
                        },
                        on: {
                          focus: function($event) {
                            _vm.minTimePickerVisible = true;
                          },
                          input: function(val) {
                            return _vm.handleTimeInput(val, "min");
                          },
                          change: function(val) {
                            return _vm.handleTimeChange(val, "min");
                          }
                        }
                      }),
                      _c("time-picker", {
                        ref: "minTimePicker",
                        attrs: {
                          "time-arrow-control": _vm.arrowControl,
                          visible: _vm.minTimePickerVisible
                        },
                        on: {
                          pick: _vm.handleMinTimePick,
                          mounted: function($event) {
                            _vm.$refs.minTimePicker.format = _vm.timeFormat;
                          }
                        }
                      })
                    ], 1)
                  ]),
                  _c("span", { staticClass: "el-icon-arrow-right" }),
                  _c("span", {
                    staticClass: "el-date-range-picker__editors-wrap is-right"
                  }, [
                    _c("span", {
                      staticClass: "el-date-range-picker__time-picker-wrap"
                    }, [
                      _c("el-input", {
                        staticClass: "el-date-range-picker__editor",
                        attrs: {
                          size: "small",
                          disabled: _vm.rangeState.selecting,
                          placeholder: _vm.t("el.datepicker.endDate"),
                          value: _vm.maxVisibleDate,
                          readonly: !_vm.minDate
                        },
                        on: {
                          input: function(val) {
                            return _vm.handleDateInput(val, "max");
                          },
                          change: function(val) {
                            return _vm.handleDateChange(val, "max");
                          }
                        }
                      })
                    ], 1),
                    _c("span", {
                      directives: [
                        {
                          name: "clickoutside",
                          rawName: "v-clickoutside",
                          value: _vm.handleMaxTimeClose,
                          expression: "handleMaxTimeClose"
                        }
                      ],
                      staticClass: "el-date-range-picker__time-picker-wrap"
                    }, [
                      _c("el-input", {
                        staticClass: "el-date-range-picker__editor",
                        attrs: {
                          size: "small",
                          disabled: _vm.rangeState.selecting,
                          placeholder: _vm.t("el.datepicker.endTime"),
                          value: _vm.maxVisibleTime,
                          readonly: !_vm.minDate
                        },
                        on: {
                          focus: function($event) {
                            _vm.minDate && (_vm.maxTimePickerVisible = true);
                          },
                          input: function(val) {
                            return _vm.handleTimeInput(val, "max");
                          },
                          change: function(val) {
                            return _vm.handleTimeChange(val, "max");
                          }
                        }
                      }),
                      _c("time-picker", {
                        ref: "maxTimePicker",
                        attrs: {
                          "time-arrow-control": _vm.arrowControl,
                          visible: _vm.maxTimePickerVisible
                        },
                        on: {
                          pick: _vm.handleMaxTimePick,
                          mounted: function($event) {
                            _vm.$refs.maxTimePicker.format = _vm.timeFormat;
                          }
                        }
                      })
                    ], 1)
                  ])
                ]) : _vm._e(),
                _c("div", {
                  staticClass: "el-picker-panel__content el-date-range-picker__content is-left"
                }, [
                  _c("div", { staticClass: "el-date-range-picker__header" }, [
                    _c("button", {
                      staticClass: "el-picker-panel__icon-btn el-icon-d-arrow-left",
                      attrs: { type: "button" },
                      on: { click: _vm.leftPrevYear }
                    }),
                    _c("button", {
                      staticClass: "el-picker-panel__icon-btn el-icon-arrow-left",
                      attrs: { type: "button" },
                      on: { click: _vm.leftPrevMonth }
                    }),
                    _vm.unlinkPanels ? _c("button", {
                      staticClass: "el-picker-panel__icon-btn el-icon-d-arrow-right",
                      class: { "is-disabled": !_vm.enableYearArrow },
                      attrs: {
                        type: "button",
                        disabled: !_vm.enableYearArrow
                      },
                      on: { click: _vm.leftNextYear }
                    }) : _vm._e(),
                    _vm.unlinkPanels ? _c("button", {
                      staticClass: "el-picker-panel__icon-btn el-icon-arrow-right",
                      class: { "is-disabled": !_vm.enableMonthArrow },
                      attrs: {
                        type: "button",
                        disabled: !_vm.enableMonthArrow
                      },
                      on: { click: _vm.leftNextMonth }
                    }) : _vm._e(),
                    _c("div", [_vm._v(_vm._s(_vm.leftLabel))])
                  ]),
                  _c("date-table", {
                    attrs: {
                      "selection-mode": "range",
                      date: _vm.leftDate,
                      "default-value": _vm.defaultValue,
                      "min-date": _vm.minDate,
                      "max-date": _vm.maxDate,
                      "range-state": _vm.rangeState,
                      "disabled-date": _vm.disabledDate,
                      "cell-class-name": _vm.cellClassName,
                      "first-day-of-week": _vm.firstDayOfWeek
                    },
                    on: {
                      changerange: _vm.handleChangeRange,
                      pick: _vm.handleRangePick
                    }
                  })
                ], 1),
                _c("div", {
                  staticClass: "el-picker-panel__content el-date-range-picker__content is-right"
                }, [
                  _c("div", { staticClass: "el-date-range-picker__header" }, [
                    _vm.unlinkPanels ? _c("button", {
                      staticClass: "el-picker-panel__icon-btn el-icon-d-arrow-left",
                      class: { "is-disabled": !_vm.enableYearArrow },
                      attrs: {
                        type: "button",
                        disabled: !_vm.enableYearArrow
                      },
                      on: { click: _vm.rightPrevYear }
                    }) : _vm._e(),
                    _vm.unlinkPanels ? _c("button", {
                      staticClass: "el-picker-panel__icon-btn el-icon-arrow-left",
                      class: { "is-disabled": !_vm.enableMonthArrow },
                      attrs: {
                        type: "button",
                        disabled: !_vm.enableMonthArrow
                      },
                      on: { click: _vm.rightPrevMonth }
                    }) : _vm._e(),
                    _c("button", {
                      staticClass: "el-picker-panel__icon-btn el-icon-d-arrow-right",
                      attrs: { type: "button" },
                      on: { click: _vm.rightNextYear }
                    }),
                    _c("button", {
                      staticClass: "el-picker-panel__icon-btn el-icon-arrow-right",
                      attrs: { type: "button" },
                      on: { click: _vm.rightNextMonth }
                    }),
                    _c("div", [_vm._v(_vm._s(_vm.rightLabel))])
                  ]),
                  _c("date-table", {
                    attrs: {
                      "selection-mode": "range",
                      date: _vm.rightDate,
                      "default-value": _vm.defaultValue,
                      "min-date": _vm.minDate,
                      "max-date": _vm.maxDate,
                      "range-state": _vm.rangeState,
                      "disabled-date": _vm.disabledDate,
                      "cell-class-name": _vm.cellClassName,
                      "first-day-of-week": _vm.firstDayOfWeek
                    },
                    on: {
                      changerange: _vm.handleChangeRange,
                      pick: _vm.handleRangePick
                    }
                  })
                ], 1)
              ])
            ], 2),
            _vm.showTime ? _c("div", { staticClass: "el-picker-panel__footer" }, [
              _c("el-button", {
                staticClass: "el-picker-panel__link-btn",
                attrs: { size: "mini", type: "text" },
                on: { click: _vm.handleClear }
              }, [
                _vm._v("\n        " + _vm._s(_vm.t("el.datepicker.clear")) + "\n      ")
              ]),
              _c("el-button", {
                staticClass: "el-picker-panel__link-btn",
                attrs: {
                  plain: "",
                  size: "mini",
                  disabled: _vm.btnDisabled
                },
                on: {
                  click: function($event) {
                    _vm.handleConfirm(false);
                  }
                }
              }, [
                _vm._v("\n        " + _vm._s(_vm.t("el.datepicker.confirm")) + "\n      ")
              ])
            ], 1) : _vm._e()
          ])
        ]);
      };
      var date_rangevue_type_template_id_2652849a_staticRenderFns = [];
      date_rangevue_type_template_id_2652849a_render._withStripped = true;
      var date_rangevue_type_script_lang_js_calcDefaultValue = function calcDefaultValue(defaultValue) {
        if (Array.isArray(defaultValue)) {
          return [new Date(defaultValue[0]), new Date(defaultValue[1])];
        } else if (defaultValue) {
          return [new Date(defaultValue), Object(date_util_["nextDate"])(new Date(defaultValue), 1)];
        } else {
          return [new Date(), Object(date_util_["nextDate"])(new Date(), 1)];
        }
      };
      var date_rangevue_type_script_lang_js_ = {
        mixins: [locale_default.a],
        directives: { Clickoutside: clickoutside_default.a },
        computed: {
          btnDisabled: function btnDisabled() {
            return !(this.minDate && this.maxDate && !this.selecting && this.isValidValue([this.minDate, this.maxDate]));
          },
          leftLabel: function leftLabel() {
            return this.leftDate.getFullYear() + " " + this.t("el.datepicker.year") + " " + this.t("el.datepicker.month" + (this.leftDate.getMonth() + 1));
          },
          rightLabel: function rightLabel() {
            return this.rightDate.getFullYear() + " " + this.t("el.datepicker.year") + " " + this.t("el.datepicker.month" + (this.rightDate.getMonth() + 1));
          },
          leftYear: function leftYear() {
            return this.leftDate.getFullYear();
          },
          leftMonth: function leftMonth() {
            return this.leftDate.getMonth();
          },
          leftMonthDate: function leftMonthDate() {
            return this.leftDate.getDate();
          },
          rightYear: function rightYear() {
            return this.rightDate.getFullYear();
          },
          rightMonth: function rightMonth() {
            return this.rightDate.getMonth();
          },
          rightMonthDate: function rightMonthDate() {
            return this.rightDate.getDate();
          },
          minVisibleDate: function minVisibleDate() {
            if (this.dateUserInput.min !== null)
              return this.dateUserInput.min;
            if (this.minDate)
              return Object(date_util_["formatDate"])(this.minDate, this.dateFormat);
            return "";
          },
          maxVisibleDate: function maxVisibleDate() {
            if (this.dateUserInput.max !== null)
              return this.dateUserInput.max;
            if (this.maxDate || this.minDate)
              return Object(date_util_["formatDate"])(this.maxDate || this.minDate, this.dateFormat);
            return "";
          },
          minVisibleTime: function minVisibleTime() {
            if (this.timeUserInput.min !== null)
              return this.timeUserInput.min;
            if (this.minDate)
              return Object(date_util_["formatDate"])(this.minDate, this.timeFormat);
            return "";
          },
          maxVisibleTime: function maxVisibleTime() {
            if (this.timeUserInput.max !== null)
              return this.timeUserInput.max;
            if (this.maxDate || this.minDate)
              return Object(date_util_["formatDate"])(this.maxDate || this.minDate, this.timeFormat);
            return "";
          },
          timeFormat: function timeFormat() {
            if (this.format) {
              return Object(date_util_["extractTimeFormat"])(this.format);
            } else {
              return "HH:mm:ss";
            }
          },
          dateFormat: function dateFormat() {
            if (this.format) {
              return Object(date_util_["extractDateFormat"])(this.format);
            } else {
              return "yyyy-MM-dd";
            }
          },
          enableMonthArrow: function enableMonthArrow() {
            var nextMonth2 = (this.leftMonth + 1) % 12;
            var yearOffset = this.leftMonth + 1 >= 12 ? 1 : 0;
            return this.unlinkPanels && new Date(this.leftYear + yearOffset, nextMonth2) < new Date(this.rightYear, this.rightMonth);
          },
          enableYearArrow: function enableYearArrow() {
            return this.unlinkPanels && this.rightYear * 12 + this.rightMonth - (this.leftYear * 12 + this.leftMonth + 1) >= 12;
          }
        },
        data: function data25() {
          return {
            popperClass: "",
            value: [],
            defaultValue: null,
            defaultTime: null,
            minDate: "",
            maxDate: "",
            leftDate: new Date(),
            rightDate: Object(date_util_["nextMonth"])(new Date()),
            rangeState: {
              endDate: null,
              selecting: false,
              row: null,
              column: null
            },
            showTime: false,
            shortcuts: "",
            visible: "",
            disabledDate: "",
            cellClassName: "",
            firstDayOfWeek: 7,
            minTimePickerVisible: false,
            maxTimePickerVisible: false,
            format: "",
            arrowControl: false,
            unlinkPanels: false,
            dateUserInput: {
              min: null,
              max: null
            },
            timeUserInput: {
              min: null,
              max: null
            }
          };
        },
        watch: {
          minDate: function minDate(val) {
            var _this = this;
            this.dateUserInput.min = null;
            this.timeUserInput.min = null;
            this.$nextTick(function() {
              if (_this.$refs.maxTimePicker && _this.maxDate && _this.maxDate < _this.minDate) {
                var format2 = "HH:mm:ss";
                _this.$refs.maxTimePicker.selectableRange = [[Object(date_util_["parseDate"])(Object(date_util_["formatDate"])(_this.minDate, format2), format2), Object(date_util_["parseDate"])("23:59:59", format2)]];
              }
            });
            if (val && this.$refs.minTimePicker) {
              this.$refs.minTimePicker.date = val;
              this.$refs.minTimePicker.value = val;
            }
          },
          maxDate: function maxDate(val) {
            this.dateUserInput.max = null;
            this.timeUserInput.max = null;
            if (val && this.$refs.maxTimePicker) {
              this.$refs.maxTimePicker.date = val;
              this.$refs.maxTimePicker.value = val;
            }
          },
          minTimePickerVisible: function minTimePickerVisible(val) {
            var _this2 = this;
            if (val) {
              this.$nextTick(function() {
                _this2.$refs.minTimePicker.date = _this2.minDate;
                _this2.$refs.minTimePicker.value = _this2.minDate;
                _this2.$refs.minTimePicker.adjustSpinners();
              });
            }
          },
          maxTimePickerVisible: function maxTimePickerVisible(val) {
            var _this3 = this;
            if (val) {
              this.$nextTick(function() {
                _this3.$refs.maxTimePicker.date = _this3.maxDate;
                _this3.$refs.maxTimePicker.value = _this3.maxDate;
                _this3.$refs.maxTimePicker.adjustSpinners();
              });
            }
          },
          value: function value6(newVal) {
            if (!newVal) {
              this.minDate = null;
              this.maxDate = null;
            } else if (Array.isArray(newVal)) {
              this.minDate = Object(date_util_["isDate"])(newVal[0]) ? new Date(newVal[0]) : null;
              this.maxDate = Object(date_util_["isDate"])(newVal[1]) ? new Date(newVal[1]) : null;
              if (this.minDate) {
                this.leftDate = this.minDate;
                if (this.unlinkPanels && this.maxDate) {
                  var minDateYear = this.minDate.getFullYear();
                  var minDateMonth = this.minDate.getMonth();
                  var maxDateYear = this.maxDate.getFullYear();
                  var maxDateMonth = this.maxDate.getMonth();
                  this.rightDate = minDateYear === maxDateYear && minDateMonth === maxDateMonth ? Object(date_util_["nextMonth"])(this.maxDate) : this.maxDate;
                } else {
                  this.rightDate = Object(date_util_["nextMonth"])(this.leftDate);
                }
              } else {
                this.leftDate = date_rangevue_type_script_lang_js_calcDefaultValue(this.defaultValue)[0];
                this.rightDate = Object(date_util_["nextMonth"])(this.leftDate);
              }
            }
          },
          defaultValue: function defaultValue(val) {
            if (!Array.isArray(this.value)) {
              var _calcDefaultValue = date_rangevue_type_script_lang_js_calcDefaultValue(val), left = _calcDefaultValue[0], right = _calcDefaultValue[1];
              this.leftDate = left;
              this.rightDate = val && val[1] && this.unlinkPanels ? right : Object(date_util_["nextMonth"])(this.leftDate);
            }
          }
        },
        methods: {
          handleClear: function handleClear() {
            this.minDate = null;
            this.maxDate = null;
            this.leftDate = date_rangevue_type_script_lang_js_calcDefaultValue(this.defaultValue)[0];
            this.rightDate = Object(date_util_["nextMonth"])(this.leftDate);
            this.$emit("pick", null);
          },
          handleChangeRange: function handleChangeRange(val) {
            this.minDate = val.minDate;
            this.maxDate = val.maxDate;
            this.rangeState = val.rangeState;
          },
          handleDateInput: function handleDateInput(value6, type3) {
            this.dateUserInput[type3] = value6;
            if (value6.length !== this.dateFormat.length)
              return;
            var parsedValue = Object(date_util_["parseDate"])(value6, this.dateFormat);
            if (parsedValue) {
              if (typeof this.disabledDate === "function" && this.disabledDate(new Date(parsedValue))) {
                return;
              }
              if (type3 === "min") {
                this.minDate = Object(date_util_["modifyDate"])(this.minDate || new Date(), parsedValue.getFullYear(), parsedValue.getMonth(), parsedValue.getDate());
                this.leftDate = new Date(parsedValue);
                if (!this.unlinkPanels) {
                  this.rightDate = Object(date_util_["nextMonth"])(this.leftDate);
                }
              } else {
                this.maxDate = Object(date_util_["modifyDate"])(this.maxDate || new Date(), parsedValue.getFullYear(), parsedValue.getMonth(), parsedValue.getDate());
                this.rightDate = new Date(parsedValue);
                if (!this.unlinkPanels) {
                  this.leftDate = Object(date_util_["prevMonth"])(parsedValue);
                }
              }
            }
          },
          handleDateChange: function handleDateChange(value6, type3) {
            var parsedValue = Object(date_util_["parseDate"])(value6, this.dateFormat);
            if (parsedValue) {
              if (type3 === "min") {
                this.minDate = Object(date_util_["modifyDate"])(this.minDate, parsedValue.getFullYear(), parsedValue.getMonth(), parsedValue.getDate());
                if (this.minDate > this.maxDate) {
                  this.maxDate = this.minDate;
                }
              } else {
                this.maxDate = Object(date_util_["modifyDate"])(this.maxDate, parsedValue.getFullYear(), parsedValue.getMonth(), parsedValue.getDate());
                if (this.maxDate < this.minDate) {
                  this.minDate = this.maxDate;
                }
              }
            }
          },
          handleTimeInput: function handleTimeInput(value6, type3) {
            var _this4 = this;
            this.timeUserInput[type3] = value6;
            if (value6.length !== this.timeFormat.length)
              return;
            var parsedValue = Object(date_util_["parseDate"])(value6, this.timeFormat);
            if (parsedValue) {
              if (type3 === "min") {
                this.minDate = Object(date_util_["modifyTime"])(this.minDate, parsedValue.getHours(), parsedValue.getMinutes(), parsedValue.getSeconds());
                this.$nextTick(function(_) {
                  return _this4.$refs.minTimePicker.adjustSpinners();
                });
              } else {
                this.maxDate = Object(date_util_["modifyTime"])(this.maxDate, parsedValue.getHours(), parsedValue.getMinutes(), parsedValue.getSeconds());
                this.$nextTick(function(_) {
                  return _this4.$refs.maxTimePicker.adjustSpinners();
                });
              }
            }
          },
          handleTimeChange: function handleTimeChange(value6, type3) {
            var parsedValue = Object(date_util_["parseDate"])(value6, this.timeFormat);
            if (parsedValue) {
              if (type3 === "min") {
                this.minDate = Object(date_util_["modifyTime"])(this.minDate, parsedValue.getHours(), parsedValue.getMinutes(), parsedValue.getSeconds());
                if (this.minDate > this.maxDate) {
                  this.maxDate = this.minDate;
                }
                this.$refs.minTimePicker.value = this.minDate;
                this.minTimePickerVisible = false;
              } else {
                this.maxDate = Object(date_util_["modifyTime"])(this.maxDate, parsedValue.getHours(), parsedValue.getMinutes(), parsedValue.getSeconds());
                if (this.maxDate < this.minDate) {
                  this.minDate = this.maxDate;
                }
                this.$refs.maxTimePicker.value = this.minDate;
                this.maxTimePickerVisible = false;
              }
            }
          },
          handleRangePick: function handleRangePick(val) {
            var _this5 = this;
            var close4 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
            var defaultTime = this.defaultTime || [];
            var minDate = Object(date_util_["modifyWithTimeString"])(val.minDate, defaultTime[0]);
            var maxDate = Object(date_util_["modifyWithTimeString"])(val.maxDate, defaultTime[1]);
            if (this.maxDate === maxDate && this.minDate === minDate) {
              return;
            }
            this.onPick && this.onPick(val);
            this.maxDate = maxDate;
            this.minDate = minDate;
            setTimeout(function() {
              _this5.maxDate = maxDate;
              _this5.minDate = minDate;
            }, 10);
            if (!close4 || this.showTime)
              return;
            this.handleConfirm();
          },
          handleShortcutClick: function handleShortcutClick(shortcut) {
            if (shortcut.onClick) {
              shortcut.onClick(this);
            }
          },
          handleMinTimePick: function handleMinTimePick(value6, visible2, first2) {
            this.minDate = this.minDate || new Date();
            if (value6) {
              this.minDate = Object(date_util_["modifyTime"])(this.minDate, value6.getHours(), value6.getMinutes(), value6.getSeconds());
            }
            if (!first2) {
              this.minTimePickerVisible = visible2;
            }
            if (!this.maxDate || this.maxDate && this.maxDate.getTime() < this.minDate.getTime()) {
              this.maxDate = new Date(this.minDate);
            }
          },
          handleMinTimeClose: function handleMinTimeClose() {
            this.minTimePickerVisible = false;
          },
          handleMaxTimePick: function handleMaxTimePick(value6, visible2, first2) {
            if (this.maxDate && value6) {
              this.maxDate = Object(date_util_["modifyTime"])(this.maxDate, value6.getHours(), value6.getMinutes(), value6.getSeconds());
            }
            if (!first2) {
              this.maxTimePickerVisible = visible2;
            }
            if (this.maxDate && this.minDate && this.minDate.getTime() > this.maxDate.getTime()) {
              this.minDate = new Date(this.maxDate);
            }
          },
          handleMaxTimeClose: function handleMaxTimeClose() {
            this.maxTimePickerVisible = false;
          },
          leftPrevYear: function leftPrevYear() {
            this.leftDate = Object(date_util_["prevYear"])(this.leftDate);
            if (!this.unlinkPanels) {
              this.rightDate = Object(date_util_["nextMonth"])(this.leftDate);
            }
          },
          leftPrevMonth: function leftPrevMonth() {
            this.leftDate = Object(date_util_["prevMonth"])(this.leftDate);
            if (!this.unlinkPanels) {
              this.rightDate = Object(date_util_["nextMonth"])(this.leftDate);
            }
          },
          rightNextYear: function rightNextYear() {
            if (!this.unlinkPanels) {
              this.leftDate = Object(date_util_["nextYear"])(this.leftDate);
              this.rightDate = Object(date_util_["nextMonth"])(this.leftDate);
            } else {
              this.rightDate = Object(date_util_["nextYear"])(this.rightDate);
            }
          },
          rightNextMonth: function rightNextMonth() {
            if (!this.unlinkPanels) {
              this.leftDate = Object(date_util_["nextMonth"])(this.leftDate);
              this.rightDate = Object(date_util_["nextMonth"])(this.leftDate);
            } else {
              this.rightDate = Object(date_util_["nextMonth"])(this.rightDate);
            }
          },
          leftNextYear: function leftNextYear() {
            this.leftDate = Object(date_util_["nextYear"])(this.leftDate);
          },
          leftNextMonth: function leftNextMonth() {
            this.leftDate = Object(date_util_["nextMonth"])(this.leftDate);
          },
          rightPrevYear: function rightPrevYear() {
            this.rightDate = Object(date_util_["prevYear"])(this.rightDate);
          },
          rightPrevMonth: function rightPrevMonth() {
            this.rightDate = Object(date_util_["prevMonth"])(this.rightDate);
          },
          handleConfirm: function handleConfirm() {
            var visible2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
            if (this.isValidValue([this.minDate, this.maxDate])) {
              this.$emit("pick", [this.minDate, this.maxDate], visible2);
            }
          },
          isValidValue: function isValidValue(value6) {
            return Array.isArray(value6) && value6 && value6[0] && value6[1] && Object(date_util_["isDate"])(value6[0]) && Object(date_util_["isDate"])(value6[1]) && value6[0].getTime() <= value6[1].getTime() && (typeof this.disabledDate === "function" ? !this.disabledDate(value6[0]) && !this.disabledDate(value6[1]) : true);
          },
          resetView: function resetView() {
            if (this.minDate && this.maxDate == null)
              this.rangeState.selecting = false;
            this.minDate = this.value && Object(date_util_["isDate"])(this.value[0]) ? new Date(this.value[0]) : null;
            this.maxDate = this.value && Object(date_util_["isDate"])(this.value[0]) ? new Date(this.value[1]) : null;
          }
        },
        components: { TimePicker: panel_time, DateTable: date_table, ElInput: input_default.a, ElButton: button_default.a }
      };
      var panel_date_rangevue_type_script_lang_js_ = date_rangevue_type_script_lang_js_;
      var date_range_component = normalizeComponent(panel_date_rangevue_type_script_lang_js_, date_rangevue_type_template_id_2652849a_render, date_rangevue_type_template_id_2652849a_staticRenderFns, false, null, null, null);
      date_range_component.options.__file = "packages/date-picker/src/panel/date-range.vue";
      var date_range = date_range_component.exports;
      var month_rangevue_type_template_id_f2645fb8_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("transition", {
          attrs: { name: "el-zoom-in-top" },
          on: {
            "after-leave": function($event) {
              _vm.$emit("dodestroy");
            }
          }
        }, [
          _c("div", {
            directives: [
              {
                name: "show",
                rawName: "v-show",
                value: _vm.visible,
                expression: "visible"
              }
            ],
            staticClass: "el-picker-panel el-date-range-picker el-popper",
            class: [
              {
                "has-sidebar": _vm.$slots.sidebar || _vm.shortcuts
              },
              _vm.popperClass
            ]
          }, [
            _c("div", { staticClass: "el-picker-panel__body-wrapper" }, [
              _vm._t("sidebar"),
              _vm.shortcuts ? _c("div", { staticClass: "el-picker-panel__sidebar" }, _vm._l(_vm.shortcuts, function(shortcut, key) {
                return _c("button", {
                  key,
                  staticClass: "el-picker-panel__shortcut",
                  attrs: { type: "button" },
                  on: {
                    click: function($event) {
                      _vm.handleShortcutClick(shortcut);
                    }
                  }
                }, [_vm._v(_vm._s(shortcut.text))]);
              }), 0) : _vm._e(),
              _c("div", { staticClass: "el-picker-panel__body" }, [
                _c("div", {
                  staticClass: "el-picker-panel__content el-date-range-picker__content is-left"
                }, [
                  _c("div", { staticClass: "el-date-range-picker__header" }, [
                    _c("button", {
                      staticClass: "el-picker-panel__icon-btn el-icon-d-arrow-left",
                      attrs: { type: "button" },
                      on: { click: _vm.leftPrevYear }
                    }),
                    _vm.unlinkPanels ? _c("button", {
                      staticClass: "el-picker-panel__icon-btn el-icon-d-arrow-right",
                      class: { "is-disabled": !_vm.enableYearArrow },
                      attrs: {
                        type: "button",
                        disabled: !_vm.enableYearArrow
                      },
                      on: { click: _vm.leftNextYear }
                    }) : _vm._e(),
                    _c("div", [_vm._v(_vm._s(_vm.leftLabel))])
                  ]),
                  _c("month-table", {
                    attrs: {
                      "selection-mode": "range",
                      date: _vm.leftDate,
                      "default-value": _vm.defaultValue,
                      "min-date": _vm.minDate,
                      "max-date": _vm.maxDate,
                      "range-state": _vm.rangeState,
                      "disabled-date": _vm.disabledDate
                    },
                    on: {
                      changerange: _vm.handleChangeRange,
                      pick: _vm.handleRangePick
                    }
                  })
                ], 1),
                _c("div", {
                  staticClass: "el-picker-panel__content el-date-range-picker__content is-right"
                }, [
                  _c("div", { staticClass: "el-date-range-picker__header" }, [
                    _vm.unlinkPanels ? _c("button", {
                      staticClass: "el-picker-panel__icon-btn el-icon-d-arrow-left",
                      class: { "is-disabled": !_vm.enableYearArrow },
                      attrs: {
                        type: "button",
                        disabled: !_vm.enableYearArrow
                      },
                      on: { click: _vm.rightPrevYear }
                    }) : _vm._e(),
                    _c("button", {
                      staticClass: "el-picker-panel__icon-btn el-icon-d-arrow-right",
                      attrs: { type: "button" },
                      on: { click: _vm.rightNextYear }
                    }),
                    _c("div", [_vm._v(_vm._s(_vm.rightLabel))])
                  ]),
                  _c("month-table", {
                    attrs: {
                      "selection-mode": "range",
                      date: _vm.rightDate,
                      "default-value": _vm.defaultValue,
                      "min-date": _vm.minDate,
                      "max-date": _vm.maxDate,
                      "range-state": _vm.rangeState,
                      "disabled-date": _vm.disabledDate
                    },
                    on: {
                      changerange: _vm.handleChangeRange,
                      pick: _vm.handleRangePick
                    }
                  })
                ], 1)
              ])
            ], 2)
          ])
        ]);
      };
      var month_rangevue_type_template_id_f2645fb8_staticRenderFns = [];
      month_rangevue_type_template_id_f2645fb8_render._withStripped = true;
      var month_rangevue_type_script_lang_js_calcDefaultValue = function calcDefaultValue(defaultValue) {
        if (Array.isArray(defaultValue)) {
          return [new Date(defaultValue[0]), new Date(defaultValue[1])];
        } else if (defaultValue) {
          return [new Date(defaultValue), Object(date_util_["nextMonth"])(new Date(defaultValue))];
        } else {
          return [new Date(), Object(date_util_["nextMonth"])(new Date())];
        }
      };
      var month_rangevue_type_script_lang_js_ = {
        mixins: [locale_default.a],
        directives: { Clickoutside: clickoutside_default.a },
        computed: {
          btnDisabled: function btnDisabled() {
            return !(this.minDate && this.maxDate && !this.selecting && this.isValidValue([this.minDate, this.maxDate]));
          },
          leftLabel: function leftLabel() {
            return this.leftDate.getFullYear() + " " + this.t("el.datepicker.year");
          },
          rightLabel: function rightLabel() {
            return this.rightDate.getFullYear() + " " + this.t("el.datepicker.year");
          },
          leftYear: function leftYear() {
            return this.leftDate.getFullYear();
          },
          rightYear: function rightYear() {
            return this.rightDate.getFullYear() === this.leftDate.getFullYear() ? this.leftDate.getFullYear() + 1 : this.rightDate.getFullYear();
          },
          enableYearArrow: function enableYearArrow() {
            return this.unlinkPanels && this.rightYear > this.leftYear + 1;
          }
        },
        data: function data25() {
          return {
            popperClass: "",
            value: [],
            defaultValue: null,
            defaultTime: null,
            minDate: "",
            maxDate: "",
            leftDate: new Date(),
            rightDate: Object(date_util_["nextYear"])(new Date()),
            rangeState: {
              endDate: null,
              selecting: false,
              row: null,
              column: null
            },
            shortcuts: "",
            visible: "",
            disabledDate: "",
            format: "",
            arrowControl: false,
            unlinkPanels: false
          };
        },
        watch: {
          value: function value6(newVal) {
            if (!newVal) {
              this.minDate = null;
              this.maxDate = null;
            } else if (Array.isArray(newVal)) {
              this.minDate = Object(date_util_["isDate"])(newVal[0]) ? new Date(newVal[0]) : null;
              this.maxDate = Object(date_util_["isDate"])(newVal[1]) ? new Date(newVal[1]) : null;
              if (this.minDate) {
                this.leftDate = this.minDate;
                if (this.unlinkPanels && this.maxDate) {
                  var minDateYear = this.minDate.getFullYear();
                  var maxDateYear = this.maxDate.getFullYear();
                  this.rightDate = minDateYear === maxDateYear ? Object(date_util_["nextYear"])(this.maxDate) : this.maxDate;
                } else {
                  this.rightDate = Object(date_util_["nextYear"])(this.leftDate);
                }
              } else {
                this.leftDate = month_rangevue_type_script_lang_js_calcDefaultValue(this.defaultValue)[0];
                this.rightDate = Object(date_util_["nextYear"])(this.leftDate);
              }
            }
          },
          defaultValue: function defaultValue(val) {
            if (!Array.isArray(this.value)) {
              var _calcDefaultValue = month_rangevue_type_script_lang_js_calcDefaultValue(val), left = _calcDefaultValue[0], right = _calcDefaultValue[1];
              this.leftDate = left;
              this.rightDate = val && val[1] && left.getFullYear() !== right.getFullYear() && this.unlinkPanels ? right : Object(date_util_["nextYear"])(this.leftDate);
            }
          }
        },
        methods: {
          handleClear: function handleClear() {
            this.minDate = null;
            this.maxDate = null;
            this.leftDate = month_rangevue_type_script_lang_js_calcDefaultValue(this.defaultValue)[0];
            this.rightDate = Object(date_util_["nextYear"])(this.leftDate);
            this.$emit("pick", null);
          },
          handleChangeRange: function handleChangeRange(val) {
            this.minDate = val.minDate;
            this.maxDate = val.maxDate;
            this.rangeState = val.rangeState;
          },
          handleRangePick: function handleRangePick(val) {
            var _this = this;
            var close4 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
            var defaultTime = this.defaultTime || [];
            var minDate = Object(date_util_["modifyWithTimeString"])(val.minDate, defaultTime[0]);
            var maxDate = Object(date_util_["modifyWithTimeString"])(val.maxDate, defaultTime[1]);
            if (this.maxDate === maxDate && this.minDate === minDate) {
              return;
            }
            this.onPick && this.onPick(val);
            this.maxDate = maxDate;
            this.minDate = minDate;
            setTimeout(function() {
              _this.maxDate = maxDate;
              _this.minDate = minDate;
            }, 10);
            if (!close4)
              return;
            this.handleConfirm();
          },
          handleShortcutClick: function handleShortcutClick(shortcut) {
            if (shortcut.onClick) {
              shortcut.onClick(this);
            }
          },
          leftPrevYear: function leftPrevYear() {
            this.leftDate = Object(date_util_["prevYear"])(this.leftDate);
            if (!this.unlinkPanels) {
              this.rightDate = Object(date_util_["prevYear"])(this.rightDate);
            }
          },
          rightNextYear: function rightNextYear() {
            if (!this.unlinkPanels) {
              this.leftDate = Object(date_util_["nextYear"])(this.leftDate);
            }
            this.rightDate = Object(date_util_["nextYear"])(this.rightDate);
          },
          leftNextYear: function leftNextYear() {
            this.leftDate = Object(date_util_["nextYear"])(this.leftDate);
          },
          rightPrevYear: function rightPrevYear() {
            this.rightDate = Object(date_util_["prevYear"])(this.rightDate);
          },
          handleConfirm: function handleConfirm() {
            var visible2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
            if (this.isValidValue([this.minDate, this.maxDate])) {
              this.$emit("pick", [this.minDate, this.maxDate], visible2);
            }
          },
          isValidValue: function isValidValue(value6) {
            return Array.isArray(value6) && value6 && value6[0] && value6[1] && Object(date_util_["isDate"])(value6[0]) && Object(date_util_["isDate"])(value6[1]) && value6[0].getTime() <= value6[1].getTime() && (typeof this.disabledDate === "function" ? !this.disabledDate(value6[0]) && !this.disabledDate(value6[1]) : true);
          },
          resetView: function resetView() {
            this.minDate = this.value && Object(date_util_["isDate"])(this.value[0]) ? new Date(this.value[0]) : null;
            this.maxDate = this.value && Object(date_util_["isDate"])(this.value[0]) ? new Date(this.value[1]) : null;
          }
        },
        components: { MonthTable: month_table, ElInput: input_default.a, ElButton: button_default.a }
      };
      var panel_month_rangevue_type_script_lang_js_ = month_rangevue_type_script_lang_js_;
      var month_range_component = normalizeComponent(panel_month_rangevue_type_script_lang_js_, month_rangevue_type_template_id_f2645fb8_render, month_rangevue_type_template_id_f2645fb8_staticRenderFns, false, null, null, null);
      month_range_component.options.__file = "packages/date-picker/src/panel/month-range.vue";
      var month_range = month_range_component.exports;
      var date_picker_getPanel = function getPanel(type3) {
        if (type3 === "daterange" || type3 === "datetimerange") {
          return date_range;
        } else if (type3 === "monthrange") {
          return month_range;
        }
        return panel_date;
      };
      var date_picker = {
        mixins: [picker],
        name: "ElDatePicker",
        props: {
          type: {
            type: String,
            default: "date"
          },
          timeArrowControl: Boolean
        },
        watch: {
          type: function type3(_type) {
            if (this.picker) {
              this.unmountPicker();
              this.panel = date_picker_getPanel(_type);
              this.mountPicker();
            } else {
              this.panel = date_picker_getPanel(_type);
            }
          }
        },
        created: function created20() {
          this.panel = date_picker_getPanel(this.type);
        }
      };
      date_picker.install = function install34(Vue2) {
        Vue2.component(date_picker.name, date_picker);
      };
      var packages_date_picker = date_picker;
      var time_selectvue_type_template_id_51ab9320_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("transition", {
          attrs: { name: "el-zoom-in-top" },
          on: {
            "before-enter": _vm.handleMenuEnter,
            "after-leave": function($event) {
              _vm.$emit("dodestroy");
            }
          }
        }, [
          _c("div", {
            directives: [
              {
                name: "show",
                rawName: "v-show",
                value: _vm.visible,
                expression: "visible"
              }
            ],
            ref: "popper",
            staticClass: "el-picker-panel time-select el-popper",
            class: _vm.popperClass,
            style: { width: _vm.width + "px" }
          }, [
            _c("el-scrollbar", {
              attrs: { noresize: "", "wrap-class": "el-picker-panel__content" }
            }, _vm._l(_vm.items, function(item) {
              return _c("div", {
                key: item.value,
                staticClass: "time-select-item",
                class: {
                  selected: _vm.value === item.value,
                  disabled: item.disabled,
                  default: item.value === _vm.defaultValue
                },
                attrs: { disabled: item.disabled },
                on: {
                  click: function($event) {
                    _vm.handleClick(item);
                  }
                }
              }, [_vm._v(_vm._s(item.value))]);
            }), 0)
          ], 1)
        ]);
      };
      var time_selectvue_type_template_id_51ab9320_staticRenderFns = [];
      time_selectvue_type_template_id_51ab9320_render._withStripped = true;
      var parseTime = function parseTime2(time) {
        var values2 = (time || "").split(":");
        if (values2.length >= 2) {
          var hours = parseInt(values2[0], 10);
          var minutes = parseInt(values2[1], 10);
          return {
            hours,
            minutes
          };
        }
        return null;
      };
      var compareTime = function compareTime2(time1, time2) {
        var value1 = parseTime(time1);
        var value22 = parseTime(time2);
        var minutes1 = value1.minutes + value1.hours * 60;
        var minutes2 = value22.minutes + value22.hours * 60;
        if (minutes1 === minutes2) {
          return 0;
        }
        return minutes1 > minutes2 ? 1 : -1;
      };
      var formatTime = function formatTime2(time) {
        return (time.hours < 10 ? "0" + time.hours : time.hours) + ":" + (time.minutes < 10 ? "0" + time.minutes : time.minutes);
      };
      var nextTime = function nextTime2(time, step3) {
        var timeValue = parseTime(time);
        var stepValue2 = parseTime(step3);
        var next = {
          hours: timeValue.hours,
          minutes: timeValue.minutes
        };
        next.minutes += stepValue2.minutes;
        next.hours += stepValue2.hours;
        next.hours += Math.floor(next.minutes / 60);
        next.minutes = next.minutes % 60;
        return formatTime(next);
      };
      var time_selectvue_type_script_lang_js_ = {
        components: { ElScrollbar: scrollbar_default.a },
        watch: {
          value: function value6(val) {
            var _this = this;
            if (!val)
              return;
            this.$nextTick(function() {
              return _this.scrollToOption();
            });
          }
        },
        methods: {
          handleClick: function handleClick(item) {
            if (!item.disabled) {
              this.$emit("pick", item.value);
            }
          },
          handleClear: function handleClear() {
            this.$emit("pick", null);
          },
          scrollToOption: function scrollToOption2() {
            var selector = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : ".selected";
            var menu2 = this.$refs.popper.querySelector(".el-picker-panel__content");
            scroll_into_view_default()(menu2, menu2.querySelector(selector));
          },
          handleMenuEnter: function handleMenuEnter() {
            var _this2 = this;
            var selected = this.items.map(function(item) {
              return item.value;
            }).indexOf(this.value) !== -1;
            var hasDefault = this.items.map(function(item) {
              return item.value;
            }).indexOf(this.defaultValue) !== -1;
            var option2 = selected && ".selected" || hasDefault && ".default" || ".time-select-item:not(.disabled)";
            this.$nextTick(function() {
              return _this2.scrollToOption(option2);
            });
          },
          scrollDown: function scrollDown(step3) {
            var items2 = this.items;
            var length = items2.length;
            var total = items2.length;
            var index2 = items2.map(function(item) {
              return item.value;
            }).indexOf(this.value);
            while (total--) {
              index2 = (index2 + step3 + length) % length;
              if (!items2[index2].disabled) {
                this.$emit("pick", items2[index2].value, true);
                return;
              }
            }
          },
          isValidValue: function isValidValue(date3) {
            return this.items.filter(function(item) {
              return !item.disabled;
            }).map(function(item) {
              return item.value;
            }).indexOf(date3) !== -1;
          },
          handleKeydown: function handleKeydown(event2) {
            var keyCode2 = event2.keyCode;
            if (keyCode2 === 38 || keyCode2 === 40) {
              var mapping = { 40: 1, 38: -1 };
              var offset = mapping[keyCode2.toString()];
              this.scrollDown(offset);
              event2.stopPropagation();
              return;
            }
          }
        },
        data: function data25() {
          return {
            popperClass: "",
            start: "09:00",
            end: "18:00",
            step: "00:30",
            value: "",
            defaultValue: "",
            visible: false,
            minTime: "",
            maxTime: "",
            width: 0
          };
        },
        computed: {
          items: function items2() {
            var start = this.start;
            var end = this.end;
            var step3 = this.step;
            var result2 = [];
            if (start && end && step3) {
              var current = start;
              while (compareTime(current, end) <= 0) {
                result2.push({
                  value: current,
                  disabled: compareTime(current, this.minTime || "-1:-1") <= 0 || compareTime(current, this.maxTime || "100:100") >= 0
                });
                current = nextTime(current, step3);
              }
            }
            return result2;
          }
        }
      };
      var panel_time_selectvue_type_script_lang_js_ = time_selectvue_type_script_lang_js_;
      var time_select_component = normalizeComponent(panel_time_selectvue_type_script_lang_js_, time_selectvue_type_template_id_51ab9320_render, time_selectvue_type_template_id_51ab9320_staticRenderFns, false, null, null, null);
      time_select_component.options.__file = "packages/date-picker/src/panel/time-select.vue";
      var time_select = time_select_component.exports;
      var picker_time_select = {
        mixins: [picker],
        name: "ElTimeSelect",
        componentName: "ElTimeSelect",
        props: {
          type: {
            type: String,
            default: "time-select"
          }
        },
        beforeCreate: function beforeCreate() {
          this.panel = time_select;
        }
      };
      picker_time_select.install = function(Vue2) {
        Vue2.component(picker_time_select.name, picker_time_select);
      };
      var packages_time_select = picker_time_select;
      var time_rangevue_type_template_id_fb28660e_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("transition", {
          attrs: { name: "el-zoom-in-top" },
          on: {
            "after-leave": function($event) {
              _vm.$emit("dodestroy");
            }
          }
        }, [
          _c("div", {
            directives: [
              {
                name: "show",
                rawName: "v-show",
                value: _vm.visible,
                expression: "visible"
              }
            ],
            staticClass: "el-time-range-picker el-picker-panel el-popper",
            class: _vm.popperClass
          }, [
            _c("div", { staticClass: "el-time-range-picker__content" }, [
              _c("div", { staticClass: "el-time-range-picker__cell" }, [
                _c("div", { staticClass: "el-time-range-picker__header" }, [
                  _vm._v(_vm._s(_vm.t("el.datepicker.startTime")))
                ]),
                _c("div", {
                  staticClass: "el-time-range-picker__body el-time-panel__content",
                  class: {
                    "has-seconds": _vm.showSeconds,
                    "is-arrow": _vm.arrowControl
                  }
                }, [
                  _c("time-spinner", {
                    ref: "minSpinner",
                    attrs: {
                      "show-seconds": _vm.showSeconds,
                      "am-pm-mode": _vm.amPmMode,
                      "arrow-control": _vm.arrowControl,
                      date: _vm.minDate
                    },
                    on: {
                      change: _vm.handleMinChange,
                      "select-range": _vm.setMinSelectionRange
                    }
                  })
                ], 1)
              ]),
              _c("div", { staticClass: "el-time-range-picker__cell" }, [
                _c("div", { staticClass: "el-time-range-picker__header" }, [
                  _vm._v(_vm._s(_vm.t("el.datepicker.endTime")))
                ]),
                _c("div", {
                  staticClass: "el-time-range-picker__body el-time-panel__content",
                  class: {
                    "has-seconds": _vm.showSeconds,
                    "is-arrow": _vm.arrowControl
                  }
                }, [
                  _c("time-spinner", {
                    ref: "maxSpinner",
                    attrs: {
                      "show-seconds": _vm.showSeconds,
                      "am-pm-mode": _vm.amPmMode,
                      "arrow-control": _vm.arrowControl,
                      date: _vm.maxDate
                    },
                    on: {
                      change: _vm.handleMaxChange,
                      "select-range": _vm.setMaxSelectionRange
                    }
                  })
                ], 1)
              ])
            ]),
            _c("div", { staticClass: "el-time-panel__footer" }, [
              _c("button", {
                staticClass: "el-time-panel__btn cancel",
                attrs: { type: "button" },
                on: {
                  click: function($event) {
                    _vm.handleCancel();
                  }
                }
              }, [_vm._v(_vm._s(_vm.t("el.datepicker.cancel")))]),
              _c("button", {
                staticClass: "el-time-panel__btn confirm",
                attrs: { type: "button", disabled: _vm.btnDisabled },
                on: {
                  click: function($event) {
                    _vm.handleConfirm();
                  }
                }
              }, [_vm._v(_vm._s(_vm.t("el.datepicker.confirm")))])
            ])
          ])
        ]);
      };
      var time_rangevue_type_template_id_fb28660e_staticRenderFns = [];
      time_rangevue_type_template_id_fb28660e_render._withStripped = true;
      var MIN_TIME = Object(date_util_["parseDate"])("00:00:00", "HH:mm:ss");
      var MAX_TIME = Object(date_util_["parseDate"])("23:59:59", "HH:mm:ss");
      var time_rangevue_type_script_lang_js_minTimeOfDay = function minTimeOfDay(date3) {
        return Object(date_util_["modifyDate"])(MIN_TIME, date3.getFullYear(), date3.getMonth(), date3.getDate());
      };
      var time_rangevue_type_script_lang_js_maxTimeOfDay = function maxTimeOfDay(date3) {
        return Object(date_util_["modifyDate"])(MAX_TIME, date3.getFullYear(), date3.getMonth(), date3.getDate());
      };
      var advanceTime = function advanceTime2(date3, amount) {
        return new Date(Math.min(date3.getTime() + amount, time_rangevue_type_script_lang_js_maxTimeOfDay(date3).getTime()));
      };
      var time_rangevue_type_script_lang_js_ = {
        mixins: [locale_default.a],
        components: { TimeSpinner: time_spinner },
        computed: {
          showSeconds: function showSeconds() {
            return (this.format || "").indexOf("ss") !== -1;
          },
          offset: function offset() {
            return this.showSeconds ? 11 : 8;
          },
          spinner: function spinner2() {
            return this.selectionRange[0] < this.offset ? this.$refs.minSpinner : this.$refs.maxSpinner;
          },
          btnDisabled: function btnDisabled() {
            return this.minDate.getTime() > this.maxDate.getTime();
          },
          amPmMode: function amPmMode() {
            if ((this.format || "").indexOf("A") !== -1)
              return "A";
            if ((this.format || "").indexOf("a") !== -1)
              return "a";
            return "";
          }
        },
        data: function data25() {
          return {
            popperClass: "",
            minDate: new Date(),
            maxDate: new Date(),
            value: [],
            oldValue: [new Date(), new Date()],
            defaultValue: null,
            format: "HH:mm:ss",
            visible: false,
            selectionRange: [0, 2],
            arrowControl: false
          };
        },
        watch: {
          value: function value6(_value) {
            if (Array.isArray(_value)) {
              this.minDate = new Date(_value[0]);
              this.maxDate = new Date(_value[1]);
            } else {
              if (Array.isArray(this.defaultValue)) {
                this.minDate = new Date(this.defaultValue[0]);
                this.maxDate = new Date(this.defaultValue[1]);
              } else if (this.defaultValue) {
                this.minDate = new Date(this.defaultValue);
                this.maxDate = advanceTime(new Date(this.defaultValue), 60 * 60 * 1e3);
              } else {
                this.minDate = new Date();
                this.maxDate = advanceTime(new Date(), 60 * 60 * 1e3);
              }
            }
          },
          visible: function visible2(val) {
            var _this = this;
            if (val) {
              this.oldValue = this.value;
              this.$nextTick(function() {
                return _this.$refs.minSpinner.emitSelectRange("hours");
              });
            }
          }
        },
        methods: {
          handleClear: function handleClear() {
            this.$emit("pick", null);
          },
          handleCancel: function handleCancel() {
            this.$emit("pick", this.oldValue);
          },
          handleMinChange: function handleMinChange(date3) {
            this.minDate = Object(date_util_["clearMilliseconds"])(date3);
            this.handleChange();
          },
          handleMaxChange: function handleMaxChange(date3) {
            this.maxDate = Object(date_util_["clearMilliseconds"])(date3);
            this.handleChange();
          },
          handleChange: function handleChange() {
            if (this.isValidValue([this.minDate, this.maxDate])) {
              this.$refs.minSpinner.selectableRange = [[time_rangevue_type_script_lang_js_minTimeOfDay(this.minDate), this.maxDate]];
              this.$refs.maxSpinner.selectableRange = [[this.minDate, time_rangevue_type_script_lang_js_maxTimeOfDay(this.maxDate)]];
              this.$emit("pick", [this.minDate, this.maxDate], true);
            }
          },
          setMinSelectionRange: function setMinSelectionRange(start, end) {
            this.$emit("select-range", start, end, "min");
            this.selectionRange = [start, end];
          },
          setMaxSelectionRange: function setMaxSelectionRange(start, end) {
            this.$emit("select-range", start, end, "max");
            this.selectionRange = [start + this.offset, end + this.offset];
          },
          handleConfirm: function handleConfirm() {
            var visible2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
            var minSelectableRange = this.$refs.minSpinner.selectableRange;
            var maxSelectableRange = this.$refs.maxSpinner.selectableRange;
            this.minDate = Object(date_util_["limitTimeRange"])(this.minDate, minSelectableRange, this.format);
            this.maxDate = Object(date_util_["limitTimeRange"])(this.maxDate, maxSelectableRange, this.format);
            this.$emit("pick", [this.minDate, this.maxDate], visible2);
          },
          adjustSpinners: function adjustSpinners() {
            this.$refs.minSpinner.adjustSpinners();
            this.$refs.maxSpinner.adjustSpinners();
          },
          changeSelectionRange: function changeSelectionRange(step3) {
            var list2 = this.showSeconds ? [0, 3, 6, 11, 14, 17] : [0, 3, 8, 11];
            var mapping = ["hours", "minutes"].concat(this.showSeconds ? ["seconds"] : []);
            var index2 = list2.indexOf(this.selectionRange[0]);
            var next = (index2 + step3 + list2.length) % list2.length;
            var half = list2.length / 2;
            if (next < half) {
              this.$refs.minSpinner.emitSelectRange(mapping[next]);
            } else {
              this.$refs.maxSpinner.emitSelectRange(mapping[next - half]);
            }
          },
          isValidValue: function isValidValue(date3) {
            return Array.isArray(date3) && Object(date_util_["timeWithinRange"])(this.minDate, this.$refs.minSpinner.selectableRange) && Object(date_util_["timeWithinRange"])(this.maxDate, this.$refs.maxSpinner.selectableRange);
          },
          handleKeydown: function handleKeydown(event2) {
            var keyCode2 = event2.keyCode;
            var mapping = { 38: -1, 40: 1, 37: -1, 39: 1 };
            if (keyCode2 === 37 || keyCode2 === 39) {
              var step3 = mapping[keyCode2];
              this.changeSelectionRange(step3);
              event2.preventDefault();
              return;
            }
            if (keyCode2 === 38 || keyCode2 === 40) {
              var _step = mapping[keyCode2];
              this.spinner.scrollDown(_step);
              event2.preventDefault();
              return;
            }
          }
        }
      };
      var panel_time_rangevue_type_script_lang_js_ = time_rangevue_type_script_lang_js_;
      var time_range_component = normalizeComponent(panel_time_rangevue_type_script_lang_js_, time_rangevue_type_template_id_fb28660e_render, time_rangevue_type_template_id_fb28660e_staticRenderFns, false, null, null, null);
      time_range_component.options.__file = "packages/date-picker/src/panel/time-range.vue";
      var time_range = time_range_component.exports;
      var time_picker = {
        mixins: [picker],
        name: "ElTimePicker",
        props: {
          isRange: Boolean,
          arrowControl: Boolean
        },
        data: function data25() {
          return {
            type: ""
          };
        },
        watch: {
          isRange: function isRange(_isRange) {
            if (this.picker) {
              this.unmountPicker();
              this.type = _isRange ? "timerange" : "time";
              this.panel = _isRange ? time_range : panel_time;
              this.mountPicker();
            } else {
              this.type = _isRange ? "timerange" : "time";
              this.panel = _isRange ? time_range : panel_time;
            }
          }
        },
        created: function created20() {
          this.type = this.isRange ? "timerange" : "time";
          this.panel = this.isRange ? time_range : panel_time;
        }
      };
      time_picker.install = function(Vue2) {
        Vue2.component(time_picker.name, time_picker);
      };
      var packages_time_picker = time_picker;
      var mainvue_type_template_id_52060272_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("span", [
          _c("transition", {
            attrs: { name: _vm.transition },
            on: {
              "after-enter": _vm.handleAfterEnter,
              "after-leave": _vm.handleAfterLeave
            }
          }, [
            _c("div", {
              directives: [
                {
                  name: "show",
                  rawName: "v-show",
                  value: !_vm.disabled && _vm.showPopper,
                  expression: "!disabled && showPopper"
                }
              ],
              ref: "popper",
              staticClass: "el-popover el-popper",
              class: [_vm.popperClass, _vm.content && "el-popover--plain"],
              style: { width: _vm.width + "px" },
              attrs: {
                role: "tooltip",
                id: _vm.tooltipId,
                "aria-hidden": _vm.disabled || !_vm.showPopper ? "true" : "false"
              }
            }, [
              _vm.title ? _c("div", {
                staticClass: "el-popover__title",
                domProps: { textContent: _vm._s(_vm.title) }
              }) : _vm._e(),
              _vm._t("default", [_vm._v(_vm._s(_vm.content))])
            ], 2)
          ]),
          _c("span", { ref: "wrapper", staticClass: "el-popover__reference-wrapper" }, [_vm._t("reference")], 2)
        ], 1);
      };
      var mainvue_type_template_id_52060272_staticRenderFns = [];
      mainvue_type_template_id_52060272_render._withStripped = true;
      var mainvue_type_script_lang_js_ = {
        name: "ElPopover",
        mixins: [vue_popper_default.a],
        props: {
          trigger: {
            type: String,
            default: "click",
            validator: function validator2(value6) {
              return ["click", "focus", "hover", "manual"].indexOf(value6) > -1;
            }
          },
          openDelay: {
            type: Number,
            default: 0
          },
          closeDelay: {
            type: Number,
            default: 200
          },
          title: String,
          disabled: Boolean,
          content: String,
          reference: {},
          popperClass: String,
          width: {},
          visibleArrow: {
            default: true
          },
          arrowOffset: {
            type: Number,
            default: 0
          },
          transition: {
            type: String,
            default: "fade-in-linear"
          },
          tabindex: {
            type: Number,
            default: 0
          }
        },
        computed: {
          tooltipId: function tooltipId() {
            return "el-popover-" + Object(util_["generateId"])();
          }
        },
        watch: {
          showPopper: function showPopper2(val) {
            if (this.disabled) {
              return;
            }
            val ? this.$emit("show") : this.$emit("hide");
          }
        },
        mounted: function mounted18() {
          var _this = this;
          var reference = this.referenceElm = this.reference || this.$refs.reference;
          var popper2 = this.popper || this.$refs.popper;
          if (!reference && this.$refs.wrapper.children) {
            reference = this.referenceElm = this.$refs.wrapper.children[0];
          }
          if (reference) {
            Object(dom_["addClass"])(reference, "el-popover__reference");
            reference.setAttribute("aria-describedby", this.tooltipId);
            reference.setAttribute("tabindex", this.tabindex);
            popper2.setAttribute("tabindex", 0);
            if (this.trigger !== "click") {
              Object(dom_["on"])(reference, "focusin", function() {
                _this.handleFocus();
                var instance = reference.__vue__;
                if (instance && typeof instance.focus === "function") {
                  instance.focus();
                }
              });
              Object(dom_["on"])(popper2, "focusin", this.handleFocus);
              Object(dom_["on"])(reference, "focusout", this.handleBlur);
              Object(dom_["on"])(popper2, "focusout", this.handleBlur);
            }
            Object(dom_["on"])(reference, "keydown", this.handleKeydown);
            Object(dom_["on"])(reference, "click", this.handleClick);
          }
          if (this.trigger === "click") {
            Object(dom_["on"])(reference, "click", this.doToggle);
            Object(dom_["on"])(document, "click", this.handleDocumentClick);
          } else if (this.trigger === "hover") {
            Object(dom_["on"])(reference, "mouseenter", this.handleMouseEnter);
            Object(dom_["on"])(popper2, "mouseenter", this.handleMouseEnter);
            Object(dom_["on"])(reference, "mouseleave", this.handleMouseLeave);
            Object(dom_["on"])(popper2, "mouseleave", this.handleMouseLeave);
          } else if (this.trigger === "focus") {
            if (this.tabindex < 0) {
              console.warn("[Element Warn][Popover]a negative taindex means that the element cannot be focused by tab key");
            }
            if (reference.querySelector("input, textarea")) {
              Object(dom_["on"])(reference, "focusin", this.doShow);
              Object(dom_["on"])(reference, "focusout", this.doClose);
            } else {
              Object(dom_["on"])(reference, "mousedown", this.doShow);
              Object(dom_["on"])(reference, "mouseup", this.doClose);
            }
          }
        },
        beforeDestroy: function beforeDestroy13() {
          this.cleanup();
        },
        deactivated: function deactivated3() {
          this.cleanup();
        },
        methods: {
          doToggle: function doToggle() {
            this.showPopper = !this.showPopper;
          },
          doShow: function doShow() {
            this.showPopper = true;
          },
          doClose: function doClose2() {
            this.showPopper = false;
          },
          handleFocus: function handleFocus3() {
            Object(dom_["addClass"])(this.referenceElm, "focusing");
            if (this.trigger === "click" || this.trigger === "focus")
              this.showPopper = true;
          },
          handleClick: function handleClick() {
            Object(dom_["removeClass"])(this.referenceElm, "focusing");
          },
          handleBlur: function handleBlur() {
            Object(dom_["removeClass"])(this.referenceElm, "focusing");
            if (this.trigger === "click" || this.trigger === "focus")
              this.showPopper = false;
          },
          handleMouseEnter: function handleMouseEnter() {
            var _this2 = this;
            clearTimeout(this._timer);
            if (this.openDelay) {
              this._timer = setTimeout(function() {
                _this2.showPopper = true;
              }, this.openDelay);
            } else {
              this.showPopper = true;
            }
          },
          handleKeydown: function handleKeydown(ev) {
            if (ev.keyCode === 27 && this.trigger !== "manual") {
              this.doClose();
            }
          },
          handleMouseLeave: function handleMouseLeave() {
            var _this3 = this;
            clearTimeout(this._timer);
            if (this.closeDelay) {
              this._timer = setTimeout(function() {
                _this3.showPopper = false;
              }, this.closeDelay);
            } else {
              this.showPopper = false;
            }
          },
          handleDocumentClick: function handleDocumentClick(e) {
            var reference = this.reference || this.$refs.reference;
            var popper2 = this.popper || this.$refs.popper;
            if (!reference && this.$refs.wrapper.children) {
              reference = this.referenceElm = this.$refs.wrapper.children[0];
            }
            if (!this.$el || !reference || this.$el.contains(e.target) || reference.contains(e.target) || !popper2 || popper2.contains(e.target))
              return;
            this.showPopper = false;
          },
          handleAfterEnter: function handleAfterEnter() {
            this.$emit("after-enter");
          },
          handleAfterLeave: function handleAfterLeave() {
            this.$emit("after-leave");
            this.doDestroy();
          },
          cleanup: function cleanup() {
            if (this.openDelay || this.closeDelay) {
              clearTimeout(this._timer);
            }
          }
        },
        destroyed: function destroyed17() {
          var reference = this.reference;
          Object(dom_["off"])(reference, "click", this.doToggle);
          Object(dom_["off"])(reference, "mouseup", this.doClose);
          Object(dom_["off"])(reference, "mousedown", this.doShow);
          Object(dom_["off"])(reference, "focusin", this.doShow);
          Object(dom_["off"])(reference, "focusout", this.doClose);
          Object(dom_["off"])(reference, "mousedown", this.doShow);
          Object(dom_["off"])(reference, "mouseup", this.doClose);
          Object(dom_["off"])(reference, "mouseleave", this.handleMouseLeave);
          Object(dom_["off"])(reference, "mouseenter", this.handleMouseEnter);
          Object(dom_["off"])(document, "click", this.handleDocumentClick);
        }
      };
      var src_mainvue_type_script_lang_js_ = mainvue_type_script_lang_js_;
      var main_component = normalizeComponent(src_mainvue_type_script_lang_js_, mainvue_type_template_id_52060272_render, mainvue_type_template_id_52060272_staticRenderFns, false, null, null, null);
      main_component.options.__file = "packages/popover/src/main.vue";
      var main = main_component.exports;
      var getReference = function getReference2(el, binding, vnode) {
        var _ref = binding.expression ? binding.value : binding.arg;
        var popper2 = vnode.context.$refs[_ref];
        if (popper2) {
          if (Array.isArray(popper2)) {
            popper2[0].$refs.reference = el;
          } else {
            popper2.$refs.reference = el;
          }
        }
      };
      var directive2 = {
        bind: function bind4(el, binding, vnode) {
          getReference(el, binding, vnode);
        },
        inserted: function inserted2(el, binding, vnode) {
          getReference(el, binding, vnode);
        }
      };
      external_vue_default.a.directive("popover", directive2);
      main.install = function(Vue2) {
        Vue2.directive("popover", directive2);
        Vue2.component(main.name, main);
      };
      main.directive = directive2;
      var popover2 = main;
      var src_main = {
        name: "ElTooltip",
        mixins: [vue_popper_default.a],
        props: {
          openDelay: {
            type: Number,
            default: 0
          },
          disabled: Boolean,
          manual: Boolean,
          effect: {
            type: String,
            default: "dark"
          },
          arrowOffset: {
            type: Number,
            default: 0
          },
          popperClass: String,
          content: String,
          visibleArrow: {
            default: true
          },
          transition: {
            type: String,
            default: "el-fade-in-linear"
          },
          popperOptions: {
            default: function _default116() {
              return {
                boundariesPadding: 10,
                gpuAcceleration: false
              };
            }
          },
          enterable: {
            type: Boolean,
            default: true
          },
          hideAfter: {
            type: Number,
            default: 0
          },
          tabindex: {
            type: Number,
            default: 0
          }
        },
        data: function data25() {
          return {
            tooltipId: "el-tooltip-" + Object(util_["generateId"])(),
            timeoutPending: null,
            focusing: false
          };
        },
        beforeCreate: function beforeCreate() {
          var _this = this;
          if (this.$isServer)
            return;
          this.popperVM = new external_vue_default.a({
            data: { node: "" },
            render: function render37(h) {
              return this.node;
            }
          }).$mount();
          this.debounceClose = debounce_default()(200, function() {
            return _this.handleClosePopper();
          });
        },
        render: function render37(h) {
          var _this2 = this;
          if (this.popperVM) {
            this.popperVM.node = h("transition", {
              attrs: {
                name: this.transition
              },
              on: {
                "afterLeave": this.doDestroy
              }
            }, [h("div", {
              on: {
                "mouseleave": function mouseleave() {
                  _this2.setExpectedState(false);
                  _this2.debounceClose();
                },
                "mouseenter": function mouseenter() {
                  _this2.setExpectedState(true);
                }
              },
              ref: "popper",
              attrs: {
                role: "tooltip",
                id: this.tooltipId,
                "aria-hidden": this.disabled || !this.showPopper ? "true" : "false"
              },
              directives: [{
                name: "show",
                value: !this.disabled && this.showPopper
              }],
              "class": ["el-tooltip__popper", "is-" + this.effect, this.popperClass]
            }, [this.$slots.content || this.content])]);
          }
          var firstElement = this.getFirstElement();
          if (!firstElement)
            return null;
          var data25 = firstElement.data = firstElement.data || {};
          data25.staticClass = this.addTooltipClass(data25.staticClass);
          return firstElement;
        },
        mounted: function mounted18() {
          var _this3 = this;
          this.referenceElm = this.$el;
          if (this.$el.nodeType === 1) {
            this.$el.setAttribute("aria-describedby", this.tooltipId);
            this.$el.setAttribute("tabindex", this.tabindex);
            Object(dom_["on"])(this.referenceElm, "mouseenter", this.show);
            Object(dom_["on"])(this.referenceElm, "mouseleave", this.hide);
            Object(dom_["on"])(this.referenceElm, "focus", function() {
              if (!_this3.$slots.default || !_this3.$slots.default.length) {
                _this3.handleFocus();
                return;
              }
              var instance = _this3.$slots.default[0].componentInstance;
              if (instance && instance.focus) {
                instance.focus();
              } else {
                _this3.handleFocus();
              }
            });
            Object(dom_["on"])(this.referenceElm, "blur", this.handleBlur);
            Object(dom_["on"])(this.referenceElm, "click", this.removeFocusing);
          }
          if (this.value && this.popperVM) {
            this.popperVM.$nextTick(function() {
              if (_this3.value) {
                _this3.updatePopper();
              }
            });
          }
        },
        watch: {
          focusing: function focusing(val) {
            if (val) {
              Object(dom_["addClass"])(this.referenceElm, "focusing");
            } else {
              Object(dom_["removeClass"])(this.referenceElm, "focusing");
            }
          }
        },
        methods: {
          show: function show2() {
            this.setExpectedState(true);
            this.handleShowPopper();
          },
          hide: function hide2() {
            this.setExpectedState(false);
            this.debounceClose();
          },
          handleFocus: function handleFocus3() {
            this.focusing = true;
            this.show();
          },
          handleBlur: function handleBlur() {
            this.focusing = false;
            this.hide();
          },
          removeFocusing: function removeFocusing() {
            this.focusing = false;
          },
          addTooltipClass: function addTooltipClass(prev) {
            if (!prev) {
              return "el-tooltip";
            } else {
              return "el-tooltip " + prev.replace("el-tooltip", "");
            }
          },
          handleShowPopper: function handleShowPopper() {
            var _this4 = this;
            if (!this.expectedState || this.manual)
              return;
            clearTimeout(this.timeout);
            this.timeout = setTimeout(function() {
              _this4.showPopper = true;
            }, this.openDelay);
            if (this.hideAfter > 0) {
              this.timeoutPending = setTimeout(function() {
                _this4.showPopper = false;
              }, this.hideAfter);
            }
          },
          handleClosePopper: function handleClosePopper() {
            if (this.enterable && this.expectedState || this.manual)
              return;
            clearTimeout(this.timeout);
            if (this.timeoutPending) {
              clearTimeout(this.timeoutPending);
            }
            this.showPopper = false;
            if (this.disabled) {
              this.doDestroy();
            }
          },
          setExpectedState: function setExpectedState(expectedState) {
            if (expectedState === false) {
              clearTimeout(this.timeoutPending);
            }
            this.expectedState = expectedState;
          },
          getFirstElement: function getFirstElement() {
            var slots = this.$slots.default;
            if (!Array.isArray(slots))
              return null;
            var element = null;
            for (var index2 = 0; index2 < slots.length; index2++) {
              if (slots[index2] && slots[index2].tag) {
                element = slots[index2];
              }
            }
            return element;
          }
        },
        beforeDestroy: function beforeDestroy13() {
          this.popperVM && this.popperVM.$destroy();
        },
        destroyed: function destroyed17() {
          var reference = this.referenceElm;
          if (reference.nodeType === 1) {
            Object(dom_["off"])(reference, "mouseenter", this.show);
            Object(dom_["off"])(reference, "mouseleave", this.hide);
            Object(dom_["off"])(reference, "focus", this.handleFocus);
            Object(dom_["off"])(reference, "blur", this.handleBlur);
            Object(dom_["off"])(reference, "click", this.removeFocusing);
          }
        }
      };
      src_main.install = function(Vue2) {
        Vue2.component(src_main.name, src_main);
      };
      var packages_tooltip = src_main;
      var mainvue_type_template_id_6b29b012_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("transition", { attrs: { name: "msgbox-fade" } }, [
          _c("div", {
            directives: [
              {
                name: "show",
                rawName: "v-show",
                value: _vm.visible,
                expression: "visible"
              }
            ],
            staticClass: "el-message-box__wrapper",
            attrs: {
              tabindex: "-1",
              role: "dialog",
              "aria-modal": "true",
              "aria-label": _vm.title || "dialog"
            },
            on: {
              click: function($event) {
                if ($event.target !== $event.currentTarget) {
                  return null;
                }
                return _vm.handleWrapperClick($event);
              }
            }
          }, [
            _c("div", {
              staticClass: "el-message-box",
              class: [_vm.customClass, _vm.center && "el-message-box--center"]
            }, [
              _vm.title !== null ? _c("div", { staticClass: "el-message-box__header" }, [
                _c("div", { staticClass: "el-message-box__title" }, [
                  _vm.icon && _vm.center ? _c("div", {
                    class: ["el-message-box__status", _vm.icon]
                  }) : _vm._e(),
                  _c("span", [_vm._v(_vm._s(_vm.title))])
                ]),
                _vm.showClose ? _c("button", {
                  staticClass: "el-message-box__headerbtn",
                  attrs: { type: "button", "aria-label": "Close" },
                  on: {
                    click: function($event) {
                      _vm.handleAction(_vm.distinguishCancelAndClose ? "close" : "cancel");
                    },
                    keydown: function($event) {
                      if (!("button" in $event) && _vm._k($event.keyCode, "enter", 13, $event.key, "Enter")) {
                        return null;
                      }
                      _vm.handleAction(_vm.distinguishCancelAndClose ? "close" : "cancel");
                    }
                  }
                }, [
                  _c("i", {
                    staticClass: "el-message-box__close el-icon-close"
                  })
                ]) : _vm._e()
              ]) : _vm._e(),
              _c("div", { staticClass: "el-message-box__content" }, [
                _c("div", { staticClass: "el-message-box__container" }, [
                  _vm.icon && !_vm.center && _vm.message !== "" ? _c("div", { class: ["el-message-box__status", _vm.icon] }) : _vm._e(),
                  _vm.message !== "" ? _c("div", { staticClass: "el-message-box__message" }, [
                    _vm._t("default", [
                      !_vm.dangerouslyUseHTMLString ? _c("p", [_vm._v(_vm._s(_vm.message))]) : _c("p", {
                        domProps: { innerHTML: _vm._s(_vm.message) }
                      })
                    ])
                  ], 2) : _vm._e()
                ]),
                _c("div", {
                  directives: [
                    {
                      name: "show",
                      rawName: "v-show",
                      value: _vm.showInput,
                      expression: "showInput"
                    }
                  ],
                  staticClass: "el-message-box__input"
                }, [
                  _c("el-input", {
                    ref: "input",
                    attrs: {
                      type: _vm.inputType,
                      placeholder: _vm.inputPlaceholder
                    },
                    nativeOn: {
                      keydown: function($event) {
                        if (!("button" in $event) && _vm._k($event.keyCode, "enter", 13, $event.key, "Enter")) {
                          return null;
                        }
                        return _vm.handleInputEnter($event);
                      }
                    },
                    model: {
                      value: _vm.inputValue,
                      callback: function($$v) {
                        _vm.inputValue = $$v;
                      },
                      expression: "inputValue"
                    }
                  }),
                  _c("div", {
                    staticClass: "el-message-box__errormsg",
                    style: {
                      visibility: !!_vm.editorErrorMessage ? "visible" : "hidden"
                    }
                  }, [_vm._v(_vm._s(_vm.editorErrorMessage))])
                ], 1)
              ]),
              _c("div", { staticClass: "el-message-box__btns" }, [
                _vm.showCancelButton ? _c("el-button", {
                  class: [_vm.cancelButtonClasses],
                  attrs: {
                    loading: _vm.cancelButtonLoading,
                    round: _vm.roundButton,
                    size: "small"
                  },
                  on: {
                    keydown: function($event) {
                      if (!("button" in $event) && _vm._k($event.keyCode, "enter", 13, $event.key, "Enter")) {
                        return null;
                      }
                      _vm.handleAction("cancel");
                    }
                  },
                  nativeOn: {
                    click: function($event) {
                      _vm.handleAction("cancel");
                    }
                  }
                }, [
                  _vm._v("\n          " + _vm._s(_vm.cancelButtonText || _vm.t("el.messagebox.cancel")) + "\n        ")
                ]) : _vm._e(),
                _c("el-button", {
                  directives: [
                    {
                      name: "show",
                      rawName: "v-show",
                      value: _vm.showConfirmButton,
                      expression: "showConfirmButton"
                    }
                  ],
                  ref: "confirm",
                  class: [_vm.confirmButtonClasses],
                  attrs: {
                    loading: _vm.confirmButtonLoading,
                    round: _vm.roundButton,
                    size: "small"
                  },
                  on: {
                    keydown: function($event) {
                      if (!("button" in $event) && _vm._k($event.keyCode, "enter", 13, $event.key, "Enter")) {
                        return null;
                      }
                      _vm.handleAction("confirm");
                    }
                  },
                  nativeOn: {
                    click: function($event) {
                      _vm.handleAction("confirm");
                    }
                  }
                }, [
                  _vm._v("\n          " + _vm._s(_vm.confirmButtonText || _vm.t("el.messagebox.confirm")) + "\n        ")
                ])
              ], 1)
            ])
          ])
        ]);
      };
      var mainvue_type_template_id_6b29b012_staticRenderFns = [];
      mainvue_type_template_id_6b29b012_render._withStripped = true;
      var lib_locale_ = __webpack_require__(12);
      var lib_locale_default = /* @__PURE__ */ __webpack_require__.n(lib_locale_);
      var aria_dialog_ = __webpack_require__(39);
      var aria_dialog_default = /* @__PURE__ */ __webpack_require__.n(aria_dialog_);
      var messageBox = void 0;
      var typeMap = {
        success: "success",
        info: "info",
        warning: "warning",
        error: "error"
      };
      var message_box_src_mainvue_type_script_lang_js_ = {
        mixins: [popup_default.a, locale_default.a],
        props: {
          modal: {
            default: true
          },
          lockScroll: {
            default: true
          },
          showClose: {
            type: Boolean,
            default: true
          },
          closeOnClickModal: {
            default: true
          },
          closeOnPressEscape: {
            default: true
          },
          closeOnHashChange: {
            default: true
          },
          center: {
            default: false,
            type: Boolean
          },
          roundButton: {
            default: false,
            type: Boolean
          }
        },
        components: {
          ElInput: input_default.a,
          ElButton: button_default.a
        },
        computed: {
          icon: function icon3() {
            var type3 = this.type, iconClass = this.iconClass;
            return iconClass || (type3 && typeMap[type3] ? "el-icon-" + typeMap[type3] : "");
          },
          confirmButtonClasses: function confirmButtonClasses() {
            return "el-button--primary " + this.confirmButtonClass;
          },
          cancelButtonClasses: function cancelButtonClasses() {
            return "" + this.cancelButtonClass;
          }
        },
        methods: {
          getSafeClose: function getSafeClose() {
            var _this = this;
            var currentId = this.uid;
            return function() {
              _this.$nextTick(function() {
                if (currentId === _this.uid)
                  _this.doClose();
              });
            };
          },
          doClose: function doClose2() {
            var _this2 = this;
            if (!this.visible)
              return;
            this.visible = false;
            this._closing = true;
            this.onClose && this.onClose();
            messageBox.closeDialog();
            if (this.lockScroll) {
              setTimeout(this.restoreBodyStyle, 200);
            }
            this.opened = false;
            this.doAfterClose();
            setTimeout(function() {
              if (_this2.action)
                _this2.callback(_this2.action, _this2);
            });
          },
          handleWrapperClick: function handleWrapperClick() {
            if (this.closeOnClickModal) {
              this.handleAction(this.distinguishCancelAndClose ? "close" : "cancel");
            }
          },
          handleInputEnter: function handleInputEnter() {
            if (this.inputType !== "textarea") {
              return this.handleAction("confirm");
            }
          },
          handleAction: function handleAction(action) {
            if (this.$type === "prompt" && action === "confirm" && !this.validate()) {
              return;
            }
            this.action = action;
            if (typeof this.beforeClose === "function") {
              this.close = this.getSafeClose();
              this.beforeClose(action, this, this.close);
            } else {
              this.doClose();
            }
          },
          validate: function validate3() {
            if (this.$type === "prompt") {
              var inputPattern = this.inputPattern;
              if (inputPattern && !inputPattern.test(this.inputValue || "")) {
                this.editorErrorMessage = this.inputErrorMessage || Object(lib_locale_["t"])("el.messagebox.error");
                Object(dom_["addClass"])(this.getInputElement(), "invalid");
                return false;
              }
              var inputValidator = this.inputValidator;
              if (typeof inputValidator === "function") {
                var validateResult = inputValidator(this.inputValue);
                if (validateResult === false) {
                  this.editorErrorMessage = this.inputErrorMessage || Object(lib_locale_["t"])("el.messagebox.error");
                  Object(dom_["addClass"])(this.getInputElement(), "invalid");
                  return false;
                }
                if (typeof validateResult === "string") {
                  this.editorErrorMessage = validateResult;
                  Object(dom_["addClass"])(this.getInputElement(), "invalid");
                  return false;
                }
              }
            }
            this.editorErrorMessage = "";
            Object(dom_["removeClass"])(this.getInputElement(), "invalid");
            return true;
          },
          getFirstFocus: function getFirstFocus() {
            var btn = this.$el.querySelector(".el-message-box__btns .el-button");
            var title = this.$el.querySelector(".el-message-box__btns .el-message-box__title");
            return btn || title;
          },
          getInputElement: function getInputElement() {
            var inputRefs = this.$refs.input.$refs;
            return inputRefs.input || inputRefs.textarea;
          },
          handleClose: function handleClose() {
            this.handleAction("close");
          }
        },
        watch: {
          inputValue: {
            immediate: true,
            handler: function handler2(val) {
              var _this3 = this;
              this.$nextTick(function(_) {
                if (_this3.$type === "prompt" && val !== null) {
                  _this3.validate();
                }
              });
            }
          },
          visible: function visible2(val) {
            var _this4 = this;
            if (val) {
              this.uid++;
              if (this.$type === "alert" || this.$type === "confirm") {
                this.$nextTick(function() {
                  _this4.$refs.confirm.$el.focus();
                });
              }
              this.focusAfterClosed = document.activeElement;
              messageBox = new aria_dialog_default.a(this.$el, this.focusAfterClosed, this.getFirstFocus());
            }
            if (this.$type !== "prompt")
              return;
            if (val) {
              setTimeout(function() {
                if (_this4.$refs.input && _this4.$refs.input.$el) {
                  _this4.getInputElement().focus();
                }
              }, 500);
            } else {
              this.editorErrorMessage = "";
              Object(dom_["removeClass"])(this.getInputElement(), "invalid");
            }
          }
        },
        mounted: function mounted18() {
          var _this5 = this;
          this.$nextTick(function() {
            if (_this5.closeOnHashChange) {
              window.addEventListener("hashchange", _this5.close);
            }
          });
        },
        beforeDestroy: function beforeDestroy13() {
          if (this.closeOnHashChange) {
            window.removeEventListener("hashchange", this.close);
          }
          setTimeout(function() {
            messageBox.closeDialog();
          });
        },
        data: function data25() {
          return {
            uid: 1,
            title: void 0,
            message: "",
            type: "",
            iconClass: "",
            customClass: "",
            showInput: false,
            inputValue: null,
            inputPlaceholder: "",
            inputType: "text",
            inputPattern: null,
            inputValidator: null,
            inputErrorMessage: "",
            showConfirmButton: true,
            showCancelButton: false,
            action: "",
            confirmButtonText: "",
            cancelButtonText: "",
            confirmButtonLoading: false,
            cancelButtonLoading: false,
            confirmButtonClass: "",
            confirmButtonDisabled: false,
            cancelButtonClass: "",
            editorErrorMessage: null,
            callback: null,
            dangerouslyUseHTMLString: false,
            focusAfterClosed: null,
            isOnComposition: false,
            distinguishCancelAndClose: false
          };
        }
      };
      var packages_message_box_src_mainvue_type_script_lang_js_ = message_box_src_mainvue_type_script_lang_js_;
      var src_main_component = normalizeComponent(packages_message_box_src_mainvue_type_script_lang_js_, mainvue_type_template_id_6b29b012_render, mainvue_type_template_id_6b29b012_staticRenderFns, false, null, null, null);
      src_main_component.options.__file = "packages/message-box/src/main.vue";
      var message_box_src_main = src_main_component.exports;
      var vdom_ = __webpack_require__(22);
      var main_typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
        return typeof obj;
      } : function(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
      var main_defaults = {
        title: null,
        message: "",
        type: "",
        iconClass: "",
        showInput: false,
        showClose: true,
        modalFade: true,
        lockScroll: true,
        closeOnClickModal: true,
        closeOnPressEscape: true,
        closeOnHashChange: true,
        inputValue: null,
        inputPlaceholder: "",
        inputType: "text",
        inputPattern: null,
        inputValidator: null,
        inputErrorMessage: "",
        showConfirmButton: true,
        showCancelButton: false,
        confirmButtonPosition: "right",
        confirmButtonHighlight: false,
        cancelButtonHighlight: false,
        confirmButtonText: "",
        cancelButtonText: "",
        confirmButtonClass: "",
        cancelButtonClass: "",
        customClass: "",
        beforeClose: null,
        dangerouslyUseHTMLString: false,
        center: false,
        roundButton: false,
        distinguishCancelAndClose: false
      };
      var MessageBoxConstructor = external_vue_default.a.extend(message_box_src_main);
      var currentMsg = void 0, main_instance = void 0;
      var msgQueue2 = [];
      var defaultCallback = function defaultCallback2(action) {
        if (currentMsg) {
          var callback = currentMsg.callback;
          if (typeof callback === "function") {
            if (main_instance.showInput) {
              callback(main_instance.inputValue, action);
            } else {
              callback(action);
            }
          }
          if (currentMsg.resolve) {
            if (action === "confirm") {
              if (main_instance.showInput) {
                currentMsg.resolve({ value: main_instance.inputValue, action });
              } else {
                currentMsg.resolve(action);
              }
            } else if (currentMsg.reject && (action === "cancel" || action === "close")) {
              currentMsg.reject(action);
            }
          }
        }
      };
      var initInstance = function initInstance2() {
        main_instance = new MessageBoxConstructor({
          el: document.createElement("div")
        });
        main_instance.callback = defaultCallback;
      };
      var main_showNextMsg = function showNextMsg() {
        if (!main_instance) {
          initInstance();
        }
        main_instance.action = "";
        if (!main_instance.visible || main_instance.closeTimer) {
          if (msgQueue2.length > 0) {
            currentMsg = msgQueue2.shift();
            var options2 = currentMsg.options;
            for (var prop in options2) {
              if (options2.hasOwnProperty(prop)) {
                main_instance[prop] = options2[prop];
              }
            }
            if (options2.callback === void 0) {
              main_instance.callback = defaultCallback;
            }
            var oldCb = main_instance.callback;
            main_instance.callback = function(action, instance) {
              oldCb(action, instance);
              showNextMsg();
            };
            if (Object(vdom_["isVNode"])(main_instance.message)) {
              main_instance.$slots.default = [main_instance.message];
              main_instance.message = null;
            } else {
              delete main_instance.$slots.default;
            }
            ["modal", "showClose", "closeOnClickModal", "closeOnPressEscape", "closeOnHashChange"].forEach(function(prop2) {
              if (main_instance[prop2] === void 0) {
                main_instance[prop2] = true;
              }
            });
            document.body.appendChild(main_instance.$el);
            external_vue_default.a.nextTick(function() {
              main_instance.visible = true;
            });
          }
        }
      };
      var main_MessageBox = function MessageBox(options2, callback) {
        if (external_vue_default.a.prototype.$isServer)
          return;
        if (typeof options2 === "string" || Object(vdom_["isVNode"])(options2)) {
          options2 = {
            message: options2
          };
          if (typeof arguments[1] === "string") {
            options2.title = arguments[1];
          }
        } else if (options2.callback && !callback) {
          callback = options2.callback;
        }
        if (typeof Promise !== "undefined") {
          return new Promise(function(resolve, reject) {
            msgQueue2.push({
              options: merge_default()({}, main_defaults, MessageBox.defaults, options2),
              callback,
              resolve,
              reject
            });
            main_showNextMsg();
          });
        } else {
          msgQueue2.push({
            options: merge_default()({}, main_defaults, MessageBox.defaults, options2),
            callback
          });
          main_showNextMsg();
        }
      };
      main_MessageBox.setDefaults = function(defaults) {
        main_MessageBox.defaults = defaults;
      };
      main_MessageBox.alert = function(message, title, options2) {
        if ((typeof title === "undefined" ? "undefined" : main_typeof(title)) === "object") {
          options2 = title;
          title = "";
        } else if (title === void 0) {
          title = "";
        }
        return main_MessageBox(merge_default()({
          title,
          message,
          $type: "alert",
          closeOnPressEscape: false,
          closeOnClickModal: false
        }, options2));
      };
      main_MessageBox.confirm = function(message, title, options2) {
        if ((typeof title === "undefined" ? "undefined" : main_typeof(title)) === "object") {
          options2 = title;
          title = "";
        } else if (title === void 0) {
          title = "";
        }
        return main_MessageBox(merge_default()({
          title,
          message,
          $type: "confirm",
          showCancelButton: true
        }, options2));
      };
      main_MessageBox.prompt = function(message, title, options2) {
        if ((typeof title === "undefined" ? "undefined" : main_typeof(title)) === "object") {
          options2 = title;
          title = "";
        } else if (title === void 0) {
          title = "";
        }
        return main_MessageBox(merge_default()({
          title,
          message,
          showCancelButton: true,
          showInput: true,
          $type: "prompt"
        }, options2));
      };
      main_MessageBox.close = function() {
        main_instance.doClose();
        main_instance.visible = false;
        msgQueue2 = [];
        currentMsg = null;
      };
      var packages_message_box_src_main = main_MessageBox;
      var message_box = packages_message_box_src_main;
      var breadcrumbvue_type_template_id_4b464c06_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", {
          staticClass: "el-breadcrumb",
          attrs: { "aria-label": "Breadcrumb", role: "navigation" }
        }, [_vm._t("default")], 2);
      };
      var breadcrumbvue_type_template_id_4b464c06_staticRenderFns = [];
      breadcrumbvue_type_template_id_4b464c06_render._withStripped = true;
      var breadcrumbvue_type_script_lang_js_ = {
        name: "ElBreadcrumb",
        props: {
          separator: {
            type: String,
            default: "/"
          },
          separatorClass: {
            type: String,
            default: ""
          }
        },
        provide: function provide11() {
          return {
            elBreadcrumb: this
          };
        },
        mounted: function mounted18() {
          var items2 = this.$el.querySelectorAll(".el-breadcrumb__item");
          if (items2.length) {
            items2[items2.length - 1].setAttribute("aria-current", "page");
          }
        }
      };
      var src_breadcrumbvue_type_script_lang_js_ = breadcrumbvue_type_script_lang_js_;
      var breadcrumb_component = normalizeComponent(src_breadcrumbvue_type_script_lang_js_, breadcrumbvue_type_template_id_4b464c06_render, breadcrumbvue_type_template_id_4b464c06_staticRenderFns, false, null, null, null);
      breadcrumb_component.options.__file = "packages/breadcrumb/src/breadcrumb.vue";
      var breadcrumb = breadcrumb_component.exports;
      breadcrumb.install = function(Vue2) {
        Vue2.component(breadcrumb.name, breadcrumb);
      };
      var packages_breadcrumb = breadcrumb;
      var breadcrumb_itemvue_type_template_id_fcf9eaac_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("span", { staticClass: "el-breadcrumb__item" }, [
          _c("span", {
            ref: "link",
            class: ["el-breadcrumb__inner", _vm.to ? "is-link" : ""],
            attrs: { role: "link" }
          }, [_vm._t("default")], 2),
          _vm.separatorClass ? _c("i", {
            staticClass: "el-breadcrumb__separator",
            class: _vm.separatorClass
          }) : _c("span", {
            staticClass: "el-breadcrumb__separator",
            attrs: { role: "presentation" }
          }, [_vm._v(_vm._s(_vm.separator))])
        ]);
      };
      var breadcrumb_itemvue_type_template_id_fcf9eaac_staticRenderFns = [];
      breadcrumb_itemvue_type_template_id_fcf9eaac_render._withStripped = true;
      var breadcrumb_itemvue_type_script_lang_js_ = {
        name: "ElBreadcrumbItem",
        props: {
          to: {},
          replace: Boolean
        },
        data: function data25() {
          return {
            separator: "",
            separatorClass: ""
          };
        },
        inject: ["elBreadcrumb"],
        mounted: function mounted18() {
          var _this = this;
          this.separator = this.elBreadcrumb.separator;
          this.separatorClass = this.elBreadcrumb.separatorClass;
          var link = this.$refs.link;
          link.setAttribute("role", "link");
          link.addEventListener("click", function(_) {
            var to = _this.to, $router = _this.$router;
            if (!to || !$router)
              return;
            _this.replace ? $router.replace(to) : $router.push(to);
          });
        }
      };
      var src_breadcrumb_itemvue_type_script_lang_js_ = breadcrumb_itemvue_type_script_lang_js_;
      var breadcrumb_item_component = normalizeComponent(src_breadcrumb_itemvue_type_script_lang_js_, breadcrumb_itemvue_type_template_id_fcf9eaac_render, breadcrumb_itemvue_type_template_id_fcf9eaac_staticRenderFns, false, null, null, null);
      breadcrumb_item_component.options.__file = "packages/breadcrumb/src/breadcrumb-item.vue";
      var breadcrumb_item = breadcrumb_item_component.exports;
      breadcrumb_item.install = function(Vue2) {
        Vue2.component(breadcrumb_item.name, breadcrumb_item);
      };
      var packages_breadcrumb_item = breadcrumb_item;
      var formvue_type_template_id_a1b5ff34_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("form", {
          staticClass: "el-form",
          class: [
            _vm.labelPosition ? "el-form--label-" + _vm.labelPosition : "",
            { "el-form--inline": _vm.inline }
          ]
        }, [_vm._t("default")], 2);
      };
      var formvue_type_template_id_a1b5ff34_staticRenderFns = [];
      formvue_type_template_id_a1b5ff34_render._withStripped = true;
      var formvue_type_script_lang_js_ = {
        name: "ElForm",
        componentName: "ElForm",
        provide: function provide11() {
          return {
            elForm: this
          };
        },
        props: {
          model: Object,
          rules: Object,
          labelPosition: String,
          labelWidth: String,
          labelSuffix: {
            type: String,
            default: ""
          },
          inline: Boolean,
          inlineMessage: Boolean,
          statusIcon: Boolean,
          showMessage: {
            type: Boolean,
            default: true
          },
          size: String,
          disabled: Boolean,
          validateOnRuleChange: {
            type: Boolean,
            default: true
          },
          hideRequiredAsterisk: {
            type: Boolean,
            default: false
          }
        },
        watch: {
          rules: function rules2() {
            this.fields.forEach(function(field) {
              field.removeValidateEvents();
              field.addValidateEvents();
            });
            if (this.validateOnRuleChange) {
              this.validate(function() {
              });
            }
          }
        },
        computed: {
          autoLabelWidth: function autoLabelWidth() {
            if (!this.potentialLabelWidthArr.length)
              return 0;
            var max2 = Math.max.apply(Math, this.potentialLabelWidthArr);
            return max2 ? max2 + "px" : "";
          }
        },
        data: function data25() {
          return {
            fields: [],
            potentialLabelWidthArr: []
          };
        },
        created: function created20() {
          var _this = this;
          this.$on("el.form.addField", function(field) {
            if (field) {
              _this.fields.push(field);
            }
          });
          this.$on("el.form.removeField", function(field) {
            if (field.prop) {
              _this.fields.splice(_this.fields.indexOf(field), 1);
            }
          });
        },
        methods: {
          resetFields: function resetFields() {
            if (!this.model) {
              console.warn("[Element Warn][Form]model is required for resetFields to work.");
              return;
            }
            this.fields.forEach(function(field) {
              field.resetField();
            });
          },
          clearValidate: function clearValidate2() {
            var props2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
            var fields = props2.length ? typeof props2 === "string" ? this.fields.filter(function(field) {
              return props2 === field.prop;
            }) : this.fields.filter(function(field) {
              return props2.indexOf(field.prop) > -1;
            }) : this.fields;
            fields.forEach(function(field) {
              field.clearValidate();
            });
          },
          validate: function validate3(callback) {
            var _this2 = this;
            if (!this.model) {
              console.warn("[Element Warn][Form]model is required for validate to work!");
              return;
            }
            var promise = void 0;
            if (typeof callback !== "function" && window.Promise) {
              promise = new window.Promise(function(resolve, reject) {
                callback = function callback2(valid2) {
                  valid2 ? resolve(valid2) : reject(valid2);
                };
              });
            }
            var valid = true;
            var count = 0;
            if (this.fields.length === 0 && callback) {
              callback(true);
            }
            var invalidFields = {};
            this.fields.forEach(function(field) {
              field.validate("", function(message, field2) {
                if (message) {
                  valid = false;
                }
                invalidFields = merge_default()({}, invalidFields, field2);
                if (typeof callback === "function" && ++count === _this2.fields.length) {
                  callback(valid, invalidFields);
                }
              });
            });
            if (promise) {
              return promise;
            }
          },
          validateField: function validateField2(props2, cb) {
            props2 = [].concat(props2);
            var fields = this.fields.filter(function(field) {
              return props2.indexOf(field.prop) !== -1;
            });
            if (!fields.length) {
              console.warn("[Element Warn]please pass correct props!");
              return;
            }
            fields.forEach(function(field) {
              field.validate("", cb);
            });
          },
          getLabelWidthIndex: function getLabelWidthIndex(width2) {
            var index2 = this.potentialLabelWidthArr.indexOf(width2);
            if (index2 === -1) {
              throw new Error("[ElementForm]unpected width ", width2);
            }
            return index2;
          },
          registerLabelWidth: function registerLabelWidth(val, oldVal) {
            if (val && oldVal) {
              var index2 = this.getLabelWidthIndex(oldVal);
              this.potentialLabelWidthArr.splice(index2, 1, val);
            } else if (val) {
              this.potentialLabelWidthArr.push(val);
            }
          },
          deregisterLabelWidth: function deregisterLabelWidth(val) {
            var index2 = this.getLabelWidthIndex(val);
            this.potentialLabelWidthArr.splice(index2, 1);
          }
        }
      };
      var src_formvue_type_script_lang_js_ = formvue_type_script_lang_js_;
      var form_component = normalizeComponent(src_formvue_type_script_lang_js_, formvue_type_template_id_a1b5ff34_render, formvue_type_template_id_a1b5ff34_staticRenderFns, false, null, null, null);
      form_component.options.__file = "packages/form/src/form.vue";
      var src_form = form_component.exports;
      src_form.install = function(Vue2) {
        Vue2.component(src_form.name, src_form);
      };
      var packages_form = src_form;
      var form_itemvue_type_template_id_b6f3db6c_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", {
          staticClass: "el-form-item",
          class: [
            {
              "el-form-item--feedback": _vm.elForm && _vm.elForm.statusIcon,
              "is-error": _vm.validateState === "error",
              "is-validating": _vm.validateState === "validating",
              "is-success": _vm.validateState === "success",
              "is-required": _vm.isRequired || _vm.required,
              "is-no-asterisk": _vm.elForm && _vm.elForm.hideRequiredAsterisk
            },
            _vm.sizeClass ? "el-form-item--" + _vm.sizeClass : ""
          ]
        }, [
          _c("label-wrap", {
            attrs: {
              "is-auto-width": _vm.labelStyle && _vm.labelStyle.width === "auto",
              "update-all": _vm.form.labelWidth === "auto"
            }
          }, [
            _vm.label || _vm.$slots.label ? _c("label", {
              staticClass: "el-form-item__label",
              style: _vm.labelStyle,
              attrs: { for: _vm.labelFor }
            }, [
              _vm._t("label", [
                _vm._v(_vm._s(_vm.label + _vm.form.labelSuffix))
              ])
            ], 2) : _vm._e()
          ]),
          _c("div", { staticClass: "el-form-item__content", style: _vm.contentStyle }, [
            _vm._t("default"),
            _c("transition", { attrs: { name: "el-zoom-in-top" } }, [
              _vm.validateState === "error" && _vm.showMessage && _vm.form.showMessage ? _vm._t("error", [
                _c("div", {
                  staticClass: "el-form-item__error",
                  class: {
                    "el-form-item__error--inline": typeof _vm.inlineMessage === "boolean" ? _vm.inlineMessage : _vm.elForm && _vm.elForm.inlineMessage || false
                  }
                }, [
                  _vm._v("\n          " + _vm._s(_vm.validateMessage) + "\n        ")
                ])
              ], { error: _vm.validateMessage }) : _vm._e()
            ], 2)
          ], 2)
        ], 1);
      };
      var form_itemvue_type_template_id_b6f3db6c_staticRenderFns = [];
      form_itemvue_type_template_id_b6f3db6c_render._withStripped = true;
      var external_async_validator_ = __webpack_require__(40);
      var external_async_validator_default = /* @__PURE__ */ __webpack_require__.n(external_async_validator_);
      var label_wrapvue_type_script_lang_js_ = {
        props: {
          isAutoWidth: Boolean,
          updateAll: Boolean
        },
        inject: ["elForm", "elFormItem"],
        render: function render37() {
          var h = arguments[0];
          var slots = this.$slots.default;
          if (!slots)
            return null;
          if (this.isAutoWidth) {
            var autoLabelWidth = this.elForm.autoLabelWidth;
            var style2 = {};
            if (autoLabelWidth && autoLabelWidth !== "auto") {
              var marginLeft = parseInt(autoLabelWidth, 10) - this.computedWidth;
              if (marginLeft) {
                style2.marginLeft = marginLeft + "px";
              }
            }
            return h("div", { "class": "el-form-item__label-wrap", style: style2 }, [slots]);
          } else {
            return slots[0];
          }
        },
        methods: {
          getLabelWidth: function getLabelWidth() {
            if (this.$el && this.$el.firstElementChild) {
              var computedWidth = window.getComputedStyle(this.$el.firstElementChild).width;
              return Math.ceil(parseFloat(computedWidth));
            } else {
              return 0;
            }
          },
          updateLabelWidth: function updateLabelWidth() {
            var action = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "update";
            if (this.$slots.default && this.isAutoWidth && this.$el.firstElementChild) {
              if (action === "update") {
                this.computedWidth = this.getLabelWidth();
              } else if (action === "remove") {
                this.elForm.deregisterLabelWidth(this.computedWidth);
              }
            }
          }
        },
        watch: {
          computedWidth: function computedWidth(val, oldVal) {
            if (this.updateAll) {
              this.elForm.registerLabelWidth(val, oldVal);
              this.elFormItem.updateComputedLabelWidth(val);
            }
          }
        },
        data: function data25() {
          return {
            computedWidth: 0
          };
        },
        mounted: function mounted18() {
          this.updateLabelWidth("update");
        },
        updated: function updated3() {
          this.updateLabelWidth("update");
        },
        beforeDestroy: function beforeDestroy13() {
          this.updateLabelWidth("remove");
        }
      };
      var src_label_wrapvue_type_script_lang_js_ = label_wrapvue_type_script_lang_js_;
      var label_wrap_render, label_wrap_staticRenderFns;
      var label_wrap_component = normalizeComponent(src_label_wrapvue_type_script_lang_js_, label_wrap_render, label_wrap_staticRenderFns, false, null, null, null);
      label_wrap_component.options.__file = "packages/form/src/label-wrap.vue";
      var label_wrap = label_wrap_component.exports;
      var form_itemvue_type_script_lang_js_ = {
        name: "ElFormItem",
        componentName: "ElFormItem",
        mixins: [emitter_default.a],
        provide: function provide11() {
          return {
            elFormItem: this
          };
        },
        inject: ["elForm"],
        props: {
          label: String,
          labelWidth: String,
          prop: String,
          required: {
            type: Boolean,
            default: void 0
          },
          rules: [Object, Array],
          error: String,
          validateStatus: String,
          for: String,
          inlineMessage: {
            type: [String, Boolean],
            default: ""
          },
          showMessage: {
            type: Boolean,
            default: true
          },
          size: String
        },
        components: {
          LabelWrap: label_wrap
        },
        watch: {
          error: {
            immediate: true,
            handler: function handler2(value6) {
              this.validateMessage = value6;
              this.validateState = value6 ? "error" : "";
            }
          },
          validateStatus: function validateStatus(value6) {
            this.validateState = value6;
          }
        },
        computed: {
          labelFor: function labelFor() {
            return this.for || this.prop;
          },
          labelStyle: function labelStyle() {
            var ret = {};
            if (this.form.labelPosition === "top")
              return ret;
            var labelWidth = this.labelWidth || this.form.labelWidth;
            if (labelWidth) {
              ret.width = labelWidth;
            }
            return ret;
          },
          contentStyle: function contentStyle() {
            var ret = {};
            var label = this.label;
            if (this.form.labelPosition === "top" || this.form.inline)
              return ret;
            if (!label && !this.labelWidth && this.isNested)
              return ret;
            var labelWidth = this.labelWidth || this.form.labelWidth;
            if (labelWidth === "auto") {
              if (this.labelWidth === "auto") {
                ret.marginLeft = this.computedLabelWidth;
              } else if (this.form.labelWidth === "auto") {
                ret.marginLeft = this.elForm.autoLabelWidth;
              }
            } else {
              ret.marginLeft = labelWidth;
            }
            return ret;
          },
          form: function form2() {
            var parent2 = this.$parent;
            var parentName = parent2.$options.componentName;
            while (parentName !== "ElForm") {
              if (parentName === "ElFormItem") {
                this.isNested = true;
              }
              parent2 = parent2.$parent;
              parentName = parent2.$options.componentName;
            }
            return parent2;
          },
          fieldValue: function fieldValue() {
            var model = this.form.model;
            if (!model || !this.prop) {
              return;
            }
            var path = this.prop;
            if (path.indexOf(":") !== -1) {
              path = path.replace(/:/, ".");
            }
            return Object(util_["getPropByPath"])(model, path, true).v;
          },
          isRequired: function isRequired() {
            var rules2 = this.getRules();
            var isRequired2 = false;
            if (rules2 && rules2.length) {
              rules2.every(function(rule) {
                if (rule.required) {
                  isRequired2 = true;
                  return false;
                }
                return true;
              });
            }
            return isRequired2;
          },
          _formSize: function _formSize() {
            return this.elForm.size;
          },
          elFormItemSize: function elFormItemSize() {
            return this.size || this._formSize;
          },
          sizeClass: function sizeClass() {
            return this.elFormItemSize || (this.$ELEMENT || {}).size;
          }
        },
        data: function data25() {
          return {
            validateState: "",
            validateMessage: "",
            validateDisabled: false,
            validator: {},
            isNested: false,
            computedLabelWidth: ""
          };
        },
        methods: {
          validate: function validate3(trigger3) {
            var _this = this;
            var callback = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : util_["noop"];
            this.validateDisabled = false;
            var rules2 = this.getFilteredRule(trigger3);
            if ((!rules2 || rules2.length === 0) && this.required === void 0) {
              callback();
              return true;
            }
            this.validateState = "validating";
            var descriptor2 = {};
            if (rules2 && rules2.length > 0) {
              rules2.forEach(function(rule) {
                delete rule.trigger;
              });
            }
            descriptor2[this.prop] = rules2;
            var validator2 = new external_async_validator_default.a(descriptor2);
            var model = {};
            model[this.prop] = this.fieldValue;
            validator2.validate(model, { firstFields: true }, function(errors, invalidFields) {
              _this.validateState = !errors ? "success" : "error";
              _this.validateMessage = errors ? errors[0].message : "";
              callback(_this.validateMessage, invalidFields);
              _this.elForm && _this.elForm.$emit("validate", _this.prop, !errors, _this.validateMessage || null);
            });
          },
          clearValidate: function clearValidate2() {
            this.validateState = "";
            this.validateMessage = "";
            this.validateDisabled = false;
          },
          resetField: function resetField() {
            var _this2 = this;
            this.validateState = "";
            this.validateMessage = "";
            var model = this.form.model;
            var value6 = this.fieldValue;
            var path = this.prop;
            if (path.indexOf(":") !== -1) {
              path = path.replace(/:/, ".");
            }
            var prop = Object(util_["getPropByPath"])(model, path, true);
            this.validateDisabled = true;
            if (Array.isArray(value6)) {
              prop.o[prop.k] = [].concat(this.initialValue);
            } else {
              prop.o[prop.k] = this.initialValue;
            }
            this.$nextTick(function() {
              _this2.validateDisabled = false;
            });
            this.broadcast("ElTimeSelect", "fieldReset", this.initialValue);
          },
          getRules: function getRules() {
            var formRules = this.form.rules;
            var selfRules = this.rules;
            var requiredRule = this.required !== void 0 ? { required: !!this.required } : [];
            var prop = Object(util_["getPropByPath"])(formRules, this.prop || "");
            formRules = formRules ? prop.o[this.prop || ""] || prop.v : [];
            return [].concat(selfRules || formRules || []).concat(requiredRule);
          },
          getFilteredRule: function getFilteredRule(trigger3) {
            var rules2 = this.getRules();
            return rules2.filter(function(rule) {
              if (!rule.trigger || trigger3 === "")
                return true;
              if (Array.isArray(rule.trigger)) {
                return rule.trigger.indexOf(trigger3) > -1;
              } else {
                return rule.trigger === trigger3;
              }
            }).map(function(rule) {
              return merge_default()({}, rule);
            });
          },
          onFieldBlur: function onFieldBlur() {
            this.validate("blur");
          },
          onFieldChange: function onFieldChange() {
            if (this.validateDisabled) {
              this.validateDisabled = false;
              return;
            }
            this.validate("change");
          },
          updateComputedLabelWidth: function updateComputedLabelWidth(width2) {
            this.computedLabelWidth = width2 ? width2 + "px" : "";
          },
          addValidateEvents: function addValidateEvents() {
            var rules2 = this.getRules();
            if (rules2.length || this.required !== void 0) {
              this.$on("el.form.blur", this.onFieldBlur);
              this.$on("el.form.change", this.onFieldChange);
            }
          },
          removeValidateEvents: function removeValidateEvents() {
            this.$off();
          }
        },
        mounted: function mounted18() {
          if (this.prop) {
            this.dispatch("ElForm", "el.form.addField", [this]);
            var initialValue = this.fieldValue;
            if (Array.isArray(initialValue)) {
              initialValue = [].concat(initialValue);
            }
            Object.defineProperty(this, "initialValue", {
              value: initialValue
            });
            this.addValidateEvents();
          }
        },
        beforeDestroy: function beforeDestroy13() {
          this.dispatch("ElForm", "el.form.removeField", [this]);
        }
      };
      var src_form_itemvue_type_script_lang_js_ = form_itemvue_type_script_lang_js_;
      var form_item_component = normalizeComponent(src_form_itemvue_type_script_lang_js_, form_itemvue_type_template_id_b6f3db6c_render, form_itemvue_type_template_id_b6f3db6c_staticRenderFns, false, null, null, null);
      form_item_component.options.__file = "packages/form/src/form-item.vue";
      var form_item = form_item_component.exports;
      form_item.install = function(Vue2) {
        Vue2.component(form_item.name, form_item);
      };
      var packages_form_item = form_item;
      var tab_barvue_type_template_id_2031f33a_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", {
          staticClass: "el-tabs__active-bar",
          class: "is-" + _vm.rootTabs.tabPosition,
          style: _vm.barStyle
        });
      };
      var tab_barvue_type_template_id_2031f33a_staticRenderFns = [];
      tab_barvue_type_template_id_2031f33a_render._withStripped = true;
      var tab_barvue_type_script_lang_js_ = {
        name: "TabBar",
        props: {
          tabs: Array
        },
        inject: ["rootTabs"],
        computed: {
          barStyle: {
            get: function get7() {
              var _this = this;
              var style2 = {};
              var offset = 0;
              var tabSize = 0;
              var sizeName = ["top", "bottom"].indexOf(this.rootTabs.tabPosition) !== -1 ? "width" : "height";
              var sizeDir = sizeName === "width" ? "x" : "y";
              var firstUpperCase = function firstUpperCase2(str) {
                return str.toLowerCase().replace(/( |^)[a-z]/g, function(L) {
                  return L.toUpperCase();
                });
              };
              this.tabs.every(function(tab, index2) {
                var $el = Object(util_["arrayFind"])(_this.$parent.$refs.tabs || [], function(t4) {
                  return t4.id.replace("tab-", "") === tab.paneName;
                });
                if (!$el) {
                  return false;
                }
                if (!tab.active) {
                  offset += $el["client" + firstUpperCase(sizeName)];
                  return true;
                } else {
                  tabSize = $el["client" + firstUpperCase(sizeName)];
                  var tabStyles = window.getComputedStyle($el);
                  if (sizeName === "width" && _this.tabs.length > 1) {
                    tabSize -= parseFloat(tabStyles.paddingLeft) + parseFloat(tabStyles.paddingRight);
                  }
                  if (sizeName === "width") {
                    offset += parseFloat(tabStyles.paddingLeft);
                  }
                  return false;
                }
              });
              var transform = "translate" + firstUpperCase(sizeDir) + "(" + offset + "px)";
              style2[sizeName] = tabSize + "px";
              style2.transform = transform;
              style2.msTransform = transform;
              style2.webkitTransform = transform;
              return style2;
            }
          }
        }
      };
      var src_tab_barvue_type_script_lang_js_ = tab_barvue_type_script_lang_js_;
      var tab_bar_component = normalizeComponent(src_tab_barvue_type_script_lang_js_, tab_barvue_type_template_id_2031f33a_render, tab_barvue_type_template_id_2031f33a_staticRenderFns, false, null, null, null);
      tab_bar_component.options.__file = "packages/tabs/src/tab-bar.vue";
      var tab_bar = tab_bar_component.exports;
      function noop2() {
      }
      var tab_navvue_type_script_lang_js_firstUpperCase = function firstUpperCase(str) {
        return str.toLowerCase().replace(/( |^)[a-z]/g, function(L) {
          return L.toUpperCase();
        });
      };
      var tab_navvue_type_script_lang_js_ = {
        name: "TabNav",
        components: {
          TabBar: tab_bar
        },
        inject: ["rootTabs"],
        props: {
          panes: Array,
          currentName: String,
          editable: Boolean,
          onTabClick: {
            type: Function,
            default: noop2
          },
          onTabRemove: {
            type: Function,
            default: noop2
          },
          type: String,
          stretch: Boolean
        },
        data: function data25() {
          return {
            scrollable: false,
            navOffset: 0,
            isFocus: false,
            focusable: true
          };
        },
        computed: {
          navStyle: function navStyle() {
            var dir = ["top", "bottom"].indexOf(this.rootTabs.tabPosition) !== -1 ? "X" : "Y";
            return {
              transform: "translate" + dir + "(-" + this.navOffset + "px)"
            };
          },
          sizeName: function sizeName() {
            return ["top", "bottom"].indexOf(this.rootTabs.tabPosition) !== -1 ? "width" : "height";
          }
        },
        methods: {
          scrollPrev: function scrollPrev() {
            var containerSize = this.$refs.navScroll["offset" + tab_navvue_type_script_lang_js_firstUpperCase(this.sizeName)];
            var currentOffset = this.navOffset;
            if (!currentOffset)
              return;
            var newOffset = currentOffset > containerSize ? currentOffset - containerSize : 0;
            this.navOffset = newOffset;
          },
          scrollNext: function scrollNext() {
            var navSize = this.$refs.nav["offset" + tab_navvue_type_script_lang_js_firstUpperCase(this.sizeName)];
            var containerSize = this.$refs.navScroll["offset" + tab_navvue_type_script_lang_js_firstUpperCase(this.sizeName)];
            var currentOffset = this.navOffset;
            if (navSize - currentOffset <= containerSize)
              return;
            var newOffset = navSize - currentOffset > containerSize * 2 ? currentOffset + containerSize : navSize - containerSize;
            this.navOffset = newOffset;
          },
          scrollToActiveTab: function scrollToActiveTab() {
            if (!this.scrollable)
              return;
            var nav = this.$refs.nav;
            var activeTab = this.$el.querySelector(".is-active");
            if (!activeTab)
              return;
            var navScroll = this.$refs.navScroll;
            var isHorizontal = ["top", "bottom"].indexOf(this.rootTabs.tabPosition) !== -1;
            var activeTabBounding = activeTab.getBoundingClientRect();
            var navScrollBounding = navScroll.getBoundingClientRect();
            var maxOffset = isHorizontal ? nav.offsetWidth - navScrollBounding.width : nav.offsetHeight - navScrollBounding.height;
            var currentOffset = this.navOffset;
            var newOffset = currentOffset;
            if (isHorizontal) {
              if (activeTabBounding.left < navScrollBounding.left) {
                newOffset = currentOffset - (navScrollBounding.left - activeTabBounding.left);
              }
              if (activeTabBounding.right > navScrollBounding.right) {
                newOffset = currentOffset + activeTabBounding.right - navScrollBounding.right;
              }
            } else {
              if (activeTabBounding.top < navScrollBounding.top) {
                newOffset = currentOffset - (navScrollBounding.top - activeTabBounding.top);
              }
              if (activeTabBounding.bottom > navScrollBounding.bottom) {
                newOffset = currentOffset + (activeTabBounding.bottom - navScrollBounding.bottom);
              }
            }
            newOffset = Math.max(newOffset, 0);
            this.navOffset = Math.min(newOffset, maxOffset);
          },
          update: function update5() {
            if (!this.$refs.nav)
              return;
            var sizeName = this.sizeName;
            var navSize = this.$refs.nav["offset" + tab_navvue_type_script_lang_js_firstUpperCase(sizeName)];
            var containerSize = this.$refs.navScroll["offset" + tab_navvue_type_script_lang_js_firstUpperCase(sizeName)];
            var currentOffset = this.navOffset;
            if (containerSize < navSize) {
              var _currentOffset = this.navOffset;
              this.scrollable = this.scrollable || {};
              this.scrollable.prev = _currentOffset;
              this.scrollable.next = _currentOffset + containerSize < navSize;
              if (navSize - _currentOffset < containerSize) {
                this.navOffset = navSize - containerSize;
              }
            } else {
              this.scrollable = false;
              if (currentOffset > 0) {
                this.navOffset = 0;
              }
            }
          },
          changeTab: function changeTab(e) {
            var keyCode2 = e.keyCode;
            var nextIndex = void 0;
            var currentIndex = void 0, tabList = void 0;
            if ([37, 38, 39, 40].indexOf(keyCode2) !== -1) {
              tabList = e.currentTarget.querySelectorAll("[role=tab]");
              currentIndex = Array.prototype.indexOf.call(tabList, e.target);
            } else {
              return;
            }
            if (keyCode2 === 37 || keyCode2 === 38) {
              if (currentIndex === 0) {
                nextIndex = tabList.length - 1;
              } else {
                nextIndex = currentIndex - 1;
              }
            } else {
              if (currentIndex < tabList.length - 1) {
                nextIndex = currentIndex + 1;
              } else {
                nextIndex = 0;
              }
            }
            tabList[nextIndex].focus();
            tabList[nextIndex].click();
            this.setFocus();
          },
          setFocus: function setFocus() {
            if (this.focusable) {
              this.isFocus = true;
            }
          },
          removeFocus: function removeFocus() {
            this.isFocus = false;
          },
          visibilityChangeHandler: function visibilityChangeHandler() {
            var _this = this;
            var visibility = document.visibilityState;
            if (visibility === "hidden") {
              this.focusable = false;
            } else if (visibility === "visible") {
              setTimeout(function() {
                _this.focusable = true;
              }, 50);
            }
          },
          windowBlurHandler: function windowBlurHandler() {
            this.focusable = false;
          },
          windowFocusHandler: function windowFocusHandler() {
            var _this2 = this;
            setTimeout(function() {
              _this2.focusable = true;
            }, 50);
          }
        },
        updated: function updated3() {
          this.update();
        },
        render: function render37(h) {
          var _this3 = this;
          var type3 = this.type, panes = this.panes, editable = this.editable, stretch = this.stretch, onTabClick = this.onTabClick, onTabRemove = this.onTabRemove, navStyle = this.navStyle, scrollable = this.scrollable, scrollNext = this.scrollNext, scrollPrev = this.scrollPrev, changeTab = this.changeTab, setFocus = this.setFocus, removeFocus = this.removeFocus;
          var scrollBtn = scrollable ? [h("span", {
            "class": ["el-tabs__nav-prev", scrollable.prev ? "" : "is-disabled"],
            on: {
              "click": scrollPrev
            }
          }, [h("i", { "class": "el-icon-arrow-left" })]), h("span", {
            "class": ["el-tabs__nav-next", scrollable.next ? "" : "is-disabled"],
            on: {
              "click": scrollNext
            }
          }, [h("i", { "class": "el-icon-arrow-right" })])] : null;
          var tabs2 = this._l(panes, function(pane, index2) {
            var _ref;
            var tabName = pane.name || pane.index || index2;
            var closable = pane.isClosable || editable;
            pane.index = "" + index2;
            var btnClose = closable ? h("span", {
              "class": "el-icon-close",
              on: {
                "click": function click(ev) {
                  onTabRemove(pane, ev);
                }
              }
            }) : null;
            var tabLabelContent = pane.$slots.label || pane.label;
            var tabindex = pane.active ? 0 : -1;
            return h("div", {
              "class": (_ref = {
                "el-tabs__item": true
              }, _ref["is-" + _this3.rootTabs.tabPosition] = true, _ref["is-active"] = pane.active, _ref["is-disabled"] = pane.disabled, _ref["is-closable"] = closable, _ref["is-focus"] = _this3.isFocus, _ref),
              attrs: {
                id: "tab-" + tabName,
                "aria-controls": "pane-" + tabName,
                role: "tab",
                "aria-selected": pane.active,
                tabindex
              },
              key: "tab-" + tabName,
              ref: "tabs",
              refInFor: true,
              on: {
                "focus": function focus7() {
                  setFocus();
                },
                "blur": function blur6() {
                  removeFocus();
                },
                "click": function click(ev) {
                  removeFocus();
                  onTabClick(pane, tabName, ev);
                },
                "keydown": function keydown(ev) {
                  if (closable && (ev.keyCode === 46 || ev.keyCode === 8)) {
                    onTabRemove(pane, ev);
                  }
                }
              }
            }, [tabLabelContent, btnClose]);
          });
          return h("div", { "class": ["el-tabs__nav-wrap", scrollable ? "is-scrollable" : "", "is-" + this.rootTabs.tabPosition] }, [scrollBtn, h("div", { "class": ["el-tabs__nav-scroll"], ref: "navScroll" }, [h("div", {
            "class": ["el-tabs__nav", "is-" + this.rootTabs.tabPosition, stretch && ["top", "bottom"].indexOf(this.rootTabs.tabPosition) !== -1 ? "is-stretch" : ""],
            ref: "nav",
            style: navStyle,
            attrs: {
              role: "tablist"
            },
            on: {
              "keydown": changeTab
            }
          }, [!type3 ? h("tab-bar", {
            attrs: { tabs: panes }
          }) : null, tabs2])])]);
        },
        mounted: function mounted18() {
          var _this4 = this;
          Object(resize_event_["addResizeListener"])(this.$el, this.update);
          document.addEventListener("visibilitychange", this.visibilityChangeHandler);
          window.addEventListener("blur", this.windowBlurHandler);
          window.addEventListener("focus", this.windowFocusHandler);
          setTimeout(function() {
            _this4.scrollToActiveTab();
          }, 0);
        },
        beforeDestroy: function beforeDestroy13() {
          if (this.$el && this.update)
            Object(resize_event_["removeResizeListener"])(this.$el, this.update);
          document.removeEventListener("visibilitychange", this.visibilityChangeHandler);
          window.removeEventListener("blur", this.windowBlurHandler);
          window.removeEventListener("focus", this.windowFocusHandler);
        }
      };
      var src_tab_navvue_type_script_lang_js_ = tab_navvue_type_script_lang_js_;
      var tab_nav_render, tab_nav_staticRenderFns;
      var tab_nav_component = normalizeComponent(src_tab_navvue_type_script_lang_js_, tab_nav_render, tab_nav_staticRenderFns, false, null, null, null);
      tab_nav_component.options.__file = "packages/tabs/src/tab-nav.vue";
      var tab_nav = tab_nav_component.exports;
      var tabsvue_type_script_lang_js_ = {
        name: "ElTabs",
        components: {
          TabNav: tab_nav
        },
        props: {
          type: String,
          activeName: String,
          closable: Boolean,
          addable: Boolean,
          value: {},
          editable: Boolean,
          tabPosition: {
            type: String,
            default: "top"
          },
          beforeLeave: Function,
          stretch: Boolean
        },
        provide: function provide11() {
          return {
            rootTabs: this
          };
        },
        data: function data25() {
          return {
            currentName: this.value || this.activeName,
            panes: []
          };
        },
        watch: {
          activeName: function activeName(value6) {
            this.setCurrentName(value6);
          },
          value: function value6(_value) {
            this.setCurrentName(_value);
          },
          currentName: function currentName(value6) {
            var _this = this;
            if (this.$refs.nav) {
              this.$nextTick(function() {
                _this.$refs.nav.$nextTick(function(_) {
                  _this.$refs.nav.scrollToActiveTab();
                });
              });
            }
          }
        },
        methods: {
          calcPaneInstances: function calcPaneInstances() {
            var _this2 = this;
            var isForceUpdate = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
            if (this.$slots.default) {
              var paneSlots = this.$slots.default.filter(function(vnode) {
                return vnode.tag && vnode.componentOptions && vnode.componentOptions.Ctor.options.name === "ElTabPane";
              });
              var panes = paneSlots.map(function(_ref) {
                var componentInstance = _ref.componentInstance;
                return componentInstance;
              });
              var panesChanged = !(panes.length === this.panes.length && panes.every(function(pane, index2) {
                return pane === _this2.panes[index2];
              }));
              if (isForceUpdate || panesChanged) {
                this.panes = panes;
              }
            } else if (this.panes.length !== 0) {
              this.panes = [];
            }
          },
          handleTabClick: function handleTabClick(tab, tabName, event2) {
            if (tab.disabled)
              return;
            this.setCurrentName(tabName);
            this.$emit("tab-click", tab, event2);
          },
          handleTabRemove: function handleTabRemove(pane, ev) {
            if (pane.disabled)
              return;
            ev.stopPropagation();
            this.$emit("edit", pane.name, "remove");
            this.$emit("tab-remove", pane.name);
          },
          handleTabAdd: function handleTabAdd() {
            this.$emit("edit", null, "add");
            this.$emit("tab-add");
          },
          setCurrentName: function setCurrentName(value6) {
            var _this3 = this;
            var changeCurrentName = function changeCurrentName2() {
              _this3.currentName = value6;
              _this3.$emit("input", value6);
            };
            if (this.currentName !== value6 && this.beforeLeave) {
              var before2 = this.beforeLeave(value6, this.currentName);
              if (before2 && before2.then) {
                before2.then(function() {
                  changeCurrentName();
                  _this3.$refs.nav && _this3.$refs.nav.removeFocus();
                }, function() {
                });
              } else if (before2 !== false) {
                changeCurrentName();
              }
            } else {
              changeCurrentName();
            }
          }
        },
        render: function render37(h) {
          var _ref2;
          var type3 = this.type, handleTabClick = this.handleTabClick, handleTabRemove = this.handleTabRemove, handleTabAdd = this.handleTabAdd, currentName = this.currentName, panes = this.panes, editable = this.editable, addable = this.addable, tabPosition = this.tabPosition, stretch = this.stretch;
          var newButton = editable || addable ? h("span", {
            "class": "el-tabs__new-tab",
            on: {
              "click": handleTabAdd,
              "keydown": function keydown(ev) {
                if (ev.keyCode === 13) {
                  handleTabAdd();
                }
              }
            },
            attrs: {
              tabindex: "0"
            }
          }, [h("i", { "class": "el-icon-plus" })]) : null;
          var navData = {
            props: {
              currentName,
              onTabClick: handleTabClick,
              onTabRemove: handleTabRemove,
              editable,
              type: type3,
              panes,
              stretch
            },
            ref: "nav"
          };
          var header3 = h("div", { "class": ["el-tabs__header", "is-" + tabPosition] }, [newButton, h("tab-nav", navData)]);
          var panels = h("div", { "class": "el-tabs__content" }, [this.$slots.default]);
          return h("div", { "class": (_ref2 = {
            "el-tabs": true,
            "el-tabs--card": type3 === "card"
          }, _ref2["el-tabs--" + tabPosition] = true, _ref2["el-tabs--border-card"] = type3 === "border-card", _ref2) }, [tabPosition !== "bottom" ? [header3, panels] : [panels, header3]]);
        },
        created: function created20() {
          if (!this.currentName) {
            this.setCurrentName("0");
          }
          this.$on("tab-nav-update", this.calcPaneInstances.bind(null, true));
        },
        mounted: function mounted18() {
          this.calcPaneInstances();
        },
        updated: function updated3() {
          this.calcPaneInstances();
        }
      };
      var src_tabsvue_type_script_lang_js_ = tabsvue_type_script_lang_js_;
      var tabs_render, tabs_staticRenderFns;
      var tabs_component = normalizeComponent(src_tabsvue_type_script_lang_js_, tabs_render, tabs_staticRenderFns, false, null, null, null);
      tabs_component.options.__file = "packages/tabs/src/tabs.vue";
      var tabs = tabs_component.exports;
      tabs.install = function(Vue2) {
        Vue2.component(tabs.name, tabs);
      };
      var packages_tabs = tabs;
      var tab_panevue_type_template_id_9145a070_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return !_vm.lazy || _vm.loaded || _vm.active ? _c("div", {
          directives: [
            {
              name: "show",
              rawName: "v-show",
              value: _vm.active,
              expression: "active"
            }
          ],
          staticClass: "el-tab-pane",
          attrs: {
            role: "tabpanel",
            "aria-hidden": !_vm.active,
            id: "pane-" + _vm.paneName,
            "aria-labelledby": "tab-" + _vm.paneName
          }
        }, [_vm._t("default")], 2) : _vm._e();
      };
      var tab_panevue_type_template_id_9145a070_staticRenderFns = [];
      tab_panevue_type_template_id_9145a070_render._withStripped = true;
      var tab_panevue_type_script_lang_js_ = {
        name: "ElTabPane",
        componentName: "ElTabPane",
        props: {
          label: String,
          labelContent: Function,
          name: String,
          closable: Boolean,
          disabled: Boolean,
          lazy: Boolean
        },
        data: function data25() {
          return {
            index: null,
            loaded: false
          };
        },
        computed: {
          isClosable: function isClosable() {
            return this.closable || this.$parent.closable;
          },
          active: function active() {
            var active2 = this.$parent.currentName === (this.name || this.index);
            if (active2) {
              this.loaded = true;
            }
            return active2;
          },
          paneName: function paneName() {
            return this.name || this.index;
          }
        },
        updated: function updated3() {
          this.$parent.$emit("tab-nav-update");
        }
      };
      var src_tab_panevue_type_script_lang_js_ = tab_panevue_type_script_lang_js_;
      var tab_pane_component = normalizeComponent(src_tab_panevue_type_script_lang_js_, tab_panevue_type_template_id_9145a070_render, tab_panevue_type_template_id_9145a070_staticRenderFns, false, null, null, null);
      tab_pane_component.options.__file = "packages/tabs/src/tab-pane.vue";
      var tab_pane = tab_pane_component.exports;
      tab_pane.install = function(Vue2) {
        Vue2.component(tab_pane.name, tab_pane);
      };
      var packages_tab_pane = tab_pane;
      var tagvue_type_script_lang_js_ = {
        name: "ElTag",
        props: {
          text: String,
          closable: Boolean,
          type: String,
          hit: Boolean,
          disableTransitions: Boolean,
          color: String,
          size: String,
          effect: {
            type: String,
            default: "light",
            validator: function validator2(val) {
              return ["dark", "light", "plain"].indexOf(val) !== -1;
            }
          }
        },
        methods: {
          handleClose: function handleClose(event2) {
            event2.stopPropagation();
            this.$emit("close", event2);
          },
          handleClick: function handleClick(event2) {
            this.$emit("click", event2);
          }
        },
        computed: {
          tagSize: function tagSize() {
            return this.size || (this.$ELEMENT || {}).size;
          }
        },
        render: function render37(h) {
          var type3 = this.type, tagSize = this.tagSize, hit = this.hit, effect = this.effect;
          var classes = ["el-tag", type3 ? "el-tag--" + type3 : "", tagSize ? "el-tag--" + tagSize : "", effect ? "el-tag--" + effect : "", hit && "is-hit"];
          var tagEl = h("span", {
            "class": classes,
            style: { backgroundColor: this.color },
            on: {
              "click": this.handleClick
            }
          }, [this.$slots.default, this.closable && h("i", {
            "class": "el-tag__close el-icon-close",
            on: {
              "click": this.handleClose
            }
          })]);
          return this.disableTransitions ? tagEl : h("transition", {
            attrs: { name: "el-zoom-in-center" }
          }, [tagEl]);
        }
      };
      var src_tagvue_type_script_lang_js_ = tagvue_type_script_lang_js_;
      var tag_render, tag_staticRenderFns;
      var tag_component = normalizeComponent(src_tagvue_type_script_lang_js_, tag_render, tag_staticRenderFns, false, null, null, null);
      tag_component.options.__file = "packages/tag/src/tag.vue";
      var src_tag = tag_component.exports;
      src_tag.install = function(Vue2) {
        Vue2.component(src_tag.name, src_tag);
      };
      var packages_tag = src_tag;
      var treevue_type_template_id_547575a6_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", {
          staticClass: "el-tree",
          class: {
            "el-tree--highlight-current": _vm.highlightCurrent,
            "is-dragging": !!_vm.dragState.draggingNode,
            "is-drop-not-allow": !_vm.dragState.allowDrop,
            "is-drop-inner": _vm.dragState.dropType === "inner"
          },
          attrs: { role: "tree" }
        }, [
          _vm._l(_vm.root.childNodes, function(child) {
            return _c("el-tree-node", {
              key: _vm.getNodeKey(child),
              attrs: {
                node: child,
                props: _vm.props,
                "render-after-expand": _vm.renderAfterExpand,
                "show-checkbox": _vm.showCheckbox,
                "render-content": _vm.renderContent
              },
              on: { "node-expand": _vm.handleNodeExpand }
            });
          }),
          _vm.isEmpty ? _c("div", { staticClass: "el-tree__empty-block" }, [
            _c("span", { staticClass: "el-tree__empty-text" }, [
              _vm._v(_vm._s(_vm.emptyText))
            ])
          ]) : _vm._e(),
          _c("div", {
            directives: [
              {
                name: "show",
                rawName: "v-show",
                value: _vm.dragState.showDropIndicator,
                expression: "dragState.showDropIndicator"
              }
            ],
            ref: "dropIndicator",
            staticClass: "el-tree__drop-indicator"
          })
        ], 2);
      };
      var treevue_type_template_id_547575a6_staticRenderFns = [];
      treevue_type_template_id_547575a6_render._withStripped = true;
      var NODE_KEY = "$treeNodeId";
      var markNodeData = function markNodeData2(node, data25) {
        if (!data25 || data25[NODE_KEY])
          return;
        Object.defineProperty(data25, NODE_KEY, {
          value: node.id,
          enumerable: false,
          configurable: false,
          writable: false
        });
      };
      var util_getNodeKey = function getNodeKey(key, data25) {
        if (!key)
          return data25[NODE_KEY];
        return data25[key];
      };
      var findNearestComponent = function findNearestComponent2(element, componentName) {
        var target2 = element;
        while (target2 && target2.tagName !== "BODY") {
          if (target2.__vue__ && target2.__vue__.$options.name === componentName) {
            return target2.__vue__;
          }
          target2 = target2.parentNode;
        }
        return null;
      };
      var _createClass2 = function() {
        function defineProperties3(target2, props2) {
          for (var i = 0; i < props2.length; i++) {
            var descriptor2 = props2[i];
            descriptor2.enumerable = descriptor2.enumerable || false;
            descriptor2.configurable = true;
            if ("value" in descriptor2)
              descriptor2.writable = true;
            Object.defineProperty(target2, descriptor2.key, descriptor2);
          }
        }
        return function(Constructor, protoProps, staticProps) {
          if (protoProps)
            defineProperties3(Constructor.prototype, protoProps);
          if (staticProps)
            defineProperties3(Constructor, staticProps);
          return Constructor;
        };
      }();
      function node_classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      var getChildState = function getChildState2(node) {
        var all2 = true;
        var none = true;
        var allWithoutDisable = true;
        for (var i = 0, j = node.length; i < j; i++) {
          var n = node[i];
          if (n.checked !== true || n.indeterminate) {
            all2 = false;
            if (!n.disabled) {
              allWithoutDisable = false;
            }
          }
          if (n.checked !== false || n.indeterminate) {
            none = false;
          }
        }
        return { all: all2, none, allWithoutDisable, half: !all2 && !none };
      };
      var reInitChecked = function reInitChecked2(node) {
        if (node.childNodes.length === 0)
          return;
        var _getChildState = getChildState(node.childNodes), all2 = _getChildState.all, none = _getChildState.none, half = _getChildState.half;
        if (all2) {
          node.checked = true;
          node.indeterminate = false;
        } else if (half) {
          node.checked = false;
          node.indeterminate = true;
        } else if (none) {
          node.checked = false;
          node.indeterminate = false;
        }
        var parent2 = node.parent;
        if (!parent2 || parent2.level === 0)
          return;
        if (!node.store.checkStrictly) {
          reInitChecked2(parent2);
        }
      };
      var getPropertyFromData = function getPropertyFromData2(node, prop) {
        var props2 = node.store.props;
        var data25 = node.data || {};
        var config2 = props2[prop];
        if (typeof config2 === "function") {
          return config2(data25, node);
        } else if (typeof config2 === "string") {
          return data25[config2];
        } else if (typeof config2 === "undefined") {
          var dataProp = data25[prop];
          return dataProp === void 0 ? "" : dataProp;
        }
      };
      var nodeIdSeed = 0;
      var node_Node = function() {
        function Node2(options2) {
          node_classCallCheck(this, Node2);
          this.id = nodeIdSeed++;
          this.text = null;
          this.checked = false;
          this.indeterminate = false;
          this.data = null;
          this.expanded = false;
          this.parent = null;
          this.visible = true;
          this.isCurrent = false;
          for (var name in options2) {
            if (options2.hasOwnProperty(name)) {
              this[name] = options2[name];
            }
          }
          this.level = 0;
          this.loaded = false;
          this.childNodes = [];
          this.loading = false;
          if (this.parent) {
            this.level = this.parent.level + 1;
          }
          var store2 = this.store;
          if (!store2) {
            throw new Error("[Node]store is required!");
          }
          store2.registerNode(this);
          var props2 = store2.props;
          if (props2 && typeof props2.isLeaf !== "undefined") {
            var isLeaf = getPropertyFromData(this, "isLeaf");
            if (typeof isLeaf === "boolean") {
              this.isLeafByUser = isLeaf;
            }
          }
          if (store2.lazy !== true && this.data) {
            this.setData(this.data);
            if (store2.defaultExpandAll) {
              this.expanded = true;
            }
          } else if (this.level > 0 && store2.lazy && store2.defaultExpandAll) {
            this.expand();
          }
          if (!Array.isArray(this.data)) {
            markNodeData(this, this.data);
          }
          if (!this.data)
            return;
          var defaultExpandedKeys = store2.defaultExpandedKeys;
          var key = store2.key;
          if (key && defaultExpandedKeys && defaultExpandedKeys.indexOf(this.key) !== -1) {
            this.expand(null, store2.autoExpandParent);
          }
          if (key && store2.currentNodeKey !== void 0 && this.key === store2.currentNodeKey) {
            store2.currentNode = this;
            store2.currentNode.isCurrent = true;
          }
          if (store2.lazy) {
            store2._initDefaultCheckedNode(this);
          }
          this.updateLeafState();
        }
        Node2.prototype.setData = function setData(data25) {
          if (!Array.isArray(data25)) {
            markNodeData(this, data25);
          }
          this.data = data25;
          this.childNodes = [];
          var children = void 0;
          if (this.level === 0 && this.data instanceof Array) {
            children = this.data;
          } else {
            children = getPropertyFromData(this, "children") || [];
          }
          for (var i = 0, j = children.length; i < j; i++) {
            this.insertChild({ data: children[i] });
          }
        };
        Node2.prototype.contains = function contains(target2) {
          var deep = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
          var walk2 = function walk3(parent2) {
            var children = parent2.childNodes || [];
            var result2 = false;
            for (var i = 0, j = children.length; i < j; i++) {
              var child = children[i];
              if (child === target2 || deep && walk3(child)) {
                result2 = true;
                break;
              }
            }
            return result2;
          };
          return walk2(this);
        };
        Node2.prototype.remove = function remove2() {
          var parent2 = this.parent;
          if (parent2) {
            parent2.removeChild(this);
          }
        };
        Node2.prototype.insertChild = function insertChild(child, index2, batch) {
          if (!child)
            throw new Error("insertChild error: child is required.");
          if (!(child instanceof Node2)) {
            if (!batch) {
              var children = this.getChildren(true) || [];
              if (children.indexOf(child.data) === -1) {
                if (typeof index2 === "undefined" || index2 < 0) {
                  children.push(child.data);
                } else {
                  children.splice(index2, 0, child.data);
                }
              }
            }
            merge_default()(child, {
              parent: this,
              store: this.store
            });
            child = new Node2(child);
          }
          child.level = this.level + 1;
          if (typeof index2 === "undefined" || index2 < 0) {
            this.childNodes.push(child);
          } else {
            this.childNodes.splice(index2, 0, child);
          }
          this.updateLeafState();
        };
        Node2.prototype.insertBefore = function insertBefore2(child, ref2) {
          var index2 = void 0;
          if (ref2) {
            index2 = this.childNodes.indexOf(ref2);
          }
          this.insertChild(child, index2);
        };
        Node2.prototype.insertAfter = function insertAfter(child, ref2) {
          var index2 = void 0;
          if (ref2) {
            index2 = this.childNodes.indexOf(ref2);
            if (index2 !== -1)
              index2 += 1;
          }
          this.insertChild(child, index2);
        };
        Node2.prototype.removeChild = function removeChild2(child) {
          var children = this.getChildren() || [];
          var dataIndex = children.indexOf(child.data);
          if (dataIndex > -1) {
            children.splice(dataIndex, 1);
          }
          var index2 = this.childNodes.indexOf(child);
          if (index2 > -1) {
            this.store && this.store.deregisterNode(child);
            child.parent = null;
            this.childNodes.splice(index2, 1);
          }
          this.updateLeafState();
        };
        Node2.prototype.removeChildByData = function removeChildByData(data25) {
          var targetNode = null;
          for (var i = 0; i < this.childNodes.length; i++) {
            if (this.childNodes[i].data === data25) {
              targetNode = this.childNodes[i];
              break;
            }
          }
          if (targetNode) {
            this.removeChild(targetNode);
          }
        };
        Node2.prototype.expand = function expand2(callback, expandParent) {
          var _this = this;
          var done = function done2() {
            if (expandParent) {
              var parent2 = _this.parent;
              while (parent2.level > 0) {
                parent2.expanded = true;
                parent2 = parent2.parent;
              }
            }
            _this.expanded = true;
            if (callback)
              callback();
          };
          if (this.shouldLoadData()) {
            this.loadData(function(data25) {
              if (data25 instanceof Array) {
                if (_this.checked) {
                  _this.setChecked(true, true);
                } else if (!_this.store.checkStrictly) {
                  reInitChecked(_this);
                }
                done();
              }
            });
          } else {
            done();
          }
        };
        Node2.prototype.doCreateChildren = function doCreateChildren(array3) {
          var _this2 = this;
          var defaultProps = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          array3.forEach(function(item) {
            _this2.insertChild(merge_default()({ data: item }, defaultProps), void 0, true);
          });
        };
        Node2.prototype.collapse = function collapse2() {
          this.expanded = false;
        };
        Node2.prototype.shouldLoadData = function shouldLoadData() {
          return this.store.lazy === true && this.store.load && !this.loaded;
        };
        Node2.prototype.updateLeafState = function updateLeafState() {
          if (this.store.lazy === true && this.loaded !== true && typeof this.isLeafByUser !== "undefined") {
            this.isLeaf = this.isLeafByUser;
            return;
          }
          var childNodes = this.childNodes;
          if (!this.store.lazy || this.store.lazy === true && this.loaded === true) {
            this.isLeaf = !childNodes || childNodes.length === 0;
            return;
          }
          this.isLeaf = false;
        };
        Node2.prototype.setChecked = function setChecked(value6, deep, recursion, passValue) {
          var _this3 = this;
          this.indeterminate = value6 === "half";
          this.checked = value6 === true;
          if (this.store.checkStrictly)
            return;
          if (!(this.shouldLoadData() && !this.store.checkDescendants)) {
            var _getChildState2 = getChildState(this.childNodes), all2 = _getChildState2.all, allWithoutDisable = _getChildState2.allWithoutDisable;
            if (!this.isLeaf && !all2 && allWithoutDisable) {
              this.checked = false;
              value6 = false;
            }
            var handleDescendants = function handleDescendants2() {
              if (deep) {
                var childNodes = _this3.childNodes;
                for (var i = 0, j = childNodes.length; i < j; i++) {
                  var child = childNodes[i];
                  passValue = passValue || value6 !== false;
                  var isCheck = child.disabled ? child.checked : passValue;
                  child.setChecked(isCheck, deep, true, passValue);
                }
                var _getChildState3 = getChildState(childNodes), half = _getChildState3.half, _all = _getChildState3.all;
                if (!_all) {
                  _this3.checked = _all;
                  _this3.indeterminate = half;
                }
              }
            };
            if (this.shouldLoadData()) {
              this.loadData(function() {
                handleDescendants();
                reInitChecked(_this3);
              }, {
                checked: value6 !== false
              });
              return;
            } else {
              handleDescendants();
            }
          }
          var parent2 = this.parent;
          if (!parent2 || parent2.level === 0)
            return;
          if (!recursion) {
            reInitChecked(parent2);
          }
        };
        Node2.prototype.getChildren = function getChildren() {
          var forceInit = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
          if (this.level === 0)
            return this.data;
          var data25 = this.data;
          if (!data25)
            return null;
          var props2 = this.store.props;
          var children = "children";
          if (props2) {
            children = props2.children || "children";
          }
          if (data25[children] === void 0) {
            data25[children] = null;
          }
          if (forceInit && !data25[children]) {
            data25[children] = [];
          }
          return data25[children];
        };
        Node2.prototype.updateChildren = function updateChildren() {
          var _this4 = this;
          var newData = this.getChildren() || [];
          var oldData = this.childNodes.map(function(node) {
            return node.data;
          });
          var newDataMap = {};
          var newNodes = [];
          newData.forEach(function(item, index2) {
            var key = item[NODE_KEY];
            var isNodeExists = !!key && Object(util_["arrayFindIndex"])(oldData, function(data25) {
              return data25[NODE_KEY] === key;
            }) >= 0;
            if (isNodeExists) {
              newDataMap[key] = { index: index2, data: item };
            } else {
              newNodes.push({ index: index2, data: item });
            }
          });
          if (!this.store.lazy) {
            oldData.forEach(function(item) {
              if (!newDataMap[item[NODE_KEY]])
                _this4.removeChildByData(item);
            });
          }
          newNodes.forEach(function(_ref) {
            var index2 = _ref.index, data25 = _ref.data;
            _this4.insertChild({ data: data25 }, index2);
          });
          this.updateLeafState();
        };
        Node2.prototype.loadData = function loadData3(callback) {
          var _this5 = this;
          var defaultProps = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          if (this.store.lazy === true && this.store.load && !this.loaded && (!this.loading || Object.keys(defaultProps).length)) {
            this.loading = true;
            var resolve = function resolve2(children) {
              _this5.loaded = true;
              _this5.loading = false;
              _this5.childNodes = [];
              _this5.doCreateChildren(children, defaultProps);
              _this5.updateLeafState();
              if (callback) {
                callback.call(_this5, children);
              }
            };
            this.store.load(this, resolve);
          } else {
            if (callback) {
              callback.call(this);
            }
          }
        };
        _createClass2(Node2, [{
          key: "label",
          get: function get7() {
            return getPropertyFromData(this, "label");
          }
        }, {
          key: "key",
          get: function get7() {
            var nodeKey = this.store.key;
            if (this.data)
              return this.data[nodeKey];
            return null;
          }
        }, {
          key: "disabled",
          get: function get7() {
            return getPropertyFromData(this, "disabled");
          }
        }, {
          key: "nextSibling",
          get: function get7() {
            var parent2 = this.parent;
            if (parent2) {
              var index2 = parent2.childNodes.indexOf(this);
              if (index2 > -1) {
                return parent2.childNodes[index2 + 1];
              }
            }
            return null;
          }
        }, {
          key: "previousSibling",
          get: function get7() {
            var parent2 = this.parent;
            if (parent2) {
              var index2 = parent2.childNodes.indexOf(this);
              if (index2 > -1) {
                return index2 > 0 ? parent2.childNodes[index2 - 1] : null;
              }
            }
            return null;
          }
        }]);
        return Node2;
      }();
      var model_node = node_Node;
      var tree_store_typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
        return typeof obj;
      } : function(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
      function tree_store_classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      var tree_store_TreeStore = function() {
        function TreeStore(options2) {
          var _this = this;
          tree_store_classCallCheck(this, TreeStore);
          this.currentNode = null;
          this.currentNodeKey = null;
          for (var option2 in options2) {
            if (options2.hasOwnProperty(option2)) {
              this[option2] = options2[option2];
            }
          }
          this.nodesMap = {};
          this.root = new model_node({
            data: this.data,
            store: this
          });
          if (this.lazy && this.load) {
            var loadFn = this.load;
            loadFn(this.root, function(data25) {
              _this.root.doCreateChildren(data25);
              _this._initDefaultCheckedNodes();
            });
          } else {
            this._initDefaultCheckedNodes();
          }
        }
        TreeStore.prototype.filter = function filter2(value6) {
          var filterNodeMethod = this.filterNodeMethod;
          var lazy = this.lazy;
          var traverse2 = function traverse3(node) {
            var childNodes = node.root ? node.root.childNodes : node.childNodes;
            childNodes.forEach(function(child) {
              child.visible = filterNodeMethod.call(child, value6, child.data, child);
              traverse3(child);
            });
            if (!node.visible && childNodes.length) {
              var allHidden = true;
              allHidden = !childNodes.some(function(child) {
                return child.visible;
              });
              if (node.root) {
                node.root.visible = allHidden === false;
              } else {
                node.visible = allHidden === false;
              }
            }
            if (!value6)
              return;
            if (node.visible && !node.isLeaf && !lazy)
              node.expand();
          };
          traverse2(this);
        };
        TreeStore.prototype.setData = function setData(newVal) {
          var instanceChanged = newVal !== this.root.data;
          if (instanceChanged) {
            this.root.setData(newVal);
            this._initDefaultCheckedNodes();
          } else {
            this.root.updateChildren();
          }
        };
        TreeStore.prototype.getNode = function getNode(data25) {
          if (data25 instanceof model_node)
            return data25;
          var key = (typeof data25 === "undefined" ? "undefined" : tree_store_typeof(data25)) !== "object" ? data25 : util_getNodeKey(this.key, data25);
          return this.nodesMap[key] || null;
        };
        TreeStore.prototype.insertBefore = function insertBefore2(data25, refData) {
          var refNode = this.getNode(refData);
          refNode.parent.insertBefore({ data: data25 }, refNode);
        };
        TreeStore.prototype.insertAfter = function insertAfter(data25, refData) {
          var refNode = this.getNode(refData);
          refNode.parent.insertAfter({ data: data25 }, refNode);
        };
        TreeStore.prototype.remove = function remove2(data25) {
          var node = this.getNode(data25);
          if (node && node.parent) {
            if (node === this.currentNode) {
              this.currentNode = null;
            }
            node.parent.removeChild(node);
          }
        };
        TreeStore.prototype.append = function append(data25, parentData) {
          var parentNode2 = parentData ? this.getNode(parentData) : this.root;
          if (parentNode2) {
            parentNode2.insertChild({ data: data25 });
          }
        };
        TreeStore.prototype._initDefaultCheckedNodes = function _initDefaultCheckedNodes() {
          var _this2 = this;
          var defaultCheckedKeys = this.defaultCheckedKeys || [];
          var nodesMap = this.nodesMap;
          defaultCheckedKeys.forEach(function(checkedKey) {
            var node = nodesMap[checkedKey];
            if (node) {
              node.setChecked(true, !_this2.checkStrictly);
            }
          });
        };
        TreeStore.prototype._initDefaultCheckedNode = function _initDefaultCheckedNode(node) {
          var defaultCheckedKeys = this.defaultCheckedKeys || [];
          if (defaultCheckedKeys.indexOf(node.key) !== -1) {
            node.setChecked(true, !this.checkStrictly);
          }
        };
        TreeStore.prototype.setDefaultCheckedKey = function setDefaultCheckedKey(newVal) {
          if (newVal !== this.defaultCheckedKeys) {
            this.defaultCheckedKeys = newVal;
            this._initDefaultCheckedNodes();
          }
        };
        TreeStore.prototype.registerNode = function registerNode(node) {
          var key = this.key;
          if (!key || !node || !node.data)
            return;
          var nodeKey = node.key;
          if (nodeKey !== void 0)
            this.nodesMap[node.key] = node;
        };
        TreeStore.prototype.deregisterNode = function deregisterNode(node) {
          var _this3 = this;
          var key = this.key;
          if (!key || !node || !node.data)
            return;
          node.childNodes.forEach(function(child) {
            _this3.deregisterNode(child);
          });
          delete this.nodesMap[node.key];
        };
        TreeStore.prototype.getCheckedNodes = function getCheckedNodes() {
          var leafOnly = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
          var includeHalfChecked = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
          var checkedNodes = [];
          var traverse2 = function traverse3(node) {
            var childNodes = node.root ? node.root.childNodes : node.childNodes;
            childNodes.forEach(function(child) {
              if ((child.checked || includeHalfChecked && child.indeterminate) && (!leafOnly || leafOnly && child.isLeaf)) {
                checkedNodes.push(child.data);
              }
              traverse3(child);
            });
          };
          traverse2(this);
          return checkedNodes;
        };
        TreeStore.prototype.getCheckedKeys = function getCheckedKeys() {
          var _this4 = this;
          var leafOnly = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
          return this.getCheckedNodes(leafOnly).map(function(data25) {
            return (data25 || {})[_this4.key];
          });
        };
        TreeStore.prototype.getHalfCheckedNodes = function getHalfCheckedNodes() {
          var nodes = [];
          var traverse2 = function traverse3(node) {
            var childNodes = node.root ? node.root.childNodes : node.childNodes;
            childNodes.forEach(function(child) {
              if (child.indeterminate) {
                nodes.push(child.data);
              }
              traverse3(child);
            });
          };
          traverse2(this);
          return nodes;
        };
        TreeStore.prototype.getHalfCheckedKeys = function getHalfCheckedKeys() {
          var _this5 = this;
          return this.getHalfCheckedNodes().map(function(data25) {
            return (data25 || {})[_this5.key];
          });
        };
        TreeStore.prototype._getAllNodes = function _getAllNodes() {
          var allNodes = [];
          var nodesMap = this.nodesMap;
          for (var nodeKey in nodesMap) {
            if (nodesMap.hasOwnProperty(nodeKey)) {
              allNodes.push(nodesMap[nodeKey]);
            }
          }
          return allNodes;
        };
        TreeStore.prototype.updateChildren = function updateChildren(key, data25) {
          var node = this.nodesMap[key];
          if (!node)
            return;
          var childNodes = node.childNodes;
          for (var i = childNodes.length - 1; i >= 0; i--) {
            var child = childNodes[i];
            this.remove(child.data);
          }
          for (var _i = 0, j = data25.length; _i < j; _i++) {
            var _child = data25[_i];
            this.append(_child, node.data);
          }
        };
        TreeStore.prototype._setCheckedKeys = function _setCheckedKeys(key) {
          var leafOnly = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
          var checkedKeys = arguments[2];
          var allNodes = this._getAllNodes().sort(function(a, b) {
            return b.level - a.level;
          });
          var cache = /* @__PURE__ */ Object.create(null);
          var keys3 = Object.keys(checkedKeys);
          allNodes.forEach(function(node2) {
            return node2.setChecked(false, false);
          });
          for (var i = 0, j = allNodes.length; i < j; i++) {
            var node = allNodes[i];
            var nodeKey = node.data[key].toString();
            var checked = keys3.indexOf(nodeKey) > -1;
            if (!checked) {
              if (node.checked && !cache[nodeKey]) {
                node.setChecked(false, false);
              }
              continue;
            }
            var parent2 = node.parent;
            while (parent2 && parent2.level > 0) {
              cache[parent2.data[key]] = true;
              parent2 = parent2.parent;
            }
            if (node.isLeaf || this.checkStrictly) {
              node.setChecked(true, false);
              continue;
            }
            node.setChecked(true, true);
            if (leafOnly) {
              (function() {
                node.setChecked(false, false);
                var traverse2 = function traverse3(node2) {
                  var childNodes = node2.childNodes;
                  childNodes.forEach(function(child) {
                    if (!child.isLeaf) {
                      child.setChecked(false, false);
                    }
                    traverse3(child);
                  });
                };
                traverse2(node);
              })();
            }
          }
        };
        TreeStore.prototype.setCheckedNodes = function setCheckedNodes(array3) {
          var leafOnly = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
          var key = this.key;
          var checkedKeys = {};
          array3.forEach(function(item) {
            checkedKeys[(item || {})[key]] = true;
          });
          this._setCheckedKeys(key, leafOnly, checkedKeys);
        };
        TreeStore.prototype.setCheckedKeys = function setCheckedKeys(keys3) {
          var leafOnly = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
          this.defaultCheckedKeys = keys3;
          var key = this.key;
          var checkedKeys = {};
          keys3.forEach(function(key2) {
            checkedKeys[key2] = true;
          });
          this._setCheckedKeys(key, leafOnly, checkedKeys);
        };
        TreeStore.prototype.setDefaultExpandedKeys = function setDefaultExpandedKeys(keys3) {
          var _this6 = this;
          keys3 = keys3 || [];
          this.defaultExpandedKeys = keys3;
          keys3.forEach(function(key) {
            var node = _this6.getNode(key);
            if (node)
              node.expand(null, _this6.autoExpandParent);
          });
        };
        TreeStore.prototype.setChecked = function setChecked(data25, checked, deep) {
          var node = this.getNode(data25);
          if (node) {
            node.setChecked(!!checked, deep);
          }
        };
        TreeStore.prototype.getCurrentNode = function getCurrentNode() {
          return this.currentNode;
        };
        TreeStore.prototype.setCurrentNode = function setCurrentNode(currentNode) {
          var prevCurrentNode = this.currentNode;
          if (prevCurrentNode) {
            prevCurrentNode.isCurrent = false;
          }
          this.currentNode = currentNode;
          this.currentNode.isCurrent = true;
        };
        TreeStore.prototype.setUserCurrentNode = function setUserCurrentNode(node) {
          var key = node[this.key];
          var currNode = this.nodesMap[key];
          this.setCurrentNode(currNode);
        };
        TreeStore.prototype.setCurrentNodeKey = function setCurrentNodeKey(key) {
          if (key === null || key === void 0) {
            this.currentNode && (this.currentNode.isCurrent = false);
            this.currentNode = null;
            return;
          }
          var node = this.getNode(key);
          if (node) {
            this.setCurrentNode(node);
          }
        };
        return TreeStore;
      }();
      var tree_store = tree_store_TreeStore;
      var tree_nodevue_type_template_id_3ba3ef0e_render = function() {
        var this$1$1 = this;
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", {
          directives: [
            {
              name: "show",
              rawName: "v-show",
              value: _vm.node.visible,
              expression: "node.visible"
            }
          ],
          ref: "node",
          staticClass: "el-tree-node",
          class: {
            "is-expanded": _vm.expanded,
            "is-current": _vm.node.isCurrent,
            "is-hidden": !_vm.node.visible,
            "is-focusable": !_vm.node.disabled,
            "is-checked": !_vm.node.disabled && _vm.node.checked
          },
          attrs: {
            role: "treeitem",
            tabindex: "-1",
            "aria-expanded": _vm.expanded,
            "aria-disabled": _vm.node.disabled,
            "aria-checked": _vm.node.checked,
            draggable: _vm.tree.draggable
          },
          on: {
            click: function($event) {
              $event.stopPropagation();
              return _vm.handleClick($event);
            },
            contextmenu: function($event) {
              return this$1$1.handleContextMenu($event);
            },
            dragstart: function($event) {
              $event.stopPropagation();
              return _vm.handleDragStart($event);
            },
            dragover: function($event) {
              $event.stopPropagation();
              return _vm.handleDragOver($event);
            },
            dragend: function($event) {
              $event.stopPropagation();
              return _vm.handleDragEnd($event);
            },
            drop: function($event) {
              $event.stopPropagation();
              return _vm.handleDrop($event);
            }
          }
        }, [
          _c("div", {
            staticClass: "el-tree-node__content",
            style: {
              "padding-left": (_vm.node.level - 1) * _vm.tree.indent + "px"
            }
          }, [
            _c("span", {
              class: [
                {
                  "is-leaf": _vm.node.isLeaf,
                  expanded: !_vm.node.isLeaf && _vm.expanded
                },
                "el-tree-node__expand-icon",
                _vm.tree.iconClass ? _vm.tree.iconClass : "el-icon-caret-right"
              ],
              on: {
                click: function($event) {
                  $event.stopPropagation();
                  return _vm.handleExpandIconClick($event);
                }
              }
            }),
            _vm.showCheckbox ? _c("el-checkbox", {
              attrs: {
                indeterminate: _vm.node.indeterminate,
                disabled: !!_vm.node.disabled
              },
              on: { change: _vm.handleCheckChange },
              nativeOn: {
                click: function($event) {
                  $event.stopPropagation();
                }
              },
              model: {
                value: _vm.node.checked,
                callback: function($$v) {
                  _vm.$set(_vm.node, "checked", $$v);
                },
                expression: "node.checked"
              }
            }) : _vm._e(),
            _vm.node.loading ? _c("span", {
              staticClass: "el-tree-node__loading-icon el-icon-loading"
            }) : _vm._e(),
            _c("node-content", { attrs: { node: _vm.node } })
          ], 1),
          _c("el-collapse-transition", [
            !_vm.renderAfterExpand || _vm.childNodeRendered ? _c("div", {
              directives: [
                {
                  name: "show",
                  rawName: "v-show",
                  value: _vm.expanded,
                  expression: "expanded"
                }
              ],
              staticClass: "el-tree-node__children",
              attrs: { role: "group", "aria-expanded": _vm.expanded }
            }, _vm._l(_vm.node.childNodes, function(child) {
              return _c("el-tree-node", {
                key: _vm.getNodeKey(child),
                attrs: {
                  "render-content": _vm.renderContent,
                  "render-after-expand": _vm.renderAfterExpand,
                  "show-checkbox": _vm.showCheckbox,
                  node: child
                },
                on: { "node-expand": _vm.handleChildNodeExpand }
              });
            }), 1) : _vm._e()
          ])
        ], 1);
      };
      var tree_nodevue_type_template_id_3ba3ef0e_staticRenderFns = [];
      tree_nodevue_type_template_id_3ba3ef0e_render._withStripped = true;
      var tree_nodevue_type_script_lang_js_ = {
        name: "ElTreeNode",
        componentName: "ElTreeNode",
        mixins: [emitter_default.a],
        props: {
          node: {
            default: function _default116() {
              return {};
            }
          },
          props: {},
          renderContent: Function,
          renderAfterExpand: {
            type: Boolean,
            default: true
          },
          showCheckbox: {
            type: Boolean,
            default: false
          }
        },
        components: {
          ElCollapseTransition: collapse_transition_default.a,
          ElCheckbox: checkbox_default.a,
          NodeContent: {
            props: {
              node: {
                required: true
              }
            },
            render: function render37(h) {
              var parent2 = this.$parent;
              var tree2 = parent2.tree;
              var node = this.node;
              var data25 = node.data, store2 = node.store;
              return parent2.renderContent ? parent2.renderContent.call(parent2._renderProxy, h, { _self: tree2.$vnode.context, node, data: data25, store: store2 }) : tree2.$scopedSlots.default ? tree2.$scopedSlots.default({ node, data: data25 }) : h("span", { "class": "el-tree-node__label" }, [node.label]);
            }
          }
        },
        data: function data25() {
          return {
            tree: null,
            expanded: false,
            childNodeRendered: false,
            oldChecked: null,
            oldIndeterminate: null
          };
        },
        watch: {
          "node.indeterminate": function nodeIndeterminate(val) {
            this.handleSelectChange(this.node.checked, val);
          },
          "node.checked": function nodeChecked(val) {
            this.handleSelectChange(val, this.node.indeterminate);
          },
          "node.expanded": function nodeExpanded(val) {
            var _this = this;
            this.$nextTick(function() {
              return _this.expanded = val;
            });
            if (val) {
              this.childNodeRendered = true;
            }
          }
        },
        methods: {
          getNodeKey: function getNodeKey(node) {
            return util_getNodeKey(this.tree.nodeKey, node.data);
          },
          handleSelectChange: function handleSelectChange(checked, indeterminate) {
            if (this.oldChecked !== checked && this.oldIndeterminate !== indeterminate) {
              this.tree.$emit("check-change", this.node.data, checked, indeterminate);
            }
            this.oldChecked = checked;
            this.indeterminate = indeterminate;
          },
          handleClick: function handleClick() {
            var store2 = this.tree.store;
            store2.setCurrentNode(this.node);
            this.tree.$emit("current-change", store2.currentNode ? store2.currentNode.data : null, store2.currentNode);
            this.tree.currentNode = this;
            if (this.tree.expandOnClickNode) {
              this.handleExpandIconClick();
            }
            if (this.tree.checkOnClickNode && !this.node.disabled) {
              this.handleCheckChange(null, {
                target: { checked: !this.node.checked }
              });
            }
            this.tree.$emit("node-click", this.node.data, this.node, this);
          },
          handleContextMenu: function handleContextMenu(event2) {
            if (this.tree._events["node-contextmenu"] && this.tree._events["node-contextmenu"].length > 0) {
              event2.stopPropagation();
              event2.preventDefault();
            }
            this.tree.$emit("node-contextmenu", event2, this.node.data, this.node, this);
          },
          handleExpandIconClick: function handleExpandIconClick() {
            if (this.node.isLeaf)
              return;
            if (this.expanded) {
              this.tree.$emit("node-collapse", this.node.data, this.node, this);
              this.node.collapse();
            } else {
              this.node.expand();
              this.$emit("node-expand", this.node.data, this.node, this);
            }
          },
          handleCheckChange: function handleCheckChange(value6, ev) {
            var _this2 = this;
            this.node.setChecked(ev.target.checked, !this.tree.checkStrictly);
            this.$nextTick(function() {
              var store2 = _this2.tree.store;
              _this2.tree.$emit("check", _this2.node.data, {
                checkedNodes: store2.getCheckedNodes(),
                checkedKeys: store2.getCheckedKeys(),
                halfCheckedNodes: store2.getHalfCheckedNodes(),
                halfCheckedKeys: store2.getHalfCheckedKeys()
              });
            });
          },
          handleChildNodeExpand: function handleChildNodeExpand(nodeData, node, instance) {
            this.broadcast("ElTreeNode", "tree-node-expand", node);
            this.tree.$emit("node-expand", nodeData, node, instance);
          },
          handleDragStart: function handleDragStart(event2) {
            if (!this.tree.draggable)
              return;
            this.tree.$emit("tree-node-drag-start", event2, this);
          },
          handleDragOver: function handleDragOver(event2) {
            if (!this.tree.draggable)
              return;
            this.tree.$emit("tree-node-drag-over", event2, this);
            event2.preventDefault();
          },
          handleDrop: function handleDrop(event2) {
            event2.preventDefault();
          },
          handleDragEnd: function handleDragEnd(event2) {
            if (!this.tree.draggable)
              return;
            this.tree.$emit("tree-node-drag-end", event2, this);
          }
        },
        created: function created20() {
          var _this3 = this;
          var parent2 = this.$parent;
          if (parent2.isTree) {
            this.tree = parent2;
          } else {
            this.tree = parent2.tree;
          }
          var tree2 = this.tree;
          if (!tree2) {
            console.warn("Can not find node's tree.");
          }
          var props2 = tree2.props || {};
          var childrenKey = props2["children"] || "children";
          this.$watch("node.data." + childrenKey, function() {
            _this3.node.updateChildren();
          });
          if (this.node.expanded) {
            this.expanded = true;
            this.childNodeRendered = true;
          }
          if (this.tree.accordion) {
            this.$on("tree-node-expand", function(node) {
              if (_this3.node !== node) {
                _this3.node.collapse();
              }
            });
          }
        }
      };
      var src_tree_nodevue_type_script_lang_js_ = tree_nodevue_type_script_lang_js_;
      var tree_node_component = normalizeComponent(src_tree_nodevue_type_script_lang_js_, tree_nodevue_type_template_id_3ba3ef0e_render, tree_nodevue_type_template_id_3ba3ef0e_staticRenderFns, false, null, null, null);
      tree_node_component.options.__file = "packages/tree/src/tree-node.vue";
      var tree_node = tree_node_component.exports;
      var treevue_type_script_lang_js_ = {
        name: "ElTree",
        mixins: [emitter_default.a],
        components: {
          ElTreeNode: tree_node
        },
        data: function data25() {
          return {
            store: null,
            root: null,
            currentNode: null,
            treeItems: null,
            checkboxItems: [],
            dragState: {
              showDropIndicator: false,
              draggingNode: null,
              dropNode: null,
              allowDrop: true
            }
          };
        },
        props: {
          data: {
            type: Array
          },
          emptyText: {
            type: String,
            default: function _default116() {
              return Object(lib_locale_["t"])("el.tree.emptyText");
            }
          },
          renderAfterExpand: {
            type: Boolean,
            default: true
          },
          nodeKey: String,
          checkStrictly: Boolean,
          defaultExpandAll: Boolean,
          expandOnClickNode: {
            type: Boolean,
            default: true
          },
          checkOnClickNode: Boolean,
          checkDescendants: {
            type: Boolean,
            default: false
          },
          autoExpandParent: {
            type: Boolean,
            default: true
          },
          defaultCheckedKeys: Array,
          defaultExpandedKeys: Array,
          currentNodeKey: [String, Number],
          renderContent: Function,
          showCheckbox: {
            type: Boolean,
            default: false
          },
          draggable: {
            type: Boolean,
            default: false
          },
          allowDrag: Function,
          allowDrop: Function,
          props: {
            default: function _default116() {
              return {
                children: "children",
                label: "label",
                disabled: "disabled"
              };
            }
          },
          lazy: {
            type: Boolean,
            default: false
          },
          highlightCurrent: Boolean,
          load: Function,
          filterNodeMethod: Function,
          accordion: Boolean,
          indent: {
            type: Number,
            default: 18
          },
          iconClass: String
        },
        computed: {
          children: {
            set: function set3(value6) {
              this.data = value6;
            },
            get: function get7() {
              return this.data;
            }
          },
          treeItemArray: function treeItemArray() {
            return Array.prototype.slice.call(this.treeItems);
          },
          isEmpty: function isEmpty3() {
            var childNodes = this.root.childNodes;
            return !childNodes || childNodes.length === 0 || childNodes.every(function(_ref) {
              var visible2 = _ref.visible;
              return !visible2;
            });
          }
        },
        watch: {
          defaultCheckedKeys: function defaultCheckedKeys(newVal) {
            this.store.setDefaultCheckedKey(newVal);
          },
          defaultExpandedKeys: function defaultExpandedKeys(newVal) {
            this.store.defaultExpandedKeys = newVal;
            this.store.setDefaultExpandedKeys(newVal);
          },
          data: function data25(newVal) {
            this.store.setData(newVal);
          },
          checkboxItems: function checkboxItems(val) {
            Array.prototype.forEach.call(val, function(checkbox2) {
              checkbox2.setAttribute("tabindex", -1);
            });
          },
          checkStrictly: function checkStrictly(newVal) {
            this.store.checkStrictly = newVal;
          }
        },
        methods: {
          filter: function filter2(value6) {
            if (!this.filterNodeMethod)
              throw new Error("[Tree] filterNodeMethod is required when filter");
            this.store.filter(value6);
          },
          getNodeKey: function getNodeKey(node) {
            return util_getNodeKey(this.nodeKey, node.data);
          },
          getNodePath: function getNodePath(data25) {
            if (!this.nodeKey)
              throw new Error("[Tree] nodeKey is required in getNodePath");
            var node = this.store.getNode(data25);
            if (!node)
              return [];
            var path = [node.data];
            var parent2 = node.parent;
            while (parent2 && parent2 !== this.root) {
              path.push(parent2.data);
              parent2 = parent2.parent;
            }
            return path.reverse();
          },
          getCheckedNodes: function getCheckedNodes(leafOnly, includeHalfChecked) {
            return this.store.getCheckedNodes(leafOnly, includeHalfChecked);
          },
          getCheckedKeys: function getCheckedKeys(leafOnly) {
            return this.store.getCheckedKeys(leafOnly);
          },
          getCurrentNode: function getCurrentNode() {
            var currentNode = this.store.getCurrentNode();
            return currentNode ? currentNode.data : null;
          },
          getCurrentKey: function getCurrentKey() {
            if (!this.nodeKey)
              throw new Error("[Tree] nodeKey is required in getCurrentKey");
            var currentNode = this.getCurrentNode();
            return currentNode ? currentNode[this.nodeKey] : null;
          },
          setCheckedNodes: function setCheckedNodes(nodes, leafOnly) {
            if (!this.nodeKey)
              throw new Error("[Tree] nodeKey is required in setCheckedNodes");
            this.store.setCheckedNodes(nodes, leafOnly);
          },
          setCheckedKeys: function setCheckedKeys(keys3, leafOnly) {
            if (!this.nodeKey)
              throw new Error("[Tree] nodeKey is required in setCheckedKeys");
            this.store.setCheckedKeys(keys3, leafOnly);
          },
          setChecked: function setChecked(data25, checked, deep) {
            this.store.setChecked(data25, checked, deep);
          },
          getHalfCheckedNodes: function getHalfCheckedNodes() {
            return this.store.getHalfCheckedNodes();
          },
          getHalfCheckedKeys: function getHalfCheckedKeys() {
            return this.store.getHalfCheckedKeys();
          },
          setCurrentNode: function setCurrentNode(node) {
            if (!this.nodeKey)
              throw new Error("[Tree] nodeKey is required in setCurrentNode");
            this.store.setUserCurrentNode(node);
          },
          setCurrentKey: function setCurrentKey(key) {
            if (!this.nodeKey)
              throw new Error("[Tree] nodeKey is required in setCurrentKey");
            this.store.setCurrentNodeKey(key);
          },
          getNode: function getNode(data25) {
            return this.store.getNode(data25);
          },
          remove: function remove2(data25) {
            this.store.remove(data25);
          },
          append: function append(data25, parentNode2) {
            this.store.append(data25, parentNode2);
          },
          insertBefore: function insertBefore2(data25, refNode) {
            this.store.insertBefore(data25, refNode);
          },
          insertAfter: function insertAfter(data25, refNode) {
            this.store.insertAfter(data25, refNode);
          },
          handleNodeExpand: function handleNodeExpand(nodeData, node, instance) {
            this.broadcast("ElTreeNode", "tree-node-expand", node);
            this.$emit("node-expand", nodeData, node, instance);
          },
          updateKeyChildren: function updateKeyChildren(key, data25) {
            if (!this.nodeKey)
              throw new Error("[Tree] nodeKey is required in updateKeyChild");
            this.store.updateChildren(key, data25);
          },
          initTabIndex: function initTabIndex() {
            this.treeItems = this.$el.querySelectorAll(".is-focusable[role=treeitem]");
            this.checkboxItems = this.$el.querySelectorAll("input[type=checkbox]");
            var checkedItem = this.$el.querySelectorAll(".is-checked[role=treeitem]");
            if (checkedItem.length) {
              checkedItem[0].setAttribute("tabindex", 0);
              return;
            }
            this.treeItems[0] && this.treeItems[0].setAttribute("tabindex", 0);
          },
          handleKeydown: function handleKeydown(ev) {
            var currentItem = ev.target;
            if (currentItem.className.indexOf("el-tree-node") === -1)
              return;
            var keyCode2 = ev.keyCode;
            this.treeItems = this.$el.querySelectorAll(".is-focusable[role=treeitem]");
            var currentIndex = this.treeItemArray.indexOf(currentItem);
            var nextIndex = void 0;
            if ([38, 40].indexOf(keyCode2) > -1) {
              ev.preventDefault();
              if (keyCode2 === 38) {
                nextIndex = currentIndex !== 0 ? currentIndex - 1 : 0;
              } else {
                nextIndex = currentIndex < this.treeItemArray.length - 1 ? currentIndex + 1 : 0;
              }
              this.treeItemArray[nextIndex].focus();
            }
            if ([37, 39].indexOf(keyCode2) > -1) {
              ev.preventDefault();
              currentItem.click();
            }
            var hasInput = currentItem.querySelector('[type="checkbox"]');
            if ([13, 32].indexOf(keyCode2) > -1 && hasInput) {
              ev.preventDefault();
              hasInput.click();
            }
          }
        },
        created: function created20() {
          var _this = this;
          this.isTree = true;
          this.store = new tree_store({
            key: this.nodeKey,
            data: this.data,
            lazy: this.lazy,
            props: this.props,
            load: this.load,
            currentNodeKey: this.currentNodeKey,
            checkStrictly: this.checkStrictly,
            checkDescendants: this.checkDescendants,
            defaultCheckedKeys: this.defaultCheckedKeys,
            defaultExpandedKeys: this.defaultExpandedKeys,
            autoExpandParent: this.autoExpandParent,
            defaultExpandAll: this.defaultExpandAll,
            filterNodeMethod: this.filterNodeMethod
          });
          this.root = this.store.root;
          var dragState = this.dragState;
          this.$on("tree-node-drag-start", function(event2, treeNode) {
            if (typeof _this.allowDrag === "function" && !_this.allowDrag(treeNode.node)) {
              event2.preventDefault();
              return false;
            }
            event2.dataTransfer.effectAllowed = "move";
            try {
              event2.dataTransfer.setData("text/plain", "");
            } catch (e) {
            }
            dragState.draggingNode = treeNode;
            _this.$emit("node-drag-start", treeNode.node, event2);
          });
          this.$on("tree-node-drag-over", function(event2, treeNode) {
            var dropNode = findNearestComponent(event2.target, "ElTreeNode");
            var oldDropNode = dragState.dropNode;
            if (oldDropNode && oldDropNode !== dropNode) {
              Object(dom_["removeClass"])(oldDropNode.$el, "is-drop-inner");
            }
            var draggingNode = dragState.draggingNode;
            if (!draggingNode || !dropNode)
              return;
            var dropPrev = true;
            var dropInner = true;
            var dropNext = true;
            var userAllowDropInner = true;
            if (typeof _this.allowDrop === "function") {
              dropPrev = _this.allowDrop(draggingNode.node, dropNode.node, "prev");
              userAllowDropInner = dropInner = _this.allowDrop(draggingNode.node, dropNode.node, "inner");
              dropNext = _this.allowDrop(draggingNode.node, dropNode.node, "next");
            }
            event2.dataTransfer.dropEffect = dropInner ? "move" : "none";
            if ((dropPrev || dropInner || dropNext) && oldDropNode !== dropNode) {
              if (oldDropNode) {
                _this.$emit("node-drag-leave", draggingNode.node, oldDropNode.node, event2);
              }
              _this.$emit("node-drag-enter", draggingNode.node, dropNode.node, event2);
            }
            if (dropPrev || dropInner || dropNext) {
              dragState.dropNode = dropNode;
            }
            if (dropNode.node.nextSibling === draggingNode.node) {
              dropNext = false;
            }
            if (dropNode.node.previousSibling === draggingNode.node) {
              dropPrev = false;
            }
            if (dropNode.node.contains(draggingNode.node, false)) {
              dropInner = false;
            }
            if (draggingNode.node === dropNode.node || draggingNode.node.contains(dropNode.node)) {
              dropPrev = false;
              dropInner = false;
              dropNext = false;
            }
            var targetPosition = dropNode.$el.getBoundingClientRect();
            var treePosition = _this.$el.getBoundingClientRect();
            var dropType = void 0;
            var prevPercent = dropPrev ? dropInner ? 0.25 : dropNext ? 0.45 : 1 : -1;
            var nextPercent = dropNext ? dropInner ? 0.75 : dropPrev ? 0.55 : 0 : 1;
            var indicatorTop = -9999;
            var distance = event2.clientY - targetPosition.top;
            if (distance < targetPosition.height * prevPercent) {
              dropType = "before";
            } else if (distance > targetPosition.height * nextPercent) {
              dropType = "after";
            } else if (dropInner) {
              dropType = "inner";
            } else {
              dropType = "none";
            }
            var iconPosition = dropNode.$el.querySelector(".el-tree-node__expand-icon").getBoundingClientRect();
            var dropIndicator = _this.$refs.dropIndicator;
            if (dropType === "before") {
              indicatorTop = iconPosition.top - treePosition.top;
            } else if (dropType === "after") {
              indicatorTop = iconPosition.bottom - treePosition.top;
            }
            dropIndicator.style.top = indicatorTop + "px";
            dropIndicator.style.left = iconPosition.right - treePosition.left + "px";
            if (dropType === "inner") {
              Object(dom_["addClass"])(dropNode.$el, "is-drop-inner");
            } else {
              Object(dom_["removeClass"])(dropNode.$el, "is-drop-inner");
            }
            dragState.showDropIndicator = dropType === "before" || dropType === "after";
            dragState.allowDrop = dragState.showDropIndicator || userAllowDropInner;
            dragState.dropType = dropType;
            _this.$emit("node-drag-over", draggingNode.node, dropNode.node, event2);
          });
          this.$on("tree-node-drag-end", function(event2) {
            var draggingNode = dragState.draggingNode, dropType = dragState.dropType, dropNode = dragState.dropNode;
            event2.preventDefault();
            event2.dataTransfer.dropEffect = "move";
            if (draggingNode && dropNode) {
              var draggingNodeCopy = { data: draggingNode.node.data };
              if (dropType !== "none") {
                draggingNode.node.remove();
              }
              if (dropType === "before") {
                dropNode.node.parent.insertBefore(draggingNodeCopy, dropNode.node);
              } else if (dropType === "after") {
                dropNode.node.parent.insertAfter(draggingNodeCopy, dropNode.node);
              } else if (dropType === "inner") {
                dropNode.node.insertChild(draggingNodeCopy);
              }
              if (dropType !== "none") {
                _this.store.registerNode(draggingNodeCopy);
              }
              Object(dom_["removeClass"])(dropNode.$el, "is-drop-inner");
              _this.$emit("node-drag-end", draggingNode.node, dropNode.node, dropType, event2);
              if (dropType !== "none") {
                _this.$emit("node-drop", draggingNode.node, dropNode.node, dropType, event2);
              }
            }
            if (draggingNode && !dropNode) {
              _this.$emit("node-drag-end", draggingNode.node, null, dropType, event2);
            }
            dragState.showDropIndicator = false;
            dragState.draggingNode = null;
            dragState.dropNode = null;
            dragState.allowDrop = true;
          });
        },
        mounted: function mounted18() {
          this.initTabIndex();
          this.$el.addEventListener("keydown", this.handleKeydown);
        },
        updated: function updated3() {
          this.treeItems = this.$el.querySelectorAll("[role=treeitem]");
          this.checkboxItems = this.$el.querySelectorAll("input[type=checkbox]");
        }
      };
      var src_treevue_type_script_lang_js_ = treevue_type_script_lang_js_;
      var tree_component = normalizeComponent(src_treevue_type_script_lang_js_, treevue_type_template_id_547575a6_render, treevue_type_template_id_547575a6_staticRenderFns, false, null, null, null);
      tree_component.options.__file = "packages/tree/src/tree.vue";
      var src_tree = tree_component.exports;
      src_tree.install = function(Vue2) {
        Vue2.component(src_tree.name, src_tree);
      };
      var packages_tree = src_tree;
      var mainvue_type_template_id_6e53341b_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("transition", { attrs: { name: "el-alert-fade" } }, [
          _c("div", {
            directives: [
              {
                name: "show",
                rawName: "v-show",
                value: _vm.visible,
                expression: "visible"
              }
            ],
            staticClass: "el-alert",
            class: [
              _vm.typeClass,
              _vm.center ? "is-center" : "",
              "is-" + _vm.effect
            ],
            attrs: { role: "alert" }
          }, [
            _vm.showIcon ? _c("i", {
              staticClass: "el-alert__icon",
              class: [_vm.iconClass, _vm.isBigIcon]
            }) : _vm._e(),
            _c("div", { staticClass: "el-alert__content" }, [
              _vm.title || _vm.$slots.title ? _c("span", { staticClass: "el-alert__title", class: [_vm.isBoldTitle] }, [_vm._t("title", [_vm._v(_vm._s(_vm.title))])], 2) : _vm._e(),
              _vm.$slots.default && !_vm.description ? _c("p", { staticClass: "el-alert__description" }, [_vm._t("default")], 2) : _vm._e(),
              _vm.description && !_vm.$slots.default ? _c("p", { staticClass: "el-alert__description" }, [
                _vm._v(_vm._s(_vm.description))
              ]) : _vm._e(),
              _c("i", {
                directives: [
                  {
                    name: "show",
                    rawName: "v-show",
                    value: _vm.closable,
                    expression: "closable"
                  }
                ],
                staticClass: "el-alert__closebtn",
                class: {
                  "is-customed": _vm.closeText !== "",
                  "el-icon-close": _vm.closeText === ""
                },
                on: {
                  click: function($event) {
                    _vm.close();
                  }
                }
              }, [_vm._v(_vm._s(_vm.closeText))])
            ])
          ])
        ]);
      };
      var mainvue_type_template_id_6e53341b_staticRenderFns = [];
      mainvue_type_template_id_6e53341b_render._withStripped = true;
      var TYPE_CLASSES_MAP = {
        "success": "el-icon-success",
        "warning": "el-icon-warning",
        "error": "el-icon-error"
      };
      var alert_src_mainvue_type_script_lang_js_ = {
        name: "ElAlert",
        props: {
          title: {
            type: String,
            default: ""
          },
          description: {
            type: String,
            default: ""
          },
          type: {
            type: String,
            default: "info"
          },
          closable: {
            type: Boolean,
            default: true
          },
          closeText: {
            type: String,
            default: ""
          },
          showIcon: Boolean,
          center: Boolean,
          effect: {
            type: String,
            default: "light",
            validator: function validator2(value6) {
              return ["light", "dark"].indexOf(value6) !== -1;
            }
          }
        },
        data: function data25() {
          return {
            visible: true
          };
        },
        methods: {
          close: function close4() {
            this.visible = false;
            this.$emit("close");
          }
        },
        computed: {
          typeClass: function typeClass() {
            return "el-alert--" + this.type;
          },
          iconClass: function iconClass() {
            return TYPE_CLASSES_MAP[this.type] || "el-icon-info";
          },
          isBigIcon: function isBigIcon() {
            return this.description || this.$slots.default ? "is-big" : "";
          },
          isBoldTitle: function isBoldTitle() {
            return this.description || this.$slots.default ? "is-bold" : "";
          }
        }
      };
      var packages_alert_src_mainvue_type_script_lang_js_ = alert_src_mainvue_type_script_lang_js_;
      var alert_src_main_component = normalizeComponent(packages_alert_src_mainvue_type_script_lang_js_, mainvue_type_template_id_6e53341b_render, mainvue_type_template_id_6e53341b_staticRenderFns, false, null, null, null);
      alert_src_main_component.options.__file = "packages/alert/src/main.vue";
      var alert_src_main = alert_src_main_component.exports;
      alert_src_main.install = function(Vue2) {
        Vue2.component(alert_src_main.name, alert_src_main);
      };
      var packages_alert = alert_src_main;
      var mainvue_type_template_id_43dbc3d8_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("transition", { attrs: { name: "el-notification-fade" } }, [
          _c("div", {
            directives: [
              {
                name: "show",
                rawName: "v-show",
                value: _vm.visible,
                expression: "visible"
              }
            ],
            class: ["el-notification", _vm.customClass, _vm.horizontalClass],
            style: _vm.positionStyle,
            attrs: { role: "alert" },
            on: {
              mouseenter: function($event) {
                _vm.clearTimer();
              },
              mouseleave: function($event) {
                _vm.startTimer();
              },
              click: _vm.click
            }
          }, [
            _vm.type || _vm.iconClass ? _c("i", {
              staticClass: "el-notification__icon",
              class: [_vm.typeClass, _vm.iconClass]
            }) : _vm._e(),
            _c("div", {
              staticClass: "el-notification__group",
              class: { "is-with-icon": _vm.typeClass || _vm.iconClass }
            }, [
              _c("h2", {
                staticClass: "el-notification__title",
                domProps: { textContent: _vm._s(_vm.title) }
              }),
              _c("div", {
                directives: [
                  {
                    name: "show",
                    rawName: "v-show",
                    value: _vm.message,
                    expression: "message"
                  }
                ],
                staticClass: "el-notification__content"
              }, [
                _vm._t("default", [
                  !_vm.dangerouslyUseHTMLString ? _c("p", [_vm._v(_vm._s(_vm.message))]) : _c("p", { domProps: { innerHTML: _vm._s(_vm.message) } })
                ])
              ], 2),
              _vm.showClose ? _c("div", {
                staticClass: "el-notification__closeBtn el-icon-close",
                on: {
                  click: function($event) {
                    $event.stopPropagation();
                    return _vm.close($event);
                  }
                }
              }) : _vm._e()
            ])
          ])
        ]);
      };
      var mainvue_type_template_id_43dbc3d8_staticRenderFns = [];
      mainvue_type_template_id_43dbc3d8_render._withStripped = true;
      var mainvue_type_script_lang_js_typeMap = {
        success: "success",
        info: "info",
        warning: "warning",
        error: "error"
      };
      var notification_src_mainvue_type_script_lang_js_ = {
        data: function data25() {
          return {
            visible: false,
            title: "",
            message: "",
            duration: 4500,
            type: "",
            showClose: true,
            customClass: "",
            iconClass: "",
            onClose: null,
            onClick: null,
            closed: false,
            verticalOffset: 0,
            timer: null,
            dangerouslyUseHTMLString: false,
            position: "top-right"
          };
        },
        computed: {
          typeClass: function typeClass() {
            return this.type && mainvue_type_script_lang_js_typeMap[this.type] ? "el-icon-" + mainvue_type_script_lang_js_typeMap[this.type] : "";
          },
          horizontalClass: function horizontalClass() {
            return this.position.indexOf("right") > -1 ? "right" : "left";
          },
          verticalProperty: function verticalProperty() {
            return /^top-/.test(this.position) ? "top" : "bottom";
          },
          positionStyle: function positionStyle() {
            var _ref;
            return _ref = {}, _ref[this.verticalProperty] = this.verticalOffset + "px", _ref;
          }
        },
        watch: {
          closed: function closed(newVal) {
            if (newVal) {
              this.visible = false;
              this.$el.addEventListener("transitionend", this.destroyElement);
            }
          }
        },
        methods: {
          destroyElement: function destroyElement() {
            this.$el.removeEventListener("transitionend", this.destroyElement);
            this.$destroy(true);
            this.$el.parentNode.removeChild(this.$el);
          },
          click: function click() {
            if (typeof this.onClick === "function") {
              this.onClick();
            }
          },
          close: function close4() {
            this.closed = true;
            if (typeof this.onClose === "function") {
              this.onClose();
            }
          },
          clearTimer: function clearTimer() {
            clearTimeout(this.timer);
          },
          startTimer: function startTimer() {
            var _this = this;
            if (this.duration > 0) {
              this.timer = setTimeout(function() {
                if (!_this.closed) {
                  _this.close();
                }
              }, this.duration);
            }
          },
          keydown: function keydown(e) {
            if (e.keyCode === 46 || e.keyCode === 8) {
              this.clearTimer();
            } else if (e.keyCode === 27) {
              if (!this.closed) {
                this.close();
              }
            } else {
              this.startTimer();
            }
          }
        },
        mounted: function mounted18() {
          var _this2 = this;
          if (this.duration > 0) {
            this.timer = setTimeout(function() {
              if (!_this2.closed) {
                _this2.close();
              }
            }, this.duration);
          }
          document.addEventListener("keydown", this.keydown);
        },
        beforeDestroy: function beforeDestroy13() {
          document.removeEventListener("keydown", this.keydown);
        }
      };
      var packages_notification_src_mainvue_type_script_lang_js_ = notification_src_mainvue_type_script_lang_js_;
      var notification_src_main_component = normalizeComponent(packages_notification_src_mainvue_type_script_lang_js_, mainvue_type_template_id_43dbc3d8_render, mainvue_type_template_id_43dbc3d8_staticRenderFns, false, null, null, null);
      notification_src_main_component.options.__file = "packages/notification/src/main.vue";
      var notification_src_main = notification_src_main_component.exports;
      var NotificationConstructor = external_vue_default.a.extend(notification_src_main);
      var src_main_instance = void 0;
      var instances2 = [];
      var seed2 = 1;
      var main_Notification = function Notification(options2) {
        if (external_vue_default.a.prototype.$isServer)
          return;
        options2 = merge_default()({}, options2);
        var userOnClose = options2.onClose;
        var id2 = "notification_" + seed2++;
        var position = options2.position || "top-right";
        options2.onClose = function() {
          Notification.close(id2, userOnClose);
        };
        src_main_instance = new NotificationConstructor({
          data: options2
        });
        if (Object(vdom_["isVNode"])(options2.message)) {
          src_main_instance.$slots.default = [options2.message];
          options2.message = "REPLACED_BY_VNODE";
        }
        src_main_instance.id = id2;
        src_main_instance.$mount();
        document.body.appendChild(src_main_instance.$el);
        src_main_instance.visible = true;
        src_main_instance.dom = src_main_instance.$el;
        src_main_instance.dom.style.zIndex = popup_["PopupManager"].nextZIndex();
        var verticalOffset = options2.offset || 0;
        instances2.filter(function(item) {
          return item.position === position;
        }).forEach(function(item) {
          verticalOffset += item.$el.offsetHeight + 16;
        });
        verticalOffset += 16;
        src_main_instance.verticalOffset = verticalOffset;
        instances2.push(src_main_instance);
        return src_main_instance;
      };
      ["success", "warning", "info", "error"].forEach(function(type3) {
        main_Notification[type3] = function(options2) {
          if (typeof options2 === "string" || Object(vdom_["isVNode"])(options2)) {
            options2 = {
              message: options2
            };
          }
          options2.type = type3;
          return main_Notification(options2);
        };
      });
      main_Notification.close = function(id2, userOnClose) {
        var index2 = -1;
        var len = instances2.length;
        var instance = instances2.filter(function(instance2, i2) {
          if (instance2.id === id2) {
            index2 = i2;
            return true;
          }
          return false;
        })[0];
        if (!instance)
          return;
        if (typeof userOnClose === "function") {
          userOnClose(instance);
        }
        instances2.splice(index2, 1);
        if (len <= 1)
          return;
        var position = instance.position;
        var removedHeight = instance.dom.offsetHeight;
        for (var i = index2; i < len - 1; i++) {
          if (instances2[i].position === position) {
            instances2[i].dom.style[instance.verticalProperty] = parseInt(instances2[i].dom.style[instance.verticalProperty], 10) - removedHeight - 16 + "px";
          }
        }
      };
      main_Notification.closeAll = function() {
        for (var i = instances2.length - 1; i >= 0; i--) {
          instances2[i].close();
        }
      };
      var packages_notification_src_main = main_Notification;
      var notification = packages_notification_src_main;
      var mainvue_type_template_id_32708644_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", {
          staticClass: "el-slider",
          class: {
            "is-vertical": _vm.vertical,
            "el-slider--with-input": _vm.showInput
          },
          attrs: {
            role: "slider",
            "aria-valuemin": _vm.min,
            "aria-valuemax": _vm.max,
            "aria-orientation": _vm.vertical ? "vertical" : "horizontal",
            "aria-disabled": _vm.sliderDisabled
          }
        }, [
          _vm.showInput && !_vm.range ? _c("el-input-number", {
            ref: "input",
            staticClass: "el-slider__input",
            attrs: {
              step: _vm.step,
              disabled: _vm.sliderDisabled,
              controls: _vm.showInputControls,
              min: _vm.min,
              max: _vm.max,
              debounce: _vm.debounce,
              size: _vm.inputSize
            },
            on: { change: _vm.emitChange },
            model: {
              value: _vm.firstValue,
              callback: function($$v) {
                _vm.firstValue = $$v;
              },
              expression: "firstValue"
            }
          }) : _vm._e(),
          _c("div", {
            ref: "slider",
            staticClass: "el-slider__runway",
            class: { "show-input": _vm.showInput, disabled: _vm.sliderDisabled },
            style: _vm.runwayStyle,
            on: { click: _vm.onSliderClick }
          }, [
            _c("div", { staticClass: "el-slider__bar", style: _vm.barStyle }),
            _c("slider-button", {
              ref: "button1",
              attrs: {
                vertical: _vm.vertical,
                "tooltip-class": _vm.tooltipClass
              },
              model: {
                value: _vm.firstValue,
                callback: function($$v) {
                  _vm.firstValue = $$v;
                },
                expression: "firstValue"
              }
            }),
            _vm.range ? _c("slider-button", {
              ref: "button2",
              attrs: {
                vertical: _vm.vertical,
                "tooltip-class": _vm.tooltipClass
              },
              model: {
                value: _vm.secondValue,
                callback: function($$v) {
                  _vm.secondValue = $$v;
                },
                expression: "secondValue"
              }
            }) : _vm._e(),
            _vm._l(_vm.stops, function(item, key) {
              return _vm.showStops ? _c("div", {
                key,
                staticClass: "el-slider__stop",
                style: _vm.getStopStyle(item)
              }) : _vm._e();
            }),
            _vm.markList.length > 0 ? [
              _c("div", _vm._l(_vm.markList, function(item, key) {
                return _c("div", {
                  key,
                  staticClass: "el-slider__stop el-slider__marks-stop",
                  style: _vm.getStopStyle(item.position)
                });
              }), 0),
              _c("div", { staticClass: "el-slider__marks" }, _vm._l(_vm.markList, function(item, key) {
                return _c("slider-marker", {
                  key,
                  style: _vm.getStopStyle(item.position),
                  attrs: { mark: item.mark }
                });
              }), 1)
            ] : _vm._e()
          ], 2)
        ], 1);
      };
      var mainvue_type_template_id_32708644_staticRenderFns = [];
      mainvue_type_template_id_32708644_render._withStripped = true;
      var input_number_ = __webpack_require__(41);
      var input_number_default = /* @__PURE__ */ __webpack_require__.n(input_number_);
      var buttonvue_type_template_id_e72d2ad2_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", {
          ref: "button",
          staticClass: "el-slider__button-wrapper",
          class: { hover: _vm.hovering, dragging: _vm.dragging },
          style: _vm.wrapperStyle,
          attrs: { tabindex: "0" },
          on: {
            mouseenter: _vm.handleMouseEnter,
            mouseleave: _vm.handleMouseLeave,
            mousedown: _vm.onButtonDown,
            touchstart: _vm.onButtonDown,
            focus: _vm.handleMouseEnter,
            blur: _vm.handleMouseLeave,
            keydown: [
              function($event) {
                if (!("button" in $event) && _vm._k($event.keyCode, "left", 37, $event.key, [
                  "Left",
                  "ArrowLeft"
                ])) {
                  return null;
                }
                if ("button" in $event && $event.button !== 0) {
                  return null;
                }
                return _vm.onLeftKeyDown($event);
              },
              function($event) {
                if (!("button" in $event) && _vm._k($event.keyCode, "right", 39, $event.key, [
                  "Right",
                  "ArrowRight"
                ])) {
                  return null;
                }
                if ("button" in $event && $event.button !== 2) {
                  return null;
                }
                return _vm.onRightKeyDown($event);
              },
              function($event) {
                if (!("button" in $event) && _vm._k($event.keyCode, "down", 40, $event.key, [
                  "Down",
                  "ArrowDown"
                ])) {
                  return null;
                }
                $event.preventDefault();
                return _vm.onLeftKeyDown($event);
              },
              function($event) {
                if (!("button" in $event) && _vm._k($event.keyCode, "up", 38, $event.key, ["Up", "ArrowUp"])) {
                  return null;
                }
                $event.preventDefault();
                return _vm.onRightKeyDown($event);
              }
            ]
          }
        }, [
          _c("el-tooltip", {
            ref: "tooltip",
            attrs: {
              placement: "top",
              "popper-class": _vm.tooltipClass,
              disabled: !_vm.showTooltip
            }
          }, [
            _c("span", { attrs: { slot: "content" }, slot: "content" }, [
              _vm._v(_vm._s(_vm.formatValue))
            ]),
            _c("div", {
              staticClass: "el-slider__button",
              class: { hover: _vm.hovering, dragging: _vm.dragging }
            })
          ])
        ], 1);
      };
      var buttonvue_type_template_id_e72d2ad2_staticRenderFns = [];
      buttonvue_type_template_id_e72d2ad2_render._withStripped = true;
      var slider_src_buttonvue_type_script_lang_js_ = {
        name: "ElSliderButton",
        components: {
          ElTooltip: tooltip_default.a
        },
        props: {
          value: {
            type: Number,
            default: 0
          },
          vertical: {
            type: Boolean,
            default: false
          },
          tooltipClass: String
        },
        data: function data25() {
          return {
            hovering: false,
            dragging: false,
            isClick: false,
            startX: 0,
            currentX: 0,
            startY: 0,
            currentY: 0,
            startPosition: 0,
            newPosition: null,
            oldValue: this.value
          };
        },
        computed: {
          disabled: function disabled() {
            return this.$parent.sliderDisabled;
          },
          max: function max2() {
            return this.$parent.max;
          },
          min: function min2() {
            return this.$parent.min;
          },
          step: function step3() {
            return this.$parent.step;
          },
          showTooltip: function showTooltip() {
            return this.$parent.showTooltip;
          },
          precision: function precision() {
            return this.$parent.precision;
          },
          currentPosition: function currentPosition() {
            return (this.value - this.min) / (this.max - this.min) * 100 + "%";
          },
          enableFormat: function enableFormat() {
            return this.$parent.formatTooltip instanceof Function;
          },
          formatValue: function formatValue() {
            return this.enableFormat && this.$parent.formatTooltip(this.value) || this.value;
          },
          wrapperStyle: function wrapperStyle() {
            return this.vertical ? { bottom: this.currentPosition } : { left: this.currentPosition };
          }
        },
        watch: {
          dragging: function dragging(val) {
            this.$parent.dragging = val;
          }
        },
        methods: {
          displayTooltip: function displayTooltip() {
            this.$refs.tooltip && (this.$refs.tooltip.showPopper = true);
          },
          hideTooltip: function hideTooltip() {
            this.$refs.tooltip && (this.$refs.tooltip.showPopper = false);
          },
          handleMouseEnter: function handleMouseEnter() {
            this.hovering = true;
            this.displayTooltip();
          },
          handleMouseLeave: function handleMouseLeave() {
            this.hovering = false;
            this.hideTooltip();
          },
          onButtonDown: function onButtonDown(event2) {
            if (this.disabled)
              return;
            event2.preventDefault();
            this.onDragStart(event2);
            window.addEventListener("mousemove", this.onDragging);
            window.addEventListener("touchmove", this.onDragging);
            window.addEventListener("mouseup", this.onDragEnd);
            window.addEventListener("touchend", this.onDragEnd);
            window.addEventListener("contextmenu", this.onDragEnd);
          },
          onLeftKeyDown: function onLeftKeyDown() {
            if (this.disabled)
              return;
            this.newPosition = parseFloat(this.currentPosition) - this.step / (this.max - this.min) * 100;
            this.setPosition(this.newPosition);
            this.$parent.emitChange();
          },
          onRightKeyDown: function onRightKeyDown() {
            if (this.disabled)
              return;
            this.newPosition = parseFloat(this.currentPosition) + this.step / (this.max - this.min) * 100;
            this.setPosition(this.newPosition);
            this.$parent.emitChange();
          },
          onDragStart: function onDragStart(event2) {
            this.dragging = true;
            this.isClick = true;
            if (event2.type === "touchstart") {
              event2.clientY = event2.touches[0].clientY;
              event2.clientX = event2.touches[0].clientX;
            }
            if (this.vertical) {
              this.startY = event2.clientY;
            } else {
              this.startX = event2.clientX;
            }
            this.startPosition = parseFloat(this.currentPosition);
            this.newPosition = this.startPosition;
          },
          onDragging: function onDragging(event2) {
            if (this.dragging) {
              this.isClick = false;
              this.displayTooltip();
              this.$parent.resetSize();
              var diff = 0;
              if (event2.type === "touchmove") {
                event2.clientY = event2.touches[0].clientY;
                event2.clientX = event2.touches[0].clientX;
              }
              if (this.vertical) {
                this.currentY = event2.clientY;
                diff = (this.startY - this.currentY) / this.$parent.sliderSize * 100;
              } else {
                this.currentX = event2.clientX;
                diff = (this.currentX - this.startX) / this.$parent.sliderSize * 100;
              }
              this.newPosition = this.startPosition + diff;
              this.setPosition(this.newPosition);
            }
          },
          onDragEnd: function onDragEnd() {
            var _this = this;
            if (this.dragging) {
              setTimeout(function() {
                _this.dragging = false;
                _this.hideTooltip();
                if (!_this.isClick) {
                  _this.setPosition(_this.newPosition);
                  _this.$parent.emitChange();
                }
              }, 0);
              window.removeEventListener("mousemove", this.onDragging);
              window.removeEventListener("touchmove", this.onDragging);
              window.removeEventListener("mouseup", this.onDragEnd);
              window.removeEventListener("touchend", this.onDragEnd);
              window.removeEventListener("contextmenu", this.onDragEnd);
            }
          },
          setPosition: function setPosition2(newPosition) {
            var _this2 = this;
            if (newPosition === null || isNaN(newPosition))
              return;
            if (newPosition < 0) {
              newPosition = 0;
            } else if (newPosition > 100) {
              newPosition = 100;
            }
            var lengthPerStep = 100 / ((this.max - this.min) / this.step);
            var steps2 = Math.round(newPosition / lengthPerStep);
            var value6 = steps2 * lengthPerStep * (this.max - this.min) * 0.01 + this.min;
            value6 = parseFloat(value6.toFixed(this.precision));
            this.$emit("input", value6);
            this.$nextTick(function() {
              _this2.displayTooltip();
              _this2.$refs.tooltip && _this2.$refs.tooltip.updatePopper();
            });
            if (!this.dragging && this.value !== this.oldValue) {
              this.oldValue = this.value;
            }
          }
        }
      };
      var packages_slider_src_buttonvue_type_script_lang_js_ = slider_src_buttonvue_type_script_lang_js_;
      var src_button_component = normalizeComponent(packages_slider_src_buttonvue_type_script_lang_js_, buttonvue_type_template_id_e72d2ad2_render, buttonvue_type_template_id_e72d2ad2_staticRenderFns, false, null, null, null);
      src_button_component.options.__file = "packages/slider/src/button.vue";
      var slider_src_button = src_button_component.exports;
      var marker = {
        name: "ElMarker",
        props: {
          mark: {
            type: [String, Object]
          }
        },
        render: function render37() {
          var h = arguments[0];
          var label = typeof this.mark === "string" ? this.mark : this.mark.label;
          return h("div", { "class": "el-slider__marks-text", style: this.mark.style || {} }, [label]);
        }
      };
      var slider_src_mainvue_type_script_lang_js_ = {
        name: "ElSlider",
        mixins: [emitter_default.a],
        inject: {
          elForm: {
            default: ""
          }
        },
        props: {
          min: {
            type: Number,
            default: 0
          },
          max: {
            type: Number,
            default: 100
          },
          step: {
            type: Number,
            default: 1
          },
          value: {
            type: [Number, Array],
            default: 0
          },
          showInput: {
            type: Boolean,
            default: false
          },
          showInputControls: {
            type: Boolean,
            default: true
          },
          inputSize: {
            type: String,
            default: "small"
          },
          showStops: {
            type: Boolean,
            default: false
          },
          showTooltip: {
            type: Boolean,
            default: true
          },
          formatTooltip: Function,
          disabled: {
            type: Boolean,
            default: false
          },
          range: {
            type: Boolean,
            default: false
          },
          vertical: {
            type: Boolean,
            default: false
          },
          height: {
            type: String
          },
          debounce: {
            type: Number,
            default: 300
          },
          label: {
            type: String
          },
          tooltipClass: String,
          marks: Object
        },
        components: {
          ElInputNumber: input_number_default.a,
          SliderButton: slider_src_button,
          SliderMarker: marker
        },
        data: function data25() {
          return {
            firstValue: null,
            secondValue: null,
            oldValue: null,
            dragging: false,
            sliderSize: 1
          };
        },
        watch: {
          value: function value6(val, oldVal) {
            if (this.dragging || Array.isArray(val) && Array.isArray(oldVal) && val.every(function(item, index2) {
              return item === oldVal[index2];
            })) {
              return;
            }
            this.setValues();
          },
          dragging: function dragging(val) {
            if (!val) {
              this.setValues();
            }
          },
          firstValue: function firstValue(val) {
            if (this.range) {
              this.$emit("input", [this.minValue, this.maxValue]);
            } else {
              this.$emit("input", val);
            }
          },
          secondValue: function secondValue() {
            if (this.range) {
              this.$emit("input", [this.minValue, this.maxValue]);
            }
          },
          min: function min2() {
            this.setValues();
          },
          max: function max2() {
            this.setValues();
          }
        },
        methods: {
          valueChanged: function valueChanged() {
            var _this = this;
            if (this.range) {
              return ![this.minValue, this.maxValue].every(function(item, index2) {
                return item === _this.oldValue[index2];
              });
            } else {
              return this.value !== this.oldValue;
            }
          },
          setValues: function setValues() {
            if (this.min > this.max) {
              console.error("[Element Error][Slider]min should not be greater than max.");
              return;
            }
            var val = this.value;
            if (this.range && Array.isArray(val)) {
              if (val[1] < this.min) {
                this.$emit("input", [this.min, this.min]);
              } else if (val[0] > this.max) {
                this.$emit("input", [this.max, this.max]);
              } else if (val[0] < this.min) {
                this.$emit("input", [this.min, val[1]]);
              } else if (val[1] > this.max) {
                this.$emit("input", [val[0], this.max]);
              } else {
                this.firstValue = val[0];
                this.secondValue = val[1];
                if (this.valueChanged()) {
                  this.dispatch("ElFormItem", "el.form.change", [this.minValue, this.maxValue]);
                  this.oldValue = val.slice();
                }
              }
            } else if (!this.range && typeof val === "number" && !isNaN(val)) {
              if (val < this.min) {
                this.$emit("input", this.min);
              } else if (val > this.max) {
                this.$emit("input", this.max);
              } else {
                this.firstValue = val;
                if (this.valueChanged()) {
                  this.dispatch("ElFormItem", "el.form.change", val);
                  this.oldValue = val;
                }
              }
            }
          },
          setPosition: function setPosition2(percent) {
            var targetValue = this.min + percent * (this.max - this.min) / 100;
            if (!this.range) {
              this.$refs.button1.setPosition(percent);
              return;
            }
            var button2 = void 0;
            if (Math.abs(this.minValue - targetValue) < Math.abs(this.maxValue - targetValue)) {
              button2 = this.firstValue < this.secondValue ? "button1" : "button2";
            } else {
              button2 = this.firstValue > this.secondValue ? "button1" : "button2";
            }
            this.$refs[button2].setPosition(percent);
          },
          onSliderClick: function onSliderClick(event2) {
            if (this.sliderDisabled || this.dragging)
              return;
            this.resetSize();
            if (this.vertical) {
              var sliderOffsetBottom = this.$refs.slider.getBoundingClientRect().bottom;
              this.setPosition((sliderOffsetBottom - event2.clientY) / this.sliderSize * 100);
            } else {
              var sliderOffsetLeft = this.$refs.slider.getBoundingClientRect().left;
              this.setPosition((event2.clientX - sliderOffsetLeft) / this.sliderSize * 100);
            }
            this.emitChange();
          },
          resetSize: function resetSize() {
            if (this.$refs.slider) {
              this.sliderSize = this.$refs.slider["client" + (this.vertical ? "Height" : "Width")];
            }
          },
          emitChange: function emitChange() {
            var _this2 = this;
            this.$nextTick(function() {
              _this2.$emit("change", _this2.range ? [_this2.minValue, _this2.maxValue] : _this2.value);
            });
          },
          getStopStyle: function getStopStyle(position) {
            return this.vertical ? { "bottom": position + "%" } : { "left": position + "%" };
          }
        },
        computed: {
          stops: function stops() {
            var _this3 = this;
            if (!this.showStops || this.min > this.max)
              return [];
            if (this.step === 0) {
              return [];
            }
            var stopCount = (this.max - this.min) / this.step;
            var stepWidth = 100 * this.step / (this.max - this.min);
            var result2 = [];
            for (var i = 1; i < stopCount; i++) {
              result2.push(i * stepWidth);
            }
            if (this.range) {
              return result2.filter(function(step3) {
                return step3 < 100 * (_this3.minValue - _this3.min) / (_this3.max - _this3.min) || step3 > 100 * (_this3.maxValue - _this3.min) / (_this3.max - _this3.min);
              });
            } else {
              return result2.filter(function(step3) {
                return step3 > 100 * (_this3.firstValue - _this3.min) / (_this3.max - _this3.min);
              });
            }
          },
          markList: function markList() {
            var _this4 = this;
            if (!this.marks) {
              return [];
            }
            var marksKeys = Object.keys(this.marks);
            return marksKeys.map(parseFloat).sort(function(a, b) {
              return a - b;
            }).filter(function(point) {
              return point <= _this4.max && point >= _this4.min;
            }).map(function(point) {
              return {
                point,
                position: (point - _this4.min) * 100 / (_this4.max - _this4.min),
                mark: _this4.marks[point]
              };
            });
          },
          minValue: function minValue() {
            return Math.min(this.firstValue, this.secondValue);
          },
          maxValue: function maxValue() {
            return Math.max(this.firstValue, this.secondValue);
          },
          barSize: function barSize() {
            return this.range ? 100 * (this.maxValue - this.minValue) / (this.max - this.min) + "%" : 100 * (this.firstValue - this.min) / (this.max - this.min) + "%";
          },
          barStart: function barStart() {
            return this.range ? 100 * (this.minValue - this.min) / (this.max - this.min) + "%" : "0%";
          },
          precision: function precision() {
            var precisions = [this.min, this.max, this.step].map(function(item) {
              var decimal = ("" + item).split(".")[1];
              return decimal ? decimal.length : 0;
            });
            return Math.max.apply(null, precisions);
          },
          runwayStyle: function runwayStyle() {
            return this.vertical ? { height: this.height } : {};
          },
          barStyle: function barStyle() {
            return this.vertical ? {
              height: this.barSize,
              bottom: this.barStart
            } : {
              width: this.barSize,
              left: this.barStart
            };
          },
          sliderDisabled: function sliderDisabled() {
            return this.disabled || (this.elForm || {}).disabled;
          }
        },
        mounted: function mounted18() {
          var valuetext = void 0;
          if (this.range) {
            if (Array.isArray(this.value)) {
              this.firstValue = Math.max(this.min, this.value[0]);
              this.secondValue = Math.min(this.max, this.value[1]);
            } else {
              this.firstValue = this.min;
              this.secondValue = this.max;
            }
            this.oldValue = [this.firstValue, this.secondValue];
            valuetext = this.firstValue + "-" + this.secondValue;
          } else {
            if (typeof this.value !== "number" || isNaN(this.value)) {
              this.firstValue = this.min;
            } else {
              this.firstValue = Math.min(this.max, Math.max(this.min, this.value));
            }
            this.oldValue = this.firstValue;
            valuetext = this.firstValue;
          }
          this.$el.setAttribute("aria-valuetext", valuetext);
          this.$el.setAttribute("aria-label", this.label ? this.label : "slider between " + this.min + " and " + this.max);
          this.resetSize();
          window.addEventListener("resize", this.resetSize);
        },
        beforeDestroy: function beforeDestroy13() {
          window.removeEventListener("resize", this.resetSize);
        }
      };
      var packages_slider_src_mainvue_type_script_lang_js_ = slider_src_mainvue_type_script_lang_js_;
      var slider_src_main_component = normalizeComponent(packages_slider_src_mainvue_type_script_lang_js_, mainvue_type_template_id_32708644_render, mainvue_type_template_id_32708644_staticRenderFns, false, null, null, null);
      slider_src_main_component.options.__file = "packages/slider/src/main.vue";
      var slider_src_main = slider_src_main_component.exports;
      slider_src_main.install = function(Vue2) {
        Vue2.component(slider_src_main.name, slider_src_main);
      };
      var slider = slider_src_main;
      var loadingvue_type_template_id_eee0a7ac_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("transition", {
          attrs: { name: "el-loading-fade" },
          on: { "after-leave": _vm.handleAfterLeave }
        }, [
          _c("div", {
            directives: [
              {
                name: "show",
                rawName: "v-show",
                value: _vm.visible,
                expression: "visible"
              }
            ],
            staticClass: "el-loading-mask",
            class: [_vm.customClass, { "is-fullscreen": _vm.fullscreen }],
            style: { backgroundColor: _vm.background || "" }
          }, [
            _c("div", { staticClass: "el-loading-spinner" }, [
              !_vm.spinner ? _c("svg", {
                staticClass: "circular",
                attrs: { viewBox: "25 25 50 50" }
              }, [
                _c("circle", {
                  staticClass: "path",
                  attrs: { cx: "50", cy: "50", r: "20", fill: "none" }
                })
              ]) : _c("i", { class: _vm.spinner }),
              _vm.text ? _c("p", { staticClass: "el-loading-text" }, [
                _vm._v(_vm._s(_vm.text))
              ]) : _vm._e()
            ])
          ])
        ]);
      };
      var loadingvue_type_template_id_eee0a7ac_staticRenderFns = [];
      loadingvue_type_template_id_eee0a7ac_render._withStripped = true;
      var loadingvue_type_script_lang_js_ = {
        data: function data25() {
          return {
            text: null,
            spinner: null,
            background: null,
            fullscreen: true,
            visible: false,
            customClass: ""
          };
        },
        methods: {
          handleAfterLeave: function handleAfterLeave() {
            this.$emit("after-leave");
          },
          setText: function setText(text) {
            this.text = text;
          }
        }
      };
      var src_loadingvue_type_script_lang_js_ = loadingvue_type_script_lang_js_;
      var loading_component = normalizeComponent(src_loadingvue_type_script_lang_js_, loadingvue_type_template_id_eee0a7ac_render, loadingvue_type_template_id_eee0a7ac_staticRenderFns, false, null, null, null);
      loading_component.options.__file = "packages/loading/src/loading.vue";
      var loading = loading_component.exports;
      var after_leave_ = __webpack_require__(32);
      var after_leave_default = /* @__PURE__ */ __webpack_require__.n(after_leave_);
      var Mask = external_vue_default.a.extend(loading);
      var loadingDirective = {};
      loadingDirective.install = function(Vue2) {
        if (Vue2.prototype.$isServer)
          return;
        var toggleLoading = function toggleLoading2(el, binding) {
          if (binding.value) {
            Vue2.nextTick(function() {
              if (binding.modifiers.fullscreen) {
                el.originalPosition = Object(dom_["getStyle"])(document.body, "position");
                el.originalOverflow = Object(dom_["getStyle"])(document.body, "overflow");
                el.maskStyle.zIndex = popup_["PopupManager"].nextZIndex();
                Object(dom_["addClass"])(el.mask, "is-fullscreen");
                insertDom(document.body, el, binding);
              } else {
                Object(dom_["removeClass"])(el.mask, "is-fullscreen");
                if (binding.modifiers.body) {
                  el.originalPosition = Object(dom_["getStyle"])(document.body, "position");
                  ["top", "left"].forEach(function(property2) {
                    var scroll = property2 === "top" ? "scrollTop" : "scrollLeft";
                    el.maskStyle[property2] = el.getBoundingClientRect()[property2] + document.body[scroll] + document.documentElement[scroll] - parseInt(Object(dom_["getStyle"])(document.body, "margin-" + property2), 10) + "px";
                  });
                  ["height", "width"].forEach(function(property2) {
                    el.maskStyle[property2] = el.getBoundingClientRect()[property2] + "px";
                  });
                  insertDom(document.body, el, binding);
                } else {
                  el.originalPosition = Object(dom_["getStyle"])(el, "position");
                  insertDom(el, el, binding);
                }
              }
            });
          } else {
            after_leave_default()(el.instance, function(_) {
              if (!el.instance.hiding)
                return;
              el.domVisible = false;
              var target2 = binding.modifiers.fullscreen || binding.modifiers.body ? document.body : el;
              Object(dom_["removeClass"])(target2, "el-loading-parent--relative");
              Object(dom_["removeClass"])(target2, "el-loading-parent--hidden");
              el.instance.hiding = false;
            }, 300, true);
            el.instance.visible = false;
            el.instance.hiding = true;
          }
        };
        var insertDom = function insertDom2(parent2, el, binding) {
          if (!el.domVisible && Object(dom_["getStyle"])(el, "display") !== "none" && Object(dom_["getStyle"])(el, "visibility") !== "hidden") {
            Object.keys(el.maskStyle).forEach(function(property2) {
              el.mask.style[property2] = el.maskStyle[property2];
            });
            if (el.originalPosition !== "absolute" && el.originalPosition !== "fixed") {
              Object(dom_["addClass"])(parent2, "el-loading-parent--relative");
            }
            if (binding.modifiers.fullscreen && binding.modifiers.lock) {
              Object(dom_["addClass"])(parent2, "el-loading-parent--hidden");
            }
            el.domVisible = true;
            parent2.appendChild(el.mask);
            Vue2.nextTick(function() {
              if (el.instance.hiding) {
                el.instance.$emit("after-leave");
              } else {
                el.instance.visible = true;
              }
            });
            el.domInserted = true;
          } else if (el.domVisible && el.instance.hiding === true) {
            el.instance.visible = true;
            el.instance.hiding = false;
          }
        };
        Vue2.directive("loading", {
          bind: function bind4(el, binding, vnode) {
            var textExr = el.getAttribute("element-loading-text");
            var spinnerExr = el.getAttribute("element-loading-spinner");
            var backgroundExr = el.getAttribute("element-loading-background");
            var customClassExr = el.getAttribute("element-loading-custom-class");
            var vm = vnode.context;
            var mask = new Mask({
              el: document.createElement("div"),
              data: {
                text: vm && vm[textExr] || textExr,
                spinner: vm && vm[spinnerExr] || spinnerExr,
                background: vm && vm[backgroundExr] || backgroundExr,
                customClass: vm && vm[customClassExr] || customClassExr,
                fullscreen: !!binding.modifiers.fullscreen
              }
            });
            el.instance = mask;
            el.mask = mask.$el;
            el.maskStyle = {};
            binding.value && toggleLoading(el, binding);
          },
          update: function update5(el, binding) {
            el.instance.setText(el.getAttribute("element-loading-text"));
            if (binding.oldValue !== binding.value) {
              toggleLoading(el, binding);
            }
          },
          unbind: function unbind3(el, binding) {
            if (el.domInserted) {
              el.mask && el.mask.parentNode && el.mask.parentNode.removeChild(el.mask);
              toggleLoading(el, { value: false, modifiers: binding.modifiers });
            }
            el.instance && el.instance.$destroy();
          }
        });
      };
      var src_directive = loadingDirective;
      var LoadingConstructor = external_vue_default.a.extend(loading);
      var src_defaults = {
        text: null,
        fullscreen: true,
        body: false,
        lock: false,
        customClass: ""
      };
      var fullscreenLoading = void 0;
      LoadingConstructor.prototype.originalPosition = "";
      LoadingConstructor.prototype.originalOverflow = "";
      LoadingConstructor.prototype.close = function() {
        var _this = this;
        if (this.fullscreen) {
          fullscreenLoading = void 0;
        }
        after_leave_default()(this, function(_) {
          var target2 = _this.fullscreen || _this.body ? document.body : _this.target;
          Object(dom_["removeClass"])(target2, "el-loading-parent--relative");
          Object(dom_["removeClass"])(target2, "el-loading-parent--hidden");
          if (_this.$el && _this.$el.parentNode) {
            _this.$el.parentNode.removeChild(_this.$el);
          }
          _this.$destroy();
        }, 300);
        this.visible = false;
      };
      var src_addStyle = function addStyle(options2, parent2, instance) {
        var maskStyle = {};
        if (options2.fullscreen) {
          instance.originalPosition = Object(dom_["getStyle"])(document.body, "position");
          instance.originalOverflow = Object(dom_["getStyle"])(document.body, "overflow");
          maskStyle.zIndex = popup_["PopupManager"].nextZIndex();
        } else if (options2.body) {
          instance.originalPosition = Object(dom_["getStyle"])(document.body, "position");
          ["top", "left"].forEach(function(property2) {
            var scroll = property2 === "top" ? "scrollTop" : "scrollLeft";
            maskStyle[property2] = options2.target.getBoundingClientRect()[property2] + document.body[scroll] + document.documentElement[scroll] + "px";
          });
          ["height", "width"].forEach(function(property2) {
            maskStyle[property2] = options2.target.getBoundingClientRect()[property2] + "px";
          });
        } else {
          instance.originalPosition = Object(dom_["getStyle"])(parent2, "position");
        }
        Object.keys(maskStyle).forEach(function(property2) {
          instance.$el.style[property2] = maskStyle[property2];
        });
      };
      var src_Loading = function Loading() {
        var options2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        if (external_vue_default.a.prototype.$isServer)
          return;
        options2 = merge_default()({}, src_defaults, options2);
        if (typeof options2.target === "string") {
          options2.target = document.querySelector(options2.target);
        }
        options2.target = options2.target || document.body;
        if (options2.target !== document.body) {
          options2.fullscreen = false;
        } else {
          options2.body = true;
        }
        if (options2.fullscreen && fullscreenLoading) {
          return fullscreenLoading;
        }
        var parent2 = options2.body ? document.body : options2.target;
        var instance = new LoadingConstructor({
          el: document.createElement("div"),
          data: options2
        });
        src_addStyle(options2, parent2, instance);
        if (instance.originalPosition !== "absolute" && instance.originalPosition !== "fixed") {
          Object(dom_["addClass"])(parent2, "el-loading-parent--relative");
        }
        if (options2.fullscreen && options2.lock) {
          Object(dom_["addClass"])(parent2, "el-loading-parent--hidden");
        }
        parent2.appendChild(instance.$el);
        external_vue_default.a.nextTick(function() {
          instance.visible = true;
        });
        if (options2.fullscreen) {
          fullscreenLoading = instance;
        }
        return instance;
      };
      var src = src_Loading;
      var packages_loading = {
        install: function install34(Vue2) {
          Vue2.use(src_directive);
          Vue2.prototype.$loading = src;
        },
        directive: src_directive,
        service: src
      };
      var iconvue_type_template_id_cb3fe7f4_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("i", { class: "el-icon-" + _vm.name });
      };
      var iconvue_type_template_id_cb3fe7f4_staticRenderFns = [];
      iconvue_type_template_id_cb3fe7f4_render._withStripped = true;
      var iconvue_type_script_lang_js_ = {
        name: "ElIcon",
        props: {
          name: String
        }
      };
      var src_iconvue_type_script_lang_js_ = iconvue_type_script_lang_js_;
      var icon_component = normalizeComponent(src_iconvue_type_script_lang_js_, iconvue_type_template_id_cb3fe7f4_render, iconvue_type_template_id_cb3fe7f4_staticRenderFns, false, null, null, null);
      icon_component.options.__file = "packages/icon/src/icon.vue";
      var icon2 = icon_component.exports;
      icon2.install = function(Vue2) {
        Vue2.component(icon2.name, icon2);
      };
      var packages_icon = icon2;
      var src_row = {
        name: "ElRow",
        componentName: "ElRow",
        props: {
          tag: {
            type: String,
            default: "div"
          },
          gutter: Number,
          type: String,
          justify: {
            type: String,
            default: "start"
          },
          align: String
        },
        computed: {
          style: function style2() {
            var ret = {};
            if (this.gutter) {
              ret.marginLeft = "-" + this.gutter / 2 + "px";
              ret.marginRight = ret.marginLeft;
            }
            return ret;
          }
        },
        render: function render37(h) {
          return h(this.tag, {
            class: ["el-row", this.justify !== "start" ? "is-justify-" + this.justify : "", this.align ? "is-align-" + this.align : "", { "el-row--flex": this.type === "flex" }],
            style: this.style
          }, this.$slots.default);
        }
      };
      src_row.install = function(Vue2) {
        Vue2.component(src_row.name, src_row);
      };
      var packages_row = src_row;
      var col_typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
        return typeof obj;
      } : function(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
      var col = {
        name: "ElCol",
        props: {
          span: {
            type: Number,
            default: 24
          },
          tag: {
            type: String,
            default: "div"
          },
          offset: Number,
          pull: Number,
          push: Number,
          xs: [Number, Object],
          sm: [Number, Object],
          md: [Number, Object],
          lg: [Number, Object],
          xl: [Number, Object]
        },
        computed: {
          gutter: function gutter() {
            var parent2 = this.$parent;
            while (parent2 && parent2.$options.componentName !== "ElRow") {
              parent2 = parent2.$parent;
            }
            return parent2 ? parent2.gutter : 0;
          }
        },
        render: function render37(h) {
          var _this = this;
          var classList = [];
          var style2 = {};
          if (this.gutter) {
            style2.paddingLeft = this.gutter / 2 + "px";
            style2.paddingRight = style2.paddingLeft;
          }
          ["span", "offset", "pull", "push"].forEach(function(prop) {
            if (_this[prop] || _this[prop] === 0) {
              classList.push(prop !== "span" ? "el-col-" + prop + "-" + _this[prop] : "el-col-" + _this[prop]);
            }
          });
          ["xs", "sm", "md", "lg", "xl"].forEach(function(size2) {
            if (typeof _this[size2] === "number") {
              classList.push("el-col-" + size2 + "-" + _this[size2]);
            } else if (col_typeof(_this[size2]) === "object") {
              var props2 = _this[size2];
              Object.keys(props2).forEach(function(prop) {
                classList.push(prop !== "span" ? "el-col-" + size2 + "-" + prop + "-" + props2[prop] : "el-col-" + size2 + "-" + props2[prop]);
              });
            }
          });
          return h(this.tag, {
            class: ["el-col", classList],
            style: style2
          }, this.$slots.default);
        }
      };
      col.install = function(Vue2) {
        Vue2.component(col.name, col);
      };
      var packages_col = col;
      var upload_listvue_type_template_id_173fedf5_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("transition-group", {
          class: [
            "el-upload-list",
            "el-upload-list--" + _vm.listType,
            { "is-disabled": _vm.disabled }
          ],
          attrs: { tag: "ul", name: "el-list" }
        }, _vm._l(_vm.files, function(file) {
          return _c("li", {
            key: file.uid,
            class: [
              "el-upload-list__item",
              "is-" + file.status,
              _vm.focusing ? "focusing" : ""
            ],
            attrs: { tabindex: "0" },
            on: {
              keydown: function($event) {
                if (!("button" in $event) && _vm._k($event.keyCode, "delete", [8, 46], $event.key, [
                  "Backspace",
                  "Delete",
                  "Del"
                ])) {
                  return null;
                }
                !_vm.disabled && _vm.$emit("remove", file);
              },
              focus: function($event) {
                _vm.focusing = true;
              },
              blur: function($event) {
                _vm.focusing = false;
              },
              click: function($event) {
                _vm.focusing = false;
              }
            }
          }, [
            _vm._t("default", [
              file.status !== "uploading" && ["picture-card", "picture"].indexOf(_vm.listType) > -1 ? _c("img", {
                staticClass: "el-upload-list__item-thumbnail",
                attrs: { src: file.url, alt: "" }
              }) : _vm._e(),
              _c("a", {
                staticClass: "el-upload-list__item-name",
                on: {
                  click: function($event) {
                    _vm.handleClick(file);
                  }
                }
              }, [
                _c("i", { staticClass: "el-icon-document" }),
                _vm._v(_vm._s(file.name) + "\n      ")
              ]),
              _c("label", { staticClass: "el-upload-list__item-status-label" }, [
                _c("i", {
                  class: {
                    "el-icon-upload-success": true,
                    "el-icon-circle-check": _vm.listType === "text",
                    "el-icon-check": ["picture-card", "picture"].indexOf(_vm.listType) > -1
                  }
                })
              ]),
              !_vm.disabled ? _c("i", {
                staticClass: "el-icon-close",
                on: {
                  click: function($event) {
                    _vm.$emit("remove", file);
                  }
                }
              }) : _vm._e(),
              !_vm.disabled ? _c("i", { staticClass: "el-icon-close-tip" }, [
                _vm._v(_vm._s(_vm.t("el.upload.deleteTip")))
              ]) : _vm._e(),
              file.status === "uploading" ? _c("el-progress", {
                attrs: {
                  type: _vm.listType === "picture-card" ? "circle" : "line",
                  "stroke-width": _vm.listType === "picture-card" ? 6 : 2,
                  percentage: _vm.parsePercentage(file.percentage)
                }
              }) : _vm._e(),
              _vm.listType === "picture-card" ? _c("span", { staticClass: "el-upload-list__item-actions" }, [
                _vm.handlePreview && _vm.listType === "picture-card" ? _c("span", {
                  staticClass: "el-upload-list__item-preview",
                  on: {
                    click: function($event) {
                      _vm.handlePreview(file);
                    }
                  }
                }, [_c("i", { staticClass: "el-icon-zoom-in" })]) : _vm._e(),
                !_vm.disabled ? _c("span", {
                  staticClass: "el-upload-list__item-delete",
                  on: {
                    click: function($event) {
                      _vm.$emit("remove", file);
                    }
                  }
                }, [_c("i", { staticClass: "el-icon-delete" })]) : _vm._e()
              ]) : _vm._e()
            ], { file })
          ], 2);
        }), 0);
      };
      var upload_listvue_type_template_id_173fedf5_staticRenderFns = [];
      upload_listvue_type_template_id_173fedf5_render._withStripped = true;
      var progress_ = __webpack_require__(33);
      var progress_default = /* @__PURE__ */ __webpack_require__.n(progress_);
      var upload_listvue_type_script_lang_js_ = {
        name: "ElUploadList",
        mixins: [locale_default.a],
        data: function data25() {
          return {
            focusing: false
          };
        },
        components: { ElProgress: progress_default.a },
        props: {
          files: {
            type: Array,
            default: function _default116() {
              return [];
            }
          },
          disabled: {
            type: Boolean,
            default: false
          },
          handlePreview: Function,
          listType: String
        },
        methods: {
          parsePercentage: function parsePercentage(val) {
            return parseInt(val, 10);
          },
          handleClick: function handleClick(file) {
            this.handlePreview && this.handlePreview(file);
          }
        }
      };
      var src_upload_listvue_type_script_lang_js_ = upload_listvue_type_script_lang_js_;
      var upload_list_component = normalizeComponent(src_upload_listvue_type_script_lang_js_, upload_listvue_type_template_id_173fedf5_render, upload_listvue_type_template_id_173fedf5_staticRenderFns, false, null, null, null);
      upload_list_component.options.__file = "packages/upload/src/upload-list.vue";
      var upload_list = upload_list_component.exports;
      var external_babel_helper_vue_jsx_merge_props_ = __webpack_require__(24);
      var external_babel_helper_vue_jsx_merge_props_default = /* @__PURE__ */ __webpack_require__.n(external_babel_helper_vue_jsx_merge_props_);
      function getError(action, option2, xhr) {
        var msg = void 0;
        if (xhr.response) {
          msg = "" + (xhr.response.error || xhr.response);
        } else if (xhr.responseText) {
          msg = "" + xhr.responseText;
        } else {
          msg = "fail to post " + action + " " + xhr.status;
        }
        var err = new Error(msg);
        err.status = xhr.status;
        err.method = "post";
        err.url = action;
        return err;
      }
      function getBody(xhr) {
        var text = xhr.responseText || xhr.response;
        if (!text) {
          return text;
        }
        try {
          return JSON.parse(text);
        } catch (e) {
          return text;
        }
      }
      function upload(option2) {
        if (typeof XMLHttpRequest === "undefined") {
          return;
        }
        var xhr = new XMLHttpRequest();
        var action = option2.action;
        if (xhr.upload) {
          xhr.upload.onprogress = function progress3(e) {
            if (e.total > 0) {
              e.percent = e.loaded / e.total * 100;
            }
            option2.onProgress(e);
          };
        }
        var formData = new FormData();
        if (option2.data) {
          Object.keys(option2.data).forEach(function(key) {
            formData.append(key, option2.data[key]);
          });
        }
        formData.append(option2.filename, option2.file, option2.file.name);
        xhr.onerror = function error(e) {
          option2.onError(e);
        };
        xhr.onload = function onload() {
          if (xhr.status < 200 || xhr.status >= 300) {
            return option2.onError(getError(action, option2, xhr));
          }
          option2.onSuccess(getBody(xhr));
        };
        xhr.open("post", action, true);
        if (option2.withCredentials && "withCredentials" in xhr) {
          xhr.withCredentials = true;
        }
        var headers = option2.headers || {};
        for (var item in headers) {
          if (headers.hasOwnProperty(item) && headers[item] !== null) {
            xhr.setRequestHeader(item, headers[item]);
          }
        }
        xhr.send(formData);
        return xhr;
      }
      var upload_draggervue_type_template_id_7ebbf219_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", {
          staticClass: "el-upload-dragger",
          class: {
            "is-dragover": _vm.dragover
          },
          on: {
            drop: function($event) {
              $event.preventDefault();
              return _vm.onDrop($event);
            },
            dragover: function($event) {
              $event.preventDefault();
              return _vm.onDragover($event);
            },
            dragleave: function($event) {
              $event.preventDefault();
              _vm.dragover = false;
            }
          }
        }, [_vm._t("default")], 2);
      };
      var upload_draggervue_type_template_id_7ebbf219_staticRenderFns = [];
      upload_draggervue_type_template_id_7ebbf219_render._withStripped = true;
      var upload_draggervue_type_script_lang_js_ = {
        name: "ElUploadDrag",
        props: {
          disabled: Boolean
        },
        inject: {
          uploader: {
            default: ""
          }
        },
        data: function data25() {
          return {
            dragover: false
          };
        },
        methods: {
          onDragover: function onDragover() {
            if (!this.disabled) {
              this.dragover = true;
            }
          },
          onDrop: function onDrop(e) {
            if (this.disabled || !this.uploader)
              return;
            var accept = this.uploader.accept;
            this.dragover = false;
            if (!accept) {
              this.$emit("file", e.dataTransfer.files);
              return;
            }
            this.$emit("file", [].slice.call(e.dataTransfer.files).filter(function(file) {
              var type3 = file.type, name = file.name;
              var extension = name.indexOf(".") > -1 ? "." + name.split(".").pop() : "";
              var baseType = type3.replace(/\/.*$/, "");
              return accept.split(",").map(function(type4) {
                return type4.trim();
              }).filter(function(type4) {
                return type4;
              }).some(function(acceptedType) {
                if (/\..+$/.test(acceptedType)) {
                  return extension === acceptedType;
                }
                if (/\/\*$/.test(acceptedType)) {
                  return baseType === acceptedType.replace(/\/\*$/, "");
                }
                if (/^[^\/]+\/[^\/]+$/.test(acceptedType)) {
                  return type3 === acceptedType;
                }
                return false;
              });
            }));
          }
        }
      };
      var src_upload_draggervue_type_script_lang_js_ = upload_draggervue_type_script_lang_js_;
      var upload_dragger_component = normalizeComponent(src_upload_draggervue_type_script_lang_js_, upload_draggervue_type_template_id_7ebbf219_render, upload_draggervue_type_template_id_7ebbf219_staticRenderFns, false, null, null, null);
      upload_dragger_component.options.__file = "packages/upload/src/upload-dragger.vue";
      var upload_dragger = upload_dragger_component.exports;
      var uploadvue_type_script_lang_js_ = {
        inject: ["uploader"],
        components: {
          UploadDragger: upload_dragger
        },
        props: {
          type: String,
          action: {
            type: String,
            required: true
          },
          name: {
            type: String,
            default: "file"
          },
          data: Object,
          headers: Object,
          withCredentials: Boolean,
          multiple: Boolean,
          accept: String,
          onStart: Function,
          onProgress: Function,
          onSuccess: Function,
          onError: Function,
          beforeUpload: Function,
          drag: Boolean,
          onPreview: {
            type: Function,
            default: function _default116() {
            }
          },
          onRemove: {
            type: Function,
            default: function _default116() {
            }
          },
          fileList: Array,
          autoUpload: Boolean,
          listType: String,
          httpRequest: {
            type: Function,
            default: upload
          },
          disabled: Boolean,
          limit: Number,
          onExceed: Function
        },
        data: function data25() {
          return {
            mouseover: false,
            reqs: {}
          };
        },
        methods: {
          isImage: function isImage(str) {
            return str.indexOf("image") !== -1;
          },
          handleChange: function handleChange(ev) {
            var files = ev.target.files;
            if (!files)
              return;
            this.uploadFiles(files);
          },
          uploadFiles: function uploadFiles(files) {
            var _this = this;
            if (this.limit && this.fileList.length + files.length > this.limit) {
              this.onExceed && this.onExceed(files, this.fileList);
              return;
            }
            var postFiles = Array.prototype.slice.call(files);
            if (!this.multiple) {
              postFiles = postFiles.slice(0, 1);
            }
            if (postFiles.length === 0) {
              return;
            }
            postFiles.forEach(function(rawFile) {
              _this.onStart(rawFile);
              if (_this.autoUpload)
                _this.upload(rawFile);
            });
          },
          upload: function upload2(rawFile) {
            var _this2 = this;
            this.$refs.input.value = null;
            if (!this.beforeUpload) {
              return this.post(rawFile);
            }
            var before2 = this.beforeUpload(rawFile);
            if (before2 && before2.then) {
              before2.then(function(processedFile) {
                var fileType = Object.prototype.toString.call(processedFile);
                if (fileType === "[object File]" || fileType === "[object Blob]") {
                  if (fileType === "[object Blob]") {
                    processedFile = new File([processedFile], rawFile.name, {
                      type: rawFile.type
                    });
                  }
                  for (var p in rawFile) {
                    if (rawFile.hasOwnProperty(p)) {
                      processedFile[p] = rawFile[p];
                    }
                  }
                  _this2.post(processedFile);
                } else {
                  _this2.post(rawFile);
                }
              }, function() {
                _this2.onRemove(null, rawFile);
              });
            } else if (before2 !== false) {
              this.post(rawFile);
            } else {
              this.onRemove(null, rawFile);
            }
          },
          abort: function abort(file) {
            var reqs = this.reqs;
            if (file) {
              var uid3 = file;
              if (file.uid)
                uid3 = file.uid;
              if (reqs[uid3]) {
                reqs[uid3].abort();
              }
            } else {
              Object.keys(reqs).forEach(function(uid4) {
                if (reqs[uid4])
                  reqs[uid4].abort();
                delete reqs[uid4];
              });
            }
          },
          post: function post(rawFile) {
            var _this3 = this;
            var uid3 = rawFile.uid;
            var options2 = {
              headers: this.headers,
              withCredentials: this.withCredentials,
              file: rawFile,
              data: this.data,
              filename: this.name,
              action: this.action,
              onProgress: function onProgress(e) {
                _this3.onProgress(e, rawFile);
              },
              onSuccess: function onSuccess(res) {
                _this3.onSuccess(res, rawFile);
                delete _this3.reqs[uid3];
              },
              onError: function onError(err) {
                _this3.onError(err, rawFile);
                delete _this3.reqs[uid3];
              }
            };
            var req = this.httpRequest(options2);
            this.reqs[uid3] = req;
            if (req && req.then) {
              req.then(options2.onSuccess, options2.onError);
            }
          },
          handleClick: function handleClick() {
            if (!this.disabled) {
              this.$refs.input.value = null;
              this.$refs.input.click();
            }
          },
          handleKeydown: function handleKeydown(e) {
            if (e.target !== e.currentTarget)
              return;
            if (e.keyCode === 13 || e.keyCode === 32) {
              this.handleClick();
            }
          }
        },
        render: function render37(h) {
          var handleClick = this.handleClick, drag = this.drag, name = this.name, handleChange = this.handleChange, multiple = this.multiple, accept = this.accept, listType = this.listType, uploadFiles = this.uploadFiles, disabled = this.disabled, handleKeydown = this.handleKeydown;
          var data25 = {
            class: {
              "el-upload": true
            },
            on: {
              click: handleClick,
              keydown: handleKeydown
            }
          };
          data25.class["el-upload--" + listType] = true;
          return h("div", external_babel_helper_vue_jsx_merge_props_default()([data25, {
            attrs: { tabindex: "0" }
          }]), [drag ? h("upload-dragger", {
            attrs: { disabled },
            on: {
              "file": uploadFiles
            }
          }, [this.$slots.default]) : this.$slots.default, h("input", {
            "class": "el-upload__input",
            attrs: { type: "file", name, multiple, accept },
            ref: "input",
            on: {
              "change": handleChange
            }
          })]);
        }
      };
      var src_uploadvue_type_script_lang_js_ = uploadvue_type_script_lang_js_;
      var upload_render, upload_staticRenderFns;
      var upload_component = normalizeComponent(src_uploadvue_type_script_lang_js_, upload_render, upload_staticRenderFns, false, null, null, null);
      upload_component.options.__file = "packages/upload/src/upload.vue";
      var src_upload = upload_component.exports;
      function srcvue_type_script_lang_js_noop() {
      }
      var srcvue_type_script_lang_js_ = {
        name: "ElUpload",
        mixins: [migrating_default.a],
        components: {
          ElProgress: progress_default.a,
          UploadList: upload_list,
          Upload: src_upload
        },
        provide: function provide11() {
          return {
            uploader: this
          };
        },
        inject: {
          elForm: {
            default: ""
          }
        },
        props: {
          action: {
            type: String,
            required: true
          },
          headers: {
            type: Object,
            default: function _default116() {
              return {};
            }
          },
          data: Object,
          multiple: Boolean,
          name: {
            type: String,
            default: "file"
          },
          drag: Boolean,
          dragger: Boolean,
          withCredentials: Boolean,
          showFileList: {
            type: Boolean,
            default: true
          },
          accept: String,
          type: {
            type: String,
            default: "select"
          },
          beforeUpload: Function,
          beforeRemove: Function,
          onRemove: {
            type: Function,
            default: srcvue_type_script_lang_js_noop
          },
          onChange: {
            type: Function,
            default: srcvue_type_script_lang_js_noop
          },
          onPreview: {
            type: Function
          },
          onSuccess: {
            type: Function,
            default: srcvue_type_script_lang_js_noop
          },
          onProgress: {
            type: Function,
            default: srcvue_type_script_lang_js_noop
          },
          onError: {
            type: Function,
            default: srcvue_type_script_lang_js_noop
          },
          fileList: {
            type: Array,
            default: function _default116() {
              return [];
            }
          },
          autoUpload: {
            type: Boolean,
            default: true
          },
          listType: {
            type: String,
            default: "text"
          },
          httpRequest: Function,
          disabled: Boolean,
          limit: Number,
          onExceed: {
            type: Function,
            default: srcvue_type_script_lang_js_noop
          }
        },
        data: function data25() {
          return {
            uploadFiles: [],
            dragOver: false,
            draging: false,
            tempIndex: 1
          };
        },
        computed: {
          uploadDisabled: function uploadDisabled() {
            return this.disabled || (this.elForm || {}).disabled;
          }
        },
        watch: {
          listType: function listType(type3) {
            if (type3 === "picture-card" || type3 === "picture") {
              this.uploadFiles = this.uploadFiles.map(function(file) {
                if (!file.url && file.raw) {
                  try {
                    file.url = URL.createObjectURL(file.raw);
                  } catch (err) {
                    console.error("[Element Error][Upload]", err);
                  }
                }
                return file;
              });
            }
          },
          fileList: {
            immediate: true,
            handler: function handler2(fileList) {
              var _this = this;
              this.uploadFiles = fileList.map(function(item) {
                item.uid = item.uid || Date.now() + _this.tempIndex++;
                item.status = item.status || "success";
                return item;
              });
            }
          }
        },
        methods: {
          handleStart: function handleStart(rawFile) {
            rawFile.uid = Date.now() + this.tempIndex++;
            var file = {
              status: "ready",
              name: rawFile.name,
              size: rawFile.size,
              percentage: 0,
              uid: rawFile.uid,
              raw: rawFile
            };
            if (this.listType === "picture-card" || this.listType === "picture") {
              try {
                file.url = URL.createObjectURL(rawFile);
              } catch (err) {
                console.error("[Element Error][Upload]", err);
                return;
              }
            }
            this.uploadFiles.push(file);
            this.onChange(file, this.uploadFiles);
          },
          handleProgress: function handleProgress(ev, rawFile) {
            var file = this.getFile(rawFile);
            this.onProgress(ev, file, this.uploadFiles);
            file.status = "uploading";
            file.percentage = ev.percent || 0;
          },
          handleSuccess: function handleSuccess(res, rawFile) {
            var file = this.getFile(rawFile);
            if (file) {
              file.status = "success";
              file.response = res;
              this.onSuccess(res, file, this.uploadFiles);
              this.onChange(file, this.uploadFiles);
            }
          },
          handleError: function handleError2(err, rawFile) {
            var file = this.getFile(rawFile);
            var fileList = this.uploadFiles;
            file.status = "fail";
            fileList.splice(fileList.indexOf(file), 1);
            this.onError(err, file, this.uploadFiles);
            this.onChange(file, this.uploadFiles);
          },
          handleRemove: function handleRemove(file, raw) {
            var _this2 = this;
            if (raw) {
              file = this.getFile(raw);
            }
            var doRemove = function doRemove2() {
              _this2.abort(file);
              var fileList = _this2.uploadFiles;
              fileList.splice(fileList.indexOf(file), 1);
              _this2.onRemove(file, fileList);
            };
            if (!this.beforeRemove) {
              doRemove();
            } else if (typeof this.beforeRemove === "function") {
              var before2 = this.beforeRemove(file, this.uploadFiles);
              if (before2 && before2.then) {
                before2.then(function() {
                  doRemove();
                }, srcvue_type_script_lang_js_noop);
              } else if (before2 !== false) {
                doRemove();
              }
            }
          },
          getFile: function getFile(rawFile) {
            var fileList = this.uploadFiles;
            var target2 = void 0;
            fileList.every(function(item) {
              target2 = rawFile.uid === item.uid ? item : null;
              return !target2;
            });
            return target2;
          },
          abort: function abort(file) {
            this.$refs["upload-inner"].abort(file);
          },
          clearFiles: function clearFiles() {
            this.uploadFiles = [];
          },
          submit: function submit() {
            var _this3 = this;
            this.uploadFiles.filter(function(file) {
              return file.status === "ready";
            }).forEach(function(file) {
              _this3.$refs["upload-inner"].upload(file.raw);
            });
          },
          getMigratingConfig: function getMigratingConfig2() {
            return {
              props: {
                "default-file-list": "default-file-list is renamed to file-list.",
                "show-upload-list": "show-upload-list is renamed to show-file-list.",
                "thumbnail-mode": "thumbnail-mode has been deprecated, you can implement the same effect according to this case: http://element.eleme.io/#/zh-CN/component/upload#yong-hu-tou-xiang-shang-chuan"
              }
            };
          }
        },
        beforeDestroy: function beforeDestroy13() {
          this.uploadFiles.forEach(function(file) {
            if (file.url && file.url.indexOf("blob:") === 0) {
              URL.revokeObjectURL(file.url);
            }
          });
        },
        render: function render37(h) {
          var _this4 = this;
          var uploadList = void 0;
          if (this.showFileList) {
            uploadList = h(upload_list, {
              attrs: {
                disabled: this.uploadDisabled,
                listType: this.listType,
                files: this.uploadFiles,
                handlePreview: this.onPreview
              },
              on: {
                "remove": this.handleRemove
              }
            }, [function(props2) {
              if (_this4.$scopedSlots.file) {
                return _this4.$scopedSlots.file({
                  file: props2.file
                });
              }
            }]);
          }
          var uploadData = {
            props: {
              type: this.type,
              drag: this.drag,
              action: this.action,
              multiple: this.multiple,
              "before-upload": this.beforeUpload,
              "with-credentials": this.withCredentials,
              headers: this.headers,
              name: this.name,
              data: this.data,
              accept: this.accept,
              fileList: this.uploadFiles,
              autoUpload: this.autoUpload,
              listType: this.listType,
              disabled: this.uploadDisabled,
              limit: this.limit,
              "on-exceed": this.onExceed,
              "on-start": this.handleStart,
              "on-progress": this.handleProgress,
              "on-success": this.handleSuccess,
              "on-error": this.handleError,
              "on-preview": this.onPreview,
              "on-remove": this.handleRemove,
              "http-request": this.httpRequest
            },
            ref: "upload-inner"
          };
          var trigger3 = this.$slots.trigger || this.$slots.default;
          var uploadComponent = h("upload", uploadData, [trigger3]);
          return h("div", [this.listType === "picture-card" ? uploadList : "", this.$slots.trigger ? [uploadComponent, this.$slots.default] : uploadComponent, this.$slots.tip, this.listType !== "picture-card" ? uploadList : ""]);
        }
      };
      var upload_srcvue_type_script_lang_js_ = srcvue_type_script_lang_js_;
      var src_render, src_staticRenderFns;
      var upload_src_component = normalizeComponent(upload_srcvue_type_script_lang_js_, src_render, src_staticRenderFns, false, null, null, null);
      upload_src_component.options.__file = "packages/upload/src/index.vue";
      var upload_src = upload_src_component.exports;
      upload_src.install = function(Vue2) {
        Vue2.component(upload_src.name, upload_src);
      };
      var packages_upload = upload_src;
      var progressvue_type_template_id_229ee406_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", {
          staticClass: "el-progress",
          class: [
            "el-progress--" + _vm.type,
            _vm.status ? "is-" + _vm.status : "",
            {
              "el-progress--without-text": !_vm.showText,
              "el-progress--text-inside": _vm.textInside
            }
          ],
          attrs: {
            role: "progressbar",
            "aria-valuenow": _vm.percentage,
            "aria-valuemin": "0",
            "aria-valuemax": "100"
          }
        }, [
          _vm.type === "line" ? _c("div", { staticClass: "el-progress-bar" }, [
            _c("div", {
              staticClass: "el-progress-bar__outer",
              style: { height: _vm.strokeWidth + "px" }
            }, [
              _c("div", {
                staticClass: "el-progress-bar__inner",
                style: _vm.barStyle
              }, [
                _vm.showText && _vm.textInside ? _c("div", { staticClass: "el-progress-bar__innerText" }, [_vm._v(_vm._s(_vm.content))]) : _vm._e()
              ])
            ])
          ]) : _c("div", {
            staticClass: "el-progress-circle",
            style: { height: _vm.width + "px", width: _vm.width + "px" }
          }, [
            _c("svg", { attrs: { viewBox: "0 0 100 100" } }, [
              _c("path", {
                staticClass: "el-progress-circle__track",
                style: _vm.trailPathStyle,
                attrs: {
                  d: _vm.trackPath,
                  stroke: "#e5e9f2",
                  "stroke-width": _vm.relativeStrokeWidth,
                  fill: "none"
                }
              }),
              _c("path", {
                staticClass: "el-progress-circle__path",
                style: _vm.circlePathStyle,
                attrs: {
                  d: _vm.trackPath,
                  stroke: _vm.stroke,
                  fill: "none",
                  "stroke-linecap": _vm.strokeLinecap,
                  "stroke-width": _vm.percentage ? _vm.relativeStrokeWidth : 0
                }
              })
            ])
          ]),
          _vm.showText && !_vm.textInside ? _c("div", {
            staticClass: "el-progress__text",
            style: { fontSize: _vm.progressTextSize + "px" }
          }, [
            !_vm.status ? [_vm._v(_vm._s(_vm.content))] : _c("i", { class: _vm.iconClass })
          ], 2) : _vm._e()
        ]);
      };
      var progressvue_type_template_id_229ee406_staticRenderFns = [];
      progressvue_type_template_id_229ee406_render._withStripped = true;
      var progressvue_type_script_lang_js_ = {
        name: "ElProgress",
        props: {
          type: {
            type: String,
            default: "line",
            validator: function validator2(val) {
              return ["line", "circle", "dashboard"].indexOf(val) > -1;
            }
          },
          percentage: {
            type: Number,
            default: 0,
            required: true,
            validator: function validator2(val) {
              return val >= 0 && val <= 100;
            }
          },
          status: {
            type: String,
            validator: function validator2(val) {
              return ["success", "exception", "warning"].indexOf(val) > -1;
            }
          },
          strokeWidth: {
            type: Number,
            default: 6
          },
          strokeLinecap: {
            type: String,
            default: "round"
          },
          textInside: {
            type: Boolean,
            default: false
          },
          width: {
            type: Number,
            default: 126
          },
          showText: {
            type: Boolean,
            default: true
          },
          color: {
            type: [String, Array, Function],
            default: ""
          },
          format: Function
        },
        computed: {
          barStyle: function barStyle() {
            var style2 = {};
            style2.width = this.percentage + "%";
            style2.backgroundColor = this.getCurrentColor(this.percentage);
            return style2;
          },
          relativeStrokeWidth: function relativeStrokeWidth() {
            return (this.strokeWidth / this.width * 100).toFixed(1);
          },
          radius: function radius() {
            if (this.type === "circle" || this.type === "dashboard") {
              return parseInt(50 - parseFloat(this.relativeStrokeWidth) / 2, 10);
            } else {
              return 0;
            }
          },
          trackPath: function trackPath() {
            var radius = this.radius;
            var isDashboard = this.type === "dashboard";
            return "\n        M 50 50\n        m 0 " + (isDashboard ? "" : "-") + radius + "\n        a " + radius + " " + radius + " 0 1 1 0 " + (isDashboard ? "-" : "") + radius * 2 + "\n        a " + radius + " " + radius + " 0 1 1 0 " + (isDashboard ? "" : "-") + radius * 2 + "\n        ";
          },
          perimeter: function perimeter() {
            return 2 * Math.PI * this.radius;
          },
          rate: function rate2() {
            return this.type === "dashboard" ? 0.75 : 1;
          },
          strokeDashoffset: function strokeDashoffset() {
            var offset = -1 * this.perimeter * (1 - this.rate) / 2;
            return offset + "px";
          },
          trailPathStyle: function trailPathStyle() {
            return {
              strokeDasharray: this.perimeter * this.rate + "px, " + this.perimeter + "px",
              strokeDashoffset: this.strokeDashoffset
            };
          },
          circlePathStyle: function circlePathStyle() {
            return {
              strokeDasharray: this.perimeter * this.rate * (this.percentage / 100) + "px, " + this.perimeter + "px",
              strokeDashoffset: this.strokeDashoffset,
              transition: "stroke-dasharray 0.6s ease 0s, stroke 0.6s ease"
            };
          },
          stroke: function stroke() {
            var ret = void 0;
            if (this.color) {
              ret = this.getCurrentColor(this.percentage);
            } else {
              switch (this.status) {
                case "success":
                  ret = "#13ce66";
                  break;
                case "exception":
                  ret = "#ff4949";
                  break;
                case "warning":
                  ret = "#e6a23c";
                  break;
                default:
                  ret = "#20a0ff";
              }
            }
            return ret;
          },
          iconClass: function iconClass() {
            if (this.status === "warning") {
              return "el-icon-warning";
            }
            if (this.type === "line") {
              return this.status === "success" ? "el-icon-circle-check" : "el-icon-circle-close";
            } else {
              return this.status === "success" ? "el-icon-check" : "el-icon-close";
            }
          },
          progressTextSize: function progressTextSize() {
            return this.type === "line" ? 12 + this.strokeWidth * 0.4 : this.width * 0.111111 + 2;
          },
          content: function content2() {
            if (typeof this.format === "function") {
              return this.format(this.percentage) || "";
            } else {
              return this.percentage + "%";
            }
          }
        },
        methods: {
          getCurrentColor: function getCurrentColor(percentage) {
            if (typeof this.color === "function") {
              return this.color(percentage);
            } else if (typeof this.color === "string") {
              return this.color;
            } else {
              return this.getLevelColor(percentage);
            }
          },
          getLevelColor: function getLevelColor(percentage) {
            var colorArray = this.getColorArray().sort(function(a, b) {
              return a.percentage - b.percentage;
            });
            for (var i = 0; i < colorArray.length; i++) {
              if (colorArray[i].percentage > percentage) {
                return colorArray[i].color;
              }
            }
            return colorArray[colorArray.length - 1].color;
          },
          getColorArray: function getColorArray() {
            var color = this.color;
            var span = 100 / color.length;
            return color.map(function(seriesColor, index2) {
              if (typeof seriesColor === "string") {
                return {
                  color: seriesColor,
                  percentage: (index2 + 1) * span
                };
              }
              return seriesColor;
            });
          }
        }
      };
      var src_progressvue_type_script_lang_js_ = progressvue_type_script_lang_js_;
      var progress_component = normalizeComponent(src_progressvue_type_script_lang_js_, progressvue_type_template_id_229ee406_render, progressvue_type_template_id_229ee406_staticRenderFns, false, null, null, null);
      progress_component.options.__file = "packages/progress/src/progress.vue";
      var progress2 = progress_component.exports;
      progress2.install = function(Vue2) {
        Vue2.component(progress2.name, progress2);
      };
      var packages_progress = progress2;
      var spinnervue_type_template_id_697b8538_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("span", { staticClass: "el-spinner" }, [
          _c("svg", {
            staticClass: "el-spinner-inner",
            style: { width: _vm.radius / 2 + "px", height: _vm.radius / 2 + "px" },
            attrs: { viewBox: "0 0 50 50" }
          }, [
            _c("circle", {
              staticClass: "path",
              attrs: {
                cx: "25",
                cy: "25",
                r: "20",
                fill: "none",
                stroke: _vm.strokeColor,
                "stroke-width": _vm.strokeWidth
              }
            })
          ])
        ]);
      };
      var spinnervue_type_template_id_697b8538_staticRenderFns = [];
      spinnervue_type_template_id_697b8538_render._withStripped = true;
      var spinnervue_type_script_lang_js_ = {
        name: "ElSpinner",
        props: {
          type: String,
          radius: {
            type: Number,
            default: 100
          },
          strokeWidth: {
            type: Number,
            default: 5
          },
          strokeColor: {
            type: String,
            default: "#efefef"
          }
        }
      };
      var src_spinnervue_type_script_lang_js_ = spinnervue_type_script_lang_js_;
      var spinner_component = normalizeComponent(src_spinnervue_type_script_lang_js_, spinnervue_type_template_id_697b8538_render, spinnervue_type_template_id_697b8538_staticRenderFns, false, null, null, null);
      spinner_component.options.__file = "packages/spinner/src/spinner.vue";
      var spinner = spinner_component.exports;
      spinner.install = function(Vue2) {
        Vue2.component(spinner.name, spinner);
      };
      var packages_spinner = spinner;
      var mainvue_type_template_id_455b9f60_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("transition", {
          attrs: { name: "el-message-fade" },
          on: { "after-leave": _vm.handleAfterLeave }
        }, [
          _c("div", {
            directives: [
              {
                name: "show",
                rawName: "v-show",
                value: _vm.visible,
                expression: "visible"
              }
            ],
            class: [
              "el-message",
              _vm.type && !_vm.iconClass ? "el-message--" + _vm.type : "",
              _vm.center ? "is-center" : "",
              _vm.showClose ? "is-closable" : "",
              _vm.customClass
            ],
            style: _vm.positionStyle,
            attrs: { role: "alert" },
            on: { mouseenter: _vm.clearTimer, mouseleave: _vm.startTimer }
          }, [
            _vm.iconClass ? _c("i", { class: _vm.iconClass }) : _c("i", { class: _vm.typeClass }),
            _vm._t("default", [
              !_vm.dangerouslyUseHTMLString ? _c("p", { staticClass: "el-message__content" }, [
                _vm._v(_vm._s(_vm.message))
              ]) : _c("p", {
                staticClass: "el-message__content",
                domProps: { innerHTML: _vm._s(_vm.message) }
              })
            ]),
            _vm.showClose ? _c("i", {
              staticClass: "el-message__closeBtn el-icon-close",
              on: { click: _vm.close }
            }) : _vm._e()
          ], 2)
        ]);
      };
      var mainvue_type_template_id_455b9f60_staticRenderFns = [];
      mainvue_type_template_id_455b9f60_render._withStripped = true;
      var src_mainvue_type_script_lang_js_typeMap = {
        success: "success",
        info: "info",
        warning: "warning",
        error: "error"
      };
      var message_src_mainvue_type_script_lang_js_ = {
        data: function data25() {
          return {
            visible: false,
            message: "",
            duration: 3e3,
            type: "info",
            iconClass: "",
            customClass: "",
            onClose: null,
            showClose: false,
            closed: false,
            verticalOffset: 20,
            timer: null,
            dangerouslyUseHTMLString: false,
            center: false
          };
        },
        computed: {
          typeClass: function typeClass() {
            return this.type && !this.iconClass ? "el-message__icon el-icon-" + src_mainvue_type_script_lang_js_typeMap[this.type] : "";
          },
          positionStyle: function positionStyle() {
            return {
              "top": this.verticalOffset + "px"
            };
          }
        },
        watch: {
          closed: function closed(newVal) {
            if (newVal) {
              this.visible = false;
            }
          }
        },
        methods: {
          handleAfterLeave: function handleAfterLeave() {
            this.$destroy(true);
            this.$el.parentNode.removeChild(this.$el);
          },
          close: function close4() {
            this.closed = true;
            if (typeof this.onClose === "function") {
              this.onClose(this);
            }
          },
          clearTimer: function clearTimer() {
            clearTimeout(this.timer);
          },
          startTimer: function startTimer() {
            var _this = this;
            if (this.duration > 0) {
              this.timer = setTimeout(function() {
                if (!_this.closed) {
                  _this.close();
                }
              }, this.duration);
            }
          },
          keydown: function keydown(e) {
            if (e.keyCode === 27) {
              if (!this.closed) {
                this.close();
              }
            }
          }
        },
        mounted: function mounted18() {
          this.startTimer();
          document.addEventListener("keydown", this.keydown);
        },
        beforeDestroy: function beforeDestroy13() {
          document.removeEventListener("keydown", this.keydown);
        }
      };
      var packages_message_src_mainvue_type_script_lang_js_ = message_src_mainvue_type_script_lang_js_;
      var message_src_main_component = normalizeComponent(packages_message_src_mainvue_type_script_lang_js_, mainvue_type_template_id_455b9f60_render, mainvue_type_template_id_455b9f60_staticRenderFns, false, null, null, null);
      message_src_main_component.options.__file = "packages/message/src/main.vue";
      var message_src_main = message_src_main_component.exports;
      var types_ = __webpack_require__(15);
      var main_extends = Object.assign || function(target2) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target2[key] = source[key];
            }
          }
        }
        return target2;
      };
      var MessageConstructor = external_vue_default.a.extend(message_src_main);
      var message_src_main_instance = void 0;
      var main_instances = [];
      var main_seed = 1;
      var main_Message = function Message(options2) {
        if (external_vue_default.a.prototype.$isServer)
          return;
        options2 = options2 || {};
        if (typeof options2 === "string") {
          options2 = {
            message: options2
          };
        }
        var userOnClose = options2.onClose;
        var id2 = "message_" + main_seed++;
        options2.onClose = function() {
          Message.close(id2, userOnClose);
        };
        message_src_main_instance = new MessageConstructor({
          data: options2
        });
        message_src_main_instance.id = id2;
        if (Object(vdom_["isVNode"])(message_src_main_instance.message)) {
          message_src_main_instance.$slots.default = [message_src_main_instance.message];
          message_src_main_instance.message = null;
        }
        message_src_main_instance.$mount();
        document.body.appendChild(message_src_main_instance.$el);
        var verticalOffset = options2.offset || 20;
        main_instances.forEach(function(item) {
          verticalOffset += item.$el.offsetHeight + 16;
        });
        message_src_main_instance.verticalOffset = verticalOffset;
        message_src_main_instance.visible = true;
        message_src_main_instance.$el.style.zIndex = popup_["PopupManager"].nextZIndex();
        main_instances.push(message_src_main_instance);
        return message_src_main_instance;
      };
      ["success", "warning", "info", "error"].forEach(function(type3) {
        main_Message[type3] = function(options2) {
          if (Object(types_["isObject"])(options2) && !Object(vdom_["isVNode"])(options2)) {
            return main_Message(main_extends({}, options2, {
              type: type3
            }));
          }
          return main_Message({
            type: type3,
            message: options2
          });
        };
      });
      main_Message.close = function(id2, userOnClose) {
        var len = main_instances.length;
        var index2 = -1;
        var removedHeight = void 0;
        for (var i = 0; i < len; i++) {
          if (id2 === main_instances[i].id) {
            removedHeight = main_instances[i].$el.offsetHeight;
            index2 = i;
            if (typeof userOnClose === "function") {
              userOnClose(main_instances[i]);
            }
            main_instances.splice(i, 1);
            break;
          }
        }
        if (len <= 1 || index2 === -1 || index2 > main_instances.length - 1)
          return;
        for (var _i = index2; _i < len - 1; _i++) {
          var dom2 = main_instances[_i].$el;
          dom2.style["top"] = parseInt(dom2.style["top"], 10) - removedHeight - 16 + "px";
        }
      };
      main_Message.closeAll = function() {
        for (var i = main_instances.length - 1; i >= 0; i--) {
          main_instances[i].close();
        }
      };
      var packages_message_src_main = main_Message;
      var packages_message = packages_message_src_main;
      var mainvue_type_template_id_7ccb6598_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", { staticClass: "el-badge" }, [
          _vm._t("default"),
          _c("transition", { attrs: { name: "el-zoom-in-center" } }, [
            _c("sup", {
              directives: [
                {
                  name: "show",
                  rawName: "v-show",
                  value: !_vm.hidden && (_vm.content || _vm.content === 0 || _vm.isDot),
                  expression: "!hidden && (content || content === 0 || isDot)"
                }
              ],
              staticClass: "el-badge__content",
              class: [
                "el-badge__content--" + _vm.type,
                {
                  "is-fixed": _vm.$slots.default,
                  "is-dot": _vm.isDot
                }
              ],
              domProps: { textContent: _vm._s(_vm.content) }
            })
          ])
        ], 2);
      };
      var mainvue_type_template_id_7ccb6598_staticRenderFns = [];
      mainvue_type_template_id_7ccb6598_render._withStripped = true;
      var badge_src_mainvue_type_script_lang_js_ = {
        name: "ElBadge",
        props: {
          value: [String, Number],
          max: Number,
          isDot: Boolean,
          hidden: Boolean,
          type: {
            type: String,
            validator: function validator2(val) {
              return ["primary", "success", "warning", "info", "danger"].indexOf(val) > -1;
            }
          }
        },
        computed: {
          content: function content2() {
            if (this.isDot)
              return;
            var value6 = this.value;
            var max2 = this.max;
            if (typeof value6 === "number" && typeof max2 === "number") {
              return max2 < value6 ? max2 + "+" : value6;
            }
            return value6;
          }
        }
      };
      var packages_badge_src_mainvue_type_script_lang_js_ = badge_src_mainvue_type_script_lang_js_;
      var badge_src_main_component = normalizeComponent(packages_badge_src_mainvue_type_script_lang_js_, mainvue_type_template_id_7ccb6598_render, mainvue_type_template_id_7ccb6598_staticRenderFns, false, null, null, null);
      badge_src_main_component.options.__file = "packages/badge/src/main.vue";
      var badge_src_main = badge_src_main_component.exports;
      badge_src_main.install = function(Vue2) {
        Vue2.component(badge_src_main.name, badge_src_main);
      };
      var badge = badge_src_main;
      var mainvue_type_template_id_59a4a40f_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", {
          staticClass: "el-card",
          class: _vm.shadow ? "is-" + _vm.shadow + "-shadow" : "is-always-shadow"
        }, [
          _vm.$slots.header || _vm.header ? _c("div", { staticClass: "el-card__header" }, [_vm._t("header", [_vm._v(_vm._s(_vm.header))])], 2) : _vm._e(),
          _c("div", { staticClass: "el-card__body", style: _vm.bodyStyle }, [_vm._t("default")], 2)
        ]);
      };
      var mainvue_type_template_id_59a4a40f_staticRenderFns = [];
      mainvue_type_template_id_59a4a40f_render._withStripped = true;
      var card_src_mainvue_type_script_lang_js_ = {
        name: "ElCard",
        props: {
          header: {},
          bodyStyle: {},
          shadow: {
            type: String
          }
        }
      };
      var packages_card_src_mainvue_type_script_lang_js_ = card_src_mainvue_type_script_lang_js_;
      var card_src_main_component = normalizeComponent(packages_card_src_mainvue_type_script_lang_js_, mainvue_type_template_id_59a4a40f_render, mainvue_type_template_id_59a4a40f_staticRenderFns, false, null, null, null);
      card_src_main_component.options.__file = "packages/card/src/main.vue";
      var card_src_main = card_src_main_component.exports;
      card_src_main.install = function(Vue2) {
        Vue2.component(card_src_main.name, card_src_main);
      };
      var card = card_src_main;
      var mainvue_type_template_id_ada57782_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", {
          staticClass: "el-rate",
          attrs: {
            role: "slider",
            "aria-valuenow": _vm.currentValue,
            "aria-valuetext": _vm.text,
            "aria-valuemin": "0",
            "aria-valuemax": _vm.max,
            tabindex: "0"
          },
          on: { keydown: _vm.handleKey }
        }, [
          _vm._l(_vm.max, function(item, key) {
            return _c("span", {
              key,
              staticClass: "el-rate__item",
              style: { cursor: _vm.rateDisabled ? "auto" : "pointer" },
              on: {
                mousemove: function($event) {
                  _vm.setCurrentValue(item, $event);
                },
                mouseleave: _vm.resetCurrentValue,
                click: function($event) {
                  _vm.selectValue(item);
                }
              }
            }, [
              _c("i", {
                staticClass: "el-rate__icon",
                class: [
                  _vm.classes[item - 1],
                  { hover: _vm.hoverIndex === item }
                ],
                style: _vm.getIconStyle(item)
              }, [
                _vm.showDecimalIcon(item) ? _c("i", {
                  staticClass: "el-rate__decimal",
                  class: _vm.decimalIconClass,
                  style: _vm.decimalStyle
                }) : _vm._e()
              ])
            ]);
          }),
          _vm.showText || _vm.showScore ? _c("span", { staticClass: "el-rate__text", style: { color: _vm.textColor } }, [_vm._v(_vm._s(_vm.text))]) : _vm._e()
        ], 2);
      };
      var mainvue_type_template_id_ada57782_staticRenderFns = [];
      mainvue_type_template_id_ada57782_render._withStripped = true;
      var rate_src_mainvue_type_script_lang_js_ = {
        name: "ElRate",
        mixins: [migrating_default.a],
        inject: {
          elForm: {
            default: ""
          }
        },
        data: function data25() {
          return {
            pointerAtLeftHalf: true,
            currentValue: this.value,
            hoverIndex: -1
          };
        },
        props: {
          value: {
            type: Number,
            default: 0
          },
          lowThreshold: {
            type: Number,
            default: 2
          },
          highThreshold: {
            type: Number,
            default: 4
          },
          max: {
            type: Number,
            default: 5
          },
          colors: {
            type: [Array, Object],
            default: function _default116() {
              return ["#F7BA2A", "#F7BA2A", "#F7BA2A"];
            }
          },
          voidColor: {
            type: String,
            default: "#C6D1DE"
          },
          disabledVoidColor: {
            type: String,
            default: "#EFF2F7"
          },
          iconClasses: {
            type: [Array, Object],
            default: function _default116() {
              return ["el-icon-star-on", "el-icon-star-on", "el-icon-star-on"];
            }
          },
          voidIconClass: {
            type: String,
            default: "el-icon-star-off"
          },
          disabledVoidIconClass: {
            type: String,
            default: "el-icon-star-on"
          },
          disabled: {
            type: Boolean,
            default: false
          },
          allowHalf: {
            type: Boolean,
            default: false
          },
          showText: {
            type: Boolean,
            default: false
          },
          showScore: {
            type: Boolean,
            default: false
          },
          textColor: {
            type: String,
            default: "#1f2d3d"
          },
          texts: {
            type: Array,
            default: function _default116() {
              return ["\u6781\u5DEE", "\u5931\u671B", "\u4E00\u822C", "\u6EE1\u610F", "\u60CA\u559C"];
            }
          },
          scoreTemplate: {
            type: String,
            default: "{value}"
          }
        },
        computed: {
          text: function text() {
            var result2 = "";
            if (this.showScore) {
              result2 = this.scoreTemplate.replace(/\{\s*value\s*\}/, this.rateDisabled ? this.value : this.currentValue);
            } else if (this.showText) {
              result2 = this.texts[Math.ceil(this.currentValue) - 1];
            }
            return result2;
          },
          decimalStyle: function decimalStyle() {
            var width2 = "";
            if (this.rateDisabled) {
              width2 = this.valueDecimal + "%";
            } else if (this.allowHalf) {
              width2 = "50%";
            }
            return {
              color: this.activeColor,
              width: width2
            };
          },
          valueDecimal: function valueDecimal() {
            return this.value * 100 - Math.floor(this.value) * 100;
          },
          classMap: function classMap() {
            var _ref;
            return Array.isArray(this.iconClasses) ? (_ref = {}, _ref[this.lowThreshold] = this.iconClasses[0], _ref[this.highThreshold] = { value: this.iconClasses[1], excluded: true }, _ref[this.max] = this.iconClasses[2], _ref) : this.iconClasses;
          },
          decimalIconClass: function decimalIconClass() {
            return this.getValueFromMap(this.value, this.classMap);
          },
          voidClass: function voidClass() {
            return this.rateDisabled ? this.disabledVoidIconClass : this.voidIconClass;
          },
          activeClass: function activeClass() {
            return this.getValueFromMap(this.currentValue, this.classMap);
          },
          colorMap: function colorMap() {
            var _ref2;
            return Array.isArray(this.colors) ? (_ref2 = {}, _ref2[this.lowThreshold] = this.colors[0], _ref2[this.highThreshold] = { value: this.colors[1], excluded: true }, _ref2[this.max] = this.colors[2], _ref2) : this.colors;
          },
          activeColor: function activeColor() {
            return this.getValueFromMap(this.currentValue, this.colorMap);
          },
          classes: function classes() {
            var result2 = [];
            var i = 0;
            var threshold = this.currentValue;
            if (this.allowHalf && this.currentValue !== Math.floor(this.currentValue)) {
              threshold--;
            }
            for (; i < threshold; i++) {
              result2.push(this.activeClass);
            }
            for (; i < this.max; i++) {
              result2.push(this.voidClass);
            }
            return result2;
          },
          rateDisabled: function rateDisabled() {
            return this.disabled || (this.elForm || {}).disabled;
          }
        },
        watch: {
          value: function value6(val) {
            this.currentValue = val;
            this.pointerAtLeftHalf = this.value !== Math.floor(this.value);
          }
        },
        methods: {
          getMigratingConfig: function getMigratingConfig2() {
            return {
              props: {
                "text-template": "text-template is renamed to score-template."
              }
            };
          },
          getValueFromMap: function getValueFromMap(value6, map2) {
            var matchedKeys = Object.keys(map2).filter(function(key) {
              var val = map2[key];
              var excluded = Object(types_["isObject"])(val) ? val.excluded : false;
              return excluded ? value6 < key : value6 <= key;
            }).sort(function(a, b) {
              return a - b;
            });
            var matchedValue = map2[matchedKeys[0]];
            return Object(types_["isObject"])(matchedValue) ? matchedValue.value : matchedValue || "";
          },
          showDecimalIcon: function showDecimalIcon(item) {
            var showWhenDisabled = this.rateDisabled && this.valueDecimal > 0 && item - 1 < this.value && item > this.value;
            var showWhenAllowHalf = this.allowHalf && this.pointerAtLeftHalf && item - 0.5 <= this.currentValue && item > this.currentValue;
            return showWhenDisabled || showWhenAllowHalf;
          },
          getIconStyle: function getIconStyle(item) {
            var voidColor = this.rateDisabled ? this.disabledVoidColor : this.voidColor;
            return {
              color: item <= this.currentValue ? this.activeColor : voidColor
            };
          },
          selectValue: function selectValue(value6) {
            if (this.rateDisabled) {
              return;
            }
            if (this.allowHalf && this.pointerAtLeftHalf) {
              this.$emit("input", this.currentValue);
              this.$emit("change", this.currentValue);
            } else {
              this.$emit("input", value6);
              this.$emit("change", value6);
            }
          },
          handleKey: function handleKey(e) {
            if (this.rateDisabled) {
              return;
            }
            var currentValue = this.currentValue;
            var keyCode2 = e.keyCode;
            if (keyCode2 === 38 || keyCode2 === 39) {
              if (this.allowHalf) {
                currentValue += 0.5;
              } else {
                currentValue += 1;
              }
              e.stopPropagation();
              e.preventDefault();
            } else if (keyCode2 === 37 || keyCode2 === 40) {
              if (this.allowHalf) {
                currentValue -= 0.5;
              } else {
                currentValue -= 1;
              }
              e.stopPropagation();
              e.preventDefault();
            }
            currentValue = currentValue < 0 ? 0 : currentValue;
            currentValue = currentValue > this.max ? this.max : currentValue;
            this.$emit("input", currentValue);
            this.$emit("change", currentValue);
          },
          setCurrentValue: function setCurrentValue(value6, event2) {
            if (this.rateDisabled) {
              return;
            }
            if (this.allowHalf) {
              var target2 = event2.target;
              if (Object(dom_["hasClass"])(target2, "el-rate__item")) {
                target2 = target2.querySelector(".el-rate__icon");
              }
              if (Object(dom_["hasClass"])(target2, "el-rate__decimal")) {
                target2 = target2.parentNode;
              }
              this.pointerAtLeftHalf = event2.offsetX * 2 <= target2.clientWidth;
              this.currentValue = this.pointerAtLeftHalf ? value6 - 0.5 : value6;
            } else {
              this.currentValue = value6;
            }
            this.hoverIndex = value6;
          },
          resetCurrentValue: function resetCurrentValue() {
            if (this.rateDisabled) {
              return;
            }
            if (this.allowHalf) {
              this.pointerAtLeftHalf = this.value !== Math.floor(this.value);
            }
            this.currentValue = this.value;
            this.hoverIndex = -1;
          }
        },
        created: function created20() {
          if (!this.value) {
            this.$emit("input", 0);
          }
        }
      };
      var packages_rate_src_mainvue_type_script_lang_js_ = rate_src_mainvue_type_script_lang_js_;
      var rate_src_main_component = normalizeComponent(packages_rate_src_mainvue_type_script_lang_js_, mainvue_type_template_id_ada57782_render, mainvue_type_template_id_ada57782_staticRenderFns, false, null, null, null);
      rate_src_main_component.options.__file = "packages/rate/src/main.vue";
      var rate_src_main = rate_src_main_component.exports;
      rate_src_main.install = function(Vue2) {
        Vue2.component(rate_src_main.name, rate_src_main);
      };
      var rate = rate_src_main;
      var stepsvue_type_template_id_3c6b6dc0_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", {
          staticClass: "el-steps",
          class: [
            !_vm.simple && "el-steps--" + _vm.direction,
            _vm.simple && "el-steps--simple"
          ]
        }, [_vm._t("default")], 2);
      };
      var stepsvue_type_template_id_3c6b6dc0_staticRenderFns = [];
      stepsvue_type_template_id_3c6b6dc0_render._withStripped = true;
      var stepsvue_type_script_lang_js_ = {
        name: "ElSteps",
        mixins: [migrating_default.a],
        props: {
          space: [Number, String],
          active: Number,
          direction: {
            type: String,
            default: "horizontal"
          },
          alignCenter: Boolean,
          simple: Boolean,
          finishStatus: {
            type: String,
            default: "finish"
          },
          processStatus: {
            type: String,
            default: "process"
          }
        },
        data: function data25() {
          return {
            steps: [],
            stepOffset: 0
          };
        },
        methods: {
          getMigratingConfig: function getMigratingConfig2() {
            return {
              props: {
                "center": "center is removed."
              }
            };
          }
        },
        watch: {
          active: function active(newVal, oldVal) {
            this.$emit("change", newVal, oldVal);
          },
          steps: function steps2(_steps) {
            _steps.forEach(function(child, index2) {
              child.index = index2;
            });
          }
        }
      };
      var src_stepsvue_type_script_lang_js_ = stepsvue_type_script_lang_js_;
      var steps_component = normalizeComponent(src_stepsvue_type_script_lang_js_, stepsvue_type_template_id_3c6b6dc0_render, stepsvue_type_template_id_3c6b6dc0_staticRenderFns, false, null, null, null);
      steps_component.options.__file = "packages/steps/src/steps.vue";
      var steps = steps_component.exports;
      steps.install = function(Vue2) {
        Vue2.component(steps.name, steps);
      };
      var packages_steps = steps;
      var stepvue_type_template_id_f414a87a_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", {
          staticClass: "el-step",
          class: [
            !_vm.isSimple && "is-" + _vm.$parent.direction,
            _vm.isSimple && "is-simple",
            _vm.isLast && !_vm.space && !_vm.isCenter && "is-flex",
            _vm.isCenter && !_vm.isVertical && !_vm.isSimple && "is-center"
          ],
          style: _vm.style
        }, [
          _c("div", { staticClass: "el-step__head", class: "is-" + _vm.currentStatus }, [
            _c("div", {
              staticClass: "el-step__line",
              style: _vm.isLast ? "" : { marginRight: _vm.$parent.stepOffset + "px" }
            }, [
              _c("i", {
                staticClass: "el-step__line-inner",
                style: _vm.lineStyle
              })
            ]),
            _c("div", {
              staticClass: "el-step__icon",
              class: "is-" + (_vm.icon ? "icon" : "text")
            }, [
              _vm.currentStatus !== "success" && _vm.currentStatus !== "error" ? _vm._t("icon", [
                _vm.icon ? _c("i", {
                  staticClass: "el-step__icon-inner",
                  class: [_vm.icon]
                }) : _vm._e(),
                !_vm.icon && !_vm.isSimple ? _c("div", { staticClass: "el-step__icon-inner" }, [
                  _vm._v(_vm._s(_vm.index + 1))
                ]) : _vm._e()
              ]) : _c("i", {
                staticClass: "el-step__icon-inner is-status",
                class: [
                  "el-icon-" + (_vm.currentStatus === "success" ? "check" : "close")
                ]
              })
            ], 2)
          ]),
          _c("div", { staticClass: "el-step__main" }, [
            _c("div", {
              ref: "title",
              staticClass: "el-step__title",
              class: ["is-" + _vm.currentStatus]
            }, [_vm._t("title", [_vm._v(_vm._s(_vm.title))])], 2),
            _vm.isSimple ? _c("div", { staticClass: "el-step__arrow" }) : _c("div", {
              staticClass: "el-step__description",
              class: ["is-" + _vm.currentStatus]
            }, [_vm._t("description", [_vm._v(_vm._s(_vm.description))])], 2)
          ])
        ]);
      };
      var stepvue_type_template_id_f414a87a_staticRenderFns = [];
      stepvue_type_template_id_f414a87a_render._withStripped = true;
      var stepvue_type_script_lang_js_ = {
        name: "ElStep",
        props: {
          title: String,
          icon: String,
          description: String,
          status: String
        },
        data: function data25() {
          return {
            index: -1,
            lineStyle: {},
            internalStatus: ""
          };
        },
        beforeCreate: function beforeCreate() {
          this.$parent.steps.push(this);
        },
        beforeDestroy: function beforeDestroy13() {
          var steps2 = this.$parent.steps;
          var index2 = steps2.indexOf(this);
          if (index2 >= 0) {
            steps2.splice(index2, 1);
          }
        },
        computed: {
          currentStatus: function currentStatus() {
            return this.status || this.internalStatus;
          },
          prevStatus: function prevStatus() {
            var prevStep = this.$parent.steps[this.index - 1];
            return prevStep ? prevStep.currentStatus : "wait";
          },
          isCenter: function isCenter() {
            return this.$parent.alignCenter;
          },
          isVertical: function isVertical() {
            return this.$parent.direction === "vertical";
          },
          isSimple: function isSimple() {
            return this.$parent.simple;
          },
          isLast: function isLast() {
            var parent2 = this.$parent;
            return parent2.steps[parent2.steps.length - 1] === this;
          },
          stepsCount: function stepsCount() {
            return this.$parent.steps.length;
          },
          space: function space() {
            var isSimple = this.isSimple, space2 = this.$parent.space;
            return isSimple ? "" : space2;
          },
          style: function style2() {
            var style3 = {};
            var parent2 = this.$parent;
            var len = parent2.steps.length;
            var space = typeof this.space === "number" ? this.space + "px" : this.space ? this.space : 100 / (len - (this.isCenter ? 0 : 1)) + "%";
            style3.flexBasis = space;
            if (this.isVertical)
              return style3;
            if (this.isLast) {
              style3.maxWidth = 100 / this.stepsCount + "%";
            } else {
              style3.marginRight = -this.$parent.stepOffset + "px";
            }
            return style3;
          }
        },
        methods: {
          updateStatus: function updateStatus3(val) {
            var prevChild = this.$parent.$children[this.index - 1];
            if (val > this.index) {
              this.internalStatus = this.$parent.finishStatus;
            } else if (val === this.index && this.prevStatus !== "error") {
              this.internalStatus = this.$parent.processStatus;
            } else {
              this.internalStatus = "wait";
            }
            if (prevChild)
              prevChild.calcProgress(this.internalStatus);
          },
          calcProgress: function calcProgress(status) {
            var step3 = 100;
            var style2 = {};
            style2.transitionDelay = 150 * this.index + "ms";
            if (status === this.$parent.processStatus) {
              step3 = this.currentStatus !== "error" ? 0 : 0;
            } else if (status === "wait") {
              step3 = 0;
              style2.transitionDelay = -150 * this.index + "ms";
            }
            style2.borderWidth = step3 && !this.isSimple ? "1px" : 0;
            this.$parent.direction === "vertical" ? style2.height = step3 + "%" : style2.width = step3 + "%";
            this.lineStyle = style2;
          }
        },
        mounted: function mounted18() {
          var _this = this;
          var unwatch = this.$watch("index", function(val) {
            _this.$watch("$parent.active", _this.updateStatus, { immediate: true });
            _this.$watch("$parent.processStatus", function() {
              var activeIndex = _this.$parent.active;
              _this.updateStatus(activeIndex);
            }, { immediate: true });
            unwatch();
          });
        }
      };
      var src_stepvue_type_script_lang_js_ = stepvue_type_script_lang_js_;
      var step_component = normalizeComponent(src_stepvue_type_script_lang_js_, stepvue_type_template_id_f414a87a_render, stepvue_type_template_id_f414a87a_staticRenderFns, false, null, null, null);
      step_component.options.__file = "packages/steps/src/step.vue";
      var step2 = step_component.exports;
      step2.install = function(Vue2) {
        Vue2.component(step2.name, step2);
      };
      var packages_step = step2;
      var mainvue_type_template_id_5d5d1482_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", {
          class: _vm.carouselClasses,
          on: {
            mouseenter: function($event) {
              $event.stopPropagation();
              return _vm.handleMouseEnter($event);
            },
            mouseleave: function($event) {
              $event.stopPropagation();
              return _vm.handleMouseLeave($event);
            }
          }
        }, [
          _c("div", {
            staticClass: "el-carousel__container",
            style: { height: _vm.height }
          }, [
            _vm.arrowDisplay ? _c("transition", { attrs: { name: "carousel-arrow-left" } }, [
              _c("button", {
                directives: [
                  {
                    name: "show",
                    rawName: "v-show",
                    value: (_vm.arrow === "always" || _vm.hover) && (_vm.loop || _vm.activeIndex > 0),
                    expression: "(arrow === 'always' || hover) && (loop || activeIndex > 0)"
                  }
                ],
                staticClass: "el-carousel__arrow el-carousel__arrow--left",
                attrs: { type: "button" },
                on: {
                  mouseenter: function($event) {
                    _vm.handleButtonEnter("left");
                  },
                  mouseleave: _vm.handleButtonLeave,
                  click: function($event) {
                    $event.stopPropagation();
                    _vm.throttledArrowClick(_vm.activeIndex - 1);
                  }
                }
              }, [_c("i", { staticClass: "el-icon-arrow-left" })])
            ]) : _vm._e(),
            _vm.arrowDisplay ? _c("transition", { attrs: { name: "carousel-arrow-right" } }, [
              _c("button", {
                directives: [
                  {
                    name: "show",
                    rawName: "v-show",
                    value: (_vm.arrow === "always" || _vm.hover) && (_vm.loop || _vm.activeIndex < _vm.items.length - 1),
                    expression: "(arrow === 'always' || hover) && (loop || activeIndex < items.length - 1)"
                  }
                ],
                staticClass: "el-carousel__arrow el-carousel__arrow--right",
                attrs: { type: "button" },
                on: {
                  mouseenter: function($event) {
                    _vm.handleButtonEnter("right");
                  },
                  mouseleave: _vm.handleButtonLeave,
                  click: function($event) {
                    $event.stopPropagation();
                    _vm.throttledArrowClick(_vm.activeIndex + 1);
                  }
                }
              }, [_c("i", { staticClass: "el-icon-arrow-right" })])
            ]) : _vm._e(),
            _vm._t("default")
          ], 2),
          _vm.indicatorPosition !== "none" ? _c("ul", { class: _vm.indicatorsClasses }, _vm._l(_vm.items, function(item, index2) {
            return _c("li", {
              key: index2,
              class: [
                "el-carousel__indicator",
                "el-carousel__indicator--" + _vm.direction,
                { "is-active": index2 === _vm.activeIndex }
              ],
              on: {
                mouseenter: function($event) {
                  _vm.throttledIndicatorHover(index2);
                },
                click: function($event) {
                  $event.stopPropagation();
                  _vm.handleIndicatorClick(index2);
                }
              }
            }, [
              _c("button", { staticClass: "el-carousel__button" }, [
                _vm.hasLabel ? _c("span", [_vm._v(_vm._s(item.label))]) : _vm._e()
              ])
            ]);
          }), 0) : _vm._e()
        ]);
      };
      var mainvue_type_template_id_5d5d1482_staticRenderFns = [];
      mainvue_type_template_id_5d5d1482_render._withStripped = true;
      var throttle_ = __webpack_require__(25);
      var throttle_default = /* @__PURE__ */ __webpack_require__.n(throttle_);
      var carousel_src_mainvue_type_script_lang_js_ = {
        name: "ElCarousel",
        props: {
          initialIndex: {
            type: Number,
            default: 0
          },
          height: String,
          trigger: {
            type: String,
            default: "hover"
          },
          autoplay: {
            type: Boolean,
            default: true
          },
          interval: {
            type: Number,
            default: 3e3
          },
          indicatorPosition: String,
          indicator: {
            type: Boolean,
            default: true
          },
          arrow: {
            type: String,
            default: "hover"
          },
          type: String,
          loop: {
            type: Boolean,
            default: true
          },
          direction: {
            type: String,
            default: "horizontal",
            validator: function validator2(val) {
              return ["horizontal", "vertical"].indexOf(val) !== -1;
            }
          }
        },
        data: function data25() {
          return {
            items: [],
            activeIndex: -1,
            containerWidth: 0,
            timer: null,
            hover: false
          };
        },
        computed: {
          arrowDisplay: function arrowDisplay() {
            return this.arrow !== "never" && this.direction !== "vertical";
          },
          hasLabel: function hasLabel() {
            return this.items.some(function(item) {
              return item.label.toString().length > 0;
            });
          },
          carouselClasses: function carouselClasses() {
            var classes = ["el-carousel", "el-carousel--" + this.direction];
            if (this.type === "card") {
              classes.push("el-carousel--card");
            }
            return classes;
          },
          indicatorsClasses: function indicatorsClasses() {
            var classes = ["el-carousel__indicators", "el-carousel__indicators--" + this.direction];
            if (this.hasLabel) {
              classes.push("el-carousel__indicators--labels");
            }
            if (this.indicatorPosition === "outside" || this.type === "card") {
              classes.push("el-carousel__indicators--outside");
            }
            return classes;
          }
        },
        watch: {
          items: function items2(val) {
            if (val.length > 0)
              this.setActiveItem(this.initialIndex);
          },
          activeIndex: function activeIndex(val, oldVal) {
            this.resetItemPosition(oldVal);
            if (oldVal > -1) {
              this.$emit("change", val, oldVal);
            }
          },
          autoplay: function autoplay(val) {
            val ? this.startTimer() : this.pauseTimer();
          },
          loop: function loop() {
            this.setActiveItem(this.activeIndex);
          },
          interval: function interval() {
            this.pauseTimer();
            this.startTimer();
          }
        },
        methods: {
          handleMouseEnter: function handleMouseEnter() {
            this.hover = true;
            this.pauseTimer();
          },
          handleMouseLeave: function handleMouseLeave() {
            this.hover = false;
            this.startTimer();
          },
          itemInStage: function itemInStage(item, index2) {
            var length = this.items.length;
            if (index2 === length - 1 && item.inStage && this.items[0].active || item.inStage && this.items[index2 + 1] && this.items[index2 + 1].active) {
              return "left";
            } else if (index2 === 0 && item.inStage && this.items[length - 1].active || item.inStage && this.items[index2 - 1] && this.items[index2 - 1].active) {
              return "right";
            }
            return false;
          },
          handleButtonEnter: function handleButtonEnter(arrow) {
            var _this = this;
            if (this.direction === "vertical")
              return;
            this.items.forEach(function(item, index2) {
              if (arrow === _this.itemInStage(item, index2)) {
                item.hover = true;
              }
            });
          },
          handleButtonLeave: function handleButtonLeave() {
            if (this.direction === "vertical")
              return;
            this.items.forEach(function(item) {
              item.hover = false;
            });
          },
          updateItems: function updateItems() {
            this.items = this.$children.filter(function(child) {
              return child.$options.name === "ElCarouselItem";
            });
          },
          resetItemPosition: function resetItemPosition(oldIndex) {
            var _this2 = this;
            this.items.forEach(function(item, index2) {
              item.translateItem(index2, _this2.activeIndex, oldIndex);
            });
          },
          playSlides: function playSlides() {
            if (this.activeIndex < this.items.length - 1) {
              this.activeIndex++;
            } else if (this.loop) {
              this.activeIndex = 0;
            }
          },
          pauseTimer: function pauseTimer() {
            if (this.timer) {
              clearInterval(this.timer);
              this.timer = null;
            }
          },
          startTimer: function startTimer() {
            if (this.interval <= 0 || !this.autoplay || this.timer)
              return;
            this.timer = setInterval(this.playSlides, this.interval);
          },
          resetTimer: function resetTimer() {
            this.pauseTimer();
            this.startTimer();
          },
          setActiveItem: function setActiveItem(index2) {
            if (typeof index2 === "string") {
              var filteredItems = this.items.filter(function(item) {
                return item.name === index2;
              });
              if (filteredItems.length > 0) {
                index2 = this.items.indexOf(filteredItems[0]);
              }
            }
            index2 = Number(index2);
            if (isNaN(index2) || index2 !== Math.floor(index2)) {
              console.warn("[Element Warn][Carousel]index must be an integer.");
              return;
            }
            var length = this.items.length;
            var oldIndex = this.activeIndex;
            if (index2 < 0) {
              this.activeIndex = this.loop ? length - 1 : 0;
            } else if (index2 >= length) {
              this.activeIndex = this.loop ? 0 : length - 1;
            } else {
              this.activeIndex = index2;
            }
            if (oldIndex === this.activeIndex) {
              this.resetItemPosition(oldIndex);
            }
            this.resetTimer();
          },
          prev: function prev() {
            this.setActiveItem(this.activeIndex - 1);
          },
          next: function next() {
            this.setActiveItem(this.activeIndex + 1);
          },
          handleIndicatorClick: function handleIndicatorClick(index2) {
            this.activeIndex = index2;
          },
          handleIndicatorHover: function handleIndicatorHover(index2) {
            if (this.trigger === "hover" && index2 !== this.activeIndex) {
              this.activeIndex = index2;
            }
          }
        },
        created: function created20() {
          var _this3 = this;
          this.throttledArrowClick = throttle_default()(300, true, function(index2) {
            _this3.setActiveItem(index2);
          });
          this.throttledIndicatorHover = throttle_default()(300, function(index2) {
            _this3.handleIndicatorHover(index2);
          });
        },
        mounted: function mounted18() {
          var _this4 = this;
          this.updateItems();
          this.$nextTick(function() {
            Object(resize_event_["addResizeListener"])(_this4.$el, _this4.resetItemPosition);
            if (_this4.initialIndex < _this4.items.length && _this4.initialIndex >= 0) {
              _this4.activeIndex = _this4.initialIndex;
            }
            _this4.startTimer();
          });
        },
        beforeDestroy: function beforeDestroy13() {
          if (this.$el)
            Object(resize_event_["removeResizeListener"])(this.$el, this.resetItemPosition);
          this.pauseTimer();
        }
      };
      var packages_carousel_src_mainvue_type_script_lang_js_ = carousel_src_mainvue_type_script_lang_js_;
      var carousel_src_main_component = normalizeComponent(packages_carousel_src_mainvue_type_script_lang_js_, mainvue_type_template_id_5d5d1482_render, mainvue_type_template_id_5d5d1482_staticRenderFns, false, null, null, null);
      carousel_src_main_component.options.__file = "packages/carousel/src/main.vue";
      var carousel_src_main = carousel_src_main_component.exports;
      carousel_src_main.install = function(Vue2) {
        Vue2.component(carousel_src_main.name, carousel_src_main);
      };
      var carousel = carousel_src_main;
      var BAR_MAP = {
        vertical: {
          offset: "offsetHeight",
          scroll: "scrollTop",
          scrollSize: "scrollHeight",
          size: "height",
          key: "vertical",
          axis: "Y",
          client: "clientY",
          direction: "top"
        },
        horizontal: {
          offset: "offsetWidth",
          scroll: "scrollLeft",
          scrollSize: "scrollWidth",
          size: "width",
          key: "horizontal",
          axis: "X",
          client: "clientX",
          direction: "left"
        }
      };
      function renderThumbStyle(_ref) {
        var move = _ref.move, size2 = _ref.size, bar = _ref.bar;
        var style2 = {};
        var translate = "translate" + bar.axis + "(" + move + "%)";
        style2[bar.size] = size2;
        style2.transform = translate;
        style2.msTransform = translate;
        style2.webkitTransform = translate;
        return style2;
      }
      var src_bar = {
        name: "Bar",
        props: {
          vertical: Boolean,
          size: String,
          move: Number
        },
        computed: {
          bar: function bar() {
            return BAR_MAP[this.vertical ? "vertical" : "horizontal"];
          },
          wrap: function wrap2() {
            return this.$parent.wrap;
          }
        },
        render: function render37(h) {
          var size2 = this.size, move = this.move, bar = this.bar;
          return h("div", {
            "class": ["el-scrollbar__bar", "is-" + bar.key],
            on: {
              "mousedown": this.clickTrackHandler
            }
          }, [h("div", {
            ref: "thumb",
            "class": "el-scrollbar__thumb",
            on: {
              "mousedown": this.clickThumbHandler
            },
            style: renderThumbStyle({ size: size2, move, bar })
          })]);
        },
        methods: {
          clickThumbHandler: function clickThumbHandler(e) {
            if (e.ctrlKey || e.button === 2) {
              return;
            }
            this.startDrag(e);
            this[this.bar.axis] = e.currentTarget[this.bar.offset] - (e[this.bar.client] - e.currentTarget.getBoundingClientRect()[this.bar.direction]);
          },
          clickTrackHandler: function clickTrackHandler(e) {
            var offset = Math.abs(e.target.getBoundingClientRect()[this.bar.direction] - e[this.bar.client]);
            var thumbHalf = this.$refs.thumb[this.bar.offset] / 2;
            var thumbPositionPercentage = (offset - thumbHalf) * 100 / this.$el[this.bar.offset];
            this.wrap[this.bar.scroll] = thumbPositionPercentage * this.wrap[this.bar.scrollSize] / 100;
          },
          startDrag: function startDrag(e) {
            e.stopImmediatePropagation();
            this.cursorDown = true;
            Object(dom_["on"])(document, "mousemove", this.mouseMoveDocumentHandler);
            Object(dom_["on"])(document, "mouseup", this.mouseUpDocumentHandler);
            document.onselectstart = function() {
              return false;
            };
          },
          mouseMoveDocumentHandler: function mouseMoveDocumentHandler(e) {
            if (this.cursorDown === false)
              return;
            var prevPage2 = this[this.bar.axis];
            if (!prevPage2)
              return;
            var offset = (this.$el.getBoundingClientRect()[this.bar.direction] - e[this.bar.client]) * -1;
            var thumbClickPosition = this.$refs.thumb[this.bar.offset] - prevPage2;
            var thumbPositionPercentage = (offset - thumbClickPosition) * 100 / this.$el[this.bar.offset];
            this.wrap[this.bar.scroll] = thumbPositionPercentage * this.wrap[this.bar.scrollSize] / 100;
          },
          mouseUpDocumentHandler: function mouseUpDocumentHandler(e) {
            this.cursorDown = false;
            this[this.bar.axis] = 0;
            Object(dom_["off"])(document, "mousemove", this.mouseMoveDocumentHandler);
            document.onselectstart = null;
          }
        },
        destroyed: function destroyed17() {
          Object(dom_["off"])(document, "mouseup", this.mouseUpDocumentHandler);
        }
      };
      var scrollbar_src_main = {
        name: "ElScrollbar",
        components: { Bar: src_bar },
        props: {
          native: Boolean,
          wrapStyle: {},
          wrapClass: {},
          viewClass: {},
          viewStyle: {},
          noresize: Boolean,
          tag: {
            type: String,
            default: "div"
          }
        },
        data: function data25() {
          return {
            sizeWidth: "0",
            sizeHeight: "0",
            moveX: 0,
            moveY: 0
          };
        },
        computed: {
          wrap: function wrap2() {
            return this.$refs.wrap;
          }
        },
        render: function render37(h) {
          var gutter = scrollbar_width_default()();
          var style2 = this.wrapStyle;
          if (gutter) {
            var gutterWith = "-" + gutter + "px";
            var gutterStyle = "margin-bottom: " + gutterWith + "; margin-right: " + gutterWith + ";";
            if (Array.isArray(this.wrapStyle)) {
              style2 = Object(util_["toObject"])(this.wrapStyle);
              style2.marginRight = style2.marginBottom = gutterWith;
            } else if (typeof this.wrapStyle === "string") {
              style2 += gutterStyle;
            } else {
              style2 = gutterStyle;
            }
          }
          var view = h(this.tag, {
            class: ["el-scrollbar__view", this.viewClass],
            style: this.viewStyle,
            ref: "resize"
          }, this.$slots.default);
          var wrap2 = h("div", {
            ref: "wrap",
            style: style2,
            on: {
              "scroll": this.handleScroll
            },
            "class": [this.wrapClass, "el-scrollbar__wrap", gutter ? "" : "el-scrollbar__wrap--hidden-default"]
          }, [[view]]);
          var nodes = void 0;
          if (!this.native) {
            nodes = [wrap2, h(src_bar, {
              attrs: {
                move: this.moveX,
                size: this.sizeWidth
              }
            }), h(src_bar, {
              attrs: {
                vertical: true,
                move: this.moveY,
                size: this.sizeHeight
              }
            })];
          } else {
            nodes = [h("div", {
              ref: "wrap",
              "class": [this.wrapClass, "el-scrollbar__wrap"],
              style: style2
            }, [[view]])];
          }
          return h("div", { class: "el-scrollbar" }, nodes);
        },
        methods: {
          handleScroll: function handleScroll() {
            var wrap2 = this.wrap;
            this.moveY = wrap2.scrollTop * 100 / wrap2.clientHeight;
            this.moveX = wrap2.scrollLeft * 100 / wrap2.clientWidth;
          },
          update: function update5() {
            var heightPercentage = void 0, widthPercentage = void 0;
            var wrap2 = this.wrap;
            if (!wrap2)
              return;
            heightPercentage = wrap2.clientHeight * 100 / wrap2.scrollHeight;
            widthPercentage = wrap2.clientWidth * 100 / wrap2.scrollWidth;
            this.sizeHeight = heightPercentage < 100 ? heightPercentage + "%" : "";
            this.sizeWidth = widthPercentage < 100 ? widthPercentage + "%" : "";
          }
        },
        mounted: function mounted18() {
          if (this.native)
            return;
          this.$nextTick(this.update);
          !this.noresize && Object(resize_event_["addResizeListener"])(this.$refs.resize, this.update);
        },
        beforeDestroy: function beforeDestroy13() {
          if (this.native)
            return;
          !this.noresize && Object(resize_event_["removeResizeListener"])(this.$refs.resize, this.update);
        }
      };
      scrollbar_src_main.install = function(Vue2) {
        Vue2.component(scrollbar_src_main.name, scrollbar_src_main);
      };
      var scrollbar2 = scrollbar_src_main;
      var itemvue_type_template_id_1801ae19_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", {
          directives: [
            {
              name: "show",
              rawName: "v-show",
              value: _vm.ready,
              expression: "ready"
            }
          ],
          staticClass: "el-carousel__item",
          class: {
            "is-active": _vm.active,
            "el-carousel__item--card": _vm.$parent.type === "card",
            "is-in-stage": _vm.inStage,
            "is-hover": _vm.hover,
            "is-animating": _vm.animating
          },
          style: _vm.itemStyle,
          on: { click: _vm.handleItemClick }
        }, [
          _vm.$parent.type === "card" ? _c("div", {
            directives: [
              {
                name: "show",
                rawName: "v-show",
                value: !_vm.active,
                expression: "!active"
              }
            ],
            staticClass: "el-carousel__mask"
          }) : _vm._e(),
          _vm._t("default")
        ], 2);
      };
      var itemvue_type_template_id_1801ae19_staticRenderFns = [];
      itemvue_type_template_id_1801ae19_render._withStripped = true;
      var CARD_SCALE = 0.83;
      var itemvue_type_script_lang_js_ = {
        name: "ElCarouselItem",
        props: {
          name: String,
          label: {
            type: [String, Number],
            default: ""
          }
        },
        data: function data25() {
          return {
            hover: false,
            translate: 0,
            scale: 1,
            active: false,
            ready: false,
            inStage: false,
            animating: false
          };
        },
        methods: {
          processIndex: function processIndex(index2, activeIndex, length) {
            if (activeIndex === 0 && index2 === length - 1) {
              return -1;
            } else if (activeIndex === length - 1 && index2 === 0) {
              return length;
            } else if (index2 < activeIndex - 1 && activeIndex - index2 >= length / 2) {
              return length + 1;
            } else if (index2 > activeIndex + 1 && index2 - activeIndex >= length / 2) {
              return -2;
            }
            return index2;
          },
          calcCardTranslate: function calcCardTranslate(index2, activeIndex) {
            var parentWidth = this.$parent.$el.offsetWidth;
            if (this.inStage) {
              return parentWidth * ((2 - CARD_SCALE) * (index2 - activeIndex) + 1) / 4;
            } else if (index2 < activeIndex) {
              return -(1 + CARD_SCALE) * parentWidth / 4;
            } else {
              return (3 + CARD_SCALE) * parentWidth / 4;
            }
          },
          calcTranslate: function calcTranslate(index2, activeIndex, isVertical) {
            var distance = this.$parent.$el[isVertical ? "offsetHeight" : "offsetWidth"];
            return distance * (index2 - activeIndex);
          },
          translateItem: function translateItem(index2, activeIndex, oldIndex) {
            var parentType = this.$parent.type;
            var parentDirection = this.parentDirection;
            var length = this.$parent.items.length;
            if (parentType !== "card" && oldIndex !== void 0) {
              this.animating = index2 === activeIndex || index2 === oldIndex;
            }
            if (index2 !== activeIndex && length > 2 && this.$parent.loop) {
              index2 = this.processIndex(index2, activeIndex, length);
            }
            if (parentType === "card") {
              if (parentDirection === "vertical") {
                console.warn("[Element Warn][Carousel]vertical direction is not supported in card mode");
              }
              this.inStage = Math.round(Math.abs(index2 - activeIndex)) <= 1;
              this.active = index2 === activeIndex;
              this.translate = this.calcCardTranslate(index2, activeIndex);
              this.scale = this.active ? 1 : CARD_SCALE;
            } else {
              this.active = index2 === activeIndex;
              var isVertical = parentDirection === "vertical";
              this.translate = this.calcTranslate(index2, activeIndex, isVertical);
              this.scale = 1;
            }
            this.ready = true;
          },
          handleItemClick: function handleItemClick() {
            var parent2 = this.$parent;
            if (parent2 && parent2.type === "card") {
              var index2 = parent2.items.indexOf(this);
              parent2.setActiveItem(index2);
            }
          }
        },
        computed: {
          parentDirection: function parentDirection() {
            return this.$parent.direction;
          },
          itemStyle: function itemStyle() {
            var translateType = this.parentDirection === "vertical" ? "translateY" : "translateX";
            var value6 = translateType + "(" + this.translate + "px) scale(" + this.scale + ")";
            var style2 = {
              transform: value6
            };
            return Object(util_["autoprefixer"])(style2);
          }
        },
        created: function created20() {
          this.$parent && this.$parent.updateItems();
        },
        destroyed: function destroyed17() {
          this.$parent && this.$parent.updateItems();
        }
      };
      var src_itemvue_type_script_lang_js_ = itemvue_type_script_lang_js_;
      var item_component = normalizeComponent(src_itemvue_type_script_lang_js_, itemvue_type_template_id_1801ae19_render, itemvue_type_template_id_1801ae19_staticRenderFns, false, null, null, null);
      item_component.options.__file = "packages/carousel/src/item.vue";
      var src_item = item_component.exports;
      src_item.install = function(Vue2) {
        Vue2.component(src_item.name, src_item);
      };
      var carousel_item = src_item;
      var collapsevue_type_template_id_461d57f4_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", {
          staticClass: "el-collapse",
          attrs: { role: "tablist", "aria-multiselectable": "true" }
        }, [_vm._t("default")], 2);
      };
      var collapsevue_type_template_id_461d57f4_staticRenderFns = [];
      collapsevue_type_template_id_461d57f4_render._withStripped = true;
      var collapsevue_type_script_lang_js_ = {
        name: "ElCollapse",
        componentName: "ElCollapse",
        props: {
          accordion: Boolean,
          value: {
            type: [Array, String, Number],
            default: function _default116() {
              return [];
            }
          }
        },
        data: function data25() {
          return {
            activeNames: [].concat(this.value)
          };
        },
        provide: function provide11() {
          return {
            collapse: this
          };
        },
        watch: {
          value: function value6(_value) {
            this.activeNames = [].concat(_value);
          }
        },
        methods: {
          setActiveNames: function setActiveNames(activeNames) {
            activeNames = [].concat(activeNames);
            var value6 = this.accordion ? activeNames[0] : activeNames;
            this.activeNames = activeNames;
            this.$emit("input", value6);
            this.$emit("change", value6);
          },
          handleItemClick: function handleItemClick(item) {
            if (this.accordion) {
              this.setActiveNames((this.activeNames[0] || this.activeNames[0] === 0) && this.activeNames[0] === item.name ? "" : item.name);
            } else {
              var activeNames = this.activeNames.slice(0);
              var index2 = activeNames.indexOf(item.name);
              if (index2 > -1) {
                activeNames.splice(index2, 1);
              } else {
                activeNames.push(item.name);
              }
              this.setActiveNames(activeNames);
            }
          }
        },
        created: function created20() {
          this.$on("item-click", this.handleItemClick);
        }
      };
      var src_collapsevue_type_script_lang_js_ = collapsevue_type_script_lang_js_;
      var collapse_component = normalizeComponent(src_collapsevue_type_script_lang_js_, collapsevue_type_template_id_461d57f4_render, collapsevue_type_template_id_461d57f4_staticRenderFns, false, null, null, null);
      collapse_component.options.__file = "packages/collapse/src/collapse.vue";
      var collapse = collapse_component.exports;
      collapse.install = function(Vue2) {
        Vue2.component(collapse.name, collapse);
      };
      var packages_collapse = collapse;
      var collapse_itemvue_type_template_id_2d05faac_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", {
          staticClass: "el-collapse-item",
          class: { "is-active": _vm.isActive, "is-disabled": _vm.disabled }
        }, [
          _c("div", {
            attrs: {
              role: "tab",
              "aria-expanded": _vm.isActive,
              "aria-controls": "el-collapse-content-" + _vm.id,
              "aria-describedby": "el-collapse-content-" + _vm.id
            }
          }, [
            _c("div", {
              staticClass: "el-collapse-item__header",
              class: {
                focusing: _vm.focusing,
                "is-active": _vm.isActive
              },
              attrs: {
                role: "button",
                id: "el-collapse-head-" + _vm.id,
                tabindex: _vm.disabled ? void 0 : 0
              },
              on: {
                click: _vm.handleHeaderClick,
                keyup: function($event) {
                  if (!("button" in $event) && _vm._k($event.keyCode, "space", 32, $event.key, [
                    " ",
                    "Spacebar"
                  ]) && _vm._k($event.keyCode, "enter", 13, $event.key, "Enter")) {
                    return null;
                  }
                  $event.stopPropagation();
                  return _vm.handleEnterClick($event);
                },
                focus: _vm.handleFocus,
                blur: function($event) {
                  _vm.focusing = false;
                }
              }
            }, [
              _vm._t("title", [_vm._v(_vm._s(_vm.title))]),
              _c("i", {
                staticClass: "el-collapse-item__arrow el-icon-arrow-right",
                class: { "is-active": _vm.isActive }
              })
            ], 2)
          ]),
          _c("el-collapse-transition", [
            _c("div", {
              directives: [
                {
                  name: "show",
                  rawName: "v-show",
                  value: _vm.isActive,
                  expression: "isActive"
                }
              ],
              staticClass: "el-collapse-item__wrap",
              attrs: {
                role: "tabpanel",
                "aria-hidden": !_vm.isActive,
                "aria-labelledby": "el-collapse-head-" + _vm.id,
                id: "el-collapse-content-" + _vm.id
              }
            }, [
              _c("div", { staticClass: "el-collapse-item__content" }, [_vm._t("default")], 2)
            ])
          ])
        ], 1);
      };
      var collapse_itemvue_type_template_id_2d05faac_staticRenderFns = [];
      collapse_itemvue_type_template_id_2d05faac_render._withStripped = true;
      var collapse_itemvue_type_script_lang_js_ = {
        name: "ElCollapseItem",
        componentName: "ElCollapseItem",
        mixins: [emitter_default.a],
        components: { ElCollapseTransition: collapse_transition_default.a },
        data: function data25() {
          return {
            contentWrapStyle: {
              height: "auto",
              display: "block"
            },
            contentHeight: 0,
            focusing: false,
            isClick: false,
            id: Object(util_["generateId"])()
          };
        },
        inject: ["collapse"],
        props: {
          title: String,
          name: {
            type: [String, Number],
            default: function _default116() {
              return this._uid;
            }
          },
          disabled: Boolean
        },
        computed: {
          isActive: function isActive() {
            return this.collapse.activeNames.indexOf(this.name) > -1;
          }
        },
        methods: {
          handleFocus: function handleFocus3() {
            var _this = this;
            setTimeout(function() {
              if (!_this.isClick) {
                _this.focusing = true;
              } else {
                _this.isClick = false;
              }
            }, 50);
          },
          handleHeaderClick: function handleHeaderClick() {
            if (this.disabled)
              return;
            this.dispatch("ElCollapse", "item-click", this);
            this.focusing = false;
            this.isClick = true;
          },
          handleEnterClick: function handleEnterClick() {
            this.dispatch("ElCollapse", "item-click", this);
          }
        }
      };
      var src_collapse_itemvue_type_script_lang_js_ = collapse_itemvue_type_script_lang_js_;
      var collapse_item_component = normalizeComponent(src_collapse_itemvue_type_script_lang_js_, collapse_itemvue_type_template_id_2d05faac_render, collapse_itemvue_type_template_id_2d05faac_staticRenderFns, false, null, null, null);
      collapse_item_component.options.__file = "packages/collapse/src/collapse-item.vue";
      var collapse_item = collapse_item_component.exports;
      collapse_item.install = function(Vue2) {
        Vue2.component(collapse_item.name, collapse_item);
      };
      var packages_collapse_item = collapse_item;
      var cascadervue_type_template_id_032537a6_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", {
          directives: [
            {
              name: "clickoutside",
              rawName: "v-clickoutside",
              value: function() {
                return _vm.toggleDropDownVisible(false);
              },
              expression: "() => toggleDropDownVisible(false)"
            }
          ],
          ref: "reference",
          class: [
            "el-cascader",
            _vm.realSize && "el-cascader--" + _vm.realSize,
            { "is-disabled": _vm.isDisabled }
          ],
          on: {
            mouseenter: function($event) {
              _vm.inputHover = true;
            },
            mouseleave: function($event) {
              _vm.inputHover = false;
            },
            click: function() {
              return _vm.toggleDropDownVisible(_vm.readonly ? void 0 : true);
            },
            keydown: _vm.handleKeyDown
          }
        }, [
          _c("el-input", {
            ref: "input",
            class: { "is-focus": _vm.dropDownVisible },
            attrs: {
              size: _vm.realSize,
              placeholder: _vm.placeholder,
              readonly: _vm.readonly,
              disabled: _vm.isDisabled,
              "validate-event": false
            },
            on: {
              focus: _vm.handleFocus,
              blur: _vm.handleBlur,
              input: _vm.handleInput
            },
            model: {
              value: _vm.multiple ? _vm.presentText : _vm.inputValue,
              callback: function($$v) {
                _vm.multiple ? _vm.presentText : _vm.inputValue = $$v;
              },
              expression: "multiple ? presentText : inputValue"
            }
          }, [
            _c("template", { slot: "suffix" }, [
              _vm.clearBtnVisible ? _c("i", {
                key: "clear",
                staticClass: "el-input__icon el-icon-circle-close",
                on: {
                  click: function($event) {
                    $event.stopPropagation();
                    return _vm.handleClear($event);
                  }
                }
              }) : _c("i", {
                key: "arrow-down",
                class: [
                  "el-input__icon",
                  "el-icon-arrow-down",
                  _vm.dropDownVisible && "is-reverse"
                ],
                on: {
                  click: function($event) {
                    $event.stopPropagation();
                    _vm.toggleDropDownVisible();
                  }
                }
              })
            ])
          ], 2),
          _vm.multiple ? _c("div", { staticClass: "el-cascader__tags" }, [
            _vm._l(_vm.presentTags, function(tag2) {
              return _c("el-tag", {
                key: tag2.key,
                attrs: {
                  type: "info",
                  size: _vm.tagSize,
                  hit: tag2.hitState,
                  closable: tag2.closable,
                  "disable-transitions": ""
                },
                on: {
                  close: function($event) {
                    _vm.deleteTag(tag2);
                  }
                }
              }, [_c("span", [_vm._v(_vm._s(tag2.text))])]);
            }),
            _vm.filterable && !_vm.isDisabled ? _c("input", {
              directives: [
                {
                  name: "model",
                  rawName: "v-model.trim",
                  value: _vm.inputValue,
                  expression: "inputValue",
                  modifiers: { trim: true }
                }
              ],
              staticClass: "el-cascader__search-input",
              attrs: {
                type: "text",
                placeholder: _vm.presentTags.length ? "" : _vm.placeholder
              },
              domProps: { value: _vm.inputValue },
              on: {
                input: [
                  function($event) {
                    if ($event.target.composing) {
                      return;
                    }
                    _vm.inputValue = $event.target.value.trim();
                  },
                  function(e) {
                    return _vm.handleInput(_vm.inputValue, e);
                  }
                ],
                click: function($event) {
                  $event.stopPropagation();
                  _vm.toggleDropDownVisible(true);
                },
                keydown: function($event) {
                  if (!("button" in $event) && _vm._k($event.keyCode, "delete", [8, 46], $event.key, ["Backspace", "Delete", "Del"])) {
                    return null;
                  }
                  return _vm.handleDelete($event);
                },
                blur: function($event) {
                  _vm.$forceUpdate();
                }
              }
            }) : _vm._e()
          ], 2) : _vm._e(),
          _c("transition", {
            attrs: { name: "el-zoom-in-top" },
            on: { "after-leave": _vm.handleDropdownLeave }
          }, [
            _c("div", {
              directives: [
                {
                  name: "show",
                  rawName: "v-show",
                  value: _vm.dropDownVisible,
                  expression: "dropDownVisible"
                }
              ],
              ref: "popper",
              class: ["el-popper", "el-cascader__dropdown", _vm.popperClass]
            }, [
              _c("el-cascader-panel", {
                directives: [
                  {
                    name: "show",
                    rawName: "v-show",
                    value: !_vm.filtering,
                    expression: "!filtering"
                  }
                ],
                ref: "panel",
                attrs: {
                  options: _vm.options,
                  props: _vm.config,
                  border: false,
                  "render-label": _vm.$scopedSlots.default
                },
                on: {
                  "expand-change": _vm.handleExpandChange,
                  close: function($event) {
                    _vm.toggleDropDownVisible(false);
                  }
                },
                model: {
                  value: _vm.checkedValue,
                  callback: function($$v) {
                    _vm.checkedValue = $$v;
                  },
                  expression: "checkedValue"
                }
              }),
              _vm.filterable ? _c("el-scrollbar", {
                directives: [
                  {
                    name: "show",
                    rawName: "v-show",
                    value: _vm.filtering,
                    expression: "filtering"
                  }
                ],
                ref: "suggestionPanel",
                staticClass: "el-cascader__suggestion-panel",
                attrs: {
                  tag: "ul",
                  "view-class": "el-cascader__suggestion-list"
                },
                nativeOn: {
                  keydown: function($event) {
                    return _vm.handleSuggestionKeyDown($event);
                  }
                }
              }, [
                _vm.suggestions.length ? _vm._l(_vm.suggestions, function(item, index2) {
                  return _c("li", {
                    key: item.uid,
                    class: [
                      "el-cascader__suggestion-item",
                      item.checked && "is-checked"
                    ],
                    attrs: { tabindex: -1 },
                    on: {
                      click: function($event) {
                        _vm.handleSuggestionClick(index2);
                      }
                    }
                  }, [
                    _c("span", [_vm._v(_vm._s(item.text))]),
                    item.checked ? _c("i", { staticClass: "el-icon-check" }) : _vm._e()
                  ]);
                }) : _vm._t("empty", [
                  _c("li", { staticClass: "el-cascader__empty-text" }, [_vm._v(_vm._s(_vm.t("el.cascader.noMatch")))])
                ])
              ], 2) : _vm._e()
            ], 1)
          ])
        ], 1);
      };
      var cascadervue_type_template_id_032537a6_staticRenderFns = [];
      cascadervue_type_template_id_032537a6_render._withStripped = true;
      var cascader_panel_ = __webpack_require__(42);
      var cascader_panel_default = /* @__PURE__ */ __webpack_require__.n(cascader_panel_);
      var aria_utils_ = __webpack_require__(34);
      var aria_utils_default = /* @__PURE__ */ __webpack_require__.n(aria_utils_);
      var KeyCode = aria_utils_default.a.keys;
      var MigratingProps = {
        expandTrigger: {
          newProp: "expandTrigger",
          type: String
        },
        changeOnSelect: {
          newProp: "checkStrictly",
          type: Boolean
        },
        hoverThreshold: {
          newProp: "hoverThreshold",
          type: Number
        }
      };
      var PopperMixin = {
        props: {
          placement: {
            type: String,
            default: "bottom-start"
          },
          appendToBody: vue_popper_default.a.props.appendToBody,
          visibleArrow: {
            type: Boolean,
            default: true
          },
          arrowOffset: vue_popper_default.a.props.arrowOffset,
          offset: vue_popper_default.a.props.offset,
          boundariesPadding: vue_popper_default.a.props.boundariesPadding,
          popperOptions: vue_popper_default.a.props.popperOptions
        },
        methods: vue_popper_default.a.methods,
        data: vue_popper_default.a.data,
        beforeDestroy: vue_popper_default.a.beforeDestroy
      };
      var InputSizeMap = {
        medium: 36,
        small: 32,
        mini: 28
      };
      var cascadervue_type_script_lang_js_ = {
        name: "ElCascader",
        directives: { Clickoutside: clickoutside_default.a },
        mixins: [PopperMixin, emitter_default.a, locale_default.a, migrating_default.a],
        inject: {
          elForm: {
            default: ""
          },
          elFormItem: {
            default: ""
          }
        },
        components: {
          ElInput: input_default.a,
          ElTag: tag_default.a,
          ElScrollbar: scrollbar_default.a,
          ElCascaderPanel: cascader_panel_default.a
        },
        props: {
          value: {},
          options: Array,
          props: Object,
          size: String,
          placeholder: {
            type: String,
            default: function _default116() {
              return Object(lib_locale_["t"])("el.cascader.placeholder");
            }
          },
          disabled: Boolean,
          clearable: Boolean,
          filterable: Boolean,
          filterMethod: Function,
          separator: {
            type: String,
            default: " / "
          },
          showAllLevels: {
            type: Boolean,
            default: true
          },
          collapseTags: Boolean,
          debounce: {
            type: Number,
            default: 300
          },
          beforeFilter: {
            type: Function,
            default: function _default116() {
              return function() {
              };
            }
          },
          popperClass: String
        },
        data: function data25() {
          return {
            dropDownVisible: false,
            checkedValue: this.value,
            inputHover: false,
            inputValue: null,
            presentText: null,
            presentTags: [],
            checkedNodes: [],
            filtering: false,
            suggestions: [],
            inputInitialHeight: 0,
            pressDeleteCount: 0
          };
        },
        computed: {
          realSize: function realSize() {
            var _elFormItemSize = (this.elFormItem || {}).elFormItemSize;
            return this.size || _elFormItemSize || (this.$ELEMENT || {}).size;
          },
          tagSize: function tagSize() {
            return ["small", "mini"].indexOf(this.realSize) > -1 ? "mini" : "small";
          },
          isDisabled: function isDisabled4() {
            return this.disabled || (this.elForm || {}).disabled;
          },
          config: function config2() {
            var config3 = this.props || {};
            var $attrs = this.$attrs;
            Object.keys(MigratingProps).forEach(function(oldProp) {
              var _MigratingProps$oldPr = MigratingProps[oldProp], newProp = _MigratingProps$oldPr.newProp, type3 = _MigratingProps$oldPr.type;
              var oldValue = $attrs[oldProp] || $attrs[Object(util_["kebabCase"])(oldProp)];
              if (Object(shared_["isDef"])(oldProp) && !Object(shared_["isDef"])(config3[newProp])) {
                if (type3 === Boolean && oldValue === "") {
                  oldValue = true;
                }
                config3[newProp] = oldValue;
              }
            });
            return config3;
          },
          multiple: function multiple() {
            return this.config.multiple;
          },
          leafOnly: function leafOnly() {
            return !this.config.checkStrictly;
          },
          readonly: function readonly() {
            return !this.filterable || this.multiple;
          },
          clearBtnVisible: function clearBtnVisible() {
            if (!this.clearable || this.isDisabled || this.filtering || !this.inputHover) {
              return false;
            }
            return this.multiple ? !!this.checkedNodes.filter(function(node) {
              return !node.isDisabled;
            }).length : !!this.presentText;
          },
          panel: function panel2() {
            return this.$refs.panel;
          }
        },
        watch: {
          disabled: function disabled() {
            this.computePresentContent();
          },
          value: function value6(val) {
            if (!Object(util_["isEqual"])(val, this.checkedValue)) {
              this.checkedValue = val;
              this.computePresentContent();
            }
          },
          checkedValue: function checkedValue(val) {
            var value6 = this.value, dropDownVisible = this.dropDownVisible;
            var _config = this.config, checkStrictly = _config.checkStrictly, multiple = _config.multiple;
            if (!Object(util_["isEqual"])(val, value6) || Object(types_["isUndefined"])(value6)) {
              this.computePresentContent();
              if (!multiple && !checkStrictly && dropDownVisible) {
                this.toggleDropDownVisible(false);
              }
              this.$emit("input", val);
              this.$emit("change", val);
              this.dispatch("ElFormItem", "el.form.change", [val]);
            }
          },
          options: {
            handler: function handler2() {
              this.$nextTick(this.computePresentContent);
            },
            deep: true
          },
          presentText: function presentText(val) {
            this.inputValue = val;
          },
          presentTags: function presentTags(val, oldVal) {
            if (this.multiple && (val.length || oldVal.length)) {
              this.$nextTick(this.updateStyle);
            }
          },
          filtering: function filtering(val) {
            this.$nextTick(this.updatePopper);
          }
        },
        mounted: function mounted18() {
          var _this = this;
          var input2 = this.$refs.input;
          if (input2 && input2.$el) {
            this.inputInitialHeight = input2.$el.offsetHeight || InputSizeMap[this.realSize] || 40;
          }
          if (!this.isEmptyValue(this.value)) {
            this.computePresentContent();
          }
          this.filterHandler = debounce_default()(this.debounce, function() {
            var inputValue = _this.inputValue;
            if (!inputValue) {
              _this.filtering = false;
              return;
            }
            var before2 = _this.beforeFilter(inputValue);
            if (before2 && before2.then) {
              before2.then(_this.getSuggestions);
            } else if (before2 !== false) {
              _this.getSuggestions();
            } else {
              _this.filtering = false;
            }
          });
          Object(resize_event_["addResizeListener"])(this.$el, this.updateStyle);
        },
        beforeDestroy: function beforeDestroy13() {
          Object(resize_event_["removeResizeListener"])(this.$el, this.updateStyle);
        },
        methods: {
          getMigratingConfig: function getMigratingConfig2() {
            return {
              props: {
                "expand-trigger": "expand-trigger is removed, use `props.expandTrigger` instead.",
                "change-on-select": "change-on-select is removed, use `props.checkStrictly` instead.",
                "hover-threshold": "hover-threshold is removed, use `props.hoverThreshold` instead"
              },
              events: {
                "active-item-change": "active-item-change is renamed to expand-change"
              }
            };
          },
          toggleDropDownVisible: function toggleDropDownVisible(visible2) {
            var _this2 = this;
            if (this.isDisabled)
              return;
            var dropDownVisible = this.dropDownVisible;
            var input2 = this.$refs.input;
            visible2 = Object(shared_["isDef"])(visible2) ? visible2 : !dropDownVisible;
            if (visible2 !== dropDownVisible) {
              this.dropDownVisible = visible2;
              if (visible2) {
                this.$nextTick(function() {
                  _this2.updatePopper();
                  _this2.panel.scrollIntoView();
                });
              }
              input2.$refs.input.setAttribute("aria-expanded", visible2);
              this.$emit("visible-change", visible2);
            }
          },
          handleDropdownLeave: function handleDropdownLeave() {
            this.filtering = false;
            this.inputValue = this.presentText;
            this.doDestroy();
          },
          handleKeyDown: function handleKeyDown(event2) {
            switch (event2.keyCode) {
              case KeyCode.enter:
                this.toggleDropDownVisible();
                break;
              case KeyCode.down:
                this.toggleDropDownVisible(true);
                this.focusFirstNode();
                event2.preventDefault();
                break;
              case KeyCode.esc:
              case KeyCode.tab:
                this.toggleDropDownVisible(false);
                break;
            }
          },
          handleFocus: function handleFocus3(e) {
            this.$emit("focus", e);
          },
          handleBlur: function handleBlur(e) {
            this.$emit("blur", e);
          },
          handleInput: function handleInput(val, event2) {
            !this.dropDownVisible && this.toggleDropDownVisible(true);
            if (event2 && event2.isComposing)
              return;
            if (val) {
              this.filterHandler();
            } else {
              this.filtering = false;
            }
          },
          handleClear: function handleClear() {
            this.presentText = "";
            this.panel.clearCheckedNodes();
          },
          handleExpandChange: function handleExpandChange(value6) {
            this.$nextTick(this.updatePopper.bind(this));
            this.$emit("expand-change", value6);
            this.$emit("active-item-change", value6);
          },
          focusFirstNode: function focusFirstNode() {
            var _this3 = this;
            this.$nextTick(function() {
              var filtering = _this3.filtering;
              var _$refs = _this3.$refs, popper2 = _$refs.popper, suggestionPanel = _$refs.suggestionPanel;
              var firstNode = null;
              if (filtering && suggestionPanel) {
                firstNode = suggestionPanel.$el.querySelector(".el-cascader__suggestion-item");
              } else {
                var firstMenu = popper2.querySelector(".el-cascader-menu");
                firstNode = firstMenu.querySelector('.el-cascader-node[tabindex="-1"]');
              }
              if (firstNode) {
                firstNode.focus();
                !filtering && firstNode.click();
              }
            });
          },
          computePresentContent: function computePresentContent() {
            var _this4 = this;
            this.$nextTick(function() {
              if (_this4.config.multiple) {
                _this4.computePresentTags();
                _this4.presentText = _this4.presentTags.length ? " " : null;
              } else {
                _this4.computePresentText();
              }
            });
          },
          isEmptyValue: function isEmptyValue2(val) {
            var multiple = this.multiple;
            var emitPath = this.panel.config.emitPath;
            if (multiple || emitPath) {
              return Object(util_["isEmpty"])(val);
            }
            return false;
          },
          computePresentText: function computePresentText() {
            var checkedValue = this.checkedValue, config2 = this.config;
            if (!this.isEmptyValue(checkedValue)) {
              var node = this.panel.getNodeByValue(checkedValue);
              if (node && (config2.checkStrictly || node.isLeaf)) {
                this.presentText = node.getText(this.showAllLevels, this.separator);
                return;
              }
            }
            this.presentText = null;
          },
          computePresentTags: function computePresentTags() {
            var isDisabled4 = this.isDisabled, leafOnly = this.leafOnly, showAllLevels = this.showAllLevels, separator = this.separator, collapseTags = this.collapseTags;
            var checkedNodes = this.getCheckedNodes(leafOnly);
            var tags = [];
            var genTag2 = function genTag3(node) {
              return {
                node,
                key: node.uid,
                text: node.getText(showAllLevels, separator),
                hitState: false,
                closable: !isDisabled4 && !node.isDisabled
              };
            };
            if (checkedNodes.length) {
              var first2 = checkedNodes[0], rest = checkedNodes.slice(1);
              var restCount = rest.length;
              tags.push(genTag2(first2));
              if (restCount) {
                if (collapseTags) {
                  tags.push({
                    key: -1,
                    text: "+ " + restCount,
                    closable: false
                  });
                } else {
                  rest.forEach(function(node) {
                    return tags.push(genTag2(node));
                  });
                }
              }
            }
            this.checkedNodes = checkedNodes;
            this.presentTags = tags;
          },
          getSuggestions: function getSuggestions() {
            var _this5 = this;
            var filterMethod = this.filterMethod;
            if (!Object(types_["isFunction"])(filterMethod)) {
              filterMethod = function filterMethod2(node, keyword) {
                return node.text.includes(keyword);
              };
            }
            var suggestions = this.panel.getFlattedNodes(this.leafOnly).filter(function(node) {
              if (node.isDisabled)
                return false;
              node.text = node.getText(_this5.showAllLevels, _this5.separator) || "";
              return filterMethod(node, _this5.inputValue);
            });
            if (this.multiple) {
              this.presentTags.forEach(function(tag2) {
                tag2.hitState = false;
              });
            } else {
              suggestions.forEach(function(node) {
                node.checked = Object(util_["isEqual"])(_this5.checkedValue, node.getValueByOption());
              });
            }
            this.filtering = true;
            this.suggestions = suggestions;
            this.$nextTick(this.updatePopper);
          },
          handleSuggestionKeyDown: function handleSuggestionKeyDown(event2) {
            var keyCode2 = event2.keyCode, target2 = event2.target;
            switch (keyCode2) {
              case KeyCode.enter:
                target2.click();
                break;
              case KeyCode.up:
                var prev = target2.previousElementSibling;
                prev && prev.focus();
                break;
              case KeyCode.down:
                var next = target2.nextElementSibling;
                next && next.focus();
                break;
              case KeyCode.esc:
              case KeyCode.tab:
                this.toggleDropDownVisible(false);
                break;
            }
          },
          handleDelete: function handleDelete() {
            var inputValue = this.inputValue, pressDeleteCount = this.pressDeleteCount, presentTags = this.presentTags;
            var lastIndex = presentTags.length - 1;
            var lastTag = presentTags[lastIndex];
            this.pressDeleteCount = inputValue ? 0 : pressDeleteCount + 1;
            if (!lastTag)
              return;
            if (this.pressDeleteCount) {
              if (lastTag.hitState) {
                this.deleteTag(lastTag);
              } else {
                lastTag.hitState = true;
              }
            }
          },
          handleSuggestionClick: function handleSuggestionClick(index2) {
            var multiple = this.multiple;
            var targetNode = this.suggestions[index2];
            if (multiple) {
              var checked = targetNode.checked;
              targetNode.doCheck(!checked);
              this.panel.calculateMultiCheckedValue();
            } else {
              this.checkedValue = targetNode.getValueByOption();
              this.toggleDropDownVisible(false);
            }
          },
          deleteTag: function deleteTag(tag2) {
            var checkedValue = this.checkedValue;
            var current = tag2.node.getValueByOption();
            var val = checkedValue.find(function(n) {
              return Object(util_["isEqual"])(n, current);
            });
            this.checkedValue = checkedValue.filter(function(n) {
              return !Object(util_["isEqual"])(n, current);
            });
            this.$emit("remove-tag", val);
          },
          updateStyle: function updateStyle5() {
            var $el = this.$el, inputInitialHeight = this.inputInitialHeight;
            if (this.$isServer || !$el)
              return;
            var suggestionPanel = this.$refs.suggestionPanel;
            var inputInner = $el.querySelector(".el-input__inner");
            if (!inputInner)
              return;
            var tags = $el.querySelector(".el-cascader__tags");
            var suggestionPanelEl = null;
            if (suggestionPanel && (suggestionPanelEl = suggestionPanel.$el)) {
              var suggestionList = suggestionPanelEl.querySelector(".el-cascader__suggestion-list");
              suggestionList.style.minWidth = inputInner.offsetWidth + "px";
            }
            if (tags) {
              var offsetHeight = Math.round(tags.getBoundingClientRect().height);
              var height3 = Math.max(offsetHeight + 6, inputInitialHeight) + "px";
              inputInner.style.height = height3;
              if (this.dropDownVisible) {
                this.updatePopper();
              }
            }
          },
          getCheckedNodes: function getCheckedNodes(leafOnly) {
            return this.panel.getCheckedNodes(leafOnly);
          }
        }
      };
      var src_cascadervue_type_script_lang_js_ = cascadervue_type_script_lang_js_;
      var cascader_component = normalizeComponent(src_cascadervue_type_script_lang_js_, cascadervue_type_template_id_032537a6_render, cascadervue_type_template_id_032537a6_staticRenderFns, false, null, null, null);
      cascader_component.options.__file = "packages/cascader/src/cascader.vue";
      var cascader = cascader_component.exports;
      cascader.install = function(Vue2) {
        Vue2.component(cascader.name, cascader);
      };
      var packages_cascader = cascader;
      var mainvue_type_template_id_55c8ade7_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", {
          directives: [
            {
              name: "clickoutside",
              rawName: "v-clickoutside",
              value: _vm.hide,
              expression: "hide"
            }
          ],
          class: [
            "el-color-picker",
            _vm.colorDisabled ? "is-disabled" : "",
            _vm.colorSize ? "el-color-picker--" + _vm.colorSize : ""
          ]
        }, [
          _vm.colorDisabled ? _c("div", { staticClass: "el-color-picker__mask" }) : _vm._e(),
          _c("div", {
            staticClass: "el-color-picker__trigger",
            on: { click: _vm.handleTrigger }
          }, [
            _c("span", {
              staticClass: "el-color-picker__color",
              class: { "is-alpha": _vm.showAlpha }
            }, [
              _c("span", {
                staticClass: "el-color-picker__color-inner",
                style: {
                  backgroundColor: _vm.displayedColor
                }
              }),
              !_vm.value && !_vm.showPanelColor ? _c("span", {
                staticClass: "el-color-picker__empty el-icon-close"
              }) : _vm._e()
            ]),
            _c("span", {
              directives: [
                {
                  name: "show",
                  rawName: "v-show",
                  value: _vm.value || _vm.showPanelColor,
                  expression: "value || showPanelColor"
                }
              ],
              staticClass: "el-color-picker__icon el-icon-arrow-down"
            })
          ]),
          _c("picker-dropdown", {
            ref: "dropdown",
            class: ["el-color-picker__panel", _vm.popperClass || ""],
            attrs: {
              color: _vm.color,
              "show-alpha": _vm.showAlpha,
              predefine: _vm.predefine
            },
            on: { pick: _vm.confirmValue, clear: _vm.clearValue },
            model: {
              value: _vm.showPicker,
              callback: function($$v) {
                _vm.showPicker = $$v;
              },
              expression: "showPicker"
            }
          })
        ], 1);
      };
      var mainvue_type_template_id_55c8ade7_staticRenderFns = [];
      mainvue_type_template_id_55c8ade7_render._withStripped = true;
      var color_typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
        return typeof obj;
      } : function(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
      function color_classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      var hsv2hsl = function hsv2hsl2(hue, sat, val) {
        return [hue, sat * val / ((hue = (2 - sat) * val) < 1 ? hue : 2 - hue) || 0, hue / 2];
      };
      var isOnePointZero = function isOnePointZero2(n) {
        return typeof n === "string" && n.indexOf(".") !== -1 && parseFloat(n) === 1;
      };
      var isPercentage = function isPercentage2(n) {
        return typeof n === "string" && n.indexOf("%") !== -1;
      };
      var bound01 = function bound012(value6, max2) {
        if (isOnePointZero(value6))
          value6 = "100%";
        var processPercent = isPercentage(value6);
        value6 = Math.min(max2, Math.max(0, parseFloat(value6)));
        if (processPercent) {
          value6 = parseInt(value6 * max2, 10) / 100;
        }
        if (Math.abs(value6 - max2) < 1e-6) {
          return 1;
        }
        return value6 % max2 / parseFloat(max2);
      };
      var INT_HEX_MAP = { 10: "A", 11: "B", 12: "C", 13: "D", 14: "E", 15: "F" };
      var toHex = function toHex2(_ref) {
        var r = _ref.r, g = _ref.g, b = _ref.b;
        var hexOne = function hexOne2(value6) {
          value6 = Math.min(Math.round(value6), 255);
          var high = Math.floor(value6 / 16);
          var low = value6 % 16;
          return "" + (INT_HEX_MAP[high] || high) + (INT_HEX_MAP[low] || low);
        };
        if (isNaN(r) || isNaN(g) || isNaN(b))
          return "";
        return "#" + hexOne(r) + hexOne(g) + hexOne(b);
      };
      var HEX_INT_MAP = { A: 10, B: 11, C: 12, D: 13, E: 14, F: 15 };
      var parseHexChannel = function parseHexChannel2(hex2) {
        if (hex2.length === 2) {
          return (HEX_INT_MAP[hex2[0].toUpperCase()] || +hex2[0]) * 16 + (HEX_INT_MAP[hex2[1].toUpperCase()] || +hex2[1]);
        }
        return HEX_INT_MAP[hex2[1].toUpperCase()] || +hex2[1];
      };
      var hsl2hsv = function hsl2hsv2(hue, sat, light) {
        sat = sat / 100;
        light = light / 100;
        var smin = sat;
        var lmin = Math.max(light, 0.01);
        var sv = void 0;
        var v = void 0;
        light *= 2;
        sat *= light <= 1 ? light : 2 - light;
        smin *= lmin <= 1 ? lmin : 2 - lmin;
        v = (light + sat) / 2;
        sv = light === 0 ? 2 * smin / (lmin + smin) : 2 * sat / (light + sat);
        return {
          h: hue,
          s: sv * 100,
          v: v * 100
        };
      };
      var rgb2hsv = function rgb2hsv2(r, g, b) {
        r = bound01(r, 255);
        g = bound01(g, 255);
        b = bound01(b, 255);
        var max2 = Math.max(r, g, b);
        var min2 = Math.min(r, g, b);
        var h = void 0, s = void 0;
        var v = max2;
        var d = max2 - min2;
        s = max2 === 0 ? 0 : d / max2;
        if (max2 === min2) {
          h = 0;
        } else {
          switch (max2) {
            case r:
              h = (g - b) / d + (g < b ? 6 : 0);
              break;
            case g:
              h = (b - r) / d + 2;
              break;
            case b:
              h = (r - g) / d + 4;
              break;
          }
          h /= 6;
        }
        return { h: h * 360, s: s * 100, v: v * 100 };
      };
      var hsv2rgb = function hsv2rgb2(h, s, v) {
        h = bound01(h, 360) * 6;
        s = bound01(s, 100);
        v = bound01(v, 100);
        var i = Math.floor(h);
        var f = h - i;
        var p = v * (1 - s);
        var q = v * (1 - f * s);
        var t4 = v * (1 - (1 - f) * s);
        var mod = i % 6;
        var r = [v, q, p, p, t4, v][mod];
        var g = [t4, v, v, q, p, p][mod];
        var b = [p, p, t4, v, v, q][mod];
        return {
          r: Math.round(r * 255),
          g: Math.round(g * 255),
          b: Math.round(b * 255)
        };
      };
      var Color = function() {
        function Color2(options2) {
          color_classCallCheck(this, Color2);
          this._hue = 0;
          this._saturation = 100;
          this._value = 100;
          this._alpha = 100;
          this.enableAlpha = false;
          this.format = "hex";
          this.value = "";
          options2 = options2 || {};
          for (var option2 in options2) {
            if (options2.hasOwnProperty(option2)) {
              this[option2] = options2[option2];
            }
          }
          this.doOnChange();
        }
        Color2.prototype.set = function set3(prop, value6) {
          if (arguments.length === 1 && (typeof prop === "undefined" ? "undefined" : color_typeof(prop)) === "object") {
            for (var p in prop) {
              if (prop.hasOwnProperty(p)) {
                this.set(p, prop[p]);
              }
            }
            return;
          }
          this["_" + prop] = value6;
          this.doOnChange();
        };
        Color2.prototype.get = function get7(prop) {
          return this["_" + prop];
        };
        Color2.prototype.toRgb = function toRgb() {
          return hsv2rgb(this._hue, this._saturation, this._value);
        };
        Color2.prototype.fromString = function fromString(value6) {
          var _this = this;
          if (!value6) {
            this._hue = 0;
            this._saturation = 100;
            this._value = 100;
            this.doOnChange();
            return;
          }
          var fromHSV = function fromHSV2(h2, s2, v2) {
            _this._hue = Math.max(0, Math.min(360, h2));
            _this._saturation = Math.max(0, Math.min(100, s2));
            _this._value = Math.max(0, Math.min(100, v2));
            _this.doOnChange();
          };
          if (value6.indexOf("hsl") !== -1) {
            var parts = value6.replace(/hsla|hsl|\(|\)/gm, "").split(/\s|,/g).filter(function(val) {
              return val !== "";
            }).map(function(val, index2) {
              return index2 > 2 ? parseFloat(val) : parseInt(val, 10);
            });
            if (parts.length === 4) {
              this._alpha = Math.floor(parseFloat(parts[3]) * 100);
            } else if (parts.length === 3) {
              this._alpha = 100;
            }
            if (parts.length >= 3) {
              var _hsl2hsv = hsl2hsv(parts[0], parts[1], parts[2]), h = _hsl2hsv.h, s = _hsl2hsv.s, v = _hsl2hsv.v;
              fromHSV(h, s, v);
            }
          } else if (value6.indexOf("hsv") !== -1) {
            var _parts = value6.replace(/hsva|hsv|\(|\)/gm, "").split(/\s|,/g).filter(function(val) {
              return val !== "";
            }).map(function(val, index2) {
              return index2 > 2 ? parseFloat(val) : parseInt(val, 10);
            });
            if (_parts.length === 4) {
              this._alpha = Math.floor(parseFloat(_parts[3]) * 100);
            } else if (_parts.length === 3) {
              this._alpha = 100;
            }
            if (_parts.length >= 3) {
              fromHSV(_parts[0], _parts[1], _parts[2]);
            }
          } else if (value6.indexOf("rgb") !== -1) {
            var _parts2 = value6.replace(/rgba|rgb|\(|\)/gm, "").split(/\s|,/g).filter(function(val) {
              return val !== "";
            }).map(function(val, index2) {
              return index2 > 2 ? parseFloat(val) : parseInt(val, 10);
            });
            if (_parts2.length === 4) {
              this._alpha = Math.floor(parseFloat(_parts2[3]) * 100);
            } else if (_parts2.length === 3) {
              this._alpha = 100;
            }
            if (_parts2.length >= 3) {
              var _rgb2hsv = rgb2hsv(_parts2[0], _parts2[1], _parts2[2]), _h = _rgb2hsv.h, _s = _rgb2hsv.s, _v = _rgb2hsv.v;
              fromHSV(_h, _s, _v);
            }
          } else if (value6.indexOf("#") !== -1) {
            var hex2 = value6.replace("#", "").trim();
            if (!/^(?:[0-9a-fA-F]{3}){1,2}|[0-9a-fA-F]{8}$/.test(hex2))
              return;
            var r = void 0, g = void 0, b = void 0;
            if (hex2.length === 3) {
              r = parseHexChannel(hex2[0] + hex2[0]);
              g = parseHexChannel(hex2[1] + hex2[1]);
              b = parseHexChannel(hex2[2] + hex2[2]);
            } else if (hex2.length === 6 || hex2.length === 8) {
              r = parseHexChannel(hex2.substring(0, 2));
              g = parseHexChannel(hex2.substring(2, 4));
              b = parseHexChannel(hex2.substring(4, 6));
            }
            if (hex2.length === 8) {
              this._alpha = Math.floor(parseHexChannel(hex2.substring(6)) / 255 * 100);
            } else if (hex2.length === 3 || hex2.length === 6) {
              this._alpha = 100;
            }
            var _rgb2hsv2 = rgb2hsv(r, g, b), _h2 = _rgb2hsv2.h, _s2 = _rgb2hsv2.s, _v2 = _rgb2hsv2.v;
            fromHSV(_h2, _s2, _v2);
          }
        };
        Color2.prototype.compare = function compare(color) {
          return Math.abs(color._hue - this._hue) < 2 && Math.abs(color._saturation - this._saturation) < 1 && Math.abs(color._value - this._value) < 1 && Math.abs(color._alpha - this._alpha) < 1;
        };
        Color2.prototype.doOnChange = function doOnChange() {
          var _hue = this._hue, _saturation = this._saturation, _value = this._value, _alpha = this._alpha, format2 = this.format;
          if (this.enableAlpha) {
            switch (format2) {
              case "hsl":
                var hsl = hsv2hsl(_hue, _saturation / 100, _value / 100);
                this.value = "hsla(" + _hue + ", " + Math.round(hsl[1] * 100) + "%, " + Math.round(hsl[2] * 100) + "%, " + _alpha / 100 + ")";
                break;
              case "hsv":
                this.value = "hsva(" + _hue + ", " + Math.round(_saturation) + "%, " + Math.round(_value) + "%, " + _alpha / 100 + ")";
                break;
              default:
                var _hsv2rgb = hsv2rgb(_hue, _saturation, _value), r = _hsv2rgb.r, g = _hsv2rgb.g, b = _hsv2rgb.b;
                this.value = "rgba(" + r + ", " + g + ", " + b + ", " + _alpha / 100 + ")";
            }
          } else {
            switch (format2) {
              case "hsl":
                var _hsl = hsv2hsl(_hue, _saturation / 100, _value / 100);
                this.value = "hsl(" + _hue + ", " + Math.round(_hsl[1] * 100) + "%, " + Math.round(_hsl[2] * 100) + "%)";
                break;
              case "hsv":
                this.value = "hsv(" + _hue + ", " + Math.round(_saturation) + "%, " + Math.round(_value) + "%)";
                break;
              case "rgb":
                var _hsv2rgb2 = hsv2rgb(_hue, _saturation, _value), _r = _hsv2rgb2.r, _g = _hsv2rgb2.g, _b = _hsv2rgb2.b;
                this.value = "rgb(" + _r + ", " + _g + ", " + _b + ")";
                break;
              default:
                this.value = toHex(hsv2rgb(_hue, _saturation, _value));
            }
          }
        };
        return Color2;
      }();
      var src_color = Color;
      var picker_dropdownvue_type_template_id_06601625_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("transition", { attrs: { name: "el-zoom-in-top" }, on: { "after-leave": _vm.doDestroy } }, [
          _c("div", {
            directives: [
              {
                name: "show",
                rawName: "v-show",
                value: _vm.showPopper,
                expression: "showPopper"
              }
            ],
            staticClass: "el-color-dropdown"
          }, [
            _c("div", { staticClass: "el-color-dropdown__main-wrapper" }, [
              _c("hue-slider", {
                ref: "hue",
                staticStyle: { float: "right" },
                attrs: { color: _vm.color, vertical: "" }
              }),
              _c("sv-panel", { ref: "sl", attrs: { color: _vm.color } })
            ], 1),
            _vm.showAlpha ? _c("alpha-slider", { ref: "alpha", attrs: { color: _vm.color } }) : _vm._e(),
            _vm.predefine ? _c("predefine", {
              attrs: { color: _vm.color, colors: _vm.predefine }
            }) : _vm._e(),
            _c("div", { staticClass: "el-color-dropdown__btns" }, [
              _c("span", { staticClass: "el-color-dropdown__value" }, [
                _c("el-input", {
                  attrs: { "validate-event": false, size: "mini" },
                  on: { blur: _vm.handleConfirm },
                  nativeOn: {
                    keyup: function($event) {
                      if (!("button" in $event) && _vm._k($event.keyCode, "enter", 13, $event.key, "Enter")) {
                        return null;
                      }
                      return _vm.handleConfirm($event);
                    }
                  },
                  model: {
                    value: _vm.customInput,
                    callback: function($$v) {
                      _vm.customInput = $$v;
                    },
                    expression: "customInput"
                  }
                })
              ], 1),
              _c("el-button", {
                staticClass: "el-color-dropdown__link-btn",
                attrs: { size: "mini", type: "text" },
                on: {
                  click: function($event) {
                    _vm.$emit("clear");
                  }
                }
              }, [
                _vm._v("\n        " + _vm._s(_vm.t("el.colorpicker.clear")) + "\n      ")
              ]),
              _c("el-button", {
                staticClass: "el-color-dropdown__btn",
                attrs: { plain: "", size: "mini" },
                on: { click: _vm.confirmValue }
              }, [
                _vm._v("\n        " + _vm._s(_vm.t("el.colorpicker.confirm")) + "\n      ")
              ])
            ], 1)
          ], 1)
        ]);
      };
      var picker_dropdownvue_type_template_id_06601625_staticRenderFns = [];
      picker_dropdownvue_type_template_id_06601625_render._withStripped = true;
      var sv_panelvue_type_template_id_d8583596_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", {
          staticClass: "el-color-svpanel",
          style: {
            backgroundColor: _vm.background
          }
        }, [
          _c("div", { staticClass: "el-color-svpanel__white" }),
          _c("div", { staticClass: "el-color-svpanel__black" }),
          _c("div", {
            staticClass: "el-color-svpanel__cursor",
            style: {
              top: _vm.cursorTop + "px",
              left: _vm.cursorLeft + "px"
            }
          }, [_c("div")])
        ]);
      };
      var sv_panelvue_type_template_id_d8583596_staticRenderFns = [];
      sv_panelvue_type_template_id_d8583596_render._withStripped = true;
      var isDragging = false;
      var draggable = function(element, options2) {
        if (external_vue_default.a.prototype.$isServer)
          return;
        var moveFn = function moveFn2(event2) {
          if (options2.drag) {
            options2.drag(event2);
          }
        };
        var upFn = function upFn2(event2) {
          document.removeEventListener("mousemove", moveFn);
          document.removeEventListener("mouseup", upFn2);
          document.onselectstart = null;
          document.ondragstart = null;
          isDragging = false;
          if (options2.end) {
            options2.end(event2);
          }
        };
        element.addEventListener("mousedown", function(event2) {
          if (isDragging)
            return;
          document.onselectstart = function() {
            return false;
          };
          document.ondragstart = function() {
            return false;
          };
          document.addEventListener("mousemove", moveFn);
          document.addEventListener("mouseup", upFn);
          isDragging = true;
          if (options2.start) {
            options2.start(event2);
          }
        });
      };
      var sv_panelvue_type_script_lang_js_ = {
        name: "el-sl-panel",
        props: {
          color: {
            required: true
          }
        },
        computed: {
          colorValue: function colorValue() {
            var hue = this.color.get("hue");
            var value6 = this.color.get("value");
            return { hue, value: value6 };
          }
        },
        watch: {
          colorValue: function colorValue() {
            this.update();
          }
        },
        methods: {
          update: function update5() {
            var saturation = this.color.get("saturation");
            var value6 = this.color.get("value");
            var el = this.$el;
            var width2 = el.clientWidth, height3 = el.clientHeight;
            this.cursorLeft = saturation * width2 / 100;
            this.cursorTop = (100 - value6) * height3 / 100;
            this.background = "hsl(" + this.color.get("hue") + ", 100%, 50%)";
          },
          handleDrag: function handleDrag(event2) {
            var el = this.$el;
            var rect = el.getBoundingClientRect();
            var left = event2.clientX - rect.left;
            var top = event2.clientY - rect.top;
            left = Math.max(0, left);
            left = Math.min(left, rect.width);
            top = Math.max(0, top);
            top = Math.min(top, rect.height);
            this.cursorLeft = left;
            this.cursorTop = top;
            this.color.set({
              saturation: left / rect.width * 100,
              value: 100 - top / rect.height * 100
            });
          }
        },
        mounted: function mounted18() {
          var _this = this;
          draggable(this.$el, {
            drag: function drag(event2) {
              _this.handleDrag(event2);
            },
            end: function end(event2) {
              _this.handleDrag(event2);
            }
          });
          this.update();
        },
        data: function data25() {
          return {
            cursorTop: 0,
            cursorLeft: 0,
            background: "hsl(0, 100%, 50%)"
          };
        }
      };
      var components_sv_panelvue_type_script_lang_js_ = sv_panelvue_type_script_lang_js_;
      var sv_panel_component = normalizeComponent(components_sv_panelvue_type_script_lang_js_, sv_panelvue_type_template_id_d8583596_render, sv_panelvue_type_template_id_d8583596_staticRenderFns, false, null, null, null);
      sv_panel_component.options.__file = "packages/color-picker/src/components/sv-panel.vue";
      var sv_panel = sv_panel_component.exports;
      var hue_slidervue_type_template_id_5cdc43b1_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", {
          staticClass: "el-color-hue-slider",
          class: { "is-vertical": _vm.vertical }
        }, [
          _c("div", {
            ref: "bar",
            staticClass: "el-color-hue-slider__bar",
            on: { click: _vm.handleClick }
          }),
          _c("div", {
            ref: "thumb",
            staticClass: "el-color-hue-slider__thumb",
            style: {
              left: _vm.thumbLeft + "px",
              top: _vm.thumbTop + "px"
            }
          })
        ]);
      };
      var hue_slidervue_type_template_id_5cdc43b1_staticRenderFns = [];
      hue_slidervue_type_template_id_5cdc43b1_render._withStripped = true;
      var hue_slidervue_type_script_lang_js_ = {
        name: "el-color-hue-slider",
        props: {
          color: {
            required: true
          },
          vertical: Boolean
        },
        data: function data25() {
          return {
            thumbLeft: 0,
            thumbTop: 0
          };
        },
        computed: {
          hueValue: function hueValue() {
            var hue = this.color.get("hue");
            return hue;
          }
        },
        watch: {
          hueValue: function hueValue() {
            this.update();
          }
        },
        methods: {
          handleClick: function handleClick(event2) {
            var thumb = this.$refs.thumb;
            var target2 = event2.target;
            if (target2 !== thumb) {
              this.handleDrag(event2);
            }
          },
          handleDrag: function handleDrag(event2) {
            var rect = this.$el.getBoundingClientRect();
            var thumb = this.$refs.thumb;
            var hue = void 0;
            if (!this.vertical) {
              var left = event2.clientX - rect.left;
              left = Math.min(left, rect.width - thumb.offsetWidth / 2);
              left = Math.max(thumb.offsetWidth / 2, left);
              hue = Math.round((left - thumb.offsetWidth / 2) / (rect.width - thumb.offsetWidth) * 360);
            } else {
              var top = event2.clientY - rect.top;
              top = Math.min(top, rect.height - thumb.offsetHeight / 2);
              top = Math.max(thumb.offsetHeight / 2, top);
              hue = Math.round((top - thumb.offsetHeight / 2) / (rect.height - thumb.offsetHeight) * 360);
            }
            this.color.set("hue", hue);
          },
          getThumbLeft: function getThumbLeft() {
            if (this.vertical)
              return 0;
            var el = this.$el;
            var hue = this.color.get("hue");
            if (!el)
              return 0;
            var thumb = this.$refs.thumb;
            return Math.round(hue * (el.offsetWidth - thumb.offsetWidth / 2) / 360);
          },
          getThumbTop: function getThumbTop() {
            if (!this.vertical)
              return 0;
            var el = this.$el;
            var hue = this.color.get("hue");
            if (!el)
              return 0;
            var thumb = this.$refs.thumb;
            return Math.round(hue * (el.offsetHeight - thumb.offsetHeight / 2) / 360);
          },
          update: function update5() {
            this.thumbLeft = this.getThumbLeft();
            this.thumbTop = this.getThumbTop();
          }
        },
        mounted: function mounted18() {
          var _this = this;
          var _$refs = this.$refs, bar = _$refs.bar, thumb = _$refs.thumb;
          var dragConfig = {
            drag: function drag(event2) {
              _this.handleDrag(event2);
            },
            end: function end(event2) {
              _this.handleDrag(event2);
            }
          };
          draggable(bar, dragConfig);
          draggable(thumb, dragConfig);
          this.update();
        }
      };
      var components_hue_slidervue_type_script_lang_js_ = hue_slidervue_type_script_lang_js_;
      var hue_slider_component = normalizeComponent(components_hue_slidervue_type_script_lang_js_, hue_slidervue_type_template_id_5cdc43b1_render, hue_slidervue_type_template_id_5cdc43b1_staticRenderFns, false, null, null, null);
      hue_slider_component.options.__file = "packages/color-picker/src/components/hue-slider.vue";
      var hue_slider = hue_slider_component.exports;
      var alpha_slidervue_type_template_id_068c66cb_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", {
          staticClass: "el-color-alpha-slider",
          class: { "is-vertical": _vm.vertical }
        }, [
          _c("div", {
            ref: "bar",
            staticClass: "el-color-alpha-slider__bar",
            style: {
              background: _vm.background
            },
            on: { click: _vm.handleClick }
          }),
          _c("div", {
            ref: "thumb",
            staticClass: "el-color-alpha-slider__thumb",
            style: {
              left: _vm.thumbLeft + "px",
              top: _vm.thumbTop + "px"
            }
          })
        ]);
      };
      var alpha_slidervue_type_template_id_068c66cb_staticRenderFns = [];
      alpha_slidervue_type_template_id_068c66cb_render._withStripped = true;
      var alpha_slidervue_type_script_lang_js_ = {
        name: "el-color-alpha-slider",
        props: {
          color: {
            required: true
          },
          vertical: Boolean
        },
        watch: {
          "color._alpha": function color_alpha() {
            this.update();
          },
          "color.value": function colorValue() {
            this.update();
          }
        },
        methods: {
          handleClick: function handleClick(event2) {
            var thumb = this.$refs.thumb;
            var target2 = event2.target;
            if (target2 !== thumb) {
              this.handleDrag(event2);
            }
          },
          handleDrag: function handleDrag(event2) {
            var rect = this.$el.getBoundingClientRect();
            var thumb = this.$refs.thumb;
            if (!this.vertical) {
              var left = event2.clientX - rect.left;
              left = Math.max(thumb.offsetWidth / 2, left);
              left = Math.min(left, rect.width - thumb.offsetWidth / 2);
              this.color.set("alpha", Math.round((left - thumb.offsetWidth / 2) / (rect.width - thumb.offsetWidth) * 100));
            } else {
              var top = event2.clientY - rect.top;
              top = Math.max(thumb.offsetHeight / 2, top);
              top = Math.min(top, rect.height - thumb.offsetHeight / 2);
              this.color.set("alpha", Math.round((top - thumb.offsetHeight / 2) / (rect.height - thumb.offsetHeight) * 100));
            }
          },
          getThumbLeft: function getThumbLeft() {
            if (this.vertical)
              return 0;
            var el = this.$el;
            var alpha = this.color._alpha;
            if (!el)
              return 0;
            var thumb = this.$refs.thumb;
            return Math.round(alpha * (el.offsetWidth - thumb.offsetWidth / 2) / 100);
          },
          getThumbTop: function getThumbTop() {
            if (!this.vertical)
              return 0;
            var el = this.$el;
            var alpha = this.color._alpha;
            if (!el)
              return 0;
            var thumb = this.$refs.thumb;
            return Math.round(alpha * (el.offsetHeight - thumb.offsetHeight / 2) / 100);
          },
          getBackground: function getBackground() {
            if (this.color && this.color.value) {
              var _color$toRgb = this.color.toRgb(), r = _color$toRgb.r, g = _color$toRgb.g, b = _color$toRgb.b;
              return "linear-gradient(to right, rgba(" + r + ", " + g + ", " + b + ", 0) 0%, rgba(" + r + ", " + g + ", " + b + ", 1) 100%)";
            }
            return null;
          },
          update: function update5() {
            this.thumbLeft = this.getThumbLeft();
            this.thumbTop = this.getThumbTop();
            this.background = this.getBackground();
          }
        },
        data: function data25() {
          return {
            thumbLeft: 0,
            thumbTop: 0,
            background: null
          };
        },
        mounted: function mounted18() {
          var _this = this;
          var _$refs = this.$refs, bar = _$refs.bar, thumb = _$refs.thumb;
          var dragConfig = {
            drag: function drag(event2) {
              _this.handleDrag(event2);
            },
            end: function end(event2) {
              _this.handleDrag(event2);
            }
          };
          draggable(bar, dragConfig);
          draggable(thumb, dragConfig);
          this.update();
        }
      };
      var components_alpha_slidervue_type_script_lang_js_ = alpha_slidervue_type_script_lang_js_;
      var alpha_slider_component = normalizeComponent(components_alpha_slidervue_type_script_lang_js_, alpha_slidervue_type_template_id_068c66cb_render, alpha_slidervue_type_template_id_068c66cb_staticRenderFns, false, null, null, null);
      alpha_slider_component.options.__file = "packages/color-picker/src/components/alpha-slider.vue";
      var alpha_slider = alpha_slider_component.exports;
      var predefinevue_type_template_id_06e03093_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", { staticClass: "el-color-predefine" }, [
          _c("div", { staticClass: "el-color-predefine__colors" }, _vm._l(_vm.rgbaColors, function(item, index2) {
            return _c("div", {
              key: _vm.colors[index2],
              staticClass: "el-color-predefine__color-selector",
              class: { selected: item.selected, "is-alpha": item._alpha < 100 },
              on: {
                click: function($event) {
                  _vm.handleSelect(index2);
                }
              }
            }, [_c("div", { style: { "background-color": item.value } })]);
          }), 0)
        ]);
      };
      var predefinevue_type_template_id_06e03093_staticRenderFns = [];
      predefinevue_type_template_id_06e03093_render._withStripped = true;
      var predefinevue_type_script_lang_js_ = {
        props: {
          colors: { type: Array, required: true },
          color: { required: true }
        },
        data: function data25() {
          return {
            rgbaColors: this.parseColors(this.colors, this.color)
          };
        },
        methods: {
          handleSelect: function handleSelect(index2) {
            this.color.fromString(this.colors[index2]);
          },
          parseColors: function parseColors(colors, color) {
            return colors.map(function(value6) {
              var c = new src_color();
              c.enableAlpha = true;
              c.format = "rgba";
              c.fromString(value6);
              c.selected = c.value === color.value;
              return c;
            });
          }
        },
        watch: {
          "$parent.currentColor": function $parentCurrentColor(val) {
            var color = new src_color();
            color.fromString(val);
            this.rgbaColors.forEach(function(item) {
              item.selected = color.compare(item);
            });
          },
          colors: function colors(newVal) {
            this.rgbaColors = this.parseColors(newVal, this.color);
          },
          color: function color(newVal) {
            this.rgbaColors = this.parseColors(this.colors, newVal);
          }
        }
      };
      var components_predefinevue_type_script_lang_js_ = predefinevue_type_script_lang_js_;
      var predefine_component = normalizeComponent(components_predefinevue_type_script_lang_js_, predefinevue_type_template_id_06e03093_render, predefinevue_type_template_id_06e03093_staticRenderFns, false, null, null, null);
      predefine_component.options.__file = "packages/color-picker/src/components/predefine.vue";
      var predefine = predefine_component.exports;
      var picker_dropdownvue_type_script_lang_js_ = {
        name: "el-color-picker-dropdown",
        mixins: [vue_popper_default.a, locale_default.a],
        components: {
          SvPanel: sv_panel,
          HueSlider: hue_slider,
          AlphaSlider: alpha_slider,
          ElInput: input_default.a,
          ElButton: button_default.a,
          Predefine: predefine
        },
        props: {
          color: {
            required: true
          },
          showAlpha: Boolean,
          predefine: Array
        },
        data: function data25() {
          return {
            customInput: ""
          };
        },
        computed: {
          currentColor: function currentColor() {
            var parent2 = this.$parent;
            return !parent2.value && !parent2.showPanelColor ? "" : parent2.color.value;
          }
        },
        methods: {
          confirmValue: function confirmValue() {
            this.$emit("pick");
          },
          handleConfirm: function handleConfirm() {
            this.color.fromString(this.customInput);
          }
        },
        mounted: function mounted18() {
          this.$parent.popperElm = this.popperElm = this.$el;
          this.referenceElm = this.$parent.$el;
        },
        watch: {
          showPopper: function showPopper2(val) {
            var _this = this;
            if (val === true) {
              this.$nextTick(function() {
                var _$refs = _this.$refs, sl = _$refs.sl, hue = _$refs.hue, alpha = _$refs.alpha;
                sl && sl.update();
                hue && hue.update();
                alpha && alpha.update();
              });
            }
          },
          currentColor: {
            immediate: true,
            handler: function handler2(val) {
              this.customInput = val;
            }
          }
        }
      };
      var components_picker_dropdownvue_type_script_lang_js_ = picker_dropdownvue_type_script_lang_js_;
      var picker_dropdown_component = normalizeComponent(components_picker_dropdownvue_type_script_lang_js_, picker_dropdownvue_type_template_id_06601625_render, picker_dropdownvue_type_template_id_06601625_staticRenderFns, false, null, null, null);
      picker_dropdown_component.options.__file = "packages/color-picker/src/components/picker-dropdown.vue";
      var picker_dropdown = picker_dropdown_component.exports;
      var color_picker_src_mainvue_type_script_lang_js_ = {
        name: "ElColorPicker",
        mixins: [emitter_default.a],
        props: {
          value: String,
          showAlpha: Boolean,
          colorFormat: String,
          disabled: Boolean,
          size: String,
          popperClass: String,
          predefine: Array
        },
        inject: {
          elForm: {
            default: ""
          },
          elFormItem: {
            default: ""
          }
        },
        directives: { Clickoutside: clickoutside_default.a },
        computed: {
          displayedColor: function displayedColor() {
            if (!this.value && !this.showPanelColor) {
              return "transparent";
            }
            return this.displayedRgb(this.color, this.showAlpha);
          },
          _elFormItemSize: function _elFormItemSize() {
            return (this.elFormItem || {}).elFormItemSize;
          },
          colorSize: function colorSize() {
            return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;
          },
          colorDisabled: function colorDisabled() {
            return this.disabled || (this.elForm || {}).disabled;
          }
        },
        watch: {
          value: function value6(val) {
            if (!val) {
              this.showPanelColor = false;
            } else if (val && val !== this.color.value) {
              this.color.fromString(val);
            }
          },
          color: {
            deep: true,
            handler: function handler2() {
              this.showPanelColor = true;
            }
          },
          displayedColor: function displayedColor(val) {
            if (!this.showPicker)
              return;
            var currentValueColor = new src_color({
              enableAlpha: this.showAlpha,
              format: this.colorFormat
            });
            currentValueColor.fromString(this.value);
            var currentValueColorRgb = this.displayedRgb(currentValueColor, this.showAlpha);
            if (val !== currentValueColorRgb) {
              this.$emit("active-change", val);
            }
          }
        },
        methods: {
          handleTrigger: function handleTrigger() {
            if (this.colorDisabled)
              return;
            this.showPicker = !this.showPicker;
          },
          confirmValue: function confirmValue() {
            var value6 = this.color.value;
            this.$emit("input", value6);
            this.$emit("change", value6);
            this.dispatch("ElFormItem", "el.form.change", value6);
            this.showPicker = false;
          },
          clearValue: function clearValue() {
            this.$emit("input", null);
            this.$emit("change", null);
            if (this.value !== null) {
              this.dispatch("ElFormItem", "el.form.change", null);
            }
            this.showPanelColor = false;
            this.showPicker = false;
            this.resetColor();
          },
          hide: function hide2() {
            this.showPicker = false;
            this.resetColor();
          },
          resetColor: function resetColor() {
            var _this = this;
            this.$nextTick(function(_) {
              if (_this.value) {
                _this.color.fromString(_this.value);
              } else {
                _this.showPanelColor = false;
              }
            });
          },
          displayedRgb: function displayedRgb(color, showAlpha) {
            if (!(color instanceof src_color)) {
              throw Error("color should be instance of Color Class");
            }
            var _color$toRgb = color.toRgb(), r = _color$toRgb.r, g = _color$toRgb.g, b = _color$toRgb.b;
            return showAlpha ? "rgba(" + r + ", " + g + ", " + b + ", " + color.get("alpha") / 100 + ")" : "rgb(" + r + ", " + g + ", " + b + ")";
          }
        },
        mounted: function mounted18() {
          var value6 = this.value;
          if (value6) {
            this.color.fromString(value6);
          }
          this.popperElm = this.$refs.dropdown.$el;
        },
        data: function data25() {
          var color = new src_color({
            enableAlpha: this.showAlpha,
            format: this.colorFormat
          });
          return {
            color,
            showPicker: false,
            showPanelColor: false
          };
        },
        components: {
          PickerDropdown: picker_dropdown
        }
      };
      var packages_color_picker_src_mainvue_type_script_lang_js_ = color_picker_src_mainvue_type_script_lang_js_;
      var color_picker_src_main_component = normalizeComponent(packages_color_picker_src_mainvue_type_script_lang_js_, mainvue_type_template_id_55c8ade7_render, mainvue_type_template_id_55c8ade7_staticRenderFns, false, null, null, null);
      color_picker_src_main_component.options.__file = "packages/color-picker/src/main.vue";
      var color_picker_src_main = color_picker_src_main_component.exports;
      color_picker_src_main.install = function(Vue2) {
        Vue2.component(color_picker_src_main.name, color_picker_src_main);
      };
      var color_picker = color_picker_src_main;
      var mainvue_type_template_id_5c654dd8_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", { staticClass: "el-transfer" }, [
          _c("transfer-panel", _vm._b({
            ref: "leftPanel",
            attrs: {
              data: _vm.sourceData,
              title: _vm.titles[0] || _vm.t("el.transfer.titles.0"),
              "default-checked": _vm.leftDefaultChecked,
              placeholder: _vm.filterPlaceholder || _vm.t("el.transfer.filterPlaceholder")
            },
            on: { "checked-change": _vm.onSourceCheckedChange }
          }, "transfer-panel", _vm.$props, false), [_vm._t("left-footer")], 2),
          _c("div", { staticClass: "el-transfer__buttons" }, [
            _c("el-button", {
              class: [
                "el-transfer__button",
                _vm.hasButtonTexts ? "is-with-texts" : ""
              ],
              attrs: {
                type: "primary",
                disabled: _vm.rightChecked.length === 0
              },
              nativeOn: {
                click: function($event) {
                  return _vm.addToLeft($event);
                }
              }
            }, [
              _c("i", { staticClass: "el-icon-arrow-left" }),
              _vm.buttonTexts[0] !== void 0 ? _c("span", [_vm._v(_vm._s(_vm.buttonTexts[0]))]) : _vm._e()
            ]),
            _c("el-button", {
              class: [
                "el-transfer__button",
                _vm.hasButtonTexts ? "is-with-texts" : ""
              ],
              attrs: {
                type: "primary",
                disabled: _vm.leftChecked.length === 0
              },
              nativeOn: {
                click: function($event) {
                  return _vm.addToRight($event);
                }
              }
            }, [
              _vm.buttonTexts[1] !== void 0 ? _c("span", [_vm._v(_vm._s(_vm.buttonTexts[1]))]) : _vm._e(),
              _c("i", { staticClass: "el-icon-arrow-right" })
            ])
          ], 1),
          _c("transfer-panel", _vm._b({
            ref: "rightPanel",
            attrs: {
              data: _vm.targetData,
              title: _vm.titles[1] || _vm.t("el.transfer.titles.1"),
              "default-checked": _vm.rightDefaultChecked,
              placeholder: _vm.filterPlaceholder || _vm.t("el.transfer.filterPlaceholder")
            },
            on: { "checked-change": _vm.onTargetCheckedChange }
          }, "transfer-panel", _vm.$props, false), [_vm._t("right-footer")], 2)
        ], 1);
      };
      var mainvue_type_template_id_5c654dd8_staticRenderFns = [];
      mainvue_type_template_id_5c654dd8_render._withStripped = true;
      var transfer_panelvue_type_template_id_2ddab8bd_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", { staticClass: "el-transfer-panel" }, [
          _c("p", { staticClass: "el-transfer-panel__header" }, [
            _c("el-checkbox", {
              attrs: { indeterminate: _vm.isIndeterminate },
              on: { change: _vm.handleAllCheckedChange },
              model: {
                value: _vm.allChecked,
                callback: function($$v) {
                  _vm.allChecked = $$v;
                },
                expression: "allChecked"
              }
            }, [
              _vm._v("\n      " + _vm._s(_vm.title) + "\n      "),
              _c("span", [_vm._v(_vm._s(_vm.checkedSummary))])
            ])
          ], 1),
          _c("div", {
            class: [
              "el-transfer-panel__body",
              _vm.hasFooter ? "is-with-footer" : ""
            ]
          }, [
            _vm.filterable ? _c("el-input", {
              staticClass: "el-transfer-panel__filter",
              attrs: { size: "small", placeholder: _vm.placeholder },
              nativeOn: {
                mouseenter: function($event) {
                  _vm.inputHover = true;
                },
                mouseleave: function($event) {
                  _vm.inputHover = false;
                }
              },
              model: {
                value: _vm.query,
                callback: function($$v) {
                  _vm.query = $$v;
                },
                expression: "query"
              }
            }, [
              _c("i", {
                class: ["el-input__icon", "el-icon-" + _vm.inputIcon],
                attrs: { slot: "prefix" },
                on: { click: _vm.clearQuery },
                slot: "prefix"
              })
            ]) : _vm._e(),
            _c("el-checkbox-group", {
              directives: [
                {
                  name: "show",
                  rawName: "v-show",
                  value: !_vm.hasNoMatch && _vm.data.length > 0,
                  expression: "!hasNoMatch && data.length > 0"
                }
              ],
              staticClass: "el-transfer-panel__list",
              class: { "is-filterable": _vm.filterable },
              model: {
                value: _vm.checked,
                callback: function($$v) {
                  _vm.checked = $$v;
                },
                expression: "checked"
              }
            }, _vm._l(_vm.filteredData, function(item) {
              return _c("el-checkbox", {
                key: item[_vm.keyProp],
                staticClass: "el-transfer-panel__item",
                attrs: {
                  label: item[_vm.keyProp],
                  disabled: item[_vm.disabledProp]
                }
              }, [_c("option-content", { attrs: { option: item } })], 1);
            }), 1),
            _c("p", {
              directives: [
                {
                  name: "show",
                  rawName: "v-show",
                  value: _vm.hasNoMatch,
                  expression: "hasNoMatch"
                }
              ],
              staticClass: "el-transfer-panel__empty"
            }, [_vm._v(_vm._s(_vm.t("el.transfer.noMatch")))]),
            _c("p", {
              directives: [
                {
                  name: "show",
                  rawName: "v-show",
                  value: _vm.data.length === 0 && !_vm.hasNoMatch,
                  expression: "data.length === 0 && !hasNoMatch"
                }
              ],
              staticClass: "el-transfer-panel__empty"
            }, [_vm._v(_vm._s(_vm.t("el.transfer.noData")))])
          ], 1),
          _vm.hasFooter ? _c("p", { staticClass: "el-transfer-panel__footer" }, [_vm._t("default")], 2) : _vm._e()
        ]);
      };
      var transfer_panelvue_type_template_id_2ddab8bd_staticRenderFns = [];
      transfer_panelvue_type_template_id_2ddab8bd_render._withStripped = true;
      var transfer_panelvue_type_script_lang_js_ = {
        mixins: [locale_default.a],
        name: "ElTransferPanel",
        componentName: "ElTransferPanel",
        components: {
          ElCheckboxGroup: checkbox_group_default.a,
          ElCheckbox: checkbox_default.a,
          ElInput: input_default.a,
          OptionContent: {
            props: {
              option: Object
            },
            render: function render37(h) {
              var getParent = function getParent2(vm) {
                if (vm.$options.componentName === "ElTransferPanel") {
                  return vm;
                } else if (vm.$parent) {
                  return getParent2(vm.$parent);
                } else {
                  return vm;
                }
              };
              var panel2 = getParent(this);
              var transfer2 = panel2.$parent || panel2;
              return panel2.renderContent ? panel2.renderContent(h, this.option) : transfer2.$scopedSlots.default ? transfer2.$scopedSlots.default({ option: this.option }) : h("span", [this.option[panel2.labelProp] || this.option[panel2.keyProp]]);
            }
          }
        },
        props: {
          data: {
            type: Array,
            default: function _default116() {
              return [];
            }
          },
          renderContent: Function,
          placeholder: String,
          title: String,
          filterable: Boolean,
          format: Object,
          filterMethod: Function,
          defaultChecked: Array,
          props: Object
        },
        data: function data25() {
          return {
            checked: [],
            allChecked: false,
            query: "",
            inputHover: false,
            checkChangeByUser: true
          };
        },
        watch: {
          checked: function checked(val, oldVal) {
            this.updateAllChecked();
            if (this.checkChangeByUser) {
              var movedKeys = val.concat(oldVal).filter(function(v) {
                return val.indexOf(v) === -1 || oldVal.indexOf(v) === -1;
              });
              this.$emit("checked-change", val, movedKeys);
            } else {
              this.$emit("checked-change", val);
              this.checkChangeByUser = true;
            }
          },
          data: function data25() {
            var _this = this;
            var checked = [];
            var filteredDataKeys = this.filteredData.map(function(item) {
              return item[_this.keyProp];
            });
            this.checked.forEach(function(item) {
              if (filteredDataKeys.indexOf(item) > -1) {
                checked.push(item);
              }
            });
            this.checkChangeByUser = false;
            this.checked = checked;
          },
          checkableData: function checkableData() {
            this.updateAllChecked();
          },
          defaultChecked: {
            immediate: true,
            handler: function handler2(val, oldVal) {
              var _this2 = this;
              if (oldVal && val.length === oldVal.length && val.every(function(item) {
                return oldVal.indexOf(item) > -1;
              }))
                return;
              var checked = [];
              var checkableDataKeys = this.checkableData.map(function(item) {
                return item[_this2.keyProp];
              });
              val.forEach(function(item) {
                if (checkableDataKeys.indexOf(item) > -1) {
                  checked.push(item);
                }
              });
              this.checkChangeByUser = false;
              this.checked = checked;
            }
          }
        },
        computed: {
          filteredData: function filteredData() {
            var _this3 = this;
            return this.data.filter(function(item) {
              if (typeof _this3.filterMethod === "function") {
                return _this3.filterMethod(_this3.query, item);
              } else {
                var label = item[_this3.labelProp] || item[_this3.keyProp].toString();
                return label.toLowerCase().indexOf(_this3.query.toLowerCase()) > -1;
              }
            });
          },
          checkableData: function checkableData() {
            var _this4 = this;
            return this.filteredData.filter(function(item) {
              return !item[_this4.disabledProp];
            });
          },
          checkedSummary: function checkedSummary() {
            var checkedLength = this.checked.length;
            var dataLength = this.data.length;
            var _format3 = this.format, noChecked = _format3.noChecked, hasChecked = _format3.hasChecked;
            if (noChecked && hasChecked) {
              return checkedLength > 0 ? hasChecked.replace(/\${checked}/g, checkedLength).replace(/\${total}/g, dataLength) : noChecked.replace(/\${total}/g, dataLength);
            } else {
              return checkedLength + "/" + dataLength;
            }
          },
          isIndeterminate: function isIndeterminate() {
            var checkedLength = this.checked.length;
            return checkedLength > 0 && checkedLength < this.checkableData.length;
          },
          hasNoMatch: function hasNoMatch() {
            return this.query.length > 0 && this.filteredData.length === 0;
          },
          inputIcon: function inputIcon() {
            return this.query.length > 0 && this.inputHover ? "circle-close" : "search";
          },
          labelProp: function labelProp() {
            return this.props.label || "label";
          },
          keyProp: function keyProp() {
            return this.props.key || "key";
          },
          disabledProp: function disabledProp() {
            return this.props.disabled || "disabled";
          },
          hasFooter: function hasFooter() {
            return !!this.$slots.default;
          }
        },
        methods: {
          updateAllChecked: function updateAllChecked() {
            var _this5 = this;
            var checkableDataKeys = this.checkableData.map(function(item) {
              return item[_this5.keyProp];
            });
            this.allChecked = checkableDataKeys.length > 0 && checkableDataKeys.every(function(item) {
              return _this5.checked.indexOf(item) > -1;
            });
          },
          handleAllCheckedChange: function handleAllCheckedChange(value6) {
            var _this6 = this;
            this.checked = value6 ? this.checkableData.map(function(item) {
              return item[_this6.keyProp];
            }) : [];
          },
          clearQuery: function clearQuery() {
            if (this.inputIcon === "circle-close") {
              this.query = "";
            }
          }
        }
      };
      var src_transfer_panelvue_type_script_lang_js_ = transfer_panelvue_type_script_lang_js_;
      var transfer_panel_component = normalizeComponent(src_transfer_panelvue_type_script_lang_js_, transfer_panelvue_type_template_id_2ddab8bd_render, transfer_panelvue_type_template_id_2ddab8bd_staticRenderFns, false, null, null, null);
      transfer_panel_component.options.__file = "packages/transfer/src/transfer-panel.vue";
      var transfer_panel = transfer_panel_component.exports;
      var transfer_src_mainvue_type_script_lang_js_ = {
        name: "ElTransfer",
        mixins: [emitter_default.a, locale_default.a, migrating_default.a],
        components: {
          TransferPanel: transfer_panel,
          ElButton: button_default.a
        },
        props: {
          data: {
            type: Array,
            default: function _default116() {
              return [];
            }
          },
          titles: {
            type: Array,
            default: function _default116() {
              return [];
            }
          },
          buttonTexts: {
            type: Array,
            default: function _default116() {
              return [];
            }
          },
          filterPlaceholder: {
            type: String,
            default: ""
          },
          filterMethod: Function,
          leftDefaultChecked: {
            type: Array,
            default: function _default116() {
              return [];
            }
          },
          rightDefaultChecked: {
            type: Array,
            default: function _default116() {
              return [];
            }
          },
          renderContent: Function,
          value: {
            type: Array,
            default: function _default116() {
              return [];
            }
          },
          format: {
            type: Object,
            default: function _default116() {
              return {};
            }
          },
          filterable: Boolean,
          props: {
            type: Object,
            default: function _default116() {
              return {
                label: "label",
                key: "key",
                disabled: "disabled"
              };
            }
          },
          targetOrder: {
            type: String,
            default: "original"
          }
        },
        data: function data25() {
          return {
            leftChecked: [],
            rightChecked: []
          };
        },
        computed: {
          dataObj: function dataObj() {
            var key = this.props.key;
            return this.data.reduce(function(o, cur) {
              return (o[cur[key]] = cur) && o;
            }, {});
          },
          sourceData: function sourceData() {
            var _this = this;
            return this.data.filter(function(item) {
              return _this.value.indexOf(item[_this.props.key]) === -1;
            });
          },
          targetData: function targetData() {
            var _this2 = this;
            if (this.targetOrder === "original") {
              return this.data.filter(function(item) {
                return _this2.value.indexOf(item[_this2.props.key]) > -1;
              });
            } else {
              return this.value.reduce(function(arr, cur) {
                var val = _this2.dataObj[cur];
                if (val) {
                  arr.push(val);
                }
                return arr;
              }, []);
            }
          },
          hasButtonTexts: function hasButtonTexts() {
            return this.buttonTexts.length === 2;
          }
        },
        watch: {
          value: function value6(val) {
            this.dispatch("ElFormItem", "el.form.change", val);
          }
        },
        methods: {
          getMigratingConfig: function getMigratingConfig2() {
            return {
              props: {
                "footer-format": "footer-format is renamed to format."
              }
            };
          },
          onSourceCheckedChange: function onSourceCheckedChange(val, movedKeys) {
            this.leftChecked = val;
            if (movedKeys === void 0)
              return;
            this.$emit("left-check-change", val, movedKeys);
          },
          onTargetCheckedChange: function onTargetCheckedChange(val, movedKeys) {
            this.rightChecked = val;
            if (movedKeys === void 0)
              return;
            this.$emit("right-check-change", val, movedKeys);
          },
          addToLeft: function addToLeft() {
            var currentValue = this.value.slice();
            this.rightChecked.forEach(function(item) {
              var index2 = currentValue.indexOf(item);
              if (index2 > -1) {
                currentValue.splice(index2, 1);
              }
            });
            this.$emit("input", currentValue);
            this.$emit("change", currentValue, "left", this.rightChecked);
          },
          addToRight: function addToRight() {
            var _this3 = this;
            var currentValue = this.value.slice();
            var itemsToBeMoved = [];
            var key = this.props.key;
            this.data.forEach(function(item) {
              var itemKey = item[key];
              if (_this3.leftChecked.indexOf(itemKey) > -1 && _this3.value.indexOf(itemKey) === -1) {
                itemsToBeMoved.push(itemKey);
              }
            });
            currentValue = this.targetOrder === "unshift" ? itemsToBeMoved.concat(currentValue) : currentValue.concat(itemsToBeMoved);
            this.$emit("input", currentValue);
            this.$emit("change", currentValue, "right", this.leftChecked);
          },
          clearQuery: function clearQuery(which) {
            if (which === "left") {
              this.$refs.leftPanel.query = "";
            } else if (which === "right") {
              this.$refs.rightPanel.query = "";
            }
          }
        }
      };
      var packages_transfer_src_mainvue_type_script_lang_js_ = transfer_src_mainvue_type_script_lang_js_;
      var transfer_src_main_component = normalizeComponent(packages_transfer_src_mainvue_type_script_lang_js_, mainvue_type_template_id_5c654dd8_render, mainvue_type_template_id_5c654dd8_staticRenderFns, false, null, null, null);
      transfer_src_main_component.options.__file = "packages/transfer/src/main.vue";
      var transfer_src_main = transfer_src_main_component.exports;
      transfer_src_main.install = function(Vue2) {
        Vue2.component(transfer_src_main.name, transfer_src_main);
      };
      var transfer = transfer_src_main;
      var mainvue_type_template_id_5bf181d4_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("section", { staticClass: "el-container", class: { "is-vertical": _vm.isVertical } }, [_vm._t("default")], 2);
      };
      var mainvue_type_template_id_5bf181d4_staticRenderFns = [];
      mainvue_type_template_id_5bf181d4_render._withStripped = true;
      var container_src_mainvue_type_script_lang_js_ = {
        name: "ElContainer",
        componentName: "ElContainer",
        props: {
          direction: String
        },
        computed: {
          isVertical: function isVertical() {
            if (this.direction === "vertical") {
              return true;
            } else if (this.direction === "horizontal") {
              return false;
            }
            return this.$slots && this.$slots.default ? this.$slots.default.some(function(vnode) {
              var tag2 = vnode.componentOptions && vnode.componentOptions.tag;
              return tag2 === "el-header" || tag2 === "el-footer";
            }) : false;
          }
        }
      };
      var packages_container_src_mainvue_type_script_lang_js_ = container_src_mainvue_type_script_lang_js_;
      var container_src_main_component = normalizeComponent(packages_container_src_mainvue_type_script_lang_js_, mainvue_type_template_id_5bf181d4_render, mainvue_type_template_id_5bf181d4_staticRenderFns, false, null, null, null);
      container_src_main_component.options.__file = "packages/container/src/main.vue";
      var container_src_main = container_src_main_component.exports;
      container_src_main.install = function(Vue2) {
        Vue2.component(container_src_main.name, container_src_main);
      };
      var packages_container = container_src_main;
      var mainvue_type_template_id_2b296ab2_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("header", { staticClass: "el-header", style: { height: _vm.height } }, [_vm._t("default")], 2);
      };
      var mainvue_type_template_id_2b296ab2_staticRenderFns = [];
      mainvue_type_template_id_2b296ab2_render._withStripped = true;
      var header_src_mainvue_type_script_lang_js_ = {
        name: "ElHeader",
        componentName: "ElHeader",
        props: {
          height: {
            type: String,
            default: "60px"
          }
        }
      };
      var packages_header_src_mainvue_type_script_lang_js_ = header_src_mainvue_type_script_lang_js_;
      var header_src_main_component = normalizeComponent(packages_header_src_mainvue_type_script_lang_js_, mainvue_type_template_id_2b296ab2_render, mainvue_type_template_id_2b296ab2_staticRenderFns, false, null, null, null);
      header_src_main_component.options.__file = "packages/header/src/main.vue";
      var header_src_main = header_src_main_component.exports;
      header_src_main.install = function(Vue2) {
        Vue2.component(header_src_main.name, header_src_main);
      };
      var header2 = header_src_main;
      var mainvue_type_template_id_03411dbf_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("aside", { staticClass: "el-aside", style: { width: _vm.width } }, [_vm._t("default")], 2);
      };
      var mainvue_type_template_id_03411dbf_staticRenderFns = [];
      mainvue_type_template_id_03411dbf_render._withStripped = true;
      var aside_src_mainvue_type_script_lang_js_ = {
        name: "ElAside",
        componentName: "ElAside",
        props: {
          width: {
            type: String,
            default: "300px"
          }
        }
      };
      var packages_aside_src_mainvue_type_script_lang_js_ = aside_src_mainvue_type_script_lang_js_;
      var aside_src_main_component = normalizeComponent(packages_aside_src_mainvue_type_script_lang_js_, mainvue_type_template_id_03411dbf_render, mainvue_type_template_id_03411dbf_staticRenderFns, false, null, null, null);
      aside_src_main_component.options.__file = "packages/aside/src/main.vue";
      var aside_src_main = aside_src_main_component.exports;
      aside_src_main.install = function(Vue2) {
        Vue2.component(aside_src_main.name, aside_src_main);
      };
      var aside = aside_src_main;
      var mainvue_type_template_id_2a3a7406_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("main", { staticClass: "el-main" }, [_vm._t("default")], 2);
      };
      var mainvue_type_template_id_2a3a7406_staticRenderFns = [];
      mainvue_type_template_id_2a3a7406_render._withStripped = true;
      var main_src_mainvue_type_script_lang_js_ = {
        name: "ElMain",
        componentName: "ElMain"
      };
      var packages_main_src_mainvue_type_script_lang_js_ = main_src_mainvue_type_script_lang_js_;
      var main_src_main_component = normalizeComponent(packages_main_src_mainvue_type_script_lang_js_, mainvue_type_template_id_2a3a7406_render, mainvue_type_template_id_2a3a7406_staticRenderFns, false, null, null, null);
      main_src_main_component.options.__file = "packages/main/src/main.vue";
      var main_src_main = main_src_main_component.exports;
      main_src_main.install = function(Vue2) {
        Vue2.component(main_src_main.name, main_src_main);
      };
      var packages_main = main_src_main;
      var mainvue_type_template_id_80210338_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("footer", { staticClass: "el-footer", style: { height: _vm.height } }, [_vm._t("default")], 2);
      };
      var mainvue_type_template_id_80210338_staticRenderFns = [];
      mainvue_type_template_id_80210338_render._withStripped = true;
      var footer_src_mainvue_type_script_lang_js_ = {
        name: "ElFooter",
        componentName: "ElFooter",
        props: {
          height: {
            type: String,
            default: "60px"
          }
        }
      };
      var packages_footer_src_mainvue_type_script_lang_js_ = footer_src_mainvue_type_script_lang_js_;
      var footer_src_main_component = normalizeComponent(packages_footer_src_mainvue_type_script_lang_js_, mainvue_type_template_id_80210338_render, mainvue_type_template_id_80210338_staticRenderFns, false, null, null, null);
      footer_src_main_component.options.__file = "packages/footer/src/main.vue";
      var footer_src_main = footer_src_main_component.exports;
      footer_src_main.install = function(Vue2) {
        Vue2.component(footer_src_main.name, footer_src_main);
      };
      var footer2 = footer_src_main;
      var timeline_src_mainvue_type_script_lang_js_ = {
        name: "ElTimeline",
        props: {
          reverse: {
            type: Boolean,
            default: false
          }
        },
        provide: function provide11() {
          return {
            timeline: this
          };
        },
        render: function render37() {
          var h = arguments[0];
          var reverse = this.reverse;
          var classes = {
            "el-timeline": true,
            "is-reverse": reverse
          };
          var slots = this.$slots.default || [];
          if (reverse) {
            slots = slots.reverse();
          }
          return h("ul", { "class": classes }, [slots]);
        }
      };
      var packages_timeline_src_mainvue_type_script_lang_js_ = timeline_src_mainvue_type_script_lang_js_;
      var main_render, main_staticRenderFns;
      var timeline_src_main_component = normalizeComponent(packages_timeline_src_mainvue_type_script_lang_js_, main_render, main_staticRenderFns, false, null, null, null);
      timeline_src_main_component.options.__file = "packages/timeline/src/main.vue";
      var timeline_src_main = timeline_src_main_component.exports;
      timeline_src_main.install = function(Vue2) {
        Vue2.component(timeline_src_main.name, timeline_src_main);
      };
      var timeline = timeline_src_main;
      var itemvue_type_template_id_61a69e50_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("li", { staticClass: "el-timeline-item" }, [
          _c("div", { staticClass: "el-timeline-item__tail" }),
          !_vm.$slots.dot ? _c("div", {
            staticClass: "el-timeline-item__node",
            class: [
              "el-timeline-item__node--" + (_vm.size || ""),
              "el-timeline-item__node--" + (_vm.type || "")
            ],
            style: {
              backgroundColor: _vm.color
            }
          }, [
            _vm.icon ? _c("i", {
              staticClass: "el-timeline-item__icon",
              class: _vm.icon
            }) : _vm._e()
          ]) : _vm._e(),
          _vm.$slots.dot ? _c("div", { staticClass: "el-timeline-item__dot" }, [_vm._t("dot")], 2) : _vm._e(),
          _c("div", { staticClass: "el-timeline-item__wrapper" }, [
            !_vm.hideTimestamp && _vm.placement === "top" ? _c("div", { staticClass: "el-timeline-item__timestamp is-top" }, [
              _vm._v("\n      " + _vm._s(_vm.timestamp) + "\n    ")
            ]) : _vm._e(),
            _c("div", { staticClass: "el-timeline-item__content" }, [_vm._t("default")], 2),
            !_vm.hideTimestamp && _vm.placement === "bottom" ? _c("div", { staticClass: "el-timeline-item__timestamp is-bottom" }, [
              _vm._v("\n      " + _vm._s(_vm.timestamp) + "\n    ")
            ]) : _vm._e()
          ])
        ]);
      };
      var itemvue_type_template_id_61a69e50_staticRenderFns = [];
      itemvue_type_template_id_61a69e50_render._withStripped = true;
      var timeline_src_itemvue_type_script_lang_js_ = {
        name: "ElTimelineItem",
        inject: ["timeline"],
        props: {
          timestamp: String,
          hideTimestamp: {
            type: Boolean,
            default: false
          },
          placement: {
            type: String,
            default: "bottom"
          },
          type: String,
          color: String,
          size: {
            type: String,
            default: "normal"
          },
          icon: String
        }
      };
      var packages_timeline_src_itemvue_type_script_lang_js_ = timeline_src_itemvue_type_script_lang_js_;
      var src_item_component = normalizeComponent(packages_timeline_src_itemvue_type_script_lang_js_, itemvue_type_template_id_61a69e50_render, itemvue_type_template_id_61a69e50_staticRenderFns, false, null, null, null);
      src_item_component.options.__file = "packages/timeline/src/item.vue";
      var timeline_src_item = src_item_component.exports;
      timeline_src_item.install = function(Vue2) {
        Vue2.component(timeline_src_item.name, timeline_src_item);
      };
      var timeline_item = timeline_src_item;
      var mainvue_type_template_id_01cf3b65_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("a", _vm._b({
          class: [
            "el-link",
            _vm.type ? "el-link--" + _vm.type : "",
            _vm.disabled && "is-disabled",
            _vm.underline && !_vm.disabled && "is-underline"
          ],
          attrs: { href: _vm.disabled ? null : _vm.href },
          on: { click: _vm.handleClick }
        }, "a", _vm.$attrs, false), [
          _vm.icon ? _c("i", { class: _vm.icon }) : _vm._e(),
          _vm.$slots.default ? _c("span", { staticClass: "el-link--inner" }, [_vm._t("default")], 2) : _vm._e(),
          _vm.$slots.icon ? [_vm.$slots.icon ? _vm._t("icon") : _vm._e()] : _vm._e()
        ], 2);
      };
      var mainvue_type_template_id_01cf3b65_staticRenderFns = [];
      mainvue_type_template_id_01cf3b65_render._withStripped = true;
      var link_src_mainvue_type_script_lang_js_ = {
        name: "ElLink",
        props: {
          type: {
            type: String,
            default: "default"
          },
          underline: {
            type: Boolean,
            default: true
          },
          disabled: Boolean,
          href: String,
          icon: String
        },
        methods: {
          handleClick: function handleClick(event2) {
            if (!this.disabled) {
              if (!this.href) {
                this.$emit("click", event2);
              }
            }
          }
        }
      };
      var packages_link_src_mainvue_type_script_lang_js_ = link_src_mainvue_type_script_lang_js_;
      var link_src_main_component = normalizeComponent(packages_link_src_mainvue_type_script_lang_js_, mainvue_type_template_id_01cf3b65_render, mainvue_type_template_id_01cf3b65_staticRenderFns, false, null, null, null);
      link_src_main_component.options.__file = "packages/link/src/main.vue";
      var link_src_main = link_src_main_component.exports;
      link_src_main.install = function(Vue2) {
        Vue2.component(link_src_main.name, link_src_main);
      };
      var packages_link = link_src_main;
      var mainvue_type_template_id_7fa02a7e_functional_true_render = function(_h, _vm) {
        var _c = _vm._c;
        return _c("div", _vm._g(_vm._b({
          class: [
            _vm.data.staticClass,
            "el-divider",
            "el-divider--" + _vm.props.direction
          ]
        }, "div", _vm.data.attrs, false), _vm.listeners), [
          _vm.slots().default && _vm.props.direction !== "vertical" ? _c("div", { class: ["el-divider__text", "is-" + _vm.props.contentPosition] }, [_vm._t("default")], 2) : _vm._e()
        ]);
      };
      var mainvue_type_template_id_7fa02a7e_functional_true_staticRenderFns = [];
      mainvue_type_template_id_7fa02a7e_functional_true_render._withStripped = true;
      var divider_src_mainvue_type_script_lang_js_ = {
        name: "ElDivider",
        props: {
          direction: {
            type: String,
            default: "horizontal",
            validator: function validator2(val) {
              return ["horizontal", "vertical"].indexOf(val) !== -1;
            }
          },
          contentPosition: {
            type: String,
            default: "center",
            validator: function validator2(val) {
              return ["left", "center", "right"].indexOf(val) !== -1;
            }
          }
        }
      };
      var packages_divider_src_mainvue_type_script_lang_js_ = divider_src_mainvue_type_script_lang_js_;
      var divider_src_main_component = normalizeComponent(packages_divider_src_mainvue_type_script_lang_js_, mainvue_type_template_id_7fa02a7e_functional_true_render, mainvue_type_template_id_7fa02a7e_functional_true_staticRenderFns, true, null, null, null);
      divider_src_main_component.options.__file = "packages/divider/src/main.vue";
      var divider_src_main = divider_src_main_component.exports;
      divider_src_main.install = function(Vue2) {
        Vue2.component(divider_src_main.name, divider_src_main);
      };
      var divider = divider_src_main;
      var mainvue_type_template_id_44d84a7c_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", { staticClass: "el-image" }, [
          _vm.loading ? _vm._t("placeholder", [
            _c("div", { staticClass: "el-image__placeholder" })
          ]) : _vm.error ? _vm._t("error", [
            _c("div", { staticClass: "el-image__error" }, [
              _vm._v(_vm._s(_vm.t("el.image.error")))
            ])
          ]) : _c("img", _vm._g(_vm._b({
            staticClass: "el-image__inner",
            class: {
              "el-image__inner--center": _vm.alignCenter,
              "el-image__preview": _vm.preview
            },
            style: _vm.imageStyle,
            attrs: { src: _vm.src },
            on: { click: _vm.clickHandler }
          }, "img", _vm.$attrs, false), _vm.$listeners)),
          _vm.preview ? [
            _vm.showViewer ? _c("image-viewer", {
              attrs: {
                "z-index": _vm.zIndex,
                "initial-index": _vm.imageIndex,
                "on-close": _vm.closeViewer,
                "url-list": _vm.previewSrcList
              }
            }) : _vm._e()
          ] : _vm._e()
        ], 2);
      };
      var mainvue_type_template_id_44d84a7c_staticRenderFns = [];
      mainvue_type_template_id_44d84a7c_render._withStripped = true;
      var image_viewervue_type_template_id_5e73b307_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("transition", { attrs: { name: "viewer-fade" } }, [
          _c("div", {
            ref: "el-image-viewer__wrapper",
            staticClass: "el-image-viewer__wrapper",
            style: { "z-index": _vm.viewerZIndex },
            attrs: { tabindex: "-1" }
          }, [
            _c("div", {
              staticClass: "el-image-viewer__mask",
              on: {
                click: function($event) {
                  if ($event.target !== $event.currentTarget) {
                    return null;
                  }
                  return _vm.handleMaskClick($event);
                }
              }
            }),
            _c("span", {
              staticClass: "el-image-viewer__btn el-image-viewer__close",
              on: { click: _vm.hide }
            }, [_c("i", { staticClass: "el-icon-close" })]),
            !_vm.isSingle ? [
              _c("span", {
                staticClass: "el-image-viewer__btn el-image-viewer__prev",
                class: { "is-disabled": !_vm.infinite && _vm.isFirst },
                on: { click: _vm.prev }
              }, [_c("i", { staticClass: "el-icon-arrow-left" })]),
              _c("span", {
                staticClass: "el-image-viewer__btn el-image-viewer__next",
                class: { "is-disabled": !_vm.infinite && _vm.isLast },
                on: { click: _vm.next }
              }, [_c("i", { staticClass: "el-icon-arrow-right" })])
            ] : _vm._e(),
            _c("div", { staticClass: "el-image-viewer__btn el-image-viewer__actions" }, [
              _c("div", { staticClass: "el-image-viewer__actions__inner" }, [
                _c("i", {
                  staticClass: "el-icon-zoom-out",
                  on: {
                    click: function($event) {
                      _vm.handleActions("zoomOut");
                    }
                  }
                }),
                _c("i", {
                  staticClass: "el-icon-zoom-in",
                  on: {
                    click: function($event) {
                      _vm.handleActions("zoomIn");
                    }
                  }
                }),
                _c("i", { staticClass: "el-image-viewer__actions__divider" }),
                _c("i", { class: _vm.mode.icon, on: { click: _vm.toggleMode } }),
                _c("i", { staticClass: "el-image-viewer__actions__divider" }),
                _c("i", {
                  staticClass: "el-icon-refresh-left",
                  on: {
                    click: function($event) {
                      _vm.handleActions("anticlocelise");
                    }
                  }
                }),
                _c("i", {
                  staticClass: "el-icon-refresh-right",
                  on: {
                    click: function($event) {
                      _vm.handleActions("clocelise");
                    }
                  }
                })
              ])
            ]),
            _c("div", { staticClass: "el-image-viewer__canvas" }, _vm._l(_vm.urlList, function(url2, i) {
              return i === _vm.index ? _c("img", {
                key: url2,
                ref: "img",
                refInFor: true,
                staticClass: "el-image-viewer__img",
                style: _vm.imgStyle,
                attrs: { src: _vm.currentImg },
                on: {
                  load: _vm.handleImgLoad,
                  error: _vm.handleImgError,
                  mousedown: _vm.handleMouseDown
                }
              }) : _vm._e();
            }), 0)
          ], 2)
        ]);
      };
      var image_viewervue_type_template_id_5e73b307_staticRenderFns = [];
      image_viewervue_type_template_id_5e73b307_render._withStripped = true;
      var image_viewervue_type_script_lang_js_extends = Object.assign || function(target2) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target2[key] = source[key];
            }
          }
        }
        return target2;
      };
      var Mode = {
        CONTAIN: {
          name: "contain",
          icon: "el-icon-full-screen"
        },
        ORIGINAL: {
          name: "original",
          icon: "el-icon-c-scale-to-original"
        }
      };
      var mousewheelEventName = Object(util_["isFirefox"])() ? "DOMMouseScroll" : "mousewheel";
      var image_viewervue_type_script_lang_js_ = {
        name: "elImageViewer",
        props: {
          urlList: {
            type: Array,
            default: function _default116() {
              return [];
            }
          },
          zIndex: {
            type: Number,
            default: 2e3
          },
          onSwitch: {
            type: Function,
            default: function _default116() {
            }
          },
          onClose: {
            type: Function,
            default: function _default116() {
            }
          },
          initialIndex: {
            type: Number,
            default: 0
          },
          appendToBody: {
            type: Boolean,
            default: true
          },
          maskClosable: {
            type: Boolean,
            default: true
          }
        },
        data: function data25() {
          return {
            index: this.initialIndex,
            isShow: false,
            infinite: true,
            loading: false,
            mode: Mode.CONTAIN,
            transform: {
              scale: 1,
              deg: 0,
              offsetX: 0,
              offsetY: 0,
              enableTransition: false
            }
          };
        },
        computed: {
          isSingle: function isSingle() {
            return this.urlList.length <= 1;
          },
          isFirst: function isFirst() {
            return this.index === 0;
          },
          isLast: function isLast() {
            return this.index === this.urlList.length - 1;
          },
          currentImg: function currentImg() {
            return this.urlList[this.index];
          },
          imgStyle: function imgStyle() {
            var _transform = this.transform, scale = _transform.scale, deg = _transform.deg, offsetX = _transform.offsetX, offsetY = _transform.offsetY, enableTransition = _transform.enableTransition;
            var style2 = {
              transform: "scale(" + scale + ") rotate(" + deg + "deg)",
              transition: enableTransition ? "transform .3s" : "",
              "margin-left": offsetX + "px",
              "margin-top": offsetY + "px"
            };
            if (this.mode === Mode.CONTAIN) {
              style2.maxWidth = style2.maxHeight = "100%";
            }
            return style2;
          },
          viewerZIndex: function viewerZIndex() {
            var nextZIndex3 = popup_["PopupManager"].nextZIndex();
            return this.zIndex > nextZIndex3 ? this.zIndex : nextZIndex3;
          }
        },
        watch: {
          index: {
            handler: function handler2(val) {
              this.reset();
              this.onSwitch(val);
            }
          },
          currentImg: function currentImg(val) {
            var _this = this;
            this.$nextTick(function(_) {
              var $img = _this.$refs.img[0];
              if (!$img.complete) {
                _this.loading = true;
              }
            });
          }
        },
        methods: {
          hide: function hide2() {
            this.deviceSupportUninstall();
            this.onClose();
          },
          deviceSupportInstall: function deviceSupportInstall() {
            var _this2 = this;
            this._keyDownHandler = function(e) {
              e.stopPropagation();
              var keyCode2 = e.keyCode;
              switch (keyCode2) {
                case 27:
                  _this2.hide();
                  break;
                case 32:
                  _this2.toggleMode();
                  break;
                case 37:
                  _this2.prev();
                  break;
                case 38:
                  _this2.handleActions("zoomIn");
                  break;
                case 39:
                  _this2.next();
                  break;
                case 40:
                  _this2.handleActions("zoomOut");
                  break;
              }
            };
            this._mouseWheelHandler = Object(util_["rafThrottle"])(function(e) {
              var delta = e.wheelDelta ? e.wheelDelta : -e.detail;
              if (delta > 0) {
                _this2.handleActions("zoomIn", {
                  zoomRate: 0.015,
                  enableTransition: false
                });
              } else {
                _this2.handleActions("zoomOut", {
                  zoomRate: 0.015,
                  enableTransition: false
                });
              }
            });
            Object(dom_["on"])(document, "keydown", this._keyDownHandler);
            Object(dom_["on"])(document, mousewheelEventName, this._mouseWheelHandler);
          },
          deviceSupportUninstall: function deviceSupportUninstall() {
            Object(dom_["off"])(document, "keydown", this._keyDownHandler);
            Object(dom_["off"])(document, mousewheelEventName, this._mouseWheelHandler);
            this._keyDownHandler = null;
            this._mouseWheelHandler = null;
          },
          handleImgLoad: function handleImgLoad(e) {
            this.loading = false;
          },
          handleImgError: function handleImgError(e) {
            this.loading = false;
            e.target.alt = "\u52A0\u8F7D\u5931\u8D25";
          },
          handleMouseDown: function handleMouseDown(e) {
            var _this3 = this;
            if (this.loading || e.button !== 0)
              return;
            var _transform2 = this.transform, offsetX = _transform2.offsetX, offsetY = _transform2.offsetY;
            var startX = e.pageX;
            var startY = e.pageY;
            this._dragHandler = Object(util_["rafThrottle"])(function(ev) {
              _this3.transform.offsetX = offsetX + ev.pageX - startX;
              _this3.transform.offsetY = offsetY + ev.pageY - startY;
            });
            Object(dom_["on"])(document, "mousemove", this._dragHandler);
            Object(dom_["on"])(document, "mouseup", function(ev) {
              Object(dom_["off"])(document, "mousemove", _this3._dragHandler);
            });
            e.preventDefault();
          },
          handleMaskClick: function handleMaskClick() {
            if (this.maskClosable) {
              this.hide();
            }
          },
          reset: function reset2() {
            this.transform = {
              scale: 1,
              deg: 0,
              offsetX: 0,
              offsetY: 0,
              enableTransition: false
            };
          },
          toggleMode: function toggleMode() {
            if (this.loading)
              return;
            var modeNames = Object.keys(Mode);
            var modeValues = Object.values(Mode);
            var index2 = modeValues.indexOf(this.mode);
            var nextIndex = (index2 + 1) % modeNames.length;
            this.mode = Mode[modeNames[nextIndex]];
            this.reset();
          },
          prev: function prev() {
            if (this.isFirst && !this.infinite)
              return;
            var len = this.urlList.length;
            this.index = (this.index - 1 + len) % len;
          },
          next: function next() {
            if (this.isLast && !this.infinite)
              return;
            var len = this.urlList.length;
            this.index = (this.index + 1) % len;
          },
          handleActions: function handleActions(action) {
            var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
            if (this.loading)
              return;
            var _zoomRate$rotateDeg$e = image_viewervue_type_script_lang_js_extends({
              zoomRate: 0.2,
              rotateDeg: 90,
              enableTransition: true
            }, options2), zoomRate = _zoomRate$rotateDeg$e.zoomRate, rotateDeg = _zoomRate$rotateDeg$e.rotateDeg, enableTransition = _zoomRate$rotateDeg$e.enableTransition;
            var transform = this.transform;
            switch (action) {
              case "zoomOut":
                if (transform.scale > 0.2) {
                  transform.scale = parseFloat((transform.scale - zoomRate).toFixed(3));
                }
                break;
              case "zoomIn":
                transform.scale = parseFloat((transform.scale + zoomRate).toFixed(3));
                break;
              case "clocelise":
                transform.deg += rotateDeg;
                break;
              case "anticlocelise":
                transform.deg -= rotateDeg;
                break;
            }
            transform.enableTransition = enableTransition;
          }
        },
        mounted: function mounted18() {
          this.deviceSupportInstall();
          if (this.appendToBody) {
            document.body.appendChild(this.$el);
          }
          this.$refs["el-image-viewer__wrapper"].focus();
        },
        destroyed: function destroyed17() {
          if (this.appendToBody && this.$el && this.$el.parentNode) {
            this.$el.parentNode.removeChild(this.$el);
          }
        }
      };
      var src_image_viewervue_type_script_lang_js_ = image_viewervue_type_script_lang_js_;
      var image_viewer_component = normalizeComponent(src_image_viewervue_type_script_lang_js_, image_viewervue_type_template_id_5e73b307_render, image_viewervue_type_template_id_5e73b307_staticRenderFns, false, null, null, null);
      image_viewer_component.options.__file = "packages/image/src/image-viewer.vue";
      var image_viewer = image_viewer_component.exports;
      var isSupportObjectFit = function isSupportObjectFit2() {
        return document.documentElement.style.objectFit !== void 0;
      };
      var ObjectFit = {
        NONE: "none",
        CONTAIN: "contain",
        COVER: "cover",
        FILL: "fill",
        SCALE_DOWN: "scale-down"
      };
      var prevOverflow = "";
      var image_src_mainvue_type_script_lang_js_ = {
        name: "ElImage",
        mixins: [locale_default.a],
        inheritAttrs: false,
        components: {
          ImageViewer: image_viewer
        },
        props: {
          src: String,
          fit: String,
          lazy: Boolean,
          scrollContainer: {},
          previewSrcList: {
            type: Array,
            default: function _default116() {
              return [];
            }
          },
          zIndex: {
            type: Number,
            default: 2e3
          }
        },
        data: function data25() {
          return {
            loading: true,
            error: false,
            show: !this.lazy,
            imageWidth: 0,
            imageHeight: 0,
            showViewer: false
          };
        },
        computed: {
          imageStyle: function imageStyle() {
            var fit = this.fit;
            if (!this.$isServer && fit) {
              return isSupportObjectFit() ? { "object-fit": fit } : this.getImageStyle(fit);
            }
            return {};
          },
          alignCenter: function alignCenter() {
            return !this.$isServer && !isSupportObjectFit() && this.fit !== ObjectFit.FILL;
          },
          preview: function preview() {
            var previewSrcList = this.previewSrcList;
            return Array.isArray(previewSrcList) && previewSrcList.length > 0;
          },
          imageIndex: function imageIndex() {
            var previewIndex = 0;
            var srcIndex = this.previewSrcList.indexOf(this.src);
            if (srcIndex >= 0) {
              previewIndex = srcIndex;
            }
            return previewIndex;
          }
        },
        watch: {
          src: function src2(val) {
            this.show && this.loadImage();
          },
          show: function show2(val) {
            val && this.loadImage();
          }
        },
        mounted: function mounted18() {
          if (this.lazy) {
            this.addLazyLoadListener();
          } else {
            this.loadImage();
          }
        },
        beforeDestroy: function beforeDestroy13() {
          this.lazy && this.removeLazyLoadListener();
        },
        methods: {
          loadImage: function loadImage() {
            var _this = this;
            if (this.$isServer)
              return;
            this.loading = true;
            this.error = false;
            var img = new Image();
            img.onload = function(e) {
              return _this.handleLoad(e, img);
            };
            img.onerror = this.handleError.bind(this);
            Object.keys(this.$attrs).forEach(function(key) {
              var value6 = _this.$attrs[key];
              img.setAttribute(key, value6);
            });
            img.src = this.src;
          },
          handleLoad: function handleLoad(e, img) {
            this.imageWidth = img.width;
            this.imageHeight = img.height;
            this.loading = false;
            this.error = false;
          },
          handleError: function handleError2(e) {
            this.loading = false;
            this.error = true;
            this.$emit("error", e);
          },
          handleLazyLoad: function handleLazyLoad() {
            if (Object(dom_["isInContainer"])(this.$el, this._scrollContainer)) {
              this.show = true;
              this.removeLazyLoadListener();
            }
          },
          addLazyLoadListener: function addLazyLoadListener() {
            if (this.$isServer)
              return;
            var scrollContainer = this.scrollContainer;
            var _scrollContainer = null;
            if (Object(types_["isHtmlElement"])(scrollContainer)) {
              _scrollContainer = scrollContainer;
            } else if (Object(types_["isString"])(scrollContainer)) {
              _scrollContainer = document.querySelector(scrollContainer);
            } else {
              _scrollContainer = Object(dom_["getScrollContainer"])(this.$el);
            }
            if (_scrollContainer) {
              this._scrollContainer = _scrollContainer;
              this._lazyLoadHandler = throttle_default()(200, this.handleLazyLoad);
              Object(dom_["on"])(_scrollContainer, "scroll", this._lazyLoadHandler);
              this.handleLazyLoad();
            }
          },
          removeLazyLoadListener: function removeLazyLoadListener() {
            var _scrollContainer = this._scrollContainer, _lazyLoadHandler = this._lazyLoadHandler;
            if (this.$isServer || !_scrollContainer || !_lazyLoadHandler)
              return;
            Object(dom_["off"])(_scrollContainer, "scroll", _lazyLoadHandler);
            this._scrollContainer = null;
            this._lazyLoadHandler = null;
          },
          getImageStyle: function getImageStyle(fit) {
            var imageWidth = this.imageWidth, imageHeight = this.imageHeight;
            var _$el = this.$el, containerWidth = _$el.clientWidth, containerHeight = _$el.clientHeight;
            if (!imageWidth || !imageHeight || !containerWidth || !containerHeight)
              return {};
            var imageAspectRatio = imageWidth / imageHeight;
            var containerAspectRatio = containerWidth / containerHeight;
            if (fit === ObjectFit.SCALE_DOWN) {
              var isSmaller = imageWidth < containerWidth && imageHeight < containerHeight;
              fit = isSmaller ? ObjectFit.NONE : ObjectFit.CONTAIN;
            }
            switch (fit) {
              case ObjectFit.NONE:
                return { width: "auto", height: "auto" };
              case ObjectFit.CONTAIN:
                return imageAspectRatio < containerAspectRatio ? { width: "auto" } : { height: "auto" };
              case ObjectFit.COVER:
                return imageAspectRatio < containerAspectRatio ? { height: "auto" } : { width: "auto" };
              default:
                return {};
            }
          },
          clickHandler: function clickHandler() {
            if (!this.preview) {
              return;
            }
            prevOverflow = document.body.style.overflow;
            document.body.style.overflow = "hidden";
            this.showViewer = true;
          },
          closeViewer: function closeViewer() {
            document.body.style.overflow = prevOverflow;
            this.showViewer = false;
          }
        }
      };
      var packages_image_src_mainvue_type_script_lang_js_ = image_src_mainvue_type_script_lang_js_;
      var image_src_main_component = normalizeComponent(packages_image_src_mainvue_type_script_lang_js_, mainvue_type_template_id_44d84a7c_render, mainvue_type_template_id_44d84a7c_staticRenderFns, false, null, null, null);
      image_src_main_component.options.__file = "packages/image/src/main.vue";
      var image_src_main = image_src_main_component.exports;
      image_src_main.install = function(Vue2) {
        Vue2.component(image_src_main.name, image_src_main);
      };
      var packages_image = image_src_main;
      var mainvue_type_template_id_6d9756be_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", { staticClass: "el-calendar" }, [
          _c("div", { staticClass: "el-calendar__header" }, [
            _c("div", { staticClass: "el-calendar__title" }, [
              _vm._v("\n      " + _vm._s(_vm.i18nDate) + "\n    ")
            ]),
            _vm.validatedRange.length === 0 ? _c("div", { staticClass: "el-calendar__button-group" }, [
              _c("el-button-group", [
                _c("el-button", {
                  attrs: { type: "plain", size: "mini" },
                  on: {
                    click: function($event) {
                      _vm.selectDate("prev-month");
                    }
                  }
                }, [
                  _vm._v("\n          " + _vm._s(_vm.t("el.datepicker.prevMonth")) + "\n        ")
                ]),
                _c("el-button", {
                  attrs: { type: "plain", size: "mini" },
                  on: {
                    click: function($event) {
                      _vm.selectDate("today");
                    }
                  }
                }, [
                  _vm._v("\n          " + _vm._s(_vm.t("el.datepicker.today")) + "\n        ")
                ]),
                _c("el-button", {
                  attrs: { type: "plain", size: "mini" },
                  on: {
                    click: function($event) {
                      _vm.selectDate("next-month");
                    }
                  }
                }, [
                  _vm._v("\n          " + _vm._s(_vm.t("el.datepicker.nextMonth")) + "\n        ")
                ])
              ], 1)
            ], 1) : _vm._e()
          ]),
          _vm.validatedRange.length === 0 ? _c("div", { key: "no-range", staticClass: "el-calendar__body" }, [
            _c("date-table", {
              attrs: {
                date: _vm.date,
                "selected-day": _vm.realSelectedDay,
                "first-day-of-week": _vm.realFirstDayOfWeek
              },
              on: { pick: _vm.pickDay }
            })
          ], 1) : _c("div", { key: "has-range", staticClass: "el-calendar__body" }, _vm._l(_vm.validatedRange, function(range3, index2) {
            return _c("date-table", {
              key: index2,
              attrs: {
                date: range3[0],
                "selected-day": _vm.realSelectedDay,
                range: range3,
                "hide-header": index2 !== 0,
                "first-day-of-week": _vm.realFirstDayOfWeek
              },
              on: { pick: _vm.pickDay }
            });
          }), 1)
        ]);
      };
      var mainvue_type_template_id_6d9756be_staticRenderFns = [];
      mainvue_type_template_id_6d9756be_render._withStripped = true;
      var date_ = __webpack_require__(20);
      var date_default = /* @__PURE__ */ __webpack_require__.n(date_);
      var src_date_tablevue_type_script_lang_js_ = {
        props: {
          selectedDay: String,
          range: {
            type: Array,
            validator: function validator2(val) {
              if (!(val && val.length))
                return true;
              var start = val[0], end = val[1];
              return Object(date_util_["validateRangeInOneMonth"])(start, end);
            }
          },
          date: Date,
          hideHeader: Boolean,
          firstDayOfWeek: Number
        },
        inject: ["elCalendar"],
        methods: {
          toNestedArr: function toNestedArr(days) {
            return Object(date_util_["range"])(days.length / 7).map(function(_, index2) {
              var start = index2 * 7;
              return days.slice(start, start + 7);
            });
          },
          getFormateDate: function getFormateDate(day, type3) {
            if (!day || ["prev", "current", "next"].indexOf(type3) === -1) {
              throw new Error("invalid day or type");
            }
            var prefix = this.curMonthDatePrefix;
            if (type3 === "prev") {
              prefix = this.prevMonthDatePrefix;
            } else if (type3 === "next") {
              prefix = this.nextMonthDatePrefix;
            }
            day = ("00" + day).slice(-2);
            return prefix + "-" + day;
          },
          getCellClass: function getCellClass(_ref) {
            var text = _ref.text, type3 = _ref.type;
            var classes = [type3];
            if (type3 === "current") {
              var date3 = this.getFormateDate(text, type3);
              if (date3 === this.selectedDay) {
                classes.push("is-selected");
              }
              if (date3 === this.formatedToday) {
                classes.push("is-today");
              }
            }
            return classes;
          },
          pickDay: function pickDay(_ref2) {
            var text = _ref2.text, type3 = _ref2.type;
            var date3 = this.getFormateDate(text, type3);
            this.$emit("pick", date3);
          },
          cellRenderProxy: function cellRenderProxy(_ref3) {
            var text = _ref3.text, type3 = _ref3.type;
            var h = this.$createElement;
            var render37 = this.elCalendar.$scopedSlots.dateCell;
            if (!render37)
              return h("span", [text]);
            var day = this.getFormateDate(text, type3);
            var date3 = new Date(day);
            var data25 = {
              isSelected: this.selectedDay === day,
              type: type3 + "-month",
              day
            };
            return render37({ date: date3, data: data25 });
          }
        },
        computed: {
          WEEK_DAYS: function WEEK_DAYS() {
            return Object(date_util_["getI18nSettings"])().dayNames;
          },
          prevMonthDatePrefix: function prevMonthDatePrefix() {
            var temp = new Date(this.date.getTime());
            temp.setDate(0);
            return date_default.a.format(temp, "yyyy-MM");
          },
          curMonthDatePrefix: function curMonthDatePrefix() {
            return date_default.a.format(this.date, "yyyy-MM");
          },
          nextMonthDatePrefix: function nextMonthDatePrefix() {
            var temp = new Date(this.date.getFullYear(), this.date.getMonth() + 1, 1);
            return date_default.a.format(temp, "yyyy-MM");
          },
          formatedToday: function formatedToday() {
            return this.elCalendar.formatedToday;
          },
          isInRange: function isInRange() {
            return this.range && this.range.length;
          },
          rows: function rows() {
            var days = [];
            if (this.isInRange) {
              var _range = this.range, start = _range[0], end = _range[1];
              var currentMonthRange = Object(date_util_["range"])(end.getDate() - start.getDate() + 1).map(function(_, index2) {
                return {
                  text: start.getDate() + index2,
                  type: "current"
                };
              });
              var remaining = currentMonthRange.length % 7;
              remaining = remaining === 0 ? 0 : 7 - remaining;
              var nextMonthRange = Object(date_util_["range"])(remaining).map(function(_, index2) {
                return {
                  text: index2 + 1,
                  type: "next"
                };
              });
              days = currentMonthRange.concat(nextMonthRange);
            } else {
              var date3 = this.date;
              var firstDay = Object(date_util_["getFirstDayOfMonth"])(date3);
              firstDay = firstDay === 0 ? 7 : firstDay;
              var firstDayOfWeek2 = typeof this.firstDayOfWeek === "number" ? this.firstDayOfWeek : 1;
              var offset = (7 + firstDay - firstDayOfWeek2) % 7;
              var prevMonthDays = Object(date_util_["getPrevMonthLastDays"])(date3, offset).map(function(day) {
                return {
                  text: day,
                  type: "prev"
                };
              });
              var currentMonthDays = Object(date_util_["getMonthDays"])(date3).map(function(day) {
                return {
                  text: day,
                  type: "current"
                };
              });
              days = [].concat(prevMonthDays, currentMonthDays);
              var nextMonthDays = Object(date_util_["range"])(42 - days.length).map(function(_, index2) {
                return {
                  text: index2 + 1,
                  type: "next"
                };
              });
              days = days.concat(nextMonthDays);
            }
            return this.toNestedArr(days);
          },
          weekDays: function weekDays2() {
            var start = this.firstDayOfWeek;
            var WEEK_DAYS = this.WEEK_DAYS;
            if (typeof start !== "number" || start === 0) {
              return WEEK_DAYS.slice();
            } else {
              return WEEK_DAYS.slice(start).concat(WEEK_DAYS.slice(0, start));
            }
          }
        },
        render: function render37() {
          var _this = this;
          var h = arguments[0];
          var thead = this.hideHeader ? null : h("thead", [this.weekDays.map(function(day) {
            return h("th", { key: day }, [day]);
          })]);
          return h("table", {
            "class": {
              "el-calendar-table": true,
              "is-range": this.isInRange
            },
            attrs: {
              cellspacing: "0",
              cellpadding: "0"
            }
          }, [thead, h("tbody", [this.rows.map(function(row, index2) {
            return h("tr", {
              "class": {
                "el-calendar-table__row": true,
                "el-calendar-table__row--hide-border": index2 === 0 && _this.hideHeader
              },
              key: index2
            }, [row.map(function(cell2, key) {
              return h("td", {
                key,
                "class": _this.getCellClass(cell2),
                on: {
                  "click": _this.pickDay.bind(_this, cell2)
                }
              }, [h("div", { "class": "el-calendar-day" }, [_this.cellRenderProxy(cell2)])]);
            })]);
          })])]);
        }
      };
      var calendar_src_date_tablevue_type_script_lang_js_ = src_date_tablevue_type_script_lang_js_;
      var date_table_render, date_table_staticRenderFns;
      var src_date_table_component = normalizeComponent(calendar_src_date_tablevue_type_script_lang_js_, date_table_render, date_table_staticRenderFns, false, null, null, null);
      src_date_table_component.options.__file = "packages/calendar/src/date-table.vue";
      var src_date_table = src_date_table_component.exports;
      var validTypes = ["prev-month", "today", "next-month"];
      var weekDays = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
      var oneDay = 864e5;
      var calendar_src_mainvue_type_script_lang_js_ = {
        name: "ElCalendar",
        mixins: [locale_default.a],
        components: {
          DateTable: src_date_table,
          ElButton: button_default.a,
          ElButtonGroup: button_group_default.a
        },
        props: {
          value: [Date, String, Number],
          range: {
            type: Array,
            validator: function validator2(range3) {
              if (Array.isArray(range3)) {
                return range3.length === 2 && range3.every(function(item) {
                  return typeof item === "string" || typeof item === "number" || item instanceof Date;
                });
              } else {
                return true;
              }
            }
          },
          firstDayOfWeek: {
            type: Number,
            default: 1
          }
        },
        provide: function provide11() {
          return {
            elCalendar: this
          };
        },
        methods: {
          pickDay: function pickDay(day) {
            this.realSelectedDay = day;
          },
          selectDate: function selectDate(type3) {
            if (validTypes.indexOf(type3) === -1) {
              throw new Error("invalid type " + type3);
            }
            var day = "";
            if (type3 === "prev-month") {
              day = this.prevMonthDatePrefix + "-01";
            } else if (type3 === "next-month") {
              day = this.nextMonthDatePrefix + "-01";
            } else {
              day = this.formatedToday;
            }
            if (day === this.formatedDate)
              return;
            this.pickDay(day);
          },
          toDate: function toDate3(val) {
            if (!val) {
              throw new Error("invalid val");
            }
            return val instanceof Date ? val : new Date(val);
          },
          rangeValidator: function rangeValidator(date3, isStart) {
            var firstDayOfWeek2 = this.realFirstDayOfWeek;
            var expected = isStart ? firstDayOfWeek2 : firstDayOfWeek2 === 0 ? 6 : firstDayOfWeek2 - 1;
            var message = (isStart ? "start" : "end") + " of range should be " + weekDays[expected] + ".";
            if (date3.getDay() !== expected) {
              console.warn("[ElementCalendar]", message, "Invalid range will be ignored.");
              return false;
            }
            return true;
          }
        },
        computed: {
          prevMonthDatePrefix: function prevMonthDatePrefix() {
            var temp = new Date(this.date.getTime());
            temp.setDate(0);
            return date_default.a.format(temp, "yyyy-MM");
          },
          curMonthDatePrefix: function curMonthDatePrefix() {
            return date_default.a.format(this.date, "yyyy-MM");
          },
          nextMonthDatePrefix: function nextMonthDatePrefix() {
            var temp = new Date(this.date.getFullYear(), this.date.getMonth() + 1, 1);
            return date_default.a.format(temp, "yyyy-MM");
          },
          formatedDate: function formatedDate() {
            return date_default.a.format(this.date, "yyyy-MM-dd");
          },
          i18nDate: function i18nDate() {
            var year = this.date.getFullYear();
            var month = this.date.getMonth() + 1;
            return year + " " + this.t("el.datepicker.year") + " " + this.t("el.datepicker.month" + month);
          },
          formatedToday: function formatedToday() {
            return date_default.a.format(this.now, "yyyy-MM-dd");
          },
          realSelectedDay: {
            get: function get7() {
              if (!this.value)
                return this.selectedDay;
              return this.formatedDate;
            },
            set: function set3(val) {
              this.selectedDay = val;
              var date3 = new Date(val);
              this.$emit("input", date3);
            }
          },
          date: function date3() {
            if (!this.value) {
              if (this.realSelectedDay) {
                var d = this.selectedDay.split("-");
                return new Date(d[0], d[1] - 1, d[2]);
              } else if (this.validatedRange.length) {
                return this.validatedRange[0][0];
              }
              return this.now;
            } else {
              return this.toDate(this.value);
            }
          },
          validatedRange: function validatedRange() {
            var _this = this;
            var range3 = this.range;
            if (!range3)
              return [];
            range3 = range3.reduce(function(prev, val, index2) {
              var date3 = _this.toDate(val);
              if (_this.rangeValidator(date3, index2 === 0)) {
                prev = prev.concat(date3);
              }
              return prev;
            }, []);
            if (range3.length === 2) {
              var _range = range3, start = _range[0], end = _range[1];
              if (start > end) {
                console.warn("[ElementCalendar]end time should be greater than start time");
                return [];
              }
              if (Object(date_util_["validateRangeInOneMonth"])(start, end)) {
                return [[start, end]];
              }
              var data25 = [];
              var startDay = new Date(start.getFullYear(), start.getMonth() + 1, 1);
              var lastDay = this.toDate(startDay.getTime() - oneDay);
              if (!Object(date_util_["validateRangeInOneMonth"])(startDay, end)) {
                console.warn("[ElementCalendar]start time and end time interval must not exceed two months");
                return [];
              }
              data25.push([start, lastDay]);
              var firstDayOfWeek2 = this.realFirstDayOfWeek;
              var nextMontFirstDay = startDay.getDay();
              var interval = 0;
              if (nextMontFirstDay !== firstDayOfWeek2) {
                if (firstDayOfWeek2 === 0) {
                  interval = 7 - nextMontFirstDay;
                } else {
                  interval = firstDayOfWeek2 - nextMontFirstDay;
                  interval = interval > 0 ? interval : 7 + interval;
                }
              }
              startDay = this.toDate(startDay.getTime() + interval * oneDay);
              if (startDay.getDate() < end.getDate()) {
                data25.push([startDay, end]);
              }
              return data25;
            }
            return [];
          },
          realFirstDayOfWeek: function realFirstDayOfWeek() {
            if (this.firstDayOfWeek < 1 || this.firstDayOfWeek > 6) {
              return 0;
            }
            return Math.floor(this.firstDayOfWeek);
          }
        },
        data: function data25() {
          return {
            selectedDay: "",
            now: new Date()
          };
        }
      };
      var packages_calendar_src_mainvue_type_script_lang_js_ = calendar_src_mainvue_type_script_lang_js_;
      var calendar_src_main_component = normalizeComponent(packages_calendar_src_mainvue_type_script_lang_js_, mainvue_type_template_id_6d9756be_render, mainvue_type_template_id_6d9756be_staticRenderFns, false, null, null, null);
      calendar_src_main_component.options.__file = "packages/calendar/src/main.vue";
      var calendar_src_main = calendar_src_main_component.exports;
      calendar_src_main.install = function(Vue2) {
        Vue2.component(calendar_src_main.name, calendar_src_main);
      };
      var calendar = calendar_src_main;
      var mainvue_type_template_id_257dd4a9_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("transition", { attrs: { name: "el-fade-in" } }, [
          _vm.visible ? _c("div", {
            staticClass: "el-backtop",
            style: {
              right: _vm.styleRight,
              bottom: _vm.styleBottom
            },
            on: {
              click: function($event) {
                $event.stopPropagation();
                return _vm.handleClick($event);
              }
            }
          }, [
            _vm._t("default", [_c("el-icon", { attrs: { name: "caret-top" } })])
          ], 2) : _vm._e()
        ]);
      };
      var mainvue_type_template_id_257dd4a9_staticRenderFns = [];
      mainvue_type_template_id_257dd4a9_render._withStripped = true;
      var cubic = function cubic2(value6) {
        return Math.pow(value6, 3);
      };
      var easeInOutCubic = function easeInOutCubic2(value6) {
        return value6 < 0.5 ? cubic(value6 * 2) / 2 : 1 - cubic((1 - value6) * 2) / 2;
      };
      var backtop_src_mainvue_type_script_lang_js_ = {
        name: "ElBacktop",
        props: {
          visibilityHeight: {
            type: Number,
            default: 200
          },
          target: [String],
          right: {
            type: Number,
            default: 40
          },
          bottom: {
            type: Number,
            default: 40
          }
        },
        data: function data25() {
          return {
            el: null,
            container: null,
            visible: false
          };
        },
        computed: {
          styleBottom: function styleBottom() {
            return this.bottom + "px";
          },
          styleRight: function styleRight() {
            return this.right + "px";
          }
        },
        mounted: function mounted18() {
          this.init();
          this.throttledScrollHandler = throttle_default()(300, this.onScroll);
          this.container.addEventListener("scroll", this.throttledScrollHandler);
        },
        methods: {
          init: function init2() {
            this.container = document;
            this.el = document.documentElement;
            if (this.target) {
              this.el = document.querySelector(this.target);
              if (!this.el) {
                throw new Error("target is not existed: " + this.target);
              }
              this.container = this.el;
            }
          },
          onScroll: function onScroll() {
            var scrollTop = this.el.scrollTop;
            this.visible = scrollTop >= this.visibilityHeight;
          },
          handleClick: function handleClick(e) {
            this.scrollToTop();
            this.$emit("click", e);
          },
          scrollToTop: function scrollToTop() {
            var el = this.el;
            var beginTime = Date.now();
            var beginValue = el.scrollTop;
            var rAF = window.requestAnimationFrame || function(func) {
              return setTimeout(func, 16);
            };
            var frameFunc = function frameFunc2() {
              var progress3 = (Date.now() - beginTime) / 500;
              if (progress3 < 1) {
                el.scrollTop = beginValue * (1 - easeInOutCubic(progress3));
                rAF(frameFunc2);
              } else {
                el.scrollTop = 0;
              }
            };
            rAF(frameFunc);
          }
        },
        beforeDestroy: function beforeDestroy13() {
          this.container.removeEventListener("scroll", this.throttledScrollHandler);
        }
      };
      var packages_backtop_src_mainvue_type_script_lang_js_ = backtop_src_mainvue_type_script_lang_js_;
      var backtop_src_main_component = normalizeComponent(packages_backtop_src_mainvue_type_script_lang_js_, mainvue_type_template_id_257dd4a9_render, mainvue_type_template_id_257dd4a9_staticRenderFns, false, null, null, null);
      backtop_src_main_component.options.__file = "packages/backtop/src/main.vue";
      var backtop_src_main = backtop_src_main_component.exports;
      backtop_src_main.install = function(Vue2) {
        Vue2.component(backtop_src_main.name, backtop_src_main);
      };
      var backtop = backtop_src_main;
      var getStyleComputedProperty = function getStyleComputedProperty2(element, property2) {
        if (element === window) {
          element = document.documentElement;
        }
        if (element.nodeType !== 1) {
          return [];
        }
        var css = window.getComputedStyle(element, null);
        return property2 ? css[property2] : css;
      };
      var entries2 = function entries3(obj) {
        return Object.keys(obj || {}).map(function(key) {
          return [key, obj[key]];
        });
      };
      var getPositionSize = function getPositionSize2(el, prop) {
        return el === window || el === document ? document.documentElement[prop] : el[prop];
      };
      var getOffsetHeight2 = function getOffsetHeight3(el) {
        return getPositionSize(el, "offsetHeight");
      };
      var getClientHeight = function getClientHeight2(el) {
        return getPositionSize(el, "clientHeight");
      };
      var scope = "ElInfiniteScroll";
      var attributes = {
        delay: {
          type: Number,
          default: 200
        },
        distance: {
          type: Number,
          default: 0
        },
        disabled: {
          type: Boolean,
          default: false
        },
        immediate: {
          type: Boolean,
          default: true
        }
      };
      var main_getScrollOptions = function getScrollOptions(el, vm) {
        if (!Object(types_["isHtmlElement"])(el))
          return {};
        return entries2(attributes).reduce(function(map2, _ref) {
          var key = _ref[0], option2 = _ref[1];
          var type3 = option2.type, defaultValue = option2.default;
          var value6 = el.getAttribute("infinite-scroll-" + key);
          value6 = Object(types_["isUndefined"])(vm[value6]) ? value6 : vm[value6];
          switch (type3) {
            case Number:
              value6 = Number(value6);
              value6 = Number.isNaN(value6) ? defaultValue : value6;
              break;
            case Boolean:
              value6 = Object(types_["isDefined"])(value6) ? value6 === "false" ? false : Boolean(value6) : defaultValue;
              break;
            default:
              value6 = type3(value6);
          }
          map2[key] = value6;
          return map2;
        }, {});
      };
      var getElementTop = function getElementTop2(el) {
        return el.getBoundingClientRect().top;
      };
      var main_handleScroll = function handleScroll(cb) {
        var _scope = this[scope], el = _scope.el, vm = _scope.vm, container = _scope.container, observer = _scope.observer;
        var _getScrollOptions = main_getScrollOptions(el, vm), distance = _getScrollOptions.distance, disabled = _getScrollOptions.disabled;
        if (disabled)
          return;
        var containerInfo = container.getBoundingClientRect();
        if (!containerInfo.width && !containerInfo.height)
          return;
        var shouldTrigger = false;
        if (container === el) {
          var scrollBottom = container.scrollTop + getClientHeight(container);
          shouldTrigger = container.scrollHeight - scrollBottom <= distance;
        } else {
          var heightBelowTop = getOffsetHeight2(el) + getElementTop(el) - getElementTop(container);
          var offsetHeight = getOffsetHeight2(container);
          var borderBottom = Number.parseFloat(getStyleComputedProperty(container, "borderBottomWidth"));
          shouldTrigger = heightBelowTop - offsetHeight + borderBottom <= distance;
        }
        if (shouldTrigger && Object(types_["isFunction"])(cb)) {
          cb.call(vm);
        } else if (observer) {
          observer.disconnect();
          this[scope].observer = null;
        }
      };
      var infinite_scroll_src_main = {
        name: "InfiniteScroll",
        inserted: function inserted2(el, binding, vnode) {
          var cb = binding.value;
          var vm = vnode.context;
          var container = Object(dom_["getScrollContainer"])(el, true);
          var _getScrollOptions2 = main_getScrollOptions(el, vm), delay2 = _getScrollOptions2.delay, immediate = _getScrollOptions2.immediate;
          var onScroll = debounce_default()(delay2, main_handleScroll.bind(el, cb));
          el[scope] = { el, vm, container, onScroll };
          if (container) {
            container.addEventListener("scroll", onScroll);
            if (immediate) {
              var observer = el[scope].observer = new MutationObserver(onScroll);
              observer.observe(container, { childList: true, subtree: true });
              onScroll();
            }
          }
        },
        unbind: function unbind3(el) {
          var _el$scope = el[scope], container = _el$scope.container, onScroll = _el$scope.onScroll;
          if (container) {
            container.removeEventListener("scroll", onScroll);
          }
        }
      };
      infinite_scroll_src_main.install = function(Vue2) {
        Vue2.directive(infinite_scroll_src_main.name, infinite_scroll_src_main);
      };
      var infinite_scroll = infinite_scroll_src_main;
      var mainvue_type_template_id_5070954c_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", { staticClass: "el-page-header" }, [
          _c("div", {
            staticClass: "el-page-header__left",
            on: {
              click: function($event) {
                _vm.$emit("back");
              }
            }
          }, [
            _c("i", { staticClass: "el-icon-back" }),
            _c("div", { staticClass: "el-page-header__title" }, [_vm._t("title", [_vm._v(_vm._s(_vm.title))])], 2)
          ]),
          _c("div", { staticClass: "el-page-header__content" }, [_vm._t("content", [_vm._v(_vm._s(_vm.content))])], 2)
        ]);
      };
      var mainvue_type_template_id_5070954c_staticRenderFns = [];
      mainvue_type_template_id_5070954c_render._withStripped = true;
      var page_header_src_mainvue_type_script_lang_js_ = {
        name: "ElPageHeader",
        props: {
          title: {
            type: String,
            default: function _default116() {
              return Object(lib_locale_["t"])("el.pageHeader.title");
            }
          },
          content: String
        }
      };
      var packages_page_header_src_mainvue_type_script_lang_js_ = page_header_src_mainvue_type_script_lang_js_;
      var page_header_src_main_component = normalizeComponent(packages_page_header_src_mainvue_type_script_lang_js_, mainvue_type_template_id_5070954c_render, mainvue_type_template_id_5070954c_staticRenderFns, false, null, null, null);
      page_header_src_main_component.options.__file = "packages/page-header/src/main.vue";
      var page_header_src_main = page_header_src_main_component.exports;
      page_header_src_main.install = function(Vue2) {
        Vue2.component(page_header_src_main.name, page_header_src_main);
      };
      var page_header = page_header_src_main;
      var cascader_panelvue_type_template_id_34932346_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", {
          class: ["el-cascader-panel", _vm.border && "is-bordered"],
          on: { keydown: _vm.handleKeyDown }
        }, _vm._l(_vm.menus, function(menu2, index2) {
          return _c("cascader-menu", {
            key: index2,
            ref: "menu",
            refInFor: true,
            attrs: { index: index2, nodes: menu2 }
          });
        }), 1);
      };
      var cascader_panelvue_type_template_id_34932346_staticRenderFns = [];
      cascader_panelvue_type_template_id_34932346_render._withStripped = true;
      var radio_ = __webpack_require__(43);
      var radio_default = /* @__PURE__ */ __webpack_require__.n(radio_);
      var stopPropagation = function stopPropagation2(e) {
        return e.stopPropagation();
      };
      var cascader_nodevue_type_script_lang_js_ = {
        inject: ["panel"],
        components: {
          ElCheckbox: checkbox_default.a,
          ElRadio: radio_default.a
        },
        props: {
          node: {
            required: true
          },
          nodeId: String
        },
        computed: {
          config: function config2() {
            return this.panel.config;
          },
          isLeaf: function isLeaf() {
            return this.node.isLeaf;
          },
          isDisabled: function isDisabled4() {
            return this.node.isDisabled;
          },
          checkedValue: function checkedValue() {
            return this.panel.checkedValue;
          },
          isChecked: function isChecked2() {
            return this.node.isSameNode(this.checkedValue);
          },
          inActivePath: function inActivePath() {
            return this.isInPath(this.panel.activePath);
          },
          inCheckedPath: function inCheckedPath() {
            var _this = this;
            if (!this.config.checkStrictly)
              return false;
            return this.panel.checkedNodePaths.some(function(checkedPath) {
              return _this.isInPath(checkedPath);
            });
          },
          value: function value6() {
            return this.node.getValueByOption();
          }
        },
        methods: {
          handleExpand: function handleExpand() {
            var _this2 = this;
            var panel2 = this.panel, node = this.node, isDisabled4 = this.isDisabled, config2 = this.config;
            var multiple = config2.multiple, checkStrictly = config2.checkStrictly;
            if (!checkStrictly && isDisabled4 || node.loading)
              return;
            if (config2.lazy && !node.loaded) {
              panel2.lazyLoad(node, function() {
                var isLeaf = _this2.isLeaf;
                if (!isLeaf)
                  _this2.handleExpand();
                if (multiple) {
                  var checked = isLeaf ? node.checked : false;
                  _this2.handleMultiCheckChange(checked);
                }
              });
            } else {
              panel2.handleExpand(node);
            }
          },
          handleCheckChange: function handleCheckChange() {
            var panel2 = this.panel, value6 = this.value, node = this.node;
            panel2.handleCheckChange(value6);
            panel2.handleExpand(node);
          },
          handleMultiCheckChange: function handleMultiCheckChange(checked) {
            this.node.doCheck(checked);
            this.panel.calculateMultiCheckedValue();
          },
          isInPath: function isInPath(pathNodes) {
            var node = this.node;
            var selectedPathNode = pathNodes[node.level - 1] || {};
            return selectedPathNode.uid === node.uid;
          },
          renderPrefix: function renderPrefix(h) {
            var isLeaf = this.isLeaf, isChecked2 = this.isChecked, config2 = this.config;
            var checkStrictly = config2.checkStrictly, multiple = config2.multiple;
            if (multiple) {
              return this.renderCheckbox(h);
            } else if (checkStrictly) {
              return this.renderRadio(h);
            } else if (isLeaf && isChecked2) {
              return this.renderCheckIcon(h);
            }
            return null;
          },
          renderPostfix: function renderPostfix(h) {
            var node = this.node, isLeaf = this.isLeaf;
            if (node.loading) {
              return this.renderLoadingIcon(h);
            } else if (!isLeaf) {
              return this.renderExpandIcon(h);
            }
            return null;
          },
          renderCheckbox: function renderCheckbox(h) {
            var node = this.node, config2 = this.config, isDisabled4 = this.isDisabled;
            var events2 = {
              on: { change: this.handleMultiCheckChange },
              nativeOn: {}
            };
            if (config2.checkStrictly) {
              events2.nativeOn.click = stopPropagation;
            }
            return h("el-checkbox", external_babel_helper_vue_jsx_merge_props_default()([{
              attrs: {
                value: node.checked,
                indeterminate: node.indeterminate,
                disabled: isDisabled4
              }
            }, events2]));
          },
          renderRadio: function renderRadio(h) {
            var checkedValue = this.checkedValue, value6 = this.value, isDisabled4 = this.isDisabled;
            if (Object(util_["isEqual"])(value6, checkedValue)) {
              value6 = checkedValue;
            }
            return h("el-radio", {
              attrs: {
                value: checkedValue,
                label: value6,
                disabled: isDisabled4
              },
              on: {
                "change": this.handleCheckChange
              },
              nativeOn: {
                "click": stopPropagation
              }
            }, [h("span")]);
          },
          renderCheckIcon: function renderCheckIcon(h) {
            return h("i", { "class": "el-icon-check el-cascader-node__prefix" });
          },
          renderLoadingIcon: function renderLoadingIcon(h) {
            return h("i", { "class": "el-icon-loading el-cascader-node__postfix" });
          },
          renderExpandIcon: function renderExpandIcon(h) {
            return h("i", { "class": "el-icon-arrow-right el-cascader-node__postfix" });
          },
          renderContent: function renderContent2(h) {
            var panel2 = this.panel, node = this.node;
            var render37 = panel2.renderLabelFn;
            var vnode = render37 ? render37({ node, data: node.data }) : null;
            return h("span", { "class": "el-cascader-node__label" }, [vnode || node.label]);
          }
        },
        render: function render37(h) {
          var _this3 = this;
          var inActivePath = this.inActivePath, inCheckedPath = this.inCheckedPath, isChecked2 = this.isChecked, isLeaf = this.isLeaf, isDisabled4 = this.isDisabled, config2 = this.config, nodeId = this.nodeId;
          var expandTrigger = config2.expandTrigger, checkStrictly = config2.checkStrictly, multiple = config2.multiple;
          var disabled = !checkStrictly && isDisabled4;
          var events2 = { on: {} };
          if (expandTrigger === "click") {
            events2.on.click = this.handleExpand;
          } else {
            events2.on.mouseenter = function(e) {
              _this3.handleExpand();
              _this3.$emit("expand", e);
            };
            events2.on.focus = function(e) {
              _this3.handleExpand();
              _this3.$emit("expand", e);
            };
          }
          if (isLeaf && !isDisabled4 && !checkStrictly && !multiple) {
            events2.on.click = this.handleCheckChange;
          }
          return h("li", external_babel_helper_vue_jsx_merge_props_default()([{
            attrs: {
              role: "menuitem",
              id: nodeId,
              "aria-expanded": inActivePath,
              tabindex: disabled ? null : -1
            },
            "class": {
              "el-cascader-node": true,
              "is-selectable": checkStrictly,
              "in-active-path": inActivePath,
              "in-checked-path": inCheckedPath,
              "is-active": isChecked2,
              "is-disabled": disabled
            }
          }, events2]), [this.renderPrefix(h), this.renderContent(h), this.renderPostfix(h)]);
        }
      };
      var src_cascader_nodevue_type_script_lang_js_ = cascader_nodevue_type_script_lang_js_;
      var cascader_node_render, cascader_node_staticRenderFns;
      var cascader_node_component = normalizeComponent(src_cascader_nodevue_type_script_lang_js_, cascader_node_render, cascader_node_staticRenderFns, false, null, null, null);
      cascader_node_component.options.__file = "packages/cascader-panel/src/cascader-node.vue";
      var cascader_node = cascader_node_component.exports;
      var cascader_menuvue_type_script_lang_js_ = {
        name: "ElCascaderMenu",
        mixins: [locale_default.a],
        inject: ["panel"],
        components: {
          ElScrollbar: scrollbar_default.a,
          CascaderNode: cascader_node
        },
        props: {
          nodes: {
            type: Array,
            required: true
          },
          index: Number
        },
        data: function data25() {
          return {
            activeNode: null,
            hoverTimer: null,
            id: Object(util_["generateId"])()
          };
        },
        computed: {
          isEmpty: function isEmpty3() {
            return !this.nodes.length;
          },
          menuId: function menuId() {
            return "cascader-menu-" + this.id + "-" + this.index;
          }
        },
        methods: {
          handleExpand: function handleExpand(e) {
            this.activeNode = e.target;
          },
          handleMouseMove: function handleMouseMove(e) {
            var activeNode = this.activeNode, hoverTimer = this.hoverTimer;
            var hoverZone = this.$refs.hoverZone;
            if (!activeNode || !hoverZone)
              return;
            if (activeNode.contains(e.target)) {
              clearTimeout(hoverTimer);
              var _$el$getBoundingClien = this.$el.getBoundingClientRect(), left = _$el$getBoundingClien.left;
              var startX = e.clientX - left;
              var _$el = this.$el, offsetWidth = _$el.offsetWidth, offsetHeight = _$el.offsetHeight;
              var top = activeNode.offsetTop;
              var bottom = top + activeNode.offsetHeight;
              hoverZone.innerHTML = '\n          <path style="pointer-events: auto;" fill="transparent" d="M' + startX + " " + top + " L" + offsetWidth + " 0 V" + top + ' Z" />\n          <path style="pointer-events: auto;" fill="transparent" d="M' + startX + " " + bottom + " L" + offsetWidth + " " + offsetHeight + " V" + bottom + ' Z" />\n        ';
            } else if (!hoverTimer) {
              this.hoverTimer = setTimeout(this.clearHoverZone, this.panel.config.hoverThreshold);
            }
          },
          clearHoverZone: function clearHoverZone() {
            var hoverZone = this.$refs.hoverZone;
            if (!hoverZone)
              return;
            hoverZone.innerHTML = "";
          },
          renderEmptyText: function renderEmptyText(h) {
            return h("div", { "class": "el-cascader-menu__empty-text" }, [this.t("el.cascader.noData")]);
          },
          renderNodeList: function renderNodeList(h) {
            var menuId = this.menuId;
            var isHoverMenu = this.panel.isHoverMenu;
            var events2 = { on: {} };
            if (isHoverMenu) {
              events2.on.expand = this.handleExpand;
            }
            var nodes = this.nodes.map(function(node, index2) {
              var hasChildren = node.hasChildren;
              return h("cascader-node", external_babel_helper_vue_jsx_merge_props_default()([{
                key: node.uid,
                attrs: {
                  node,
                  "node-id": menuId + "-" + index2,
                  "aria-haspopup": hasChildren,
                  "aria-owns": hasChildren ? menuId : null
                }
              }, events2]));
            });
            return [].concat(nodes, [isHoverMenu ? h("svg", { ref: "hoverZone", "class": "el-cascader-menu__hover-zone" }) : null]);
          }
        },
        render: function render37(h) {
          var isEmpty3 = this.isEmpty, menuId = this.menuId;
          var events2 = { nativeOn: {} };
          if (this.panel.isHoverMenu) {
            events2.nativeOn.mousemove = this.handleMouseMove;
          }
          return h("el-scrollbar", external_babel_helper_vue_jsx_merge_props_default()([{
            attrs: {
              tag: "ul",
              role: "menu",
              id: menuId,
              "wrap-class": "el-cascader-menu__wrap",
              "view-class": {
                "el-cascader-menu__list": true,
                "is-empty": isEmpty3
              }
            },
            "class": "el-cascader-menu"
          }, events2]), [isEmpty3 ? this.renderEmptyText(h) : this.renderNodeList(h)]);
        }
      };
      var src_cascader_menuvue_type_script_lang_js_ = cascader_menuvue_type_script_lang_js_;
      var cascader_menu_render, cascader_menu_staticRenderFns;
      var cascader_menu_component = normalizeComponent(src_cascader_menuvue_type_script_lang_js_, cascader_menu_render, cascader_menu_staticRenderFns, false, null, null, null);
      cascader_menu_component.options.__file = "packages/cascader-panel/src/cascader-menu.vue";
      var cascader_menu = cascader_menu_component.exports;
      var node_createClass = function() {
        function defineProperties3(target2, props2) {
          for (var i = 0; i < props2.length; i++) {
            var descriptor2 = props2[i];
            descriptor2.enumerable = descriptor2.enumerable || false;
            descriptor2.configurable = true;
            if ("value" in descriptor2)
              descriptor2.writable = true;
            Object.defineProperty(target2, descriptor2.key, descriptor2);
          }
        }
        return function(Constructor, protoProps, staticProps) {
          if (protoProps)
            defineProperties3(Constructor.prototype, protoProps);
          if (staticProps)
            defineProperties3(Constructor, staticProps);
          return Constructor;
        };
      }();
      function src_node_classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      var uid2 = 0;
      var src_node_Node = function() {
        function Node2(data25, config2, parentNode2) {
          src_node_classCallCheck(this, Node2);
          this.data = data25;
          this.config = config2;
          this.parent = parentNode2 || null;
          this.level = !this.parent ? 1 : this.parent.level + 1;
          this.uid = uid2++;
          this.initState();
          this.initChildren();
        }
        Node2.prototype.initState = function initState2() {
          var _config = this.config, valueKey = _config.value, labelKey = _config.label;
          this.value = this.data[valueKey];
          this.label = this.data[labelKey];
          this.pathNodes = this.calculatePathNodes();
          this.path = this.pathNodes.map(function(node) {
            return node.value;
          });
          this.pathLabels = this.pathNodes.map(function(node) {
            return node.label;
          });
          this.loading = false;
          this.loaded = false;
        };
        Node2.prototype.initChildren = function initChildren() {
          var _this = this;
          var config2 = this.config;
          var childrenKey = config2.children;
          var childrenData = this.data[childrenKey];
          this.hasChildren = Array.isArray(childrenData);
          this.children = (childrenData || []).map(function(child) {
            return new Node2(child, config2, _this);
          });
        };
        Node2.prototype.calculatePathNodes = function calculatePathNodes() {
          var nodes = [this];
          var parent2 = this.parent;
          while (parent2) {
            nodes.unshift(parent2);
            parent2 = parent2.parent;
          }
          return nodes;
        };
        Node2.prototype.getPath = function getPath() {
          return this.path;
        };
        Node2.prototype.getValue = function getValue2() {
          return this.value;
        };
        Node2.prototype.getValueByOption = function getValueByOption() {
          return this.config.emitPath ? this.getPath() : this.getValue();
        };
        Node2.prototype.getText = function getText(allLevels, separator) {
          return allLevels ? this.pathLabels.join(separator) : this.label;
        };
        Node2.prototype.isSameNode = function isSameNode(checkedValue) {
          var value6 = this.getValueByOption();
          return this.config.multiple && Array.isArray(checkedValue) ? checkedValue.some(function(val) {
            return Object(util_["isEqual"])(val, value6);
          }) : Object(util_["isEqual"])(checkedValue, value6);
        };
        Node2.prototype.broadcast = function broadcast2(event2) {
          for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          var handlerName = "onParent" + Object(util_["capitalize"])(event2);
          this.children.forEach(function(child) {
            if (child) {
              child.broadcast.apply(child, [event2].concat(args));
              child[handlerName] && child[handlerName].apply(child, args);
            }
          });
        };
        Node2.prototype.emit = function emit(event2) {
          var parent2 = this.parent;
          var handlerName = "onChild" + Object(util_["capitalize"])(event2);
          if (parent2) {
            for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            parent2[handlerName] && parent2[handlerName].apply(parent2, args);
            parent2.emit.apply(parent2, [event2].concat(args));
          }
        };
        Node2.prototype.onParentCheck = function onParentCheck(checked) {
          if (!this.isDisabled) {
            this.setCheckState(checked);
          }
        };
        Node2.prototype.onChildCheck = function onChildCheck() {
          var children = this.children;
          var validChildren = children.filter(function(child) {
            return !child.isDisabled;
          });
          var checked = validChildren.length ? validChildren.every(function(child) {
            return child.checked;
          }) : false;
          this.setCheckState(checked);
        };
        Node2.prototype.setCheckState = function setCheckState(checked) {
          var totalNum = this.children.length;
          var checkedNum = this.children.reduce(function(c, p) {
            var num = p.checked ? 1 : p.indeterminate ? 0.5 : 0;
            return c + num;
          }, 0);
          this.checked = checked;
          this.indeterminate = checkedNum !== totalNum && checkedNum > 0;
        };
        Node2.prototype.syncCheckState = function syncCheckState(checkedValue) {
          var value6 = this.getValueByOption();
          var checked = this.isSameNode(checkedValue, value6);
          this.doCheck(checked);
        };
        Node2.prototype.doCheck = function doCheck(checked) {
          if (this.checked !== checked) {
            if (this.config.checkStrictly) {
              this.checked = checked;
            } else {
              this.broadcast("check", checked);
              this.setCheckState(checked);
              this.emit("check");
            }
          }
        };
        node_createClass(Node2, [{
          key: "isDisabled",
          get: function get7() {
            var data25 = this.data, parent2 = this.parent, config2 = this.config;
            var disabledKey = config2.disabled;
            var checkStrictly = config2.checkStrictly;
            return data25[disabledKey] || !checkStrictly && parent2 && parent2.isDisabled;
          }
        }, {
          key: "isLeaf",
          get: function get7() {
            var data25 = this.data, loaded = this.loaded, hasChildren = this.hasChildren, children = this.children;
            var _config2 = this.config, lazy = _config2.lazy, leafKey = _config2.leaf;
            if (lazy) {
              var isLeaf = Object(shared_["isDef"])(data25[leafKey]) ? data25[leafKey] : loaded ? !children.length : false;
              this.hasChildren = !isLeaf;
              return isLeaf;
            }
            return !hasChildren;
          }
        }]);
        return Node2;
      }();
      var src_node = src_node_Node;
      function store_classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      var flatNodes = function flatNodes2(data25, leafOnly) {
        return data25.reduce(function(res, node) {
          if (node.isLeaf) {
            res.push(node);
          } else {
            !leafOnly && res.push(node);
            res = res.concat(flatNodes2(node.children, leafOnly));
          }
          return res;
        }, []);
      };
      var store_Store = function() {
        function Store2(data25, config2) {
          store_classCallCheck(this, Store2);
          this.config = config2;
          this.initNodes(data25);
        }
        Store2.prototype.initNodes = function initNodes(data25) {
          var _this = this;
          data25 = Object(util_["coerceTruthyValueToArray"])(data25);
          this.nodes = data25.map(function(nodeData) {
            return new src_node(nodeData, _this.config);
          });
          this.flattedNodes = this.getFlattedNodes(false, false);
          this.leafNodes = this.getFlattedNodes(true, false);
        };
        Store2.prototype.appendNode = function appendNode(nodeData, parentNode2) {
          var node = new src_node(nodeData, this.config, parentNode2);
          var children = parentNode2 ? parentNode2.children : this.nodes;
          children.push(node);
        };
        Store2.prototype.appendNodes = function appendNodes(nodeDataList, parentNode2) {
          var _this2 = this;
          nodeDataList = Object(util_["coerceTruthyValueToArray"])(nodeDataList);
          nodeDataList.forEach(function(nodeData) {
            return _this2.appendNode(nodeData, parentNode2);
          });
        };
        Store2.prototype.getNodes = function getNodes() {
          return this.nodes;
        };
        Store2.prototype.getFlattedNodes = function getFlattedNodes(leafOnly) {
          var cached2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
          var cachedNodes = leafOnly ? this.leafNodes : this.flattedNodes;
          return cached2 ? cachedNodes : flatNodes(this.nodes, leafOnly);
        };
        Store2.prototype.getNodeByValue = function getNodeByValue(value6) {
          var nodes = this.getFlattedNodes(false, !this.config.lazy).filter(function(node) {
            return Object(util_["valueEquals"])(node.path, value6) || node.value === value6;
          });
          return nodes && nodes.length ? nodes[0] : null;
        };
        return Store2;
      }();
      var cascader_panel_src_store = store_Store;
      var cascader_panelvue_type_script_lang_js_extends = Object.assign || function(target2) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target2[key] = source[key];
            }
          }
        }
        return target2;
      };
      var cascader_panelvue_type_script_lang_js_KeyCode = aria_utils_default.a.keys;
      var DefaultProps = {
        expandTrigger: "click",
        multiple: false,
        checkStrictly: false,
        emitPath: true,
        lazy: false,
        lazyLoad: util_["noop"],
        value: "value",
        label: "label",
        children: "children",
        leaf: "leaf",
        disabled: "disabled",
        hoverThreshold: 500
      };
      var cascader_panelvue_type_script_lang_js_isLeaf = function isLeaf(el) {
        return !el.getAttribute("aria-owns");
      };
      var getSibling = function getSibling2(el, distance) {
        var parentNode2 = el.parentNode;
        if (parentNode2) {
          var siblings = parentNode2.querySelectorAll('.el-cascader-node[tabindex="-1"]');
          var index2 = Array.prototype.indexOf.call(siblings, el);
          return siblings[index2 + distance] || null;
        }
        return null;
      };
      var getMenuIndex = function getMenuIndex2(el, distance) {
        if (!el)
          return;
        var pieces = el.id.split("-");
        return Number(pieces[pieces.length - 2]);
      };
      var focusNode = function focusNode2(el) {
        if (!el)
          return;
        el.focus();
        !cascader_panelvue_type_script_lang_js_isLeaf(el) && el.click();
      };
      var checkNode = function checkNode2(el) {
        if (!el)
          return;
        var input2 = el.querySelector("input");
        if (input2) {
          input2.click();
        } else if (cascader_panelvue_type_script_lang_js_isLeaf(el)) {
          el.click();
        }
      };
      var cascader_panelvue_type_script_lang_js_ = {
        name: "ElCascaderPanel",
        components: {
          CascaderMenu: cascader_menu
        },
        props: {
          value: {},
          options: Array,
          props: Object,
          border: {
            type: Boolean,
            default: true
          },
          renderLabel: Function
        },
        provide: function provide11() {
          return {
            panel: this
          };
        },
        data: function data25() {
          return {
            checkedValue: null,
            checkedNodePaths: [],
            store: [],
            menus: [],
            activePath: [],
            loadCount: 0
          };
        },
        computed: {
          config: function config2() {
            return merge_default()(cascader_panelvue_type_script_lang_js_extends({}, DefaultProps), this.props || {});
          },
          multiple: function multiple() {
            return this.config.multiple;
          },
          checkStrictly: function checkStrictly() {
            return this.config.checkStrictly;
          },
          leafOnly: function leafOnly() {
            return !this.checkStrictly;
          },
          isHoverMenu: function isHoverMenu() {
            return this.config.expandTrigger === "hover";
          },
          renderLabelFn: function renderLabelFn() {
            return this.renderLabel || this.$scopedSlots.default;
          }
        },
        watch: {
          options: {
            handler: function handler2() {
              this.initStore();
            },
            immediate: true,
            deep: true
          },
          value: function value6() {
            this.syncCheckedValue();
            this.checkStrictly && this.calculateCheckedNodePaths();
          },
          checkedValue: function checkedValue(val) {
            if (!Object(util_["isEqual"])(val, this.value)) {
              this.checkStrictly && this.calculateCheckedNodePaths();
              this.$emit("input", val);
              this.$emit("change", val);
            }
          }
        },
        mounted: function mounted18() {
          if (!this.isEmptyValue(this.value)) {
            this.syncCheckedValue();
          }
        },
        methods: {
          initStore: function initStore() {
            var config2 = this.config, options2 = this.options;
            if (config2.lazy && Object(util_["isEmpty"])(options2)) {
              this.lazyLoad();
            } else {
              this.store = new cascader_panel_src_store(options2, config2);
              this.menus = [this.store.getNodes()];
              this.syncMenuState();
            }
          },
          syncCheckedValue: function syncCheckedValue() {
            var value6 = this.value, checkedValue = this.checkedValue;
            if (!Object(util_["isEqual"])(value6, checkedValue)) {
              this.activePath = [];
              this.checkedValue = value6;
              this.syncMenuState();
            }
          },
          syncMenuState: function syncMenuState() {
            var multiple = this.multiple, checkStrictly = this.checkStrictly;
            this.syncActivePath();
            multiple && this.syncMultiCheckState();
            checkStrictly && this.calculateCheckedNodePaths();
            this.$nextTick(this.scrollIntoView);
          },
          syncMultiCheckState: function syncMultiCheckState() {
            var _this = this;
            var nodes = this.getFlattedNodes(this.leafOnly);
            nodes.forEach(function(node) {
              node.syncCheckState(_this.checkedValue);
            });
          },
          isEmptyValue: function isEmptyValue2(val) {
            var multiple = this.multiple, config2 = this.config;
            var emitPath = config2.emitPath;
            if (multiple || emitPath) {
              return Object(util_["isEmpty"])(val);
            }
            return false;
          },
          syncActivePath: function syncActivePath() {
            var _this2 = this;
            var store2 = this.store, multiple = this.multiple, activePath = this.activePath, checkedValue = this.checkedValue;
            if (!Object(util_["isEmpty"])(activePath)) {
              var nodes = activePath.map(function(node) {
                return _this2.getNodeByValue(node.getValue());
              });
              this.expandNodes(nodes);
            } else if (!this.isEmptyValue(checkedValue)) {
              var value6 = multiple ? checkedValue[0] : checkedValue;
              var checkedNode = this.getNodeByValue(value6) || {};
              var _nodes = (checkedNode.pathNodes || []).slice(0, -1);
              this.expandNodes(_nodes);
            } else {
              this.activePath = [];
              this.menus = [store2.getNodes()];
            }
          },
          expandNodes: function expandNodes(nodes) {
            var _this3 = this;
            nodes.forEach(function(node) {
              return _this3.handleExpand(node, true);
            });
          },
          calculateCheckedNodePaths: function calculateCheckedNodePaths() {
            var _this4 = this;
            var checkedValue = this.checkedValue, multiple = this.multiple;
            var checkedValues = multiple ? Object(util_["coerceTruthyValueToArray"])(checkedValue) : [checkedValue];
            this.checkedNodePaths = checkedValues.map(function(v) {
              var checkedNode = _this4.getNodeByValue(v);
              return checkedNode ? checkedNode.pathNodes : [];
            });
          },
          handleKeyDown: function handleKeyDown(e) {
            var target2 = e.target, keyCode2 = e.keyCode;
            switch (keyCode2) {
              case cascader_panelvue_type_script_lang_js_KeyCode.up:
                var prev = getSibling(target2, -1);
                focusNode(prev);
                break;
              case cascader_panelvue_type_script_lang_js_KeyCode.down:
                var next = getSibling(target2, 1);
                focusNode(next);
                break;
              case cascader_panelvue_type_script_lang_js_KeyCode.left:
                var preMenu = this.$refs.menu[getMenuIndex(target2) - 1];
                if (preMenu) {
                  var expandedNode = preMenu.$el.querySelector('.el-cascader-node[aria-expanded="true"]');
                  focusNode(expandedNode);
                }
                break;
              case cascader_panelvue_type_script_lang_js_KeyCode.right:
                var nextMenu = this.$refs.menu[getMenuIndex(target2) + 1];
                if (nextMenu) {
                  var firstNode = nextMenu.$el.querySelector('.el-cascader-node[tabindex="-1"]');
                  focusNode(firstNode);
                }
                break;
              case cascader_panelvue_type_script_lang_js_KeyCode.enter:
                checkNode(target2);
                break;
              case cascader_panelvue_type_script_lang_js_KeyCode.esc:
              case cascader_panelvue_type_script_lang_js_KeyCode.tab:
                this.$emit("close");
                break;
              default:
                return;
            }
          },
          handleExpand: function handleExpand(node, silent) {
            var activePath = this.activePath;
            var level = node.level;
            var path = activePath.slice(0, level - 1);
            var menus2 = this.menus.slice(0, level);
            if (!node.isLeaf) {
              path.push(node);
              menus2.push(node.children);
            }
            this.activePath = path;
            this.menus = menus2;
            if (!silent) {
              var pathValues = path.map(function(node2) {
                return node2.getValue();
              });
              var activePathValues = activePath.map(function(node2) {
                return node2.getValue();
              });
              if (!Object(util_["valueEquals"])(pathValues, activePathValues)) {
                this.$emit("active-item-change", pathValues);
                this.$emit("expand-change", pathValues);
              }
            }
          },
          handleCheckChange: function handleCheckChange(value6) {
            this.checkedValue = value6;
          },
          lazyLoad: function lazyLoad(node, onFullfiled) {
            var _this5 = this;
            var config2 = this.config;
            if (!node) {
              node = node || { root: true, level: 0 };
              this.store = new cascader_panel_src_store([], config2);
              this.menus = [this.store.getNodes()];
            }
            node.loading = true;
            var resolve = function resolve2(dataList) {
              var parent2 = node.root ? null : node;
              dataList && dataList.length && _this5.store.appendNodes(dataList, parent2);
              node.loading = false;
              node.loaded = true;
              if (Array.isArray(_this5.checkedValue)) {
                var nodeValue = _this5.checkedValue[_this5.loadCount++];
                var valueKey = _this5.config.value;
                var leafKey = _this5.config.leaf;
                if (Array.isArray(dataList) && dataList.filter(function(item) {
                  return item[valueKey] === nodeValue;
                }).length > 0) {
                  var checkedNode = _this5.store.getNodeByValue(nodeValue);
                  if (!checkedNode.data[leafKey]) {
                    _this5.lazyLoad(checkedNode, function() {
                      _this5.handleExpand(checkedNode);
                    });
                  }
                  if (_this5.loadCount === _this5.checkedValue.length) {
                    _this5.$parent.computePresentText();
                  }
                }
              }
              onFullfiled && onFullfiled(dataList);
            };
            config2.lazyLoad(node, resolve);
          },
          calculateMultiCheckedValue: function calculateMultiCheckedValue() {
            this.checkedValue = this.getCheckedNodes(this.leafOnly).map(function(node) {
              return node.getValueByOption();
            });
          },
          scrollIntoView: function scrollIntoView2() {
            if (this.$isServer)
              return;
            var menus2 = this.$refs.menu || [];
            menus2.forEach(function(menu2) {
              var menuElement = menu2.$el;
              if (menuElement) {
                var container = menuElement.querySelector(".el-scrollbar__wrap");
                var activeNode = menuElement.querySelector(".el-cascader-node.is-active") || menuElement.querySelector(".el-cascader-node.in-active-path");
                scroll_into_view_default()(container, activeNode);
              }
            });
          },
          getNodeByValue: function getNodeByValue(val) {
            return this.store.getNodeByValue(val);
          },
          getFlattedNodes: function getFlattedNodes(leafOnly) {
            var cached2 = !this.config.lazy;
            return this.store.getFlattedNodes(leafOnly, cached2);
          },
          getCheckedNodes: function getCheckedNodes(leafOnly) {
            var checkedValue = this.checkedValue, multiple = this.multiple;
            if (multiple) {
              var nodes = this.getFlattedNodes(leafOnly);
              return nodes.filter(function(node) {
                return node.checked;
              });
            } else {
              return this.isEmptyValue(checkedValue) ? [] : [this.getNodeByValue(checkedValue)];
            }
          },
          clearCheckedNodes: function clearCheckedNodes() {
            var config2 = this.config, leafOnly = this.leafOnly;
            var multiple = config2.multiple, emitPath = config2.emitPath;
            if (multiple) {
              this.getCheckedNodes(leafOnly).filter(function(node) {
                return !node.isDisabled;
              }).forEach(function(node) {
                return node.doCheck(false);
              });
              this.calculateMultiCheckedValue();
            } else {
              this.checkedValue = emitPath ? [] : null;
            }
          }
        }
      };
      var src_cascader_panelvue_type_script_lang_js_ = cascader_panelvue_type_script_lang_js_;
      var cascader_panel_component = normalizeComponent(src_cascader_panelvue_type_script_lang_js_, cascader_panelvue_type_template_id_34932346_render, cascader_panelvue_type_template_id_34932346_staticRenderFns, false, null, null, null);
      cascader_panel_component.options.__file = "packages/cascader-panel/src/cascader-panel.vue";
      var cascader_panel = cascader_panel_component.exports;
      cascader_panel.install = function(Vue2) {
        Vue2.component(cascader_panel.name, cascader_panel);
      };
      var packages_cascader_panel = cascader_panel;
      var avatar_src_mainvue_type_script_lang_js_ = {
        name: "ElAvatar",
        props: {
          size: {
            type: [Number, String],
            validator: function validator2(val) {
              if (typeof val === "string") {
                return ["large", "medium", "small"].includes(val);
              }
              return typeof val === "number";
            }
          },
          shape: {
            type: String,
            default: "circle",
            validator: function validator2(val) {
              return ["circle", "square"].includes(val);
            }
          },
          icon: String,
          src: String,
          alt: String,
          srcSet: String,
          error: Function,
          fit: {
            type: String,
            default: "cover"
          }
        },
        data: function data25() {
          return {
            isImageExist: true
          };
        },
        computed: {
          avatarClass: function avatarClass() {
            var size2 = this.size, icon3 = this.icon, shape = this.shape;
            var classList = ["el-avatar"];
            if (size2 && typeof size2 === "string") {
              classList.push("el-avatar--" + size2);
            }
            if (icon3) {
              classList.push("el-avatar--icon");
            }
            if (shape) {
              classList.push("el-avatar--" + shape);
            }
            return classList.join(" ");
          }
        },
        methods: {
          handleError: function handleError2() {
            var error = this.error;
            var errorFlag = error ? error() : void 0;
            if (errorFlag !== false) {
              this.isImageExist = false;
            }
          },
          renderAvatar: function renderAvatar() {
            var h = this.$createElement;
            var icon3 = this.icon, src2 = this.src, alt = this.alt, isImageExist = this.isImageExist, srcSet = this.srcSet, fit = this.fit;
            if (isImageExist && src2) {
              return h("img", {
                attrs: {
                  src: src2,
                  alt,
                  srcSet
                },
                on: {
                  "error": this.handleError
                },
                style: { "object-fit": fit }
              });
            }
            if (icon3) {
              return h("i", { "class": icon3 });
            }
            return this.$slots.default;
          }
        },
        render: function render37() {
          var h = arguments[0];
          var avatarClass = this.avatarClass, size2 = this.size;
          var sizeStyle = typeof size2 === "number" ? {
            height: size2 + "px",
            width: size2 + "px",
            lineHeight: size2 + "px"
          } : {};
          return h("span", { "class": avatarClass, style: sizeStyle }, [this.renderAvatar()]);
        }
      };
      var packages_avatar_src_mainvue_type_script_lang_js_ = avatar_src_mainvue_type_script_lang_js_;
      var src_main_render, src_main_staticRenderFns;
      var avatar_src_main_component = normalizeComponent(packages_avatar_src_mainvue_type_script_lang_js_, src_main_render, src_main_staticRenderFns, false, null, null, null);
      avatar_src_main_component.options.__file = "packages/avatar/src/main.vue";
      var avatar_src_main = avatar_src_main_component.exports;
      avatar_src_main.install = function(Vue2) {
        Vue2.component(avatar_src_main.name, avatar_src_main);
      };
      var avatar = avatar_src_main;
      var mainvue_type_template_id_a4885264_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("transition", {
          attrs: { name: "el-drawer-fade" },
          on: { "after-enter": _vm.afterEnter, "after-leave": _vm.afterLeave }
        }, [
          _c("div", {
            directives: [
              {
                name: "show",
                rawName: "v-show",
                value: _vm.visible,
                expression: "visible"
              }
            ],
            staticClass: "el-drawer__wrapper",
            attrs: { tabindex: "-1" }
          }, [
            _c("div", {
              staticClass: "el-drawer__container",
              class: _vm.visible && "el-drawer__open",
              attrs: { role: "document", tabindex: "-1" },
              on: {
                click: function($event) {
                  if ($event.target !== $event.currentTarget) {
                    return null;
                  }
                  return _vm.handleWrapperClick($event);
                }
              }
            }, [
              _c("div", {
                ref: "drawer",
                staticClass: "el-drawer",
                class: [_vm.direction, _vm.customClass],
                style: _vm.isHorizontal ? "width: " + _vm.drawerSize : "height: " + _vm.drawerSize,
                attrs: {
                  "aria-modal": "true",
                  "aria-labelledby": "el-drawer__title",
                  "aria-label": _vm.title,
                  role: "dialog",
                  tabindex: "-1"
                }
              }, [
                _vm.withHeader ? _c("header", {
                  staticClass: "el-drawer__header",
                  attrs: { id: "el-drawer__title" }
                }, [
                  _vm._t("title", [
                    _c("span", { attrs: { role: "heading", title: _vm.title } }, [_vm._v(_vm._s(_vm.title))])
                  ]),
                  _vm.showClose ? _c("button", {
                    staticClass: "el-drawer__close-btn",
                    attrs: {
                      "aria-label": "close " + (_vm.title || "drawer"),
                      type: "button"
                    },
                    on: { click: _vm.closeDrawer }
                  }, [
                    _c("i", {
                      staticClass: "el-dialog__close el-icon el-icon-close"
                    })
                  ]) : _vm._e()
                ], 2) : _vm._e(),
                _vm.rendered ? _c("section", { staticClass: "el-drawer__body" }, [_vm._t("default")], 2) : _vm._e()
              ])
            ])
          ])
        ]);
      };
      var mainvue_type_template_id_a4885264_staticRenderFns = [];
      mainvue_type_template_id_a4885264_render._withStripped = true;
      var drawer_src_mainvue_type_script_lang_js_ = {
        name: "ElDrawer",
        mixins: [popup_default.a, emitter_default.a],
        props: {
          appendToBody: {
            type: Boolean,
            default: false
          },
          beforeClose: {
            type: Function
          },
          customClass: {
            type: String,
            default: ""
          },
          closeOnPressEscape: {
            type: Boolean,
            default: true
          },
          destroyOnClose: {
            type: Boolean,
            default: false
          },
          modal: {
            type: Boolean,
            default: true
          },
          direction: {
            type: String,
            default: "rtl",
            validator: function validator2(val) {
              return ["ltr", "rtl", "ttb", "btt"].indexOf(val) !== -1;
            }
          },
          modalAppendToBody: {
            type: Boolean,
            default: true
          },
          showClose: {
            type: Boolean,
            default: true
          },
          size: {
            type: [Number, String],
            default: "30%"
          },
          title: {
            type: String,
            default: ""
          },
          visible: {
            type: Boolean
          },
          wrapperClosable: {
            type: Boolean,
            default: true
          },
          withHeader: {
            type: Boolean,
            default: true
          }
        },
        computed: {
          isHorizontal: function isHorizontal() {
            return this.direction === "rtl" || this.direction === "ltr";
          },
          drawerSize: function drawerSize() {
            return typeof this.size === "number" ? this.size + "px" : this.size;
          }
        },
        data: function data25() {
          return {
            closed: false,
            prevActiveElement: null
          };
        },
        watch: {
          visible: function visible2(val) {
            var _this = this;
            if (val) {
              this.closed = false;
              this.$emit("open");
              if (this.appendToBody) {
                document.body.appendChild(this.$el);
              }
              this.prevActiveElement = document.activeElement;
            } else {
              if (!this.closed) {
                this.$emit("close");
                if (this.destroyOnClose === true) {
                  this.rendered = false;
                }
              }
              this.$nextTick(function() {
                if (_this.prevActiveElement) {
                  _this.prevActiveElement.focus();
                }
              });
            }
          }
        },
        methods: {
          afterEnter: function afterEnter() {
            this.$emit("opened");
          },
          afterLeave: function afterLeave2() {
            this.$emit("closed");
          },
          hide: function hide2(cancel) {
            if (cancel !== false) {
              this.$emit("update:visible", false);
              this.$emit("close");
              if (this.destroyOnClose === true) {
                this.rendered = false;
              }
              this.closed = true;
            }
          },
          handleWrapperClick: function handleWrapperClick() {
            if (this.wrapperClosable) {
              this.closeDrawer();
            }
          },
          closeDrawer: function closeDrawer() {
            if (typeof this.beforeClose === "function") {
              this.beforeClose(this.hide);
            } else {
              this.hide();
            }
          },
          handleClose: function handleClose() {
            this.closeDrawer();
          }
        },
        mounted: function mounted18() {
          if (this.visible) {
            this.rendered = true;
            this.open();
            if (this.appendToBody) {
              document.body.appendChild(this.$el);
            }
          }
        },
        destroyed: function destroyed17() {
          if (this.appendToBody && this.$el && this.$el.parentNode) {
            this.$el.parentNode.removeChild(this.$el);
          }
        }
      };
      var packages_drawer_src_mainvue_type_script_lang_js_ = drawer_src_mainvue_type_script_lang_js_;
      var drawer_src_main_component = normalizeComponent(packages_drawer_src_mainvue_type_script_lang_js_, mainvue_type_template_id_a4885264_render, mainvue_type_template_id_a4885264_staticRenderFns, false, null, null, null);
      drawer_src_main_component.options.__file = "packages/drawer/src/main.vue";
      var drawer_src_main = drawer_src_main_component.exports;
      drawer_src_main.install = function(Vue2) {
        Vue2.component(drawer_src_main.name, drawer_src_main);
      };
      var drawer = drawer_src_main;
      var mainvue_type_template_id_048de730_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("el-popover", _vm._b({
          attrs: { trigger: "click" },
          model: {
            value: _vm.visible,
            callback: function($$v) {
              _vm.visible = $$v;
            },
            expression: "visible"
          }
        }, "el-popover", _vm.$attrs, false), [
          _c("div", { staticClass: "el-popconfirm" }, [
            _c("p", { staticClass: "el-popconfirm__main" }, [
              !_vm.hideIcon ? _c("i", {
                staticClass: "el-popconfirm__icon",
                class: _vm.icon,
                style: { color: _vm.iconColor }
              }) : _vm._e(),
              _vm._v("\n      " + _vm._s(_vm.title) + "\n    ")
            ]),
            _c("div", { staticClass: "el-popconfirm__action" }, [
              _c("el-button", {
                attrs: { size: "mini", type: _vm.cancelButtonType },
                on: { click: _vm.cancel }
              }, [
                _vm._v("\n        " + _vm._s(_vm.displayCancelButtonText) + "\n      ")
              ]),
              _c("el-button", {
                attrs: { size: "mini", type: _vm.confirmButtonType },
                on: { click: _vm.confirm }
              }, [
                _vm._v("\n        " + _vm._s(_vm.displayConfirmButtonText) + "\n      ")
              ])
            ], 1)
          ]),
          _vm._t("reference", null, { slot: "reference" })
        ], 2);
      };
      var mainvue_type_template_id_048de730_staticRenderFns = [];
      mainvue_type_template_id_048de730_render._withStripped = true;
      var popover_ = __webpack_require__(44);
      var popover_default = /* @__PURE__ */ __webpack_require__.n(popover_);
      var popconfirm_src_mainvue_type_script_lang_js_ = {
        name: "ElPopconfirm",
        props: {
          title: {
            type: String
          },
          confirmButtonText: {
            type: String
          },
          cancelButtonText: {
            type: String
          },
          confirmButtonType: {
            type: String,
            default: "primary"
          },
          cancelButtonType: {
            type: String,
            default: "text"
          },
          icon: {
            type: String,
            default: "el-icon-question"
          },
          iconColor: {
            type: String,
            default: "#f90"
          },
          hideIcon: {
            type: Boolean,
            default: false
          }
        },
        components: {
          ElPopover: popover_default.a,
          ElButton: button_default.a
        },
        data: function data25() {
          return {
            visible: false
          };
        },
        computed: {
          displayConfirmButtonText: function displayConfirmButtonText() {
            return this.confirmButtonText || Object(lib_locale_["t"])("el.popconfirm.confirmButtonText");
          },
          displayCancelButtonText: function displayCancelButtonText() {
            return this.cancelButtonText || Object(lib_locale_["t"])("el.popconfirm.cancelButtonText");
          }
        },
        methods: {
          confirm: function confirm() {
            this.visible = false;
            this.$emit("confirm");
          },
          cancel: function cancel() {
            this.visible = false;
            this.$emit("cancel");
          }
        }
      };
      var packages_popconfirm_src_mainvue_type_script_lang_js_ = popconfirm_src_mainvue_type_script_lang_js_;
      var popconfirm_src_main_component = normalizeComponent(packages_popconfirm_src_mainvue_type_script_lang_js_, mainvue_type_template_id_048de730_render, mainvue_type_template_id_048de730_staticRenderFns, false, null, null, null);
      popconfirm_src_main_component.options.__file = "packages/popconfirm/src/main.vue";
      var popconfirm_src_main = popconfirm_src_main_component.exports;
      popconfirm_src_main.install = function(Vue2) {
        Vue2.component(popconfirm_src_main.name, popconfirm_src_main);
      };
      var popconfirm = popconfirm_src_main;
      var srcvue_type_template_id_7f659269_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", [
          _vm.uiLoading ? [
            _c("div", _vm._b({ class: ["el-skeleton", _vm.animated ? "is-animated" : ""] }, "div", _vm.$attrs, false), [
              _vm._l(_vm.count, function(i) {
                return [
                  _vm.loading ? _vm._t("template", _vm._l(_vm.rows, function(item) {
                    return _c("el-skeleton-item", {
                      key: i + "-" + item,
                      class: {
                        "el-skeleton__paragraph": item !== 1,
                        "is-first": item === 1,
                        "is-last": item === _vm.rows && _vm.rows > 1
                      },
                      attrs: { variant: "p" }
                    });
                  })) : _vm._e()
                ];
              })
            ], 2)
          ] : [_vm._t("default", null, null, _vm.$attrs)]
        ], 2);
      };
      var srcvue_type_template_id_7f659269_staticRenderFns = [];
      srcvue_type_template_id_7f659269_render._withStripped = true;
      var skeleton_srcvue_type_script_lang_js_ = {
        name: "ElSkeleton",
        props: {
          animated: {
            type: Boolean,
            default: false
          },
          count: {
            type: Number,
            default: 1
          },
          rows: {
            type: Number,
            default: 4
          },
          loading: {
            type: Boolean,
            default: true
          },
          throttle: {
            type: Number,
            default: 0
          }
        },
        watch: {
          loading: {
            handler: function handler2(loading2) {
              var _this = this;
              if (this.throttle <= 0) {
                this.uiLoading = loading2;
                return;
              }
              if (loading2) {
                clearTimeout(this.timeoutHandle);
                this.timeoutHandle = setTimeout(function() {
                  _this.uiLoading = _this.loading;
                }, this.throttle);
              } else {
                this.uiLoading = loading2;
              }
            },
            immediate: true
          }
        },
        data: function data25() {
          return {
            uiLoading: this.throttle <= 0 ? this.loading : false
          };
        }
      };
      var packages_skeleton_srcvue_type_script_lang_js_ = skeleton_srcvue_type_script_lang_js_;
      var skeleton_src_component = normalizeComponent(packages_skeleton_srcvue_type_script_lang_js_, srcvue_type_template_id_7f659269_render, srcvue_type_template_id_7f659269_staticRenderFns, false, null, null, null);
      skeleton_src_component.options.__file = "packages/skeleton/src/index.vue";
      var skeleton_src = skeleton_src_component.exports;
      skeleton_src.install = function(Vue2) {
        Vue2.component(skeleton_src.name, skeleton_src);
      };
      var skeleton = skeleton_src;
      var itemvue_type_template_id_4bc8804c_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", { class: ["el-skeleton__item", "el-skeleton__" + _vm.variant] }, [_vm.variant === "image" ? _c("img-placeholder") : _vm._e()], 1);
      };
      var itemvue_type_template_id_4bc8804c_staticRenderFns = [];
      itemvue_type_template_id_4bc8804c_render._withStripped = true;
      var img_placeholdervue_type_template_id_1b2cb5c0_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("svg", {
          attrs: { viewBox: "0 0 1024 1024", xmlns: "http://www.w3.org/2000/svg" }
        }, [
          _c("path", {
            attrs: {
              d: "M64 896V128h896v768H64z m64-128l192-192 116.352 116.352L640 448l256 307.2V192H128v576z m224-480a96 96 0 1 1-0.064 192.064A96 96 0 0 1 352 288z"
            }
          })
        ]);
      };
      var img_placeholdervue_type_template_id_1b2cb5c0_staticRenderFns = [];
      img_placeholdervue_type_template_id_1b2cb5c0_render._withStripped = true;
      var img_placeholdervue_type_script_lang_js_ = {
        name: "ImgPlaceholder"
      };
      var src_img_placeholdervue_type_script_lang_js_ = img_placeholdervue_type_script_lang_js_;
      var img_placeholder_component = normalizeComponent(src_img_placeholdervue_type_script_lang_js_, img_placeholdervue_type_template_id_1b2cb5c0_render, img_placeholdervue_type_template_id_1b2cb5c0_staticRenderFns, false, null, null, null);
      img_placeholder_component.options.__file = "packages/skeleton/src/img-placeholder.vue";
      var img_placeholder = img_placeholder_component.exports;
      var _components;
      var skeleton_src_itemvue_type_script_lang_js_ = {
        name: "ElSkeletonItem",
        props: {
          variant: {
            type: String,
            default: "text"
          }
        },
        components: (_components = {}, _components[img_placeholder.name] = img_placeholder, _components)
      };
      var packages_skeleton_src_itemvue_type_script_lang_js_ = skeleton_src_itemvue_type_script_lang_js_;
      var skeleton_src_item_component = normalizeComponent(packages_skeleton_src_itemvue_type_script_lang_js_, itemvue_type_template_id_4bc8804c_render, itemvue_type_template_id_4bc8804c_staticRenderFns, false, null, null, null);
      skeleton_src_item_component.options.__file = "packages/skeleton/src/item.vue";
      var skeleton_src_item = skeleton_src_item_component.exports;
      skeleton_src_item.install = function(Vue2) {
        Vue2.component(skeleton_src_item.name, skeleton_src_item);
      };
      var skeleton_item = skeleton_src_item;
      var srcvue_type_template_id_347ced91_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", { staticClass: "el-empty" }, [
          _c("div", { staticClass: "el-empty__image", style: _vm.imageStyle }, [
            _vm.image ? _c("img", {
              attrs: { src: _vm.image, ondragstart: "return false" }
            }) : _vm._t("image", [_c("img-empty")])
          ], 2),
          _c("div", { staticClass: "el-empty__description" }, [
            _vm.$slots.description ? _vm._t("description") : _c("p", [_vm._v(_vm._s(_vm.emptyDescription))])
          ], 2),
          _vm.$slots.default ? _c("div", { staticClass: "el-empty__bottom" }, [_vm._t("default")], 2) : _vm._e()
        ]);
      };
      var srcvue_type_template_id_347ced91_staticRenderFns = [];
      srcvue_type_template_id_347ced91_render._withStripped = true;
      var img_emptyvue_type_template_id_42918b82_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("svg", {
          attrs: {
            viewBox: "0 0 79 86",
            version: "1.1",
            xmlns: "http://www.w3.org/2000/svg",
            "xmlns:xlink": "http://www.w3.org/1999/xlink"
          }
        }, [
          _c("defs", [
            _c("linearGradient", {
              attrs: {
                id: "linearGradient-1-" + _vm.id,
                x1: "38.8503086%",
                y1: "0%",
                x2: "61.1496914%",
                y2: "100%"
              }
            }, [
              _c("stop", { attrs: { "stop-color": "#FCFCFD", offset: "0%" } }),
              _c("stop", { attrs: { "stop-color": "#EEEFF3", offset: "100%" } })
            ], 1),
            _c("linearGradient", {
              attrs: {
                id: "linearGradient-2-" + _vm.id,
                x1: "0%",
                y1: "9.5%",
                x2: "100%",
                y2: "90.5%"
              }
            }, [
              _c("stop", { attrs: { "stop-color": "#FCFCFD", offset: "0%" } }),
              _c("stop", { attrs: { "stop-color": "#E9EBEF", offset: "100%" } })
            ], 1),
            _c("rect", {
              attrs: {
                id: "path-3-" + _vm.id,
                x: "0",
                y: "0",
                width: "17",
                height: "36"
              }
            })
          ], 1),
          _c("g", {
            attrs: {
              id: "Illustrations",
              stroke: "none",
              "stroke-width": "1",
              fill: "none",
              "fill-rule": "evenodd"
            }
          }, [
            _c("g", {
              attrs: {
                id: "B-type",
                transform: "translate(-1268.000000, -535.000000)"
              }
            }, [
              _c("g", {
                attrs: {
                  id: "Group-2",
                  transform: "translate(1268.000000, 535.000000)"
                }
              }, [
                _c("path", {
                  attrs: {
                    id: "Oval-Copy-2",
                    d: "M39.5,86 C61.3152476,86 79,83.9106622 79,81.3333333 C79,78.7560045 57.3152476,78 35.5,78 C13.6847524,78 0,78.7560045 0,81.3333333 C0,83.9106622 17.6847524,86 39.5,86 Z",
                    fill: "#F7F8FC"
                  }
                }),
                _c("polygon", {
                  attrs: {
                    id: "Rectangle-Copy-14",
                    fill: "#E5E7E9",
                    transform: "translate(27.500000, 51.500000) scale(1, -1) translate(-27.500000, -51.500000) ",
                    points: "13 58 53 58 42 45 2 45"
                  }
                }),
                _c("g", {
                  attrs: {
                    id: "Group-Copy",
                    transform: "translate(34.500000, 31.500000) scale(-1, 1) rotate(-25.000000) translate(-34.500000, -31.500000) translate(7.000000, 10.000000)"
                  }
                }, [
                  _c("polygon", {
                    attrs: {
                      id: "Rectangle-Copy-10",
                      fill: "#E5E7E9",
                      transform: "translate(11.500000, 5.000000) scale(1, -1) translate(-11.500000, -5.000000) ",
                      points: "2.84078316e-14 3 18 3 23 7 5 7"
                    }
                  }),
                  _c("polygon", {
                    attrs: {
                      id: "Rectangle-Copy-11",
                      fill: "#EDEEF2",
                      points: "-3.69149156e-15 7 38 7 38 43 -3.69149156e-15 43"
                    }
                  }),
                  _c("rect", {
                    attrs: {
                      id: "Rectangle-Copy-12",
                      fill: "url(#linearGradient-1-" + _vm.id + ")",
                      transform: "translate(46.500000, 25.000000) scale(-1, 1) translate(-46.500000, -25.000000) ",
                      x: "38",
                      y: "7",
                      width: "17",
                      height: "36"
                    }
                  }),
                  _c("polygon", {
                    attrs: {
                      id: "Rectangle-Copy-13",
                      fill: "#F8F9FB",
                      transform: "translate(39.500000, 3.500000) scale(-1, 1) translate(-39.500000, -3.500000) ",
                      points: "24 7 41 7 55 -3.63806207e-12 38 -3.63806207e-12"
                    }
                  })
                ]),
                _c("rect", {
                  attrs: {
                    id: "Rectangle-Copy-15",
                    fill: "url(#linearGradient-2-" + _vm.id + ")",
                    x: "13",
                    y: "45",
                    width: "40",
                    height: "36"
                  }
                }),
                _c("g", {
                  attrs: {
                    id: "Rectangle-Copy-17",
                    transform: "translate(53.000000, 45.000000)"
                  }
                }, [
                  _c("mask", { attrs: { id: "mask-4-" + _vm.id, fill: "white" } }, [
                    _c("use", {
                      attrs: { "xlink:href": "#path-3-" + _vm.id }
                    })
                  ]),
                  _c("use", {
                    attrs: {
                      id: "Mask",
                      fill: "#E0E3E9",
                      transform: "translate(8.500000, 18.000000) scale(-1, 1) translate(-8.500000, -18.000000) ",
                      "xlink:href": "#path-3-" + _vm.id
                    }
                  }),
                  _c("polygon", {
                    attrs: {
                      id: "Rectangle-Copy",
                      fill: "#D5D7DE",
                      mask: "url(#mask-4-" + _vm.id + ")",
                      transform: "translate(12.000000, 9.000000) scale(-1, 1) translate(-12.000000, -9.000000) ",
                      points: "7 0 24 0 20 18 -1.70530257e-13 16"
                    }
                  })
                ]),
                _c("polygon", {
                  attrs: {
                    id: "Rectangle-Copy-18",
                    fill: "#F8F9FB",
                    transform: "translate(66.000000, 51.500000) scale(-1, 1) translate(-66.000000, -51.500000) ",
                    points: "62 45 79 45 70 58 53 58"
                  }
                })
              ])
            ])
          ])
        ]);
      };
      var img_emptyvue_type_template_id_42918b82_staticRenderFns = [];
      img_emptyvue_type_template_id_42918b82_render._withStripped = true;
      var img_emptyvue_type_script_lang_js_id = 0;
      var img_emptyvue_type_script_lang_js_ = {
        name: "ImgEmpty",
        data: function data25() {
          return {
            id: ++img_emptyvue_type_script_lang_js_id
          };
        }
      };
      var src_img_emptyvue_type_script_lang_js_ = img_emptyvue_type_script_lang_js_;
      var img_empty_component = normalizeComponent(src_img_emptyvue_type_script_lang_js_, img_emptyvue_type_template_id_42918b82_render, img_emptyvue_type_template_id_42918b82_staticRenderFns, false, null, null, null);
      img_empty_component.options.__file = "packages/empty/src/img-empty.vue";
      var img_empty = img_empty_component.exports;
      var srcvue_type_script_lang_js_components;
      var empty_srcvue_type_script_lang_js_ = {
        name: "ElEmpty",
        components: (srcvue_type_script_lang_js_components = {}, srcvue_type_script_lang_js_components[img_empty.name] = img_empty, srcvue_type_script_lang_js_components),
        props: {
          image: {
            type: String,
            default: ""
          },
          imageSize: Number,
          description: {
            type: String,
            default: ""
          }
        },
        computed: {
          emptyDescription: function emptyDescription() {
            return this.description || Object(lib_locale_["t"])("el.empty.description");
          },
          imageStyle: function imageStyle() {
            return {
              width: this.imageSize ? this.imageSize + "px" : ""
            };
          }
        }
      };
      var packages_empty_srcvue_type_script_lang_js_ = empty_srcvue_type_script_lang_js_;
      var empty_src_component = normalizeComponent(packages_empty_srcvue_type_script_lang_js_, srcvue_type_template_id_347ced91_render, srcvue_type_template_id_347ced91_staticRenderFns, false, null, null, null);
      empty_src_component.options.__file = "packages/empty/src/index.vue";
      var empty_src = empty_src_component.exports;
      empty_src.install = function(Vue2) {
        Vue2.component(empty_src.name, empty_src);
      };
      var empty = empty_src;
      var descriptions_row_extends = Object.assign || function(target2) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target2[key] = source[key];
            }
          }
        }
        return target2;
      };
      var descriptions_row = {
        name: "ElDescriptionsRow",
        props: {
          row: {
            type: Array
          }
        },
        inject: ["elDescriptions"],
        render: function render37(h) {
          var elDescriptions = this.elDescriptions;
          var row = (this.row || []).map(function(item) {
            return descriptions_row_extends({}, item, {
              label: item.slots.label || item.props.label
            }, ["labelClassName", "contentClassName", "labelStyle", "contentStyle"].reduce(function(res, key) {
              res[key] = item.props[key] || elDescriptions[key];
              return res;
            }, {}));
          });
          if (elDescriptions.direction === "vertical") {
            return h("tbody", [h("tr", { "class": "el-descriptions-row" }, [row.map(function(item) {
              var _ref;
              return h("th", {
                "class": (_ref = {
                  "el-descriptions-item__cell": true,
                  "el-descriptions-item__label": true,
                  "has-colon": elDescriptions.border ? false : elDescriptions.colon,
                  "is-bordered-label": elDescriptions.border
                }, _ref[item.labelClassName] = true, _ref),
                style: item.labelStyle,
                attrs: {
                  colSpan: item.props.span
                }
              }, [item.label]);
            })]), h("tr", { "class": "el-descriptions-row" }, [row.map(function(item) {
              return h("td", {
                "class": ["el-descriptions-item__cell", "el-descriptions-item__content", item.contentClassName],
                style: item.contentStyle,
                attrs: {
                  colSpan: item.props.span
                }
              }, [item.slots.default]);
            })])]);
          }
          if (elDescriptions.border) {
            return h("tbody", [h("tr", { "class": "el-descriptions-row" }, [row.map(function(item) {
              var _ref2;
              return [h("th", {
                "class": (_ref2 = {
                  "el-descriptions-item__cell": true,
                  "el-descriptions-item__label": true,
                  "is-bordered-label": elDescriptions.border
                }, _ref2[item.labelClassName] = true, _ref2),
                style: item.labelStyle,
                attrs: {
                  colSpan: "1"
                }
              }, [item.label]), h("td", {
                "class": ["el-descriptions-item__cell", "el-descriptions-item__content", item.contentClassName],
                style: item.contentStyle,
                attrs: {
                  colSpan: item.props.span * 2 - 1
                }
              }, [item.slots.default])];
            })])]);
          }
          return h("tbody", [h("tr", { "class": "el-descriptions-row" }, [row.map(function(item) {
            var _ref3;
            return h("td", {
              "class": "el-descriptions-item el-descriptions-item__cell",
              attrs: { colSpan: item.props.span }
            }, [h("div", { "class": "el-descriptions-item__container" }, [h("span", {
              "class": (_ref3 = {
                "el-descriptions-item__label": true,
                "has-colon": elDescriptions.colon
              }, _ref3[item.labelClassName] = true, _ref3),
              style: item.labelStyle
            }, [item.props.label]), h("span", {
              "class": ["el-descriptions-item__content", item.contentClassName],
              style: item.contentStyle
            }, [item.slots.default])])]);
          })])]);
        }
      };
      var src_extends = Object.assign || function(target2) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target2[key] = source[key];
            }
          }
        }
        return target2;
      };
      var src_components;
      var descriptions_src = {
        name: "ElDescriptions",
        components: (src_components = {}, src_components[descriptions_row.name] = descriptions_row, src_components),
        props: {
          border: {
            type: Boolean,
            default: false
          },
          column: {
            type: Number,
            default: 3
          },
          direction: {
            type: String,
            default: "horizontal"
          },
          size: {
            type: String
          },
          title: {
            type: String,
            default: ""
          },
          extra: {
            type: String,
            default: ""
          },
          labelStyle: {
            type: Object
          },
          contentStyle: {
            type: Object
          },
          labelClassName: {
            type: String,
            default: ""
          },
          contentClassName: {
            type: String,
            default: ""
          },
          colon: {
            type: Boolean,
            default: true
          }
        },
        computed: {
          descriptionsSize: function descriptionsSize() {
            return this.size || (this.$ELEMENT || {}).size;
          }
        },
        provide: function provide11() {
          return {
            elDescriptions: this
          };
        },
        methods: {
          getOptionProps: function getOptionProps(vnode) {
            if (vnode.componentOptions) {
              var componentOptions = vnode.componentOptions;
              var _componentOptions$pro = componentOptions.propsData, propsData = _componentOptions$pro === void 0 ? {} : _componentOptions$pro, _componentOptions$Cto = componentOptions.Ctor, Ctor = _componentOptions$Cto === void 0 ? {} : _componentOptions$Cto;
              var props2 = (Ctor.options || {}).props || {};
              var res = {};
              for (var k in props2) {
                var v = props2[k];
                var defaultValue = v.default;
                if (defaultValue !== void 0) {
                  res[k] = Object(types_["isFunction"])(defaultValue) ? defaultValue.call(vnode) : defaultValue;
                }
              }
              return src_extends({}, res, propsData);
            }
            return {};
          },
          getSlots: function getSlots(vnode) {
            var _this = this;
            var componentOptions = vnode.componentOptions || {};
            var children = vnode.children || componentOptions.children || [];
            var slots = {};
            children.forEach(function(child) {
              if (!_this.isEmptyElement(child)) {
                var name = child.data && child.data.slot || "default";
                slots[name] = slots[name] || [];
                if (child.tag === "template") {
                  slots[name].push(child.children);
                } else {
                  slots[name].push(child);
                }
              }
            });
            return src_extends({}, slots);
          },
          isEmptyElement: function isEmptyElement(c) {
            return !(c.tag || c.text && c.text.trim() !== "");
          },
          filledNode: function filledNode(node, span, count) {
            var isLast = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
            if (!node.props) {
              node.props = {};
            }
            if (span > count) {
              node.props.span = count;
            }
            if (isLast) {
              node.props.span = count;
            }
            return node;
          },
          getRows: function getRows() {
            var _this2 = this;
            var children = (this.$slots.default || []).filter(function(vnode) {
              return vnode.tag && vnode.componentOptions && vnode.componentOptions.Ctor.options.name === "ElDescriptionsItem";
            });
            var nodes = children.map(function(vnode) {
              return {
                props: _this2.getOptionProps(vnode),
                slots: _this2.getSlots(vnode),
                vnode
              };
            });
            var rows = [];
            var temp = [];
            var count = this.column;
            nodes.forEach(function(node, index2) {
              var span = node.props.span || 1;
              if (index2 === children.length - 1) {
                temp.push(_this2.filledNode(node, span, count, true));
                rows.push(temp);
                return;
              }
              if (span < count) {
                count -= span;
                temp.push(node);
              } else {
                temp.push(_this2.filledNode(node, span, count));
                rows.push(temp);
                count = _this2.column;
                temp = [];
              }
            });
            return rows;
          }
        },
        render: function render37() {
          var h = arguments[0];
          var title = this.title, extra = this.extra, border = this.border, descriptionsSize = this.descriptionsSize, $slots = this.$slots;
          var rows = this.getRows();
          return h("div", { "class": "el-descriptions" }, [title || extra || $slots.title || $slots.extra ? h("div", { "class": "el-descriptions__header" }, [h("div", { "class": "el-descriptions__title" }, [$slots.title ? $slots.title : title]), h("div", { "class": "el-descriptions__extra" }, [$slots.extra ? $slots.extra : extra])]) : null, h("div", { "class": "el-descriptions__body" }, [h("table", { "class": ["el-descriptions__table", { "is-bordered": border }, descriptionsSize ? "el-descriptions--" + descriptionsSize : ""] }, [rows.map(function(row) {
            return h(descriptions_row, {
              attrs: { row }
            });
          })])])]);
        }
      };
      descriptions_src.install = function install34(Vue2) {
        Vue2.component(descriptions_src.name, descriptions_src);
      };
      var descriptions = descriptions_src;
      var descriptions_item = {
        name: "ElDescriptionsItem",
        props: {
          label: {
            type: String,
            default: ""
          },
          span: {
            type: Number,
            default: 1
          },
          contentClassName: {
            type: String,
            default: ""
          },
          contentStyle: {
            type: Object
          },
          labelClassName: {
            type: String,
            default: ""
          },
          labelStyle: {
            type: Object
          }
        },
        render: function render37() {
          return null;
        }
      };
      descriptions_item.install = function install34(Vue2) {
        Vue2.component(descriptions_item.name, descriptions_item);
      };
      var packages_descriptions_item = descriptions_item;
      var srcvue_type_template_id_3408b139_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", { staticClass: "el-result" }, [
          _c("div", { staticClass: "el-result__icon" }, [
            _vm._t("icon", [
              _c(_vm.iconElement, { tag: "component", class: _vm.iconElement })
            ])
          ], 2),
          _vm.title || _vm.$slots.title ? _c("div", { staticClass: "el-result__title" }, [_vm._t("title", [_c("p", [_vm._v(_vm._s(_vm.title))])])], 2) : _vm._e(),
          _vm.subTitle || _vm.$slots.subTitle ? _c("div", { staticClass: "el-result__subtitle" }, [_vm._t("subTitle", [_c("p", [_vm._v(_vm._s(_vm.subTitle))])])], 2) : _vm._e(),
          _vm.$slots.extra ? _c("div", { staticClass: "el-result__extra" }, [_vm._t("extra")], 2) : _vm._e()
        ]);
      };
      var srcvue_type_template_id_3408b139_staticRenderFns = [];
      srcvue_type_template_id_3408b139_render._withStripped = true;
      var icon_successvue_type_template_id_18119418_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("svg", { attrs: { viewBox: "0 0 48 48", xmlns: "http://www.w3.org/2000/svg" } }, [
          _c("path", {
            attrs: {
              d: "M24,4 C35.045695,4 44,12.954305 44,24 C44,35.045695 35.045695,44 24,44 C12.954305,44 4,35.045695 4,24 C4,12.954305 12.954305,4 24,4 Z M34.5548098,16.4485711 C33.9612228,15.8504763 32.9988282,15.8504763 32.4052412,16.4485711 L32.4052412,16.4485711 L21.413757,27.5805811 L21.413757,27.5805811 L21.4034642,27.590855 C21.0097542,27.9781674 20.3766105,27.9729811 19.9892981,27.5792711 L19.9892981,27.5792711 L15.5947588,23.1121428 C15.0011718,22.514048 14.0387772,22.514048 13.4451902,23.1121428 C12.8516033,23.7102376 12.8516033,24.6799409 13.4451902,25.2780357 L13.4451902,25.2780357 L19.6260786,31.5514289 C20.2196656,32.1495237 21.1820602,32.1495237 21.7756472,31.5514289 L21.7756472,31.5514289 L34.5548098,18.614464 C35.1483967,18.0163692 35.1483967,17.0466659 34.5548098,16.4485711 Z"
            }
          })
        ]);
      };
      var icon_successvue_type_template_id_18119418_staticRenderFns = [];
      icon_successvue_type_template_id_18119418_render._withStripped = true;
      var icon_successvue_type_script_lang_js_ = {
        name: "IconSuccess"
      };
      var src_icon_successvue_type_script_lang_js_ = icon_successvue_type_script_lang_js_;
      var icon_success_component = normalizeComponent(src_icon_successvue_type_script_lang_js_, icon_successvue_type_template_id_18119418_render, icon_successvue_type_template_id_18119418_staticRenderFns, false, null, null, null);
      icon_success_component.options.__file = "packages/result/src/icon-success.vue";
      var icon_success = icon_success_component.exports;
      var icon_errorvue_type_template_id_21199246_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("svg", { attrs: { viewBox: "0 0 48 48", xmlns: "http://www.w3.org/2000/svg" } }, [
          _c("path", {
            attrs: {
              d: "M24,4 C35.045695,4 44,12.954305 44,24 C44,35.045695 35.045695,44 24,44 C12.954305,44 4,35.045695 4,24 C4,12.954305 12.954305,4 24,4 Z M32.57818,15.42182 C32.0157534,14.8593933 31.1038797,14.8593933 30.541453,15.42182 L30.541453,15.42182 L24.0006789,21.9625941 L17.458547,15.42182 C16.8961203,14.8593933 15.9842466,14.8593933 15.42182,15.42182 C14.8593933,15.9842466 14.8593933,16.8961203 15.42182,17.458547 L15.42182,17.458547 L21.9639519,23.9993211 L15.42182,30.541453 C14.8593933,31.1038797 14.8593933,32.0157534 15.42182,32.57818 C15.9842466,33.1406067 16.8961203,33.1406067 17.458547,32.57818 L17.458547,32.57818 L24.0006789,26.0360481 L30.541453,32.57818 C31.1038797,33.1406067 32.0157534,33.1406067 32.57818,32.57818 C33.1406067,32.0157534 33.1406067,31.1038797 32.57818,30.541453 L32.57818,30.541453 L26.0374059,23.9993211 L32.57818,17.458547 C33.1406067,16.8961203 33.1406067,15.9842466 32.57818,15.42182 Z"
            }
          })
        ]);
      };
      var icon_errorvue_type_template_id_21199246_staticRenderFns = [];
      icon_errorvue_type_template_id_21199246_render._withStripped = true;
      var icon_errorvue_type_script_lang_js_ = {
        name: "IconError"
      };
      var src_icon_errorvue_type_script_lang_js_ = icon_errorvue_type_script_lang_js_;
      var icon_error_component = normalizeComponent(src_icon_errorvue_type_script_lang_js_, icon_errorvue_type_template_id_21199246_render, icon_errorvue_type_template_id_21199246_staticRenderFns, false, null, null, null);
      icon_error_component.options.__file = "packages/result/src/icon-error.vue";
      var icon_error = icon_error_component.exports;
      var icon_warningvue_type_template_id_46fe8f31_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("svg", { attrs: { viewBox: "0 0 48 48", xmlns: "http://www.w3.org/2000/svg" } }, [
          _c("path", {
            attrs: {
              d: "M24,4 C35.045695,4 44,12.954305 44,24 C44,35.045695 35.045695,44 24,44 C12.954305,44 4,35.045695 4,24 C4,12.954305 12.954305,4 24,4 Z M24,31 C22.8954305,31 22,31.8954305 22,33 C22,34.1045695 22.8954305,35 24,35 C25.1045695,35 26,34.1045695 26,33 C26,31.8954305 25.1045695,31 24,31 Z M24,14 C23.1715729,14 22.5,14.6715729 22.5,15.5 L22.5,15.5 L22.5,27.5 C22.5,28.3284271 23.1715729,29 24,29 C24.8284271,29 25.5,28.3284271 25.5,27.5 L25.5,27.5 L25.5,15.5 C25.5,14.6715729 24.8284271,14 24,14 Z"
            }
          })
        ]);
      };
      var icon_warningvue_type_template_id_46fe8f31_staticRenderFns = [];
      icon_warningvue_type_template_id_46fe8f31_render._withStripped = true;
      var icon_warningvue_type_script_lang_ts_ = {
        name: "IconWarning"
      };
      var src_icon_warningvue_type_script_lang_ts_ = icon_warningvue_type_script_lang_ts_;
      var icon_warning_component = normalizeComponent(src_icon_warningvue_type_script_lang_ts_, icon_warningvue_type_template_id_46fe8f31_render, icon_warningvue_type_template_id_46fe8f31_staticRenderFns, false, null, null, null);
      icon_warning_component.options.__file = "packages/result/src/icon-warning.vue";
      var icon_warning = icon_warning_component.exports;
      var icon_infovue_type_template_id_19e3de69_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("svg", { attrs: { viewBox: "0 0 48 48", xmlns: "http://www.w3.org/2000/svg" } }, [
          _c("path", {
            attrs: {
              d: "M24,4 C35.045695,4 44,12.954305 44,24 C44,35.045695 35.045695,44 24,44 C12.954305,44 4,35.045695 4,24 C4,12.954305 12.954305,4 24,4 Z M24,19 L21,19 C20.1715729,19 19.5,19.6715729 19.5,20.5 C19.5,21.3284271 20.1715729,22 21,22 L21,22 L22.5,22 L22.5,31 L21,31 C20.1715729,31 19.5,31.6715729 19.5,32.5 C19.5,33.3284271 20.1715729,34 21,34 L21,34 L27,34 C27.8284271,34 28.5,33.3284271 28.5,32.5 C28.5,31.6715729 27.8284271,31 27,31 L27,31 L25.5,31 L25.5,20.5 C25.5,19.6715729 24.8284271,19 24,19 L24,19 Z M24,13 C22.8954305,13 22,13.8954305 22,15 C22,16.1045695 22.8954305,17 24,17 C25.1045695,17 26,16.1045695 26,15 C26,13.8954305 25.1045695,13 24,13 Z"
            }
          })
        ]);
      };
      var icon_infovue_type_template_id_19e3de69_staticRenderFns = [];
      icon_infovue_type_template_id_19e3de69_render._withStripped = true;
      var icon_infovue_type_script_lang_ts_ = {
        name: "IconInfo"
      };
      var src_icon_infovue_type_script_lang_ts_ = icon_infovue_type_script_lang_ts_;
      var icon_info_component = normalizeComponent(src_icon_infovue_type_script_lang_ts_, icon_infovue_type_template_id_19e3de69_render, icon_infovue_type_template_id_19e3de69_staticRenderFns, false, null, null, null);
      icon_info_component.options.__file = "packages/result/src/icon-info.vue";
      var icon_info = icon_info_component.exports;
      var result_srcvue_type_script_lang_js_components;
      var IconMap = {
        success: "icon-success",
        warning: "icon-warning",
        error: "icon-error",
        info: "icon-info"
      };
      var result_srcvue_type_script_lang_js_ = {
        name: "ElResult",
        components: (result_srcvue_type_script_lang_js_components = {}, result_srcvue_type_script_lang_js_components[icon_success.name] = icon_success, result_srcvue_type_script_lang_js_components[icon_error.name] = icon_error, result_srcvue_type_script_lang_js_components[icon_warning.name] = icon_warning, result_srcvue_type_script_lang_js_components[icon_info.name] = icon_info, result_srcvue_type_script_lang_js_components),
        props: {
          title: {
            type: String,
            default: ""
          },
          subTitle: {
            type: String,
            default: ""
          },
          icon: {
            type: String,
            default: "info"
          }
        },
        computed: {
          iconElement: function iconElement() {
            var icon3 = this.icon;
            return icon3 && IconMap[icon3] ? IconMap[icon3] : "icon-info";
          }
        }
      };
      var packages_result_srcvue_type_script_lang_js_ = result_srcvue_type_script_lang_js_;
      var result_src_component = normalizeComponent(packages_result_srcvue_type_script_lang_js_, srcvue_type_template_id_3408b139_render, srcvue_type_template_id_3408b139_staticRenderFns, false, null, null, null);
      result_src_component.options.__file = "packages/result/src/index.vue";
      var result_src = result_src_component.exports;
      result_src.install = function(Vue2) {
        Vue2.component(result_src.name, result_src);
      };
      var result = result_src;
      var components = [packages_pagination, dialog, packages_autocomplete, packages_dropdown, packages_dropdown_menu, packages_dropdown_item, packages_menu, packages_submenu, packages_menu_item, packages_menu_item_group, packages_input, packages_input_number, packages_radio, packages_radio_group, packages_radio_button, packages_checkbox, packages_checkbox_button, packages_checkbox_group, packages_switch, packages_select, packages_option, packages_option_group, packages_button, packages_button_group, packages_table, packages_table_column, packages_date_picker, packages_time_select, packages_time_picker, popover2, packages_tooltip, packages_breadcrumb, packages_breadcrumb_item, packages_form, packages_form_item, packages_tabs, packages_tab_pane, packages_tag, packages_tree, packages_alert, slider, packages_icon, packages_row, packages_col, packages_upload, packages_progress, packages_spinner, badge, card, rate, packages_steps, packages_step, carousel, scrollbar2, carousel_item, packages_collapse, packages_collapse_item, packages_cascader, color_picker, transfer, packages_container, header2, aside, packages_main, footer2, timeline, timeline_item, packages_link, divider, packages_image, calendar, backtop, page_header, packages_cascader_panel, avatar, drawer, popconfirm, skeleton, skeleton_item, empty, descriptions, packages_descriptions_item, result, collapse_transition_default.a];
      var src_install = function install34(Vue2) {
        var opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        lib_locale_default.a.use(opts.locale);
        lib_locale_default.a.i18n(opts.i18n);
        components.forEach(function(component2) {
          Vue2.component(component2.name, component2);
        });
        Vue2.use(infinite_scroll);
        Vue2.use(packages_loading.directive);
        Vue2.prototype.$ELEMENT = {
          size: opts.size || "",
          zIndex: opts.zIndex || 2e3
        };
        Vue2.prototype.$loading = packages_loading.service;
        Vue2.prototype.$msgbox = message_box;
        Vue2.prototype.$alert = message_box.alert;
        Vue2.prototype.$confirm = message_box.confirm;
        Vue2.prototype.$prompt = message_box.prompt;
        Vue2.prototype.$notify = notification;
        Vue2.prototype.$message = packages_message;
      };
      if (typeof window !== "undefined" && window.Vue) {
        src_install(window.Vue);
      }
      __webpack_exports__["default"] = {
        version: "2.15.6",
        locale: lib_locale_default.a.use,
        i18n: lib_locale_default.a.i18n,
        install: src_install,
        CollapseTransition: collapse_transition_default.a,
        Loading: packages_loading,
        Pagination: packages_pagination,
        Dialog: dialog,
        Autocomplete: packages_autocomplete,
        Dropdown: packages_dropdown,
        DropdownMenu: packages_dropdown_menu,
        DropdownItem: packages_dropdown_item,
        Menu: packages_menu,
        Submenu: packages_submenu,
        MenuItem: packages_menu_item,
        MenuItemGroup: packages_menu_item_group,
        Input: packages_input,
        InputNumber: packages_input_number,
        Radio: packages_radio,
        RadioGroup: packages_radio_group,
        RadioButton: packages_radio_button,
        Checkbox: packages_checkbox,
        CheckboxButton: packages_checkbox_button,
        CheckboxGroup: packages_checkbox_group,
        Switch: packages_switch,
        Select: packages_select,
        Option: packages_option,
        OptionGroup: packages_option_group,
        Button: packages_button,
        ButtonGroup: packages_button_group,
        Table: packages_table,
        TableColumn: packages_table_column,
        DatePicker: packages_date_picker,
        TimeSelect: packages_time_select,
        TimePicker: packages_time_picker,
        Popover: popover2,
        Tooltip: packages_tooltip,
        MessageBox: message_box,
        Breadcrumb: packages_breadcrumb,
        BreadcrumbItem: packages_breadcrumb_item,
        Form: packages_form,
        FormItem: packages_form_item,
        Tabs: packages_tabs,
        TabPane: packages_tab_pane,
        Tag: packages_tag,
        Tree: packages_tree,
        Alert: packages_alert,
        Notification: notification,
        Slider: slider,
        Icon: packages_icon,
        Row: packages_row,
        Col: packages_col,
        Upload: packages_upload,
        Progress: packages_progress,
        Spinner: packages_spinner,
        Message: packages_message,
        Badge: badge,
        Card: card,
        Rate: rate,
        Steps: packages_steps,
        Step: packages_step,
        Carousel: carousel,
        Scrollbar: scrollbar2,
        CarouselItem: carousel_item,
        Collapse: packages_collapse,
        CollapseItem: packages_collapse_item,
        Cascader: packages_cascader,
        ColorPicker: color_picker,
        Transfer: transfer,
        Container: packages_container,
        Header: header2,
        Aside: aside,
        Main: packages_main,
        Footer: footer2,
        Timeline: timeline,
        TimelineItem: timeline_item,
        Link: packages_link,
        Divider: divider,
        Image: packages_image,
        Calendar: calendar,
        Backtop: backtop,
        InfiniteScroll: infinite_scroll,
        PageHeader: page_header,
        CascaderPanel: packages_cascader_panel,
        Avatar: avatar,
        Drawer: drawer,
        Popconfirm: popconfirm,
        Skeleton: skeleton,
        SkeletonItem: skeleton_item,
        Empty: empty,
        Descriptions: descriptions,
        DescriptionsItem: packages_descriptions_item,
        Result: result
      };
    }
  ])["default"];
})(elementUi_common);
var _dec$f, _dec2$8, _dec3$5, _class$f, _class2$9, _descriptor$5, _descriptor2$4;
function _initializerDefineProperty$5(target2, property2, descriptor2, context) {
  if (!descriptor2)
    return;
  Object.defineProperty(target2, property2, { enumerable: descriptor2.enumerable, configurable: descriptor2.configurable, writable: descriptor2.writable, value: descriptor2.initializer ? descriptor2.initializer.call(context) : void 0 });
}
function _applyDecoratedDescriptor$8(target2, property2, decorators, descriptor2, context) {
  var desc = {};
  Object.keys(descriptor2).forEach(function(key) {
    desc[key] = descriptor2[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;
  if ("value" in desc || desc.initializer) {
    desc.writable = true;
  }
  desc = decorators.slice().reverse().reduce(function(desc2, decorator) {
    return decorator(target2, property2, desc2) || desc2;
  }, desc);
  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = void 0;
  }
  if (desc.initializer === void 0) {
    Object.defineProperty(target2, property2, desc);
    desc = null;
  }
  return desc;
}
let Operations = (_dec$f = Component({
  components: {
    "el-button": elementUi_common.exports.Button,
    "el-button-group": elementUi_common.exports.ButtonGroup,
    "el-link": elementUi_common.exports.Link,
    "el-dropdown": elementUi_common.exports.Dropdown,
    "el-dropdown-item": elementUi_common.exports.DropdownItem,
    "el-dropdown-menu": elementUi_common.exports.DropdownMenu
  }
}), _dec2$8 = InjectReactive(), _dec3$5 = InjectReactive(), _dec$f(_class$f = (_class2$9 = class Operations2 extends Vue {
  constructor(...args) {
    super(...args);
    _initializerDefineProperty$5(this, "currentConfig", _descriptor$5, this);
    _initializerDefineProperty$5(this, "dataList", _descriptor2$4, this);
  }
  render() {
    var _a, _b;
    const h = arguments[0];
    return h("vxe-column", helper([{
      "attrs": {
        "title": this.currentConfig.operationConfig.headerTitle,
        "width": (_a = this.currentConfig.operationConfig) == null ? void 0 : _a.width,
        "min-width": (_b = this.currentConfig.operationConfig) == null ? void 0 : _b.minWidth,
        "class-name": "table-view__body-operations"
      }
    }, {
      scopedSlots: {
        default: (scope) => {
          var _a2, _b2, _c;
          const TagName = ((_a2 = this.currentConfig.operationConfig) == null ? void 0 : _a2.surroundByButtonGroup) ? "el-button-group" : "div";
          return h(TagName, [((_c = (_b2 = this.currentConfig.operationConfig) == null ? void 0 : _b2.operations) != null ? _c : []).map((operation) => {
            switch (operation.type) {
              case OperationType.Button:
              case OperationType.ButtonWithIcon:
                return this.buttonRender(operation, scope);
              case OperationType.Link:
              case OperationType.LinkWithoutUnderline:
                return this.linkRender(operation, scope);
              case OperationType.ButtonMore:
              case OperationType.ButtonWithIconMore:
              case OperationType.LinkMore:
              case OperationType.LinkWithoutUnderlineMore:
                return this.moreRender(operation, scope);
              default:
                return this.linkRender(operation, scope);
            }
          })]);
        }
      }
    }]));
  }
  buttonRender(operation, scope) {
    var _a, _b;
    const h = this.$createElement;
    return h("el-button", {
      "attrs": {
        "icon": operation.icon,
        "size": "mini",
        "type": (_a = operation == null ? void 0 : operation.status) != null ? _a : void 0,
        "circle": operation.type === OperationType.ButtonWithIcon,
        "disabled": this.getOperationDisabledValue(operation, scope)
      },
      "on": {
        "click": () => this.onClink(operation, scope)
      }
    }, [(_b = operation == null ? void 0 : operation.label) != null ? _b : ""]);
  }
  linkRender(operation, scope) {
    var _a, _b;
    const h = this.$createElement;
    return h("el-link", {
      "attrs": {
        "type": (_a = operation == null ? void 0 : operation.status) != null ? _a : void 0,
        "underline": operation.type === OperationType.Link,
        "disabled": this.getOperationDisabledValue(operation, scope)
      },
      "nativeOn": {
        "click": () => this.onClink(operation, scope)
      }
    }, [(_b = operation == null ? void 0 : operation.label) != null ? _b : ""]);
  }
  moreRender(operation, scope) {
    var _a;
    const h = this.$createElement;
    return h("el-dropdown", {
      "attrs": {
        "disabled": this.getOperationDisabledValue(operation, scope)
      },
      "on": {
        "command": (command) => this.onClink(command, scope)
      }
    }, [[OperationType.ButtonMore, OperationType.ButtonWithIconMore].includes(operation.type) ? h("el-button", {
      "attrs": {
        "size": "small",
        "icon": operation.icon,
        "circle": !!operation.icon
      }
    }, [operation.label]) : h("el-link", {
      "attrs": {
        "underline": operation.type === OperationType.Link
      }
    }, [(_a = operation == null ? void 0 : operation.label) != null ? _a : "", h("i", {
      "attrs": {
        "className": "el-icon-arrow-down el-icon--right"
      }
    })]), h("el-dropdown-menu", {
      "slot": "dropdown"
    }, [((operation == null ? void 0 : operation.children) || []).map((item) => h("el-dropdown-item", {
      "attrs": {
        "command": item,
        "divided": item.divided,
        "disabled": this.getOperationDisabledValue(item, scope)
      }
    }, [item.label]))])]);
  }
  onClink(operation, scope) {
    if (!this.getOperationDisabledValue(operation, scope)) {
      (operation == null ? void 0 : operation.onClick) && operation.onClick(scope.row);
    }
  }
  getOperationDisabledValue(operation, scope) {
    if (typeof operation.disabled === "function") {
      return operation.disabled(scope.row);
    }
    return false;
  }
}, _descriptor$5 = _applyDecoratedDescriptor$8(_class2$9.prototype, "currentConfig", [_dec2$8], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor2$4 = _applyDecoratedDescriptor$8(_class2$9.prototype, "dataList", [_dec3$5], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _class2$9)) || _class$f);
var _dec$e, _dec2$7, _dec3$4, _class$e, _class2$8, _descriptor$4, _descriptor2$3;
function _initializerDefineProperty$4(target2, property2, descriptor2, context) {
  if (!descriptor2)
    return;
  Object.defineProperty(target2, property2, { enumerable: descriptor2.enumerable, configurable: descriptor2.configurable, writable: descriptor2.writable, value: descriptor2.initializer ? descriptor2.initializer.call(context) : void 0 });
}
function _applyDecoratedDescriptor$7(target2, property2, decorators, descriptor2, context) {
  var desc = {};
  Object.keys(descriptor2).forEach(function(key) {
    desc[key] = descriptor2[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;
  if ("value" in desc || desc.initializer) {
    desc.writable = true;
  }
  desc = decorators.slice().reverse().reduce(function(desc2, decorator) {
    return decorator(target2, property2, desc2) || desc2;
  }, desc);
  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = void 0;
  }
  if (desc.initializer === void 0) {
    Object.defineProperty(target2, property2, desc);
    desc = null;
  }
  return desc;
}
let TableViewBody = (_dec$e = Component({
  components: {
    Operations
  }
}), _dec2$7 = InjectReactive(), _dec3$4 = InjectReactive(), _dec$e(_class$e = (_class2$8 = class TableViewBody2 extends Vue {
  constructor(...args) {
    super(...args);
    _initializerDefineProperty$4(this, "currentConfig", _descriptor$4, this);
    _initializerDefineProperty$4(this, "dataList", _descriptor2$3, this);
  }
  render() {
    const h = arguments[0];
    return h("div", {
      "class": "table-view__body"
    }, [h("vxe-table", {
      "attrs": {
        "height": "100%",
        "data": this.dataList,
        "stripe": this.currentConfig.stripe,
        "border": this.currentConfig.border,
        "round": this.currentConfig.round,
        "empty-text": this.currentConfig.emptyText
      },
      "on": {
        "checkbox-all": this.onCheckboxChange,
        "radio-change": this.onRadioChange,
        "checkbox-change": this.onCheckboxChange
      }
    }, [...this.specialColumnRender(), this.columnRender(), h("operations")])]);
  }
  specialColumnRender() {
    const h = this.$createElement;
    return [this.currentConfig.needCheckbox ? h("vxe-column", {
      "attrs": {
        "type": "checkbox",
        "width": "40",
        "fixed": "left",
        "align": "center"
      }
    }) : void 0, this.currentConfig.needRadio ? h("vxe-column", {
      "attrs": {
        "type": "radio",
        "width": "40",
        "fixed": "left",
        "align": "center"
      }
    }) : void 0, this.currentConfig.needSeq ? h("vxe-column", {
      "attrs": {
        "type": "seq",
        "title": "\u7F16\u53F7",
        "width": "80",
        "fixed": "left"
      }
    }) : void 0];
  }
  columnRender() {
    const h = this.$createElement;
    return (this.currentConfig.columns || []).map((column2, index2) => {
      if (index2 === 0) {
        return h("vxe-column", helper([{
          "attrs": {
            "field": column2.field,
            "title": column2.title,
            "fixed": column2.fixed === true ? Fixed.Left : column2.fixed,
            "type": column2.type,
            "width": column2.width,
            "min-width": column2.minWidth,
            "align": column2.align,
            "header-align": column2.titleAlign,
            "resizable": column2.resizable,
            "show-overflow": column2.showOverflow,
            "show-header-overflow": column2.showHeaderOverflow,
            "class-name": column2.className,
            "header-class-name": column2.headerClassName,
            "formatter": (params) => this.columnFormatter(params, column2)
          }
        }, {
          scopedSlots: this.columnScopedSlots(column2)
        }]));
      } else {
        return h("vxe-column", helper([{
          "attrs": {
            "field": column2.field,
            "title": column2.title,
            "width": column2.width,
            "min-width": column2.minWidth,
            "align": column2.align,
            "header-align": column2.titleAlign,
            "resizable": column2.resizable,
            "show-overflow": column2.showOverflow,
            "show-header-overflow": column2.showHeaderOverflow,
            "class-name": column2.className,
            "header-class-name": column2.headerClassName,
            "formatter": (params) => this.columnFormatter(params, column2)
          }
        }, {
          scopedSlots: this.columnScopedSlots(column2)
        }]));
      }
    });
  }
  columnFormatter({
    cellValue,
    row
  }, column2) {
    if (typeof column2.format === "function") {
      return column2.format(cellValue, row);
    } else {
      return cellValue;
    }
  }
  columnScopedSlots(column2) {
    const scopedSlots = {};
    const h = this.$createElement;
    if (typeof column2.render === "function") {
      scopedSlots.default = (scope) => [column2.render(h, scope.row[column2.field], scope.row)];
    }
    return scopedSlots;
  }
  onRadioChange(row) {
    var _a, _b;
    if (typeof ((_a = this.currentConfig) == null ? void 0 : _a.onRadioChange) === "function") {
      (_b = this.currentConfig) == null ? void 0 : _b.onRadioChange(row);
    }
  }
  onCheckboxChange(records) {
    var _a, _b;
    if (typeof ((_a = this.currentConfig) == null ? void 0 : _a.onCheckboxChange) === "function") {
      (_b = this.currentConfig) == null ? void 0 : _b.onCheckboxChange(records);
    }
  }
}, _descriptor$4 = _applyDecoratedDescriptor$7(_class2$8.prototype, "currentConfig", [_dec2$7], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor2$3 = _applyDecoratedDescriptor$7(_class2$8.prototype, "dataList", [_dec3$4], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _class2$8)) || _class$e);
var __defProp$1 = Object.defineProperty;
var __getOwnPropDesc$1 = Object.getOwnPropertyDescriptor;
var __decorateClass$1 = (decorators, target2, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc$1(target2, key) : target2;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target2, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp$1(target2, key, result);
  return result;
};
let FormMixin = class extends Vue {
  constructor() {
    super(...arguments);
    __publicField(this, "info");
    __publicField(this, "data");
    __publicField(this, "value");
    __publicField(this, "comparedDataInstance", {});
    __publicField(this, "hasFormatValue", false);
    __publicField(this, "currentValue", null);
  }
  get placeholder() {
    if (this.info && typeof this.info.placeholder !== "undefined") {
      if (typeof this.info.placeholder === "function") {
        return this.info.placeholder(this.info);
      } else {
        return this.info.placeholder === true ? this.info.title : this.info.placeholder;
      }
    } else {
      return "";
    }
  }
  get disabled() {
    return this.info.disabled === void 0 ? false : typeof this.info.disabled === "function" ? this.info.disabled(this.currentValue, this.data) : this.info.disabled;
  }
  get comparedData() {
    return this.comparedDataInstance;
  }
  set comparedData(val) {
    if (JSON.stringify(val) !== JSON.stringify(this.comparedDataInstance)) {
      this.$set(this, "comparedDataInstance", Object.assign({}, val));
    }
  }
  onCurrentValueChanged(val) {
    this.afterCurrentValueChanged();
    return val;
  }
  onValueChanged(val) {
    this.afterValueChanged();
    this.setValue(val);
  }
  onDataChanged(val) {
    this.comparedData = val;
  }
  created() {
    this.setValue();
  }
  setValue(val = null) {
    if (!this.hasFormatValue && this.info && this.info.beforeLoad && typeof this.info.beforeLoad === "function") {
      this.currentValue = this.info.beforeLoad(this.value);
      this.hasFormatValue = true;
    } else {
      this.currentValue = val != null ? val : this.value;
    }
  }
  noticeInit() {
  }
  noticeHide() {
  }
  afterValueChanged() {
  }
  afterCurrentValueChanged() {
  }
};
__decorateClass$1([
  Prop({
    type: Object,
    default() {
      return {};
    }
  })
], FormMixin.prototype, "info", 2);
__decorateClass$1([
  Prop({
    type: Object,
    default() {
      return {};
    }
  })
], FormMixin.prototype, "data", 2);
__decorateClass$1([
  Prop({
    required: true,
    default: ""
  })
], FormMixin.prototype, "value", 2);
__decorateClass$1([
  Emit("input"),
  Watch("currentValue")
], FormMixin.prototype, "onCurrentValueChanged", 1);
__decorateClass$1([
  Watch("value")
], FormMixin.prototype, "onValueChanged", 1);
__decorateClass$1([
  Watch("data", {
    immediate: true,
    deep: true
  })
], FormMixin.prototype, "onDataChanged", 1);
FormMixin = __decorateClass$1([
  Component
], FormMixin);
var _dec$d, _class$d;
let StringForm = (_dec$d = Component({
  components: {
    "el-input": elementUi_common.exports.Input
  }
}), _dec$d(_class$d = class StringForm2 extends FormMixin {
  render() {
    var _a, _b;
    const h = arguments[0];
    return h("div", {
      "class": "string__wrapper"
    }, [h("el-input", {
      "attrs": {
        "value": this.currentValue,
        "type": this.info.type,
        "placeholder": this.placeholder,
        "allow-clear": true,
        "suffix-icon": (_a = this.info.extraConfig) == null ? void 0 : _a.suffixIcon,
        "prefix-icon": (_b = this.info.extraConfig) == null ? void 0 : _b.prefixIcon
      },
      "on": {
        "input": (val) => this.currentValue = val
      }
    })]);
  }
}) || _class$d);
var _dec$c, _class$c;
let NumberForm = (_dec$c = Component({
  components: {
    "el-input": elementUi_common.exports.Input
  }
}), _dec$c(_class$c = class NumberForm2 extends FormMixin {
  render() {
    var _a, _b;
    const h = arguments[0];
    return h("el-input", {
      "attrs": {
        "value": this.currentValue,
        "type": "number",
        "placeholder": this.placeholder,
        "allow-clear": true,
        "max": (_a = this.info.extraConfig) == null ? void 0 : _a.max,
        "min": (_b = this.info.extraConfig) == null ? void 0 : _b.min
      },
      "class": "full-width",
      "on": {
        "input": (val) => this.currentValue = val
      }
    });
  }
}) || _class$c);
var _dec$b, _dec2$6, _class$b, _class2$7;
function _applyDecoratedDescriptor$6(target2, property2, decorators, descriptor2, context) {
  var desc = {};
  Object.keys(descriptor2).forEach(function(key) {
    desc[key] = descriptor2[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;
  if ("value" in desc || desc.initializer) {
    desc.writable = true;
  }
  desc = decorators.slice().reverse().reduce(function(desc2, decorator) {
    return decorator(target2, property2, desc2) || desc2;
  }, desc);
  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = void 0;
  }
  if (desc.initializer === void 0) {
    Object.defineProperty(target2, property2, desc);
    desc = null;
  }
  return desc;
}
let SelectForm = (_dec$b = Component({
  components: {
    "el-select": elementUi_common.exports.Select,
    "el-option": elementUi_common.exports.Option
  }
}), _dec2$6 = Watch("info.extraConfig", {
  immediate: true
}), _dec$b(_class$b = (_class2$7 = class SelectForm2 extends FormMixin {
  constructor(...args) {
    super(...args);
    this.selectData = [];
    this.loading = false;
  }
  get mode() {
    var _a;
    if (((_a = this.info.extraConfig) == null ? void 0 : _a.multiple) === true) {
      return "multiple";
    } else {
      return "default";
    }
  }
  async onExtraConfigChanged(val) {
    if (val.selectData) {
      this.selectData = val.selectData;
    }
    if (val.async) {
      await this.loadSelectData();
    }
  }
  async loadSelectData(search = "") {
    var _a, _b;
    if (typeof ((_a = this.info.extraConfig) == null ? void 0 : _a.asyncFunc) === "function") {
      this.loading = true;
      this.selectData = await ((_b = this.info.extraConfig) == null ? void 0 : _b.asyncFunc(search));
      this.loading = false;
    }
  }
  render() {
    var _a, _b, _c, _d;
    const h = arguments[0];
    return h("el-select", {
      "attrs": {
        "value": this.currentValue,
        "mode": this.mode,
        "placeholder": this.placeholder,
        "allow-clear": true,
        "reserve-keyword": ((_a = this.info.extraConfig) == null ? void 0 : _a.async) || false,
        "filterable": ((_b = this.info.extraConfig) == null ? void 0 : _b.filterable) || false,
        "remote": ((_c = this.info.extraConfig) == null ? void 0 : _c.async) || false,
        "remote-method": this.loadSelectData,
        "loading": this.loading,
        "collapse-tags": ((_d = this.info.extraConfig) == null ? void 0 : _d.collapseTags) || true
      },
      "class": "full-width",
      "on": {
        "input": (val) => this.currentValue = val
      }
    }, [this.selectData.map((item) => h("el-option", {
      "key": item.label,
      "attrs": {
        "value": item.value,
        "label": item.label
      }
    }, [item.label]))]);
  }
}, _applyDecoratedDescriptor$6(_class2$7.prototype, "onExtraConfigChanged", [_dec2$6], Object.getOwnPropertyDescriptor(_class2$7.prototype, "onExtraConfigChanged"), _class2$7.prototype), _class2$7)) || _class$b);
var _dec$a, _class$a;
let DateForm = (_dec$a = Component({
  components: {
    "el-date-picker": elementUi_common.exports.DatePicker
  }
}), _dec$a(_class$a = class DateForm2 extends FormMixin {
  get type() {
    return this.info.type === BaseFormType.DateTimePicker ? "datetime" : "date";
  }
  get format() {
    var _a, _b;
    return (_b = (_a = this.info.extraConfig) == null ? void 0 : _a.format) != null ? _b : "YYYY-MM-DD HH:mm";
  }
  get currentPlaceholder() {
    return this.placeholder ? this.placeholder : "\u9009\u62E9\u65E5\u671F\u65F6\u95F4";
  }
  render() {
    var _a;
    const h = arguments[0];
    return h("el-date-picker", {
      "attrs": {
        "value": this.currentValue,
        "type": this.type,
        "allow-clear": true,
        "placeholder": this.currentPlaceholder,
        "value-format": this.format,
        "format": this.format,
        "picker-options": ((_a = this.info.extraConfig) == null ? void 0 : _a.pickerOptions) || {}
      },
      "class": "full-width",
      "on": {
        "input": (val) => this.currentValue = val
      }
    });
  }
}) || _class$a);
var _dec$9, _class$9;
let TimeForm = (_dec$9 = Component({
  components: {
    "el-time-picker": elementUi_common.exports.TimePicker
  }
}), _dec$9(_class$9 = class TimeForm2 extends FormMixin {
  get format() {
    var _a, _b;
    return (_b = (_a = this.info.extraConfig) == null ? void 0 : _a.format) != null ? _b : "HH:mm";
  }
  get currentPlaceholder() {
    return this.placeholder ? this.placeholder : "Please Choose";
  }
  render() {
    const h = arguments[0];
    return h("el-time-picker", {
      "attrs": {
        "value": this.currentValue,
        "placeholder": this.currentPlaceholder,
        "value-format": this.format,
        "format": this.format
      },
      "class": "full-width",
      "on": {
        "input": (val) => this.currentValue = val
      }
    });
  }
}) || _class$9);
var _dec$8, _class$8;
let TimeRangeForm = (_dec$8 = Component({
  components: {
    "el-time-picker": elementUi_common.exports.TimePicker
  }
}), _dec$8(_class$8 = class TimeRangeForm2 extends FormMixin {
  get format() {
    var _a, _b;
    return (_b = (_a = this.info.extraConfig) == null ? void 0 : _a.format) != null ? _b : "HH:mm";
  }
  get currentPlaceholder() {
    return this.placeholder ? this.placeholder : ["Start", "End"];
  }
  render() {
    const h = arguments[0];
    return h("el-time-picker", {
      "attrs": {
        "value": this.currentValue,
        "is-range": true,
        "value-format": this.format,
        "format": this.format,
        "start-placeholder": this.currentPlaceholder[0],
        "end-placeholder": this.currentPlaceholder[1]
      },
      "class": "full-width",
      "on": {
        "input": (val) => this.currentValue = val
      }
    });
  }
}) || _class$8);
var _dec$7, _class$7;
let DateRangeForm = (_dec$7 = Component({
  components: {
    "el-date-picker": elementUi_common.exports.DatePicker
  }
}), _dec$7(_class$7 = class DateRangeForm2 extends FormMixin {
  get showTime() {
    return this.info.type === BaseFormType.DateTimeRangePicker;
  }
  get format() {
    var _a, _b;
    return (_b = (_a = this.info.extraConfig) == null ? void 0 : _a.format) != null ? _b : "YYYY-MM-DD HH:mm";
  }
  get pickerType() {
    return this.info.type === BaseFormType.DateRangePicker ? "daterange" : "";
  }
  get currentPlaceholder() {
    return this.placeholder ? this.placeholder : ["Start", "End"];
  }
  render() {
    var _a;
    const h = arguments[0];
    return h("el-date-picker", {
      "attrs": {
        "value": this.currentValue,
        "type": this.pickerType,
        "allow-clear": true,
        "show-time": this.showTime,
        "start-placeholder": this.currentPlaceholder[0],
        "end-placeholder": this.currentPlaceholder[1],
        "range-separator": ((_a = this.info.extraConfig) == null ? void 0 : _a.rangeSeparator) || "~",
        "value-format": this.format,
        "format": this.format
      },
      "class": "full-width",
      "on": {
        "input": (val) => this.currentValue = val
      }
    });
  }
}) || _class$7);
var _dec$6, _dec2$5, _dec3$3, _class$6, _class2$6;
function _applyDecoratedDescriptor$5(target2, property2, decorators, descriptor2, context) {
  var desc = {};
  Object.keys(descriptor2).forEach(function(key) {
    desc[key] = descriptor2[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;
  if ("value" in desc || desc.initializer) {
    desc.writable = true;
  }
  desc = decorators.slice().reverse().reduce(function(desc2, decorator) {
    return decorator(target2, property2, desc2) || desc2;
  }, desc);
  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = void 0;
  }
  if (desc.initializer === void 0) {
    Object.defineProperty(target2, property2, desc);
    desc = null;
  }
  return desc;
}
let CascaderForm = (_dec$6 = Component({
  components: {
    "el-cascader": elementUi_common.exports.Cascader
  }
}), _dec2$5 = Watch("currentValue"), _dec3$3 = Watch("cascaderOption", {
  deep: true
}), _dec$6(_class$6 = (_class2$6 = class CascaderForm2 extends FormMixin {
  constructor(...args) {
    super(...args);
    this.cascaderOption = [];
    this.hasInitOption = false;
  }
  async onCurrentValueChanged(val) {
    if (val.length && val[val.length - 1] === "empty") {
      val = [];
    }
    await this.checkDynamicLastChildExists(val);
    this.$emit("input", val);
  }
  async onCascaderOptionChanged() {
    if (!this.hasInitOption) {
      await this.checkDynamicLastChildExists(this.currentValue);
    }
  }
  render() {
    const h = arguments[0];
    return h("el-cascader", {
      "attrs": {
        "value": this.currentValue,
        "options": this.cascaderOption,
        "expand-trigger": "hover",
        "change-on-select": false,
        "placeholder": this.placeholder,
        "load-data": this.loadData
      },
      "on": {
        "input": (val) => this.currentValue = val
      }
    });
  }
  async created() {
    super.created();
    await this.setCascaderOptions();
  }
  async setCascaderOptions() {
    var _a, _b;
    if (((_a = this.info.extraConfig) == null ? void 0 : _a.async) === true) {
      this.cascaderOption = await this.info.extraConfig.asyncFunc();
    } else if ((_b = this.info.extraConfig) == null ? void 0 : _b.cascaderData) {
      this.cascaderOption = this.info.extraConfig.cascaderData;
    }
  }
  async loadData(selectedOptions) {
    var _a;
    if (((_a = this.info.extraConfig) == null ? void 0 : _a.async) === true) {
      if (typeof this.info.extraConfig.asyncFunc !== "function") {
        this.$message.error("The asynchronously loaded data passed in is not a function");
      } else {
        const targetOption = selectedOptions[selectedOptions.length - 1];
        targetOption.loading = true;
        const data25 = await this.info.extraConfig.asyncFunc(selectedOptions.map((option2) => option2.value));
        targetOption.loading = false;
        targetOption.children = data25.length ? data25 : [{
          value: "empty",
          label: "EMPTY"
        }];
        this.cascaderOption = [...this.cascaderOption];
      }
    }
  }
  async checkDynamicLastChildExists(val) {
    var _a, _b;
    if (((_a = this.info.extraConfig) == null ? void 0 : _a.async) === true && this.cascaderOption.length) {
      const firstLevel = this.cascaderOption.find((item) => item.value === val[0]);
      if (firstLevel) {
        const secondLevel = firstLevel.children.find((item) => item.value === val[1]);
        if (secondLevel) {
          const thirdLevel = secondLevel.children.find((item) => item.value === val[2]);
          if (thirdLevel && !((_b = thirdLevel.children) == null ? void 0 : _b.length)) {
            const list2 = await this.info.extraConfig.asyncFunc(val.slice(0, -1));
            this.$set(thirdLevel, "children", list2);
            this.hasInitOption = true;
          }
        }
      }
    } else {
      return Promise.resolve();
    }
  }
}, _applyDecoratedDescriptor$5(_class2$6.prototype, "onCurrentValueChanged", [_dec2$5], Object.getOwnPropertyDescriptor(_class2$6.prototype, "onCurrentValueChanged"), _class2$6.prototype), _applyDecoratedDescriptor$5(_class2$6.prototype, "onCascaderOptionChanged", [_dec3$3], Object.getOwnPropertyDescriptor(_class2$6.prototype, "onCascaderOptionChanged"), _class2$6.prototype), _class2$6)) || _class$6);
var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
var freeGlobal$1 = freeGlobal;
var freeSelf = typeof self == "object" && self && self.Object === Object && self;
var root = freeGlobal$1 || freeSelf || Function("return this")();
var root$1 = root;
var Symbol$1 = root$1.Symbol;
var Symbol$2 = Symbol$1;
var objectProto$d = Object.prototype;
var hasOwnProperty$a = objectProto$d.hasOwnProperty;
var nativeObjectToString$1 = objectProto$d.toString;
var symToStringTag$1 = Symbol$2 ? Symbol$2.toStringTag : void 0;
function getRawTag(value6) {
  var isOwn = hasOwnProperty$a.call(value6, symToStringTag$1), tag2 = value6[symToStringTag$1];
  try {
    value6[symToStringTag$1] = void 0;
    var unmasked = true;
  } catch (e) {
  }
  var result = nativeObjectToString$1.call(value6);
  if (unmasked) {
    if (isOwn) {
      value6[symToStringTag$1] = tag2;
    } else {
      delete value6[symToStringTag$1];
    }
  }
  return result;
}
var objectProto$c = Object.prototype;
var nativeObjectToString = objectProto$c.toString;
function objectToString(value6) {
  return nativeObjectToString.call(value6);
}
var nullTag = "[object Null]", undefinedTag = "[object Undefined]";
var symToStringTag = Symbol$2 ? Symbol$2.toStringTag : void 0;
function baseGetTag(value6) {
  if (value6 == null) {
    return value6 === void 0 ? undefinedTag : nullTag;
  }
  return symToStringTag && symToStringTag in Object(value6) ? getRawTag(value6) : objectToString(value6);
}
function isObjectLike(value6) {
  return value6 != null && typeof value6 == "object";
}
var symbolTag$2 = "[object Symbol]";
function isSymbol(value6) {
  return typeof value6 == "symbol" || isObjectLike(value6) && baseGetTag(value6) == symbolTag$2;
}
var isArray2 = Array.isArray;
var isArray$1 = isArray2;
var reWhitespace = /\s/;
function trimmedEndIndex(string2) {
  var index2 = string2.length;
  while (index2-- && reWhitespace.test(string2.charAt(index2))) {
  }
  return index2;
}
var reTrimStart = /^\s+/;
function baseTrim(string2) {
  return string2 ? string2.slice(0, trimmedEndIndex(string2) + 1).replace(reTrimStart, "") : string2;
}
function isObject(value6) {
  var type3 = typeof value6;
  return value6 != null && (type3 == "object" || type3 == "function");
}
var NAN = 0 / 0;
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
var reIsBinary = /^0b[01]+$/i;
var reIsOctal = /^0o[0-7]+$/i;
var freeParseInt = parseInt;
function toNumber(value6) {
  if (typeof value6 == "number") {
    return value6;
  }
  if (isSymbol(value6)) {
    return NAN;
  }
  if (isObject(value6)) {
    var other = typeof value6.valueOf == "function" ? value6.valueOf() : value6;
    value6 = isObject(other) ? other + "" : other;
  }
  if (typeof value6 != "string") {
    return value6 === 0 ? value6 : +value6;
  }
  value6 = baseTrim(value6);
  var isBinary = reIsBinary.test(value6);
  return isBinary || reIsOctal.test(value6) ? freeParseInt(value6.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value6) ? NAN : +value6;
}
function identity(value6) {
  return value6;
}
var asyncTag = "[object AsyncFunction]", funcTag$2 = "[object Function]", genTag$1 = "[object GeneratorFunction]", proxyTag = "[object Proxy]";
function isFunction2(value6) {
  if (!isObject(value6)) {
    return false;
  }
  var tag2 = baseGetTag(value6);
  return tag2 == funcTag$2 || tag2 == genTag$1 || tag2 == asyncTag || tag2 == proxyTag;
}
var coreJsData = root$1["__core-js_shared__"];
var coreJsData$1 = coreJsData;
var maskSrcKey = function() {
  var uid2 = /[^.]+$/.exec(coreJsData$1 && coreJsData$1.keys && coreJsData$1.keys.IE_PROTO || "");
  return uid2 ? "Symbol(src)_1." + uid2 : "";
}();
function isMasked(func) {
  return !!maskSrcKey && maskSrcKey in func;
}
var funcProto$2 = Function.prototype;
var funcToString$2 = funcProto$2.toString;
function toSource(func) {
  if (func != null) {
    try {
      return funcToString$2.call(func);
    } catch (e) {
    }
    try {
      return func + "";
    } catch (e) {
    }
  }
  return "";
}
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
var reIsHostCtor = /^\[object .+?Constructor\]$/;
var funcProto$1 = Function.prototype, objectProto$b = Object.prototype;
var funcToString$1 = funcProto$1.toString;
var hasOwnProperty$9 = objectProto$b.hasOwnProperty;
var reIsNative = RegExp("^" + funcToString$1.call(hasOwnProperty$9).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
function baseIsNative(value6) {
  if (!isObject(value6) || isMasked(value6)) {
    return false;
  }
  var pattern2 = isFunction2(value6) ? reIsNative : reIsHostCtor;
  return pattern2.test(toSource(value6));
}
function getValue(object3, key) {
  return object3 == null ? void 0 : object3[key];
}
function getNative(object3, key) {
  var value6 = getValue(object3, key);
  return baseIsNative(value6) ? value6 : void 0;
}
var WeakMap$1 = getNative(root$1, "WeakMap");
var WeakMap$2 = WeakMap$1;
var objectCreate = Object.create;
var baseCreate = function() {
  function object3() {
  }
  return function(proto) {
    if (!isObject(proto)) {
      return {};
    }
    if (objectCreate) {
      return objectCreate(proto);
    }
    object3.prototype = proto;
    var result = new object3();
    object3.prototype = void 0;
    return result;
  };
}();
var baseCreate$1 = baseCreate;
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0:
      return func.call(thisArg);
    case 1:
      return func.call(thisArg, args[0]);
    case 2:
      return func.call(thisArg, args[0], args[1]);
    case 3:
      return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}
function copyArray(source, array3) {
  var index2 = -1, length = source.length;
  array3 || (array3 = Array(length));
  while (++index2 < length) {
    array3[index2] = source[index2];
  }
  return array3;
}
var HOT_COUNT = 800, HOT_SPAN = 16;
var nativeNow = Date.now;
function shortOut(func) {
  var count = 0, lastCalled = 0;
  return function() {
    var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
    lastCalled = stamp;
    if (remaining > 0) {
      if (++count >= HOT_COUNT) {
        return arguments[0];
      }
    } else {
      count = 0;
    }
    return func.apply(void 0, arguments);
  };
}
function constant(value6) {
  return function() {
    return value6;
  };
}
var defineProperty3 = function() {
  try {
    var func = getNative(Object, "defineProperty");
    func({}, "", {});
    return func;
  } catch (e) {
  }
}();
var defineProperty$1 = defineProperty3;
var baseSetToString = !defineProperty$1 ? identity : function(func, string2) {
  return defineProperty$1(func, "toString", {
    "configurable": true,
    "enumerable": false,
    "value": constant(string2),
    "writable": true
  });
};
var baseSetToString$1 = baseSetToString;
var setToString = shortOut(baseSetToString$1);
var setToString$1 = setToString;
function arrayEach(array3, iteratee) {
  var index2 = -1, length = array3 == null ? 0 : array3.length;
  while (++index2 < length) {
    if (iteratee(array3[index2], index2, array3) === false) {
      break;
    }
  }
  return array3;
}
var MAX_SAFE_INTEGER$1 = 9007199254740991;
var reIsUint = /^(?:0|[1-9]\d*)$/;
function isIndex(value6, length) {
  var type3 = typeof value6;
  length = length == null ? MAX_SAFE_INTEGER$1 : length;
  return !!length && (type3 == "number" || type3 != "symbol" && reIsUint.test(value6)) && (value6 > -1 && value6 % 1 == 0 && value6 < length);
}
function baseAssignValue(object3, key, value6) {
  if (key == "__proto__" && defineProperty$1) {
    defineProperty$1(object3, key, {
      "configurable": true,
      "enumerable": true,
      "value": value6,
      "writable": true
    });
  } else {
    object3[key] = value6;
  }
}
function eq(value6, other) {
  return value6 === other || value6 !== value6 && other !== other;
}
var objectProto$a = Object.prototype;
var hasOwnProperty$8 = objectProto$a.hasOwnProperty;
function assignValue(object3, key, value6) {
  var objValue = object3[key];
  if (!(hasOwnProperty$8.call(object3, key) && eq(objValue, value6)) || value6 === void 0 && !(key in object3)) {
    baseAssignValue(object3, key, value6);
  }
}
function copyObject(source, props2, object3, customizer) {
  var isNew = !object3;
  object3 || (object3 = {});
  var index2 = -1, length = props2.length;
  while (++index2 < length) {
    var key = props2[index2];
    var newValue = customizer ? customizer(object3[key], source[key], key, object3, source) : void 0;
    if (newValue === void 0) {
      newValue = source[key];
    }
    if (isNew) {
      baseAssignValue(object3, key, newValue);
    } else {
      assignValue(object3, key, newValue);
    }
  }
  return object3;
}
var nativeMax$1 = Math.max;
function overRest(func, start, transform) {
  start = nativeMax$1(start === void 0 ? func.length - 1 : start, 0);
  return function() {
    var args = arguments, index2 = -1, length = nativeMax$1(args.length - start, 0), array3 = Array(length);
    while (++index2 < length) {
      array3[index2] = args[start + index2];
    }
    index2 = -1;
    var otherArgs = Array(start + 1);
    while (++index2 < start) {
      otherArgs[index2] = args[index2];
    }
    otherArgs[start] = transform(array3);
    return apply(func, this, otherArgs);
  };
}
function baseRest(func, start) {
  return setToString$1(overRest(func, start, identity), func + "");
}
var MAX_SAFE_INTEGER = 9007199254740991;
function isLength(value6) {
  return typeof value6 == "number" && value6 > -1 && value6 % 1 == 0 && value6 <= MAX_SAFE_INTEGER;
}
function isArrayLike(value6) {
  return value6 != null && isLength(value6.length) && !isFunction2(value6);
}
function isIterateeCall(value6, index2, object3) {
  if (!isObject(object3)) {
    return false;
  }
  var type3 = typeof index2;
  if (type3 == "number" ? isArrayLike(object3) && isIndex(index2, object3.length) : type3 == "string" && index2 in object3) {
    return eq(object3[index2], value6);
  }
  return false;
}
function createAssigner(assigner) {
  return baseRest(function(object3, sources) {
    var index2 = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard = length > 2 ? sources[2] : void 0;
    customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
      customizer = length < 3 ? void 0 : customizer;
      length = 1;
    }
    object3 = Object(object3);
    while (++index2 < length) {
      var source = sources[index2];
      if (source) {
        assigner(object3, source, index2, customizer);
      }
    }
    return object3;
  });
}
var objectProto$9 = Object.prototype;
function isPrototype(value6) {
  var Ctor = value6 && value6.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto$9;
  return value6 === proto;
}
function baseTimes(n, iteratee) {
  var index2 = -1, result = Array(n);
  while (++index2 < n) {
    result[index2] = iteratee(index2);
  }
  return result;
}
var argsTag$2 = "[object Arguments]";
function baseIsArguments(value6) {
  return isObjectLike(value6) && baseGetTag(value6) == argsTag$2;
}
var objectProto$8 = Object.prototype;
var hasOwnProperty$7 = objectProto$8.hasOwnProperty;
var propertyIsEnumerable$1 = objectProto$8.propertyIsEnumerable;
var isArguments = baseIsArguments(function() {
  return arguments;
}()) ? baseIsArguments : function(value6) {
  return isObjectLike(value6) && hasOwnProperty$7.call(value6, "callee") && !propertyIsEnumerable$1.call(value6, "callee");
};
var isArguments$1 = isArguments;
function stubFalse() {
  return false;
}
var freeExports$2 = typeof exports == "object" && exports && !exports.nodeType && exports;
var freeModule$2 = freeExports$2 && typeof module == "object" && module && !module.nodeType && module;
var moduleExports$2 = freeModule$2 && freeModule$2.exports === freeExports$2;
var Buffer$1 = moduleExports$2 ? root$1.Buffer : void 0;
var nativeIsBuffer = Buffer$1 ? Buffer$1.isBuffer : void 0;
var isBuffer = nativeIsBuffer || stubFalse;
var isBuffer$1 = isBuffer;
var argsTag$1 = "[object Arguments]", arrayTag$1 = "[object Array]", boolTag$2 = "[object Boolean]", dateTag$2 = "[object Date]", errorTag$1 = "[object Error]", funcTag$1 = "[object Function]", mapTag$4 = "[object Map]", numberTag$2 = "[object Number]", objectTag$3 = "[object Object]", regexpTag$2 = "[object RegExp]", setTag$4 = "[object Set]", stringTag$2 = "[object String]", weakMapTag$2 = "[object WeakMap]";
var arrayBufferTag$2 = "[object ArrayBuffer]", dataViewTag$3 = "[object DataView]", float32Tag$2 = "[object Float32Array]", float64Tag$2 = "[object Float64Array]", int8Tag$2 = "[object Int8Array]", int16Tag$2 = "[object Int16Array]", int32Tag$2 = "[object Int32Array]", uint8Tag$2 = "[object Uint8Array]", uint8ClampedTag$2 = "[object Uint8ClampedArray]", uint16Tag$2 = "[object Uint16Array]", uint32Tag$2 = "[object Uint32Array]";
var typedArrayTags = {};
typedArrayTags[float32Tag$2] = typedArrayTags[float64Tag$2] = typedArrayTags[int8Tag$2] = typedArrayTags[int16Tag$2] = typedArrayTags[int32Tag$2] = typedArrayTags[uint8Tag$2] = typedArrayTags[uint8ClampedTag$2] = typedArrayTags[uint16Tag$2] = typedArrayTags[uint32Tag$2] = true;
typedArrayTags[argsTag$1] = typedArrayTags[arrayTag$1] = typedArrayTags[arrayBufferTag$2] = typedArrayTags[boolTag$2] = typedArrayTags[dataViewTag$3] = typedArrayTags[dateTag$2] = typedArrayTags[errorTag$1] = typedArrayTags[funcTag$1] = typedArrayTags[mapTag$4] = typedArrayTags[numberTag$2] = typedArrayTags[objectTag$3] = typedArrayTags[regexpTag$2] = typedArrayTags[setTag$4] = typedArrayTags[stringTag$2] = typedArrayTags[weakMapTag$2] = false;
function baseIsTypedArray(value6) {
  return isObjectLike(value6) && isLength(value6.length) && !!typedArrayTags[baseGetTag(value6)];
}
function baseUnary(func) {
  return function(value6) {
    return func(value6);
  };
}
var freeExports$1 = typeof exports == "object" && exports && !exports.nodeType && exports;
var freeModule$1 = freeExports$1 && typeof module == "object" && module && !module.nodeType && module;
var moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;
var freeProcess = moduleExports$1 && freeGlobal$1.process;
var nodeUtil = function() {
  try {
    var types2 = freeModule$1 && freeModule$1.require && freeModule$1.require("util").types;
    if (types2) {
      return types2;
    }
    return freeProcess && freeProcess.binding && freeProcess.binding("util");
  } catch (e) {
  }
}();
var nodeUtil$1 = nodeUtil;
var nodeIsTypedArray = nodeUtil$1 && nodeUtil$1.isTypedArray;
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
var isTypedArray$1 = isTypedArray;
var objectProto$7 = Object.prototype;
var hasOwnProperty$6 = objectProto$7.hasOwnProperty;
function arrayLikeKeys(value6, inherited) {
  var isArr = isArray$1(value6), isArg = !isArr && isArguments$1(value6), isBuff = !isArr && !isArg && isBuffer$1(value6), isType = !isArr && !isArg && !isBuff && isTypedArray$1(value6), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value6.length, String) : [], length = result.length;
  for (var key in value6) {
    if ((inherited || hasOwnProperty$6.call(value6, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex(key, length)))) {
      result.push(key);
    }
  }
  return result;
}
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}
var nativeKeys = overArg(Object.keys, Object);
var nativeKeys$1 = nativeKeys;
var objectProto$6 = Object.prototype;
var hasOwnProperty$5 = objectProto$6.hasOwnProperty;
function baseKeys(object3) {
  if (!isPrototype(object3)) {
    return nativeKeys$1(object3);
  }
  var result = [];
  for (var key in Object(object3)) {
    if (hasOwnProperty$5.call(object3, key) && key != "constructor") {
      result.push(key);
    }
  }
  return result;
}
function keys2(object3) {
  return isArrayLike(object3) ? arrayLikeKeys(object3) : baseKeys(object3);
}
function nativeKeysIn(object3) {
  var result = [];
  if (object3 != null) {
    for (var key in Object(object3)) {
      result.push(key);
    }
  }
  return result;
}
var objectProto$5 = Object.prototype;
var hasOwnProperty$4 = objectProto$5.hasOwnProperty;
function baseKeysIn(object3) {
  if (!isObject(object3)) {
    return nativeKeysIn(object3);
  }
  var isProto = isPrototype(object3), result = [];
  for (var key in object3) {
    if (!(key == "constructor" && (isProto || !hasOwnProperty$4.call(object3, key)))) {
      result.push(key);
    }
  }
  return result;
}
function keysIn(object3) {
  return isArrayLike(object3) ? arrayLikeKeys(object3, true) : baseKeysIn(object3);
}
var nativeCreate = getNative(Object, "create");
var nativeCreate$1 = nativeCreate;
function hashClear() {
  this.__data__ = nativeCreate$1 ? nativeCreate$1(null) : {};
  this.size = 0;
}
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}
var HASH_UNDEFINED$1 = "__lodash_hash_undefined__";
var objectProto$4 = Object.prototype;
var hasOwnProperty$3 = objectProto$4.hasOwnProperty;
function hashGet(key) {
  var data25 = this.__data__;
  if (nativeCreate$1) {
    var result = data25[key];
    return result === HASH_UNDEFINED$1 ? void 0 : result;
  }
  return hasOwnProperty$3.call(data25, key) ? data25[key] : void 0;
}
var objectProto$3 = Object.prototype;
var hasOwnProperty$2 = objectProto$3.hasOwnProperty;
function hashHas(key) {
  var data25 = this.__data__;
  return nativeCreate$1 ? data25[key] !== void 0 : hasOwnProperty$2.call(data25, key);
}
var HASH_UNDEFINED = "__lodash_hash_undefined__";
function hashSet(key, value6) {
  var data25 = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data25[key] = nativeCreate$1 && value6 === void 0 ? HASH_UNDEFINED : value6;
  return this;
}
function Hash(entries2) {
  var index2 = -1, length = entries2 == null ? 0 : entries2.length;
  this.clear();
  while (++index2 < length) {
    var entry = entries2[index2];
    this.set(entry[0], entry[1]);
  }
}
Hash.prototype.clear = hashClear;
Hash.prototype["delete"] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}
function assocIndexOf(array3, key) {
  var length = array3.length;
  while (length--) {
    if (eq(array3[length][0], key)) {
      return length;
    }
  }
  return -1;
}
var arrayProto = Array.prototype;
var splice = arrayProto.splice;
function listCacheDelete(key) {
  var data25 = this.__data__, index2 = assocIndexOf(data25, key);
  if (index2 < 0) {
    return false;
  }
  var lastIndex = data25.length - 1;
  if (index2 == lastIndex) {
    data25.pop();
  } else {
    splice.call(data25, index2, 1);
  }
  --this.size;
  return true;
}
function listCacheGet(key) {
  var data25 = this.__data__, index2 = assocIndexOf(data25, key);
  return index2 < 0 ? void 0 : data25[index2][1];
}
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}
function listCacheSet(key, value6) {
  var data25 = this.__data__, index2 = assocIndexOf(data25, key);
  if (index2 < 0) {
    ++this.size;
    data25.push([key, value6]);
  } else {
    data25[index2][1] = value6;
  }
  return this;
}
function ListCache(entries2) {
  var index2 = -1, length = entries2 == null ? 0 : entries2.length;
  this.clear();
  while (++index2 < length) {
    var entry = entries2[index2];
    this.set(entry[0], entry[1]);
  }
}
ListCache.prototype.clear = listCacheClear;
ListCache.prototype["delete"] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;
var Map$1 = getNative(root$1, "Map");
var Map$2 = Map$1;
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    "hash": new Hash(),
    "map": new (Map$2 || ListCache)(),
    "string": new Hash()
  };
}
function isKeyable(value6) {
  var type3 = typeof value6;
  return type3 == "string" || type3 == "number" || type3 == "symbol" || type3 == "boolean" ? value6 !== "__proto__" : value6 === null;
}
function getMapData(map2, key) {
  var data25 = map2.__data__;
  return isKeyable(key) ? data25[typeof key == "string" ? "string" : "hash"] : data25.map;
}
function mapCacheDelete(key) {
  var result = getMapData(this, key)["delete"](key);
  this.size -= result ? 1 : 0;
  return result;
}
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}
function mapCacheSet(key, value6) {
  var data25 = getMapData(this, key), size2 = data25.size;
  data25.set(key, value6);
  this.size += data25.size == size2 ? 0 : 1;
  return this;
}
function MapCache(entries2) {
  var index2 = -1, length = entries2 == null ? 0 : entries2.length;
  this.clear();
  while (++index2 < length) {
    var entry = entries2[index2];
    this.set(entry[0], entry[1]);
  }
}
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype["delete"] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;
function arrayPush(array3, values2) {
  var index2 = -1, length = values2.length, offset = array3.length;
  while (++index2 < length) {
    array3[offset + index2] = values2[index2];
  }
  return array3;
}
var getPrototype = overArg(Object.getPrototypeOf, Object);
var getPrototype$1 = getPrototype;
var objectTag$2 = "[object Object]";
var funcProto = Function.prototype, objectProto$2 = Object.prototype;
var funcToString = funcProto.toString;
var hasOwnProperty$1 = objectProto$2.hasOwnProperty;
var objectCtorString = funcToString.call(Object);
function isPlainObject(value6) {
  if (!isObjectLike(value6) || baseGetTag(value6) != objectTag$2) {
    return false;
  }
  var proto = getPrototype$1(value6);
  if (proto === null) {
    return true;
  }
  var Ctor = hasOwnProperty$1.call(proto, "constructor") && proto.constructor;
  return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
}
function stackClear() {
  this.__data__ = new ListCache();
  this.size = 0;
}
function stackDelete(key) {
  var data25 = this.__data__, result = data25["delete"](key);
  this.size = data25.size;
  return result;
}
function stackGet(key) {
  return this.__data__.get(key);
}
function stackHas(key) {
  return this.__data__.has(key);
}
var LARGE_ARRAY_SIZE = 200;
function stackSet(key, value6) {
  var data25 = this.__data__;
  if (data25 instanceof ListCache) {
    var pairs = data25.__data__;
    if (!Map$2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
      pairs.push([key, value6]);
      this.size = ++data25.size;
      return this;
    }
    data25 = this.__data__ = new MapCache(pairs);
  }
  data25.set(key, value6);
  this.size = data25.size;
  return this;
}
function Stack(entries2) {
  var data25 = this.__data__ = new ListCache(entries2);
  this.size = data25.size;
}
Stack.prototype.clear = stackClear;
Stack.prototype["delete"] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;
function baseAssign(object3, source) {
  return object3 && copyObject(source, keys2(source), object3);
}
function baseAssignIn(object3, source) {
  return object3 && copyObject(source, keysIn(source), object3);
}
var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
var moduleExports = freeModule && freeModule.exports === freeExports;
var Buffer2 = moduleExports ? root$1.Buffer : void 0, allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : void 0;
function cloneBuffer(buffer, isDeep) {
  if (isDeep) {
    return buffer.slice();
  }
  var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
  buffer.copy(result);
  return result;
}
function arrayFilter(array3, predicate) {
  var index2 = -1, length = array3 == null ? 0 : array3.length, resIndex = 0, result = [];
  while (++index2 < length) {
    var value6 = array3[index2];
    if (predicate(value6, index2, array3)) {
      result[resIndex++] = value6;
    }
  }
  return result;
}
function stubArray() {
  return [];
}
var objectProto$1 = Object.prototype;
var propertyIsEnumerable2 = objectProto$1.propertyIsEnumerable;
var nativeGetSymbols$1 = Object.getOwnPropertySymbols;
var getSymbols = !nativeGetSymbols$1 ? stubArray : function(object3) {
  if (object3 == null) {
    return [];
  }
  object3 = Object(object3);
  return arrayFilter(nativeGetSymbols$1(object3), function(symbol2) {
    return propertyIsEnumerable2.call(object3, symbol2);
  });
};
var getSymbols$1 = getSymbols;
function copySymbols(source, object3) {
  return copyObject(source, getSymbols$1(source), object3);
}
var nativeGetSymbols = Object.getOwnPropertySymbols;
var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object3) {
  var result = [];
  while (object3) {
    arrayPush(result, getSymbols$1(object3));
    object3 = getPrototype$1(object3);
  }
  return result;
};
var getSymbolsIn$1 = getSymbolsIn;
function copySymbolsIn(source, object3) {
  return copyObject(source, getSymbolsIn$1(source), object3);
}
function baseGetAllKeys(object3, keysFunc, symbolsFunc) {
  var result = keysFunc(object3);
  return isArray$1(object3) ? result : arrayPush(result, symbolsFunc(object3));
}
function getAllKeys(object3) {
  return baseGetAllKeys(object3, keys2, getSymbols$1);
}
function getAllKeysIn(object3) {
  return baseGetAllKeys(object3, keysIn, getSymbolsIn$1);
}
var DataView = getNative(root$1, "DataView");
var DataView$1 = DataView;
var Promise$1 = getNative(root$1, "Promise");
var Promise$2 = Promise$1;
var Set$1 = getNative(root$1, "Set");
var Set$2 = Set$1;
var mapTag$3 = "[object Map]", objectTag$1 = "[object Object]", promiseTag = "[object Promise]", setTag$3 = "[object Set]", weakMapTag$1 = "[object WeakMap]";
var dataViewTag$2 = "[object DataView]";
var dataViewCtorString = toSource(DataView$1), mapCtorString = toSource(Map$2), promiseCtorString = toSource(Promise$2), setCtorString = toSource(Set$2), weakMapCtorString = toSource(WeakMap$2);
var getTag = baseGetTag;
if (DataView$1 && getTag(new DataView$1(new ArrayBuffer(1))) != dataViewTag$2 || Map$2 && getTag(new Map$2()) != mapTag$3 || Promise$2 && getTag(Promise$2.resolve()) != promiseTag || Set$2 && getTag(new Set$2()) != setTag$3 || WeakMap$2 && getTag(new WeakMap$2()) != weakMapTag$1) {
  getTag = function(value6) {
    var result = baseGetTag(value6), Ctor = result == objectTag$1 ? value6.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString:
          return dataViewTag$2;
        case mapCtorString:
          return mapTag$3;
        case promiseCtorString:
          return promiseTag;
        case setCtorString:
          return setTag$3;
        case weakMapCtorString:
          return weakMapTag$1;
      }
    }
    return result;
  };
}
var getTag$1 = getTag;
var objectProto = Object.prototype;
var hasOwnProperty = objectProto.hasOwnProperty;
function initCloneArray(array3) {
  var length = array3.length, result = new array3.constructor(length);
  if (length && typeof array3[0] == "string" && hasOwnProperty.call(array3, "index")) {
    result.index = array3.index;
    result.input = array3.input;
  }
  return result;
}
var Uint8Array2 = root$1.Uint8Array;
var Uint8Array$1 = Uint8Array2;
function cloneArrayBuffer(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new Uint8Array$1(result).set(new Uint8Array$1(arrayBuffer));
  return result;
}
function cloneDataView(dataView, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}
var reFlags = /\w*$/;
function cloneRegExp(regexp3) {
  var result = new regexp3.constructor(regexp3.source, reFlags.exec(regexp3));
  result.lastIndex = regexp3.lastIndex;
  return result;
}
var symbolProto = Symbol$2 ? Symbol$2.prototype : void 0, symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
function cloneSymbol(symbol2) {
  return symbolValueOf ? Object(symbolValueOf.call(symbol2)) : {};
}
function cloneTypedArray(typedArray, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}
var boolTag$1 = "[object Boolean]", dateTag$1 = "[object Date]", mapTag$2 = "[object Map]", numberTag$1 = "[object Number]", regexpTag$1 = "[object RegExp]", setTag$2 = "[object Set]", stringTag$1 = "[object String]", symbolTag$1 = "[object Symbol]";
var arrayBufferTag$1 = "[object ArrayBuffer]", dataViewTag$1 = "[object DataView]", float32Tag$1 = "[object Float32Array]", float64Tag$1 = "[object Float64Array]", int8Tag$1 = "[object Int8Array]", int16Tag$1 = "[object Int16Array]", int32Tag$1 = "[object Int32Array]", uint8Tag$1 = "[object Uint8Array]", uint8ClampedTag$1 = "[object Uint8ClampedArray]", uint16Tag$1 = "[object Uint16Array]", uint32Tag$1 = "[object Uint32Array]";
function initCloneByTag(object3, tag2, isDeep) {
  var Ctor = object3.constructor;
  switch (tag2) {
    case arrayBufferTag$1:
      return cloneArrayBuffer(object3);
    case boolTag$1:
    case dateTag$1:
      return new Ctor(+object3);
    case dataViewTag$1:
      return cloneDataView(object3, isDeep);
    case float32Tag$1:
    case float64Tag$1:
    case int8Tag$1:
    case int16Tag$1:
    case int32Tag$1:
    case uint8Tag$1:
    case uint8ClampedTag$1:
    case uint16Tag$1:
    case uint32Tag$1:
      return cloneTypedArray(object3, isDeep);
    case mapTag$2:
      return new Ctor();
    case numberTag$1:
    case stringTag$1:
      return new Ctor(object3);
    case regexpTag$1:
      return cloneRegExp(object3);
    case setTag$2:
      return new Ctor();
    case symbolTag$1:
      return cloneSymbol(object3);
  }
}
function initCloneObject(object3) {
  return typeof object3.constructor == "function" && !isPrototype(object3) ? baseCreate$1(getPrototype$1(object3)) : {};
}
var mapTag$1 = "[object Map]";
function baseIsMap(value6) {
  return isObjectLike(value6) && getTag$1(value6) == mapTag$1;
}
var nodeIsMap = nodeUtil$1 && nodeUtil$1.isMap;
var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
var isMap$1 = isMap;
var setTag$1 = "[object Set]";
function baseIsSet(value6) {
  return isObjectLike(value6) && getTag$1(value6) == setTag$1;
}
var nodeIsSet = nodeUtil$1 && nodeUtil$1.isSet;
var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
var isSet$1 = isSet;
var CLONE_DEEP_FLAG$1 = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG$1 = 4;
var argsTag = "[object Arguments]", arrayTag = "[object Array]", boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", objectTag = "[object Object]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]", weakMapTag = "[object WeakMap]";
var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
var cloneableTags = {};
cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
function baseClone(value6, bitmask, customizer, key, object3, stack) {
  var result, isDeep = bitmask & CLONE_DEEP_FLAG$1, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG$1;
  if (customizer) {
    result = object3 ? customizer(value6, key, object3, stack) : customizer(value6);
  }
  if (result !== void 0) {
    return result;
  }
  if (!isObject(value6)) {
    return value6;
  }
  var isArr = isArray$1(value6);
  if (isArr) {
    result = initCloneArray(value6);
    if (!isDeep) {
      return copyArray(value6, result);
    }
  } else {
    var tag2 = getTag$1(value6), isFunc = tag2 == funcTag || tag2 == genTag;
    if (isBuffer$1(value6)) {
      return cloneBuffer(value6, isDeep);
    }
    if (tag2 == objectTag || tag2 == argsTag || isFunc && !object3) {
      result = isFlat || isFunc ? {} : initCloneObject(value6);
      if (!isDeep) {
        return isFlat ? copySymbolsIn(value6, baseAssignIn(result, value6)) : copySymbols(value6, baseAssign(result, value6));
      }
    } else {
      if (!cloneableTags[tag2]) {
        return object3 ? value6 : {};
      }
      result = initCloneByTag(value6, tag2, isDeep);
    }
  }
  stack || (stack = new Stack());
  var stacked = stack.get(value6);
  if (stacked) {
    return stacked;
  }
  stack.set(value6, result);
  if (isSet$1(value6)) {
    value6.forEach(function(subValue) {
      result.add(baseClone(subValue, bitmask, customizer, subValue, value6, stack));
    });
  } else if (isMap$1(value6)) {
    value6.forEach(function(subValue, key2) {
      result.set(key2, baseClone(subValue, bitmask, customizer, key2, value6, stack));
    });
  }
  var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys2;
  var props2 = isArr ? void 0 : keysFunc(value6);
  arrayEach(props2 || value6, function(subValue, key2) {
    if (props2) {
      key2 = subValue;
      subValue = value6[key2];
    }
    assignValue(result, key2, baseClone(subValue, bitmask, customizer, key2, value6, stack));
  });
  return result;
}
var CLONE_DEEP_FLAG = 1, CLONE_SYMBOLS_FLAG = 4;
function cloneDeep(value6) {
  return baseClone(value6, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
}
function createBaseFor(fromRight) {
  return function(object3, iteratee, keysFunc) {
    var index2 = -1, iterable = Object(object3), props2 = keysFunc(object3), length = props2.length;
    while (length--) {
      var key = props2[fromRight ? length : ++index2];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object3;
  };
}
var baseFor = createBaseFor();
var baseFor$1 = baseFor;
var now = function() {
  return root$1.Date.now();
};
var now$1 = now;
var FUNC_ERROR_TEXT = "Expected a function";
var nativeMax = Math.max, nativeMin = Math.min;
function debounce(func, wait, options2) {
  var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
  if (typeof func != "function") {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  wait = toNumber(wait) || 0;
  if (isObject(options2)) {
    leading = !!options2.leading;
    maxing = "maxWait" in options2;
    maxWait = maxing ? nativeMax(toNumber(options2.maxWait) || 0, wait) : maxWait;
    trailing = "trailing" in options2 ? !!options2.trailing : trailing;
  }
  function invokeFunc(time) {
    var args = lastArgs, thisArg = lastThis;
    lastArgs = lastThis = void 0;
    lastInvokeTime = time;
    result = func.apply(thisArg, args);
    return result;
  }
  function leadingEdge(time) {
    lastInvokeTime = time;
    timerId = setTimeout(timerExpired, wait);
    return leading ? invokeFunc(time) : result;
  }
  function remainingWait(time) {
    var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
    return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
  }
  function shouldInvoke(time) {
    var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
    return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
  }
  function timerExpired() {
    var time = now$1();
    if (shouldInvoke(time)) {
      return trailingEdge(time);
    }
    timerId = setTimeout(timerExpired, remainingWait(time));
  }
  function trailingEdge(time) {
    timerId = void 0;
    if (trailing && lastArgs) {
      return invokeFunc(time);
    }
    lastArgs = lastThis = void 0;
    return result;
  }
  function cancel() {
    if (timerId !== void 0) {
      clearTimeout(timerId);
    }
    lastInvokeTime = 0;
    lastArgs = lastCallTime = lastThis = timerId = void 0;
  }
  function flush() {
    return timerId === void 0 ? result : trailingEdge(now$1());
  }
  function debounced() {
    var time = now$1(), isInvoking = shouldInvoke(time);
    lastArgs = arguments;
    lastThis = this;
    lastCallTime = time;
    if (isInvoking) {
      if (timerId === void 0) {
        return leadingEdge(lastCallTime);
      }
      if (maxing) {
        clearTimeout(timerId);
        timerId = setTimeout(timerExpired, wait);
        return invokeFunc(lastCallTime);
      }
    }
    if (timerId === void 0) {
      timerId = setTimeout(timerExpired, wait);
    }
    return result;
  }
  debounced.cancel = cancel;
  debounced.flush = flush;
  return debounced;
}
function assignMergeValue(object3, key, value6) {
  if (value6 !== void 0 && !eq(object3[key], value6) || value6 === void 0 && !(key in object3)) {
    baseAssignValue(object3, key, value6);
  }
}
function isArrayLikeObject(value6) {
  return isObjectLike(value6) && isArrayLike(value6);
}
function safeGet(object3, key) {
  if (key === "constructor" && typeof object3[key] === "function") {
    return;
  }
  if (key == "__proto__") {
    return;
  }
  return object3[key];
}
function toPlainObject(value6) {
  return copyObject(value6, keysIn(value6));
}
function baseMergeDeep(object3, source, key, srcIndex, mergeFunc, customizer, stack) {
  var objValue = safeGet(object3, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
  if (stacked) {
    assignMergeValue(object3, key, stacked);
    return;
  }
  var newValue = customizer ? customizer(objValue, srcValue, key + "", object3, source, stack) : void 0;
  var isCommon = newValue === void 0;
  if (isCommon) {
    var isArr = isArray$1(srcValue), isBuff = !isArr && isBuffer$1(srcValue), isTyped = !isArr && !isBuff && isTypedArray$1(srcValue);
    newValue = srcValue;
    if (isArr || isBuff || isTyped) {
      if (isArray$1(objValue)) {
        newValue = objValue;
      } else if (isArrayLikeObject(objValue)) {
        newValue = copyArray(objValue);
      } else if (isBuff) {
        isCommon = false;
        newValue = cloneBuffer(srcValue, true);
      } else if (isTyped) {
        isCommon = false;
        newValue = cloneTypedArray(srcValue, true);
      } else {
        newValue = [];
      }
    } else if (isPlainObject(srcValue) || isArguments$1(srcValue)) {
      newValue = objValue;
      if (isArguments$1(objValue)) {
        newValue = toPlainObject(objValue);
      } else if (!isObject(objValue) || isFunction2(objValue)) {
        newValue = initCloneObject(srcValue);
      }
    } else {
      isCommon = false;
    }
  }
  if (isCommon) {
    stack.set(srcValue, newValue);
    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
    stack["delete"](srcValue);
  }
  assignMergeValue(object3, key, newValue);
}
function baseMerge(object3, source, srcIndex, customizer, stack) {
  if (object3 === source) {
    return;
  }
  baseFor$1(source, function(srcValue, key) {
    stack || (stack = new Stack());
    if (isObject(srcValue)) {
      baseMergeDeep(object3, source, key, srcIndex, baseMerge, customizer, stack);
    } else {
      var newValue = customizer ? customizer(safeGet(object3, key), srcValue, key + "", object3, source, stack) : void 0;
      if (newValue === void 0) {
        newValue = srcValue;
      }
      assignMergeValue(object3, key, newValue);
    }
  }, keysIn);
}
var merge = createAssigner(function(object3, source, srcIndex) {
  baseMerge(object3, source, srcIndex);
});
var merge$1 = merge;
var _dec$5, _dec2$4, _class$5, _class2$5;
function _applyDecoratedDescriptor$4(target2, property2, decorators, descriptor2, context) {
  var desc = {};
  Object.keys(descriptor2).forEach(function(key) {
    desc[key] = descriptor2[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;
  if ("value" in desc || desc.initializer) {
    desc.writable = true;
  }
  desc = decorators.slice().reverse().reduce(function(desc2, decorator) {
    return decorator(target2, property2, desc2) || desc2;
  }, desc);
  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = void 0;
  }
  if (desc.initializer === void 0) {
    Object.defineProperty(target2, property2, desc);
    desc = null;
  }
  return desc;
}
let RemoteSearchForm = (_dec$5 = Component({
  components: {
    ElSelect: elementUi_common.exports.Select,
    ElOption: elementUi_common.exports.Option
  }
}), _dec2$4 = Watch("comparedData", {
  immediate: true,
  deep: true
}), _dec$5(_class$5 = (_class2$5 = class RemoteSearchForm2 extends FormMixin {
  constructor(...args) {
    super(...args);
    this.selectData = [];
    this.currentSearchValue = "";
    this.hasInit = false;
  }
  onComparedDataChange(val, old) {
    if (this.info.listenFieldsToSearch && this.info.listenFieldsToSearch.length) {
      if (old === void 0) {
        this.handleSearch(this.currentSearchValue);
      } else {
        let isDiff = false;
        this.info.listenFieldsToSearch.forEach((field) => {
          if (val[field] !== old[field]) {
            isDiff = true;
          }
        });
        if (isDiff) {
          this.handleSearch(this.currentSearchValue);
        }
      }
    }
    if (this.info.listenFieldsChangeToReset && this.info.listenFieldsChangeToReset.length) {
      if (old === void 0) {
        this.handleSearch(this.currentSearchValue);
      } else if (this.hasInit) {
        let isDiff = false;
        this.info.listenFieldsChangeToReset.forEach((field) => {
          if (val[field] !== old[field]) {
            isDiff = true;
          }
        });
        if (isDiff) {
          this.currentValue = "";
        }
      }
    }
  }
  render() {
    const h = arguments[0];
    return h("el-select", {
      "attrs": {
        "value": this.currentValue,
        "placeholder": this.placeholder,
        "allow-clear": true,
        "show-search": true,
        "default-active-first-option": false,
        "show-arrow": false,
        "filter-option": false,
        "disabled": this.disabled
      },
      "on": {
        "search": this.handleSearch,
        "input": (val) => this.currentValue = val
      }
    }, [...this.selectData.map((item) => {
      return h("el-select-option", {
        "key": item.value,
        "attrs": {
          "value": item.value,
          "label": item.label
        }
      }, [item.label]);
    })]);
  }
  created() {
    super.created();
    this.handleSearch();
  }
  noticeInit() {
    super.noticeInit();
    this.hasInit = true;
  }
  noticeHide() {
    super.noticeHide();
    this.hasInit = false;
  }
  handleSearch(val = "") {
    var _a, _b;
    this.currentSearchValue = val;
    debounce((val2 = "") => {
      var _a2;
      (_a2 = this.info.extraConfig) == null ? void 0 : _a2.searchFunc(val2, this.data).then((data25) => {
        this.selectData = data25;
      });
    }, (_b = (_a = this.info.extraConfig) == null ? void 0 : _a.debounce) != null ? _b : 500)(val);
  }
  afterCurrentValueChanged() {
    if (typeof this.info.defaultValueSearchFunc === "function") {
      this.info.defaultValueSearchFunc(this.currentValue).then((data25) => {
        if (data25 !== void 0 && !this.selectData.some((item) => item.value === data25.value)) {
          console.log(data25);
          this.selectData.unshift(data25);
        }
      });
    }
  }
}, _applyDecoratedDescriptor$4(_class2$5.prototype, "onComparedDataChange", [_dec2$4], Object.getOwnPropertyDescriptor(_class2$5.prototype, "onComparedDataChange"), _class2$5.prototype), _class2$5)) || _class$5);
const FormItemComponents = {
  StringForm,
  NumberForm,
  SelectForm,
  DateForm,
  TimeForm,
  TimeRangeForm,
  DateRangeForm,
  CascaderForm,
  RemoteSearchForm
};
var _dec$4, _dec2$3, _dec3$2, _dec4$1, _dec5$1, _dec6$1, _dec7, _dec8, _dec9, _class$4, _class2$4, _descriptor$3, _descriptor2$2, _descriptor3$1, _descriptor4, _descriptor5;
function _initializerDefineProperty$3(target2, property2, descriptor2, context) {
  if (!descriptor2)
    return;
  Object.defineProperty(target2, property2, { enumerable: descriptor2.enumerable, configurable: descriptor2.configurable, writable: descriptor2.writable, value: descriptor2.initializer ? descriptor2.initializer.call(context) : void 0 });
}
function _applyDecoratedDescriptor$3(target2, property2, decorators, descriptor2, context) {
  var desc = {};
  Object.keys(descriptor2).forEach(function(key) {
    desc[key] = descriptor2[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;
  if ("value" in desc || desc.initializer) {
    desc.writable = true;
  }
  desc = decorators.slice().reverse().reduce(function(desc2, decorator) {
    return decorator(target2, property2, desc2) || desc2;
  }, desc);
  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = void 0;
  }
  if (desc.initializer === void 0) {
    Object.defineProperty(target2, property2, desc);
    desc = null;
  }
  return desc;
}
let FormItemComponent = (_dec$4 = Component({
  components: __spreadValues({
    FormItem: elementUi_common.exports.FormItem,
    Tooltip: elementUi_common.exports.Tooltip
  }, FormItemComponents)
}), _dec2$3 = Prop({
  type: Object,
  required: true
}), _dec3$2 = Prop({
  type: Object,
  default() {
    return {};
  }
}), _dec4$1 = Prop({
  type: [String, Number, Array, Object],
  default: ""
}), _dec5$1 = Prop({
  type: Boolean,
  default: false
}), _dec6$1 = Prop({
  type: Boolean,
  default: false
}), _dec7 = Watch("value", {
  immediate: true
}), _dec8 = Emit("input"), _dec9 = Watch("currentValue"), _dec$4(_class$4 = (_class2$4 = class FormItemComponent2 extends Vue {
  constructor(...args) {
    super(...args);
    _initializerDefineProperty$3(this, "info", _descriptor$3, this);
    _initializerDefineProperty$3(this, "data", _descriptor2$2, this);
    _initializerDefineProperty$3(this, "value", _descriptor3$1, this);
    _initializerDefineProperty$3(this, "isQuickView", _descriptor4, this);
    _initializerDefineProperty$3(this, "required", _descriptor5, this);
    this.currentValue = null;
  }
  get componentName() {
    switch (this.info.type) {
      case BaseFormType.String:
      case BaseFormType.Textarea:
        return FormItemComponents.StringForm;
      case BaseFormType.Number:
        return FormItemComponents.NumberForm;
      case BaseFormType.Select:
        return FormItemComponents.SelectForm;
      case BaseFormType.DatePicker:
      case BaseFormType.DateTimePicker:
        return FormItemComponents.DateForm;
      case BaseFormType.TimePicker:
        return FormItemComponents.TimeForm;
      case BaseFormType.Cascader:
        return FormItemComponents.CascaderForm;
      case BaseFormType.DateRangePicker:
      case BaseFormType.DateTimeRangePicker:
        return FormItemComponents.DateRangeForm;
      case BaseFormType.TimeRangePicker:
        return FormItemComponents.TimeRangeForm;
      case BaseFormType.RemoteSearch:
        return FormItemComponents.RemoteSearchForm;
      default:
        return "";
    }
  }
  onValueChange(val) {
    this.currentValue = val;
  }
  onCurrentValueChange(val) {
    return val;
  }
  render() {
    const h = arguments[0];
    const Tag = this.componentName;
    return h("form-item", {
      "attrs": {
        "label": this.info.title,
        "required": this.required,
        "prop": this.info.field
      }
    }, [h("tooltip", {
      "attrs": {
        "placement": "topLeft"
      }
    }, [this.info.tooltipText ? h("span", {
      "directives": [{
        name: "html",
        value: this.info.tooltipText
      }],
      "slot": "title"
    }) : void 0, this.isQuickView ? h("template", [[BaseFormType.String, BaseFormType.Textarea, BaseFormType.Number].includes(this.info.type) ? h("span", {
      "directives": [{
        name: "html",
        value: this.currentValue
      }]
    }) : void 0]) : h(Tag, {
      "ref": "component",
      "attrs": {
        "value": this.currentValue,
        "info": this.info,
        "data": this.data
      },
      "on": {
        "input": (val) => this.currentValue = val
      }
    })])]);
  }
}, _descriptor$3 = _applyDecoratedDescriptor$3(_class2$4.prototype, "info", [_dec2$3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor2$2 = _applyDecoratedDescriptor$3(_class2$4.prototype, "data", [_dec3$2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor3$1 = _applyDecoratedDescriptor$3(_class2$4.prototype, "value", [_dec4$1], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor4 = _applyDecoratedDescriptor$3(_class2$4.prototype, "isQuickView", [_dec5$1], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor5 = _applyDecoratedDescriptor$3(_class2$4.prototype, "required", [_dec6$1], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _applyDecoratedDescriptor$3(_class2$4.prototype, "onValueChange", [_dec7], Object.getOwnPropertyDescriptor(_class2$4.prototype, "onValueChange"), _class2$4.prototype), _applyDecoratedDescriptor$3(_class2$4.prototype, "onCurrentValueChange", [_dec8, _dec9], Object.getOwnPropertyDescriptor(_class2$4.prototype, "onCurrentValueChange"), _class2$4.prototype), _class2$4)) || _class$4);
var _dec$3, _dec2$2, _dec3$1, _dec4, _dec5, _dec6, _class$3, _class2$3, _descriptor$2, _descriptor2$1, _descriptor3;
function _initializerDefineProperty$2(target2, property2, descriptor2, context) {
  if (!descriptor2)
    return;
  Object.defineProperty(target2, property2, { enumerable: descriptor2.enumerable, configurable: descriptor2.configurable, writable: descriptor2.writable, value: descriptor2.initializer ? descriptor2.initializer.call(context) : void 0 });
}
function _applyDecoratedDescriptor$2(target2, property2, decorators, descriptor2, context) {
  var desc = {};
  Object.keys(descriptor2).forEach(function(key) {
    desc[key] = descriptor2[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;
  if ("value" in desc || desc.initializer) {
    desc.writable = true;
  }
  desc = decorators.slice().reverse().reduce(function(desc2, decorator) {
    return decorator(target2, property2, desc2) || desc2;
  }, desc);
  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = void 0;
  }
  if (desc.initializer === void 0) {
    Object.defineProperty(target2, property2, desc);
    desc = null;
  }
  return desc;
}
let TableViewAdvancedSearch = (_dec$3 = Component({
  components: {
    "el-row": elementUi_common.exports.Row,
    "el-col": elementUi_common.exports.Col,
    "el-button": elementUi_common.exports.Button,
    "el-form": elementUi_common.exports.Form,
    FormItem: FormItemComponent
  }
}), _dec2$2 = InjectReactive(), _dec3$1 = InjectReactive(), _dec4 = InjectReactive(), _dec5 = Emit("do-search"), _dec6 = Emit("do-reset"), _dec$3(_class$3 = (_class2$3 = class TableViewAdvancedSearch2 extends Vue {
  constructor(...args) {
    super(...args);
    _initializerDefineProperty$2(this, "currentConfig", _descriptor$2, this);
    _initializerDefineProperty$2(this, "paginationInfo", _descriptor2$1, this);
    _initializerDefineProperty$2(this, "searchHelperInstance", _descriptor3, this);
    this.isExpand = false;
  }
  get search() {
    return this.searchHelperInstance.search;
  }
  created() {
    var _a;
    this.isExpand = !((_a = this.currentConfig.advancedSearchNeedExpand) != null ? _a : true);
  }
  render() {
    var _a, _b, _c;
    const h = arguments[0];
    return h("div", {
      "class": "table-view__header-advanced-search"
    }, [h("el-form", {
      "class": this.isExpand ? "expanded" : "collapsed",
      "attrs": {
        "label-width": "120px",
        "label-suffix": ":"
      },
      "nativeOn": {
        "submit": ($event) => {
          $event.preventDefault();
          return this.doSearch($event);
        }
      }
    }, [h("el-col", {
      "attrs": {
        "span": 16
      },
      "class": ["search-form__wrapper"]
    }, [...this.createSearchFormItems(3)]), h("el-col", {
      "attrs": {
        "span": 6,
        "offset": 2
      },
      "class": "search-button__wrapper"
    }, [this.currentConfig.advancedSearchNeedExpand ? h("el-button", {
      "attrs": {
        "type": "text"
      },
      "on": {
        "click": this.doExpand
      }
    }, [(_a = this.currentConfig) == null ? void 0 : _a.expandButtonText, h("i", {
      "class": "dropdown el-icon-arrow-down el-icon--right"
    })]) : void 0, h("el-button", {
      "attrs": {
        "type": "primary",
        "native-type": "submit",
        "size": "small"
      }
    }, [(_b = this.currentConfig) == null ? void 0 : _b.searchButtonText]), h("el-button", {
      "attrs": {
        "size": "small"
      },
      "on": {
        "click": this.doReset
      }
    }, [(_c = this.currentConfig) == null ? void 0 : _c.resetSearchButtonText])])])]);
  }
  createSearchFormItems(chunkIn = 2) {
    const h = this.$createElement;
    const chunks = [];
    let tempChunks = [];
    const defaultSpan = 24 / chunkIn;
    let currSpan = 0;
    (this.currentConfig.advancedSearch || []).forEach((item) => {
      var _a;
      if (currSpan + (item.colSpan || defaultSpan) + (item.colOffset || 0) > 24) {
        chunks.push(tempChunks);
        tempChunks = [];
        currSpan = 0;
      } else {
        currSpan += (item.colSpan || defaultSpan) + (item.colOffset || 0);
        tempChunks.push(h("el-col", {
          "attrs": {
            "span": item.colSpan || defaultSpan,
            "offset": item.colOffset || 0
          }
        }, [h("form-item", {
          "attrs": {
            "value": this.search[item.field],
            "info": item,
            "data": this.search,
            "label-col": (_a = item.labelWidth) != null ? _a : "auto"
          },
          "on": {
            "input": (val) => this.search[item.field] = val
          }
        })]));
      }
    });
    tempChunks.length && chunks.push(tempChunks);
    return chunks.map((nodes) => h("el-row", {
      "attrs": {
        "gutter": 10
      }
    }, [...nodes]));
  }
  doExpand() {
    this.isExpand = !this.isExpand;
  }
  doSearch(e) {
    e.stopPropagation();
    return this.search;
  }
  doReset() {
    this.searchHelperInstance.reset();
    if (this.currentConfig.getListAfterReset) {
      this.$emit("do-search", this.search);
    }
    return true;
  }
}, _descriptor$2 = _applyDecoratedDescriptor$2(_class2$3.prototype, "currentConfig", [_dec2$2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor2$1 = _applyDecoratedDescriptor$2(_class2$3.prototype, "paginationInfo", [_dec3$1], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor3 = _applyDecoratedDescriptor$2(_class2$3.prototype, "searchHelperInstance", [_dec4], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _applyDecoratedDescriptor$2(_class2$3.prototype, "doSearch", [_dec5], Object.getOwnPropertyDescriptor(_class2$3.prototype, "doSearch"), _class2$3.prototype), _applyDecoratedDescriptor$2(_class2$3.prototype, "doReset", [_dec6], Object.getOwnPropertyDescriptor(_class2$3.prototype, "doReset"), _class2$3.prototype), _class2$3)) || _class$3);
var _dec$2, _dec2$1, _class$2, _class2$2, _descriptor$1;
function _initializerDefineProperty$1(target2, property2, descriptor2, context) {
  if (!descriptor2)
    return;
  Object.defineProperty(target2, property2, { enumerable: descriptor2.enumerable, configurable: descriptor2.configurable, writable: descriptor2.writable, value: descriptor2.initializer ? descriptor2.initializer.call(context) : void 0 });
}
function _applyDecoratedDescriptor$1(target2, property2, decorators, descriptor2, context) {
  var desc = {};
  Object.keys(descriptor2).forEach(function(key) {
    desc[key] = descriptor2[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;
  if ("value" in desc || desc.initializer) {
    desc.writable = true;
  }
  desc = decorators.slice().reverse().reduce(function(desc2, decorator) {
    return decorator(target2, property2, desc2) || desc2;
  }, desc);
  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = void 0;
  }
  if (desc.initializer === void 0) {
    Object.defineProperty(target2, property2, desc);
    desc = null;
  }
  return desc;
}
let TableViewHeader = (_dec$2 = Component({
  components: {
    TableViewAdvancedSearch
  }
}), _dec2$1 = InjectReactive(), _dec$2(_class$2 = (_class2$2 = class TableViewHeader2 extends Vue {
  constructor(...args) {
    super(...args);
    _initializerDefineProperty$1(this, "currentConfig", _descriptor$1, this);
  }
  get showToolsBar() {
    return !!this.$slots.toolsBar;
  }
  render() {
    const h = arguments[0];
    return h("div", {
      "class": "table-view__header"
    }, [this.currentConfig.useAdvancedSearch === false ? void 0 : h("table-view-advanced-search", {
      "ref": "advancedSearch",
      "on": {
        "do-search": () => this.$emit("do-search"),
        "do-reset": () => this.$emit("do-reset")
      }
    }), h("div", {
      "directives": [{
        name: "show",
        value: this.showToolsBar
      }],
      "class": "table-view__header-toolbar"
    }, [this.$slots.toolsBar])]);
  }
}, _descriptor$1 = _applyDecoratedDescriptor$1(_class2$2.prototype, "currentConfig", [_dec2$1], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _class2$2)) || _class$2);
var _dec$1, _dec2, _dec3, _class$1, _class2$1, _descriptor, _descriptor2;
function _initializerDefineProperty(target2, property2, descriptor2, context) {
  if (!descriptor2)
    return;
  Object.defineProperty(target2, property2, { enumerable: descriptor2.enumerable, configurable: descriptor2.configurable, writable: descriptor2.writable, value: descriptor2.initializer ? descriptor2.initializer.call(context) : void 0 });
}
function _applyDecoratedDescriptor(target2, property2, decorators, descriptor2, context) {
  var desc = {};
  Object.keys(descriptor2).forEach(function(key) {
    desc[key] = descriptor2[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;
  if ("value" in desc || desc.initializer) {
    desc.writable = true;
  }
  desc = decorators.slice().reverse().reduce(function(desc2, decorator) {
    return decorator(target2, property2, desc2) || desc2;
  }, desc);
  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = void 0;
  }
  if (desc.initializer === void 0) {
    Object.defineProperty(target2, property2, desc);
    desc = null;
  }
  return desc;
}
let TableViewFooter = (_dec$1 = Component({
  components: {
    Pagination: elementUi_common.exports.Pagination
  }
}), _dec2 = InjectReactive(), _dec3 = InjectReactive(), _dec$1(_class$1 = (_class2$1 = class TableViewFooter2 extends Vue {
  constructor(...args) {
    super(...args);
    _initializerDefineProperty(this, "currentConfig", _descriptor, this);
    _initializerDefineProperty(this, "paginationInfo", _descriptor2, this);
  }
  render() {
    var _a;
    const h = arguments[0];
    return h("div", {
      "class": "table-view__footer"
    }, [this.currentConfig.needPagination === false ? "" : h("div", {
      "class": "page__wrapper"
    }, [h("pagination", {
      "attrs": {
        "current-page": this.paginationInfo.currentPage,
        "page-size": this.paginationInfo.perPage,
        "total": this.paginationInfo.total,
        "page-count": this.paginationInfo.pageAmount,
        "page-sizes": (_a = this.currentConfig.requestPageConfig) == null ? void 0 : _a.pageSizes,
        "layout": "total, prev, pager, next, sizes, jumper"
      },
      "on": {
        "current-change": this.onCurrentChange,
        "size-change": this.onSizeChange
      }
    })])]);
  }
  onCurrentChange(page) {
    window.dispatchEvent(new CustomEvent("current-page-change", {
      detail: {
        page
      }
    }));
  }
  onSizeChange(size2) {
    window.dispatchEvent(new CustomEvent("page-size-change", {
      detail: {
        size: size2
      }
    }));
  }
}, _descriptor = _applyDecoratedDescriptor(_class2$1.prototype, "currentConfig", [_dec2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor2 = _applyDecoratedDescriptor(_class2$1.prototype, "paginationInfo", [_dec3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _class2$1)) || _class$1);
class GlobalConfig {
  constructor() {
    __publicField(this, "defaultConfig", {
      language: AvailableLanguage.ZhCn,
      stripe: true,
      border: false,
      round: false,
      searchButtonText: "\u641C\u7D22",
      resetSearchButtonText: "\u6E05\u7A7A",
      expandButtonText: "\u5C55\u5F00",
      emptyText: "\u6682\u65E0\u6570\u636E",
      getListAfterReset: true,
      needCustomColumnDisplay: false,
      customColumnDisplayStored: true,
      loadingDebounceTime: 0.5,
      advancedSearchNeedExpand: true,
      requestPageConfig: {
        currentPage: "pageNum",
        perPage: "pageSize"
      },
      receivePageConfig: {
        currentPage: "pageNum",
        perPage: "pageSize",
        currentPageSize: "size",
        total: "total",
        pages: "pages",
        list: "list"
      },
      operationConfig: {
        headerTitle: "\u64CD\u4F5C"
      }
    });
  }
  get globalConfig() {
    return this.defaultConfig;
  }
  setConfig(option2) {
    this.defaultConfig = merge$1({}, this.defaultConfig, option2);
  }
}
const globalConfig = new GlobalConfig();
class SearchHelper {
  constructor(config2, paginationInfo) {
    __publicField(this, "config");
    __publicField(this, "paginationInfo");
    __publicField(this, "search");
    __publicField(this, "defaultRequestParams", {});
    this.config = config2;
    this.paginationInfo = paginationInfo;
    this.createDefaultRequestParams();
    this.search = this.mergeRequestParams(false);
  }
  createDefaultRequestParams() {
    var _a;
    if (Object.keys(this.defaultRequestParams).length === 0) {
      (_a = this.config.advancedSearch) == null ? void 0 : _a.forEach((item) => {
        this.defaultRequestParams[item.field] = item.default;
      });
    }
  }
  mergeRequestParams(withPageInfo = true) {
    const search = cloneDeep(this.defaultRequestParams);
    if (withPageInfo) {
      search[this.config.requestPageConfig.perPage] = this.paginationInfo.perPage;
      search[this.config.requestPageConfig.currentPage] = this.paginationInfo.currentPage;
    }
    return __spreadValues(__spreadValues({}, search), this.search);
  }
  reset() {
    this.search = cloneDeep(this.defaultRequestParams);
  }
}
var __defProp2 = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target2, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target2, key) : target2;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target2, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp2(target2, key, result);
  return result;
};
let TableViewMixin = class extends Vue {
  constructor() {
    super(...arguments);
    __publicField(this, "config");
    __publicField(this, "currentConfig", {});
    __publicField(this, "dataList", []);
    __publicField(this, "searchHelperInstance");
    __publicField(this, "paginationInfo", {
      currentPage: 1,
      perPage: 10,
      currentPageSize: 10,
      total: 0,
      pageAmount: 0
    });
  }
  created() {
    var _a, _b;
    this.$set(this, "currentConfig", merge$1({}, globalConfig.globalConfig, this.config));
    this.paginationInfo.perPage = ((_a = this.currentConfig.requestPageConfig) == null ? void 0 : _a.pageSizes) && ((_b = this.currentConfig.requestPageConfig) == null ? void 0 : _b.pageSizes[0]) || 10;
    this.searchHelperInstance = new SearchHelper(this.currentConfig, this.paginationInfo);
  }
  async mounted() {
    if (this.currentConfig.getListAtCreated !== false) {
      await this.getList();
    }
    this.setEventListener();
  }
  beforeDestroy() {
    this.removeEventListener();
  }
  async getList() {
    var _a, _b, _c, _d, _e;
    if (typeof this.currentConfig.getListFunc !== "function") {
      throw new SyntaxError("The config => getListFunc is not a function");
    } else {
      const res = await this.currentConfig.getListFunc(this.searchHelperInstance.mergeRequestParams());
      this.dataList = res[this.currentConfig.receivePageConfig.list];
      ((_a = this.currentConfig.receivePageConfig) == null ? void 0 : _a.currentPage) && (this.paginationInfo.currentPage = res[this.currentConfig.receivePageConfig.currentPage]);
      ((_b = this.currentConfig.receivePageConfig) == null ? void 0 : _b.perPage) && (this.paginationInfo.perPage = res[this.currentConfig.receivePageConfig.perPage]);
      ((_c = this.currentConfig.receivePageConfig) == null ? void 0 : _c.currentPageSize) && (this.paginationInfo.currentPageSize = res[this.currentConfig.receivePageConfig.currentPageSize]);
      ((_d = this.currentConfig.receivePageConfig) == null ? void 0 : _d.total) && (this.paginationInfo.total = res[this.currentConfig.receivePageConfig.total]);
      ((_e = this.currentConfig.receivePageConfig) == null ? void 0 : _e.pages) && (this.paginationInfo.pageAmount = res[this.currentConfig.receivePageConfig.pages]);
    }
  }
  setEventListener() {
    window.addEventListener("current-page-change", this.onCurrentPageChange);
    window.addEventListener("page-size-change", this.onPageSizeChange);
  }
  removeEventListener() {
    window.removeEventListener("current-page-change", this.onCurrentPageChange);
    window.removeEventListener("page-size-change", this.onPageSizeChange);
  }
  onCurrentPageChange(evt) {
    this.paginationInfo.currentPage = evt.detail.page;
    this.getList().then(() => {
    });
  }
  onPageSizeChange(evt) {
    this.paginationInfo.perPage = evt.detail.size;
    this.getList().then(() => {
    });
  }
};
__decorateClass([
  Prop({
    type: Object,
    required: true
  })
], TableViewMixin.prototype, "config", 2);
__decorateClass([
  ProvideReactive()
], TableViewMixin.prototype, "currentConfig", 2);
__decorateClass([
  ProvideReactive()
], TableViewMixin.prototype, "dataList", 2);
__decorateClass([
  ProvideReactive()
], TableViewMixin.prototype, "searchHelperInstance", 2);
__decorateClass([
  ProvideReactive()
], TableViewMixin.prototype, "paginationInfo", 2);
TableViewMixin = __decorateClass([
  Component
], TableViewMixin);
var _dec, _class, _class2, _temp;
let TableView = (_dec = Component({
  components: {
    TableViewHeader,
    TableViewBody,
    TableViewFooter
  }
}), _dec(_class = (_temp = _class2 = class TableView2 extends mixins(TableViewMixin) {
  render() {
    var _a;
    const h = arguments[0];
    return h("div", {
      "class": "table-view",
      "style": {
        height: (_a = this.currentConfig.height) != null ? _a : "100%"
      }
    }, [h("table-view-header", {
      "ref": "header",
      "on": {
        "do-search": this.getList
      }
    }, [h("template", {
      "slot": "toolsBar"
    }, [this.$slots.toolsBar])]), h("table-view-body", {
      "ref": "body"
    }), h("table-view-footer", {
      "ref": "footer"
    })]);
  }
}, _class2.install = void 0, _temp)) || _class);
TableView.install = (_, option2) => {
  globalConfig.setConfig(option2);
  (option2 == null ? void 0 : option2.language) && locale$1(option2.language);
  Vue.component("table-view ", TableView);
};
export { Align, AvailableLanguage, BaseFormType, ColumnType, Fixed, FormItemComponent, FormItemComponents, OperationType, Operations, TableView, TableViewAdvancedSearch, TableViewBody, TableViewFooter, TableViewHeader, TableView as default };
